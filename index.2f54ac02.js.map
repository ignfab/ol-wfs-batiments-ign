{"mappings":"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","sources":["<anon>","main.js","node_modules/ol/Map.js","node_modules/ol/Object.js","node_modules/ol/events/Event.js","node_modules/ol/ObjectEventType.js","node_modules/ol/Observable.js","node_modules/ol/events/Target.js","node_modules/ol/Disposable.js","node_modules/ol/functions.js","node_modules/ol/array.js","node_modules/ol/obj.js","node_modules/ol/events/EventType.js","node_modules/ol/events.js","node_modules/ol/util.js","node_modules/ol/Collection.js","node_modules/ol/CollectionEventType.js","node_modules/ol/renderer/Composite.js","node_modules/ol/renderer/Map.js","node_modules/ol/transform.js","node_modules/ol/has.js","node_modules/ol/asserts.js","node_modules/ol/extent.js","node_modules/ol/extent/Relationship.js","node_modules/ol/style/IconImageCache.js","node_modules/ol/color.js","node_modules/ol/math.js","node_modules/ol/layer/Layer.js","node_modules/ol/layer/Base.js","node_modules/ol/layer/Property.js","node_modules/ol/render/EventType.js","node_modules/ol/View.js","node_modules/ol/ViewHint.js","node_modules/ol/ViewProperty.js","node_modules/ol/tilegrid/common.js","node_modules/ol/proj.js","node_modules/ol/proj/epsg3857.js","node_modules/ol/proj/Projection.js","node_modules/ol/proj/Units.js","node_modules/ol/proj/epsg4326.js","node_modules/ol/proj/projections.js","node_modules/ol/proj/transforms.js","node_modules/ol/coordinate.js","node_modules/ol/string.js","node_modules/ol/sphere.js","node_modules/ol/console.js","node_modules/ol/centerconstraint.js","node_modules/ol/resolutionconstraint.js","node_modules/ol/rotationconstraint.js","node_modules/ol/easing.js","node_modules/ol/geom/Polygon.js","node_modules/ol/geom/LinearRing.js","node_modules/ol/geom/SimpleGeometry.js","node_modules/ol/geom/Geometry.js","node_modules/ol/geom/flat/transform.js","node_modules/ol/geom/flat/closest.js","node_modules/ol/geom/flat/deflate.js","node_modules/ol/geom/flat/simplify.js","node_modules/ol/geom/flat/inflate.js","node_modules/ol/geom/flat/area.js","node_modules/ol/geom/Point.js","node_modules/ol/geom/flat/interiorpoint.js","node_modules/ol/geom/flat/contains.js","node_modules/ol/geom/flat/intersectsextent.js","node_modules/ol/geom/flat/segments.js","node_modules/ol/geom/flat/orient.js","node_modules/ol/geom/flat/reverse.js","node_modules/ol/render/Event.js","node_modules/ol/css.js","node_modules/ol/render/canvas.js","node_modules/ol/dom.js","node_modules/ol/layer/Group.js","node_modules/ol/MapBrowserEvent.js","node_modules/ol/MapEvent.js","node_modules/ol/MapBrowserEventHandler.js","node_modules/ol/MapBrowserEventType.js","node_modules/ol/pointer/EventType.js","node_modules/ol/MapEventType.js","node_modules/ol/MapProperty.js","node_modules/ol/TileQueue.js","node_modules/ol/structs/PriorityQueue.js","node_modules/ol/TileState.js","node_modules/ol/control/defaults.js","node_modules/ol/control/Attribution.js","node_modules/ol/control/Control.js","node_modules/ol/control/Rotate.js","node_modules/ol/control/Zoom.js","node_modules/ol/interaction/defaults.js","node_modules/ol/interaction/DoubleClickZoom.js","node_modules/ol/interaction/Interaction.js","node_modules/ol/interaction/Property.js","node_modules/ol/interaction/DragPan.js","node_modules/ol/interaction/Pointer.js","node_modules/ol/events/condition.js","node_modules/ol/interaction/DragRotate.js","node_modules/ol/interaction/DragZoom.js","node_modules/ol/interaction/DragBox.js","node_modules/ol/render/Box.js","node_modules/ol/interaction/KeyboardPan.js","node_modules/ol/events/Key.js","node_modules/ol/interaction/KeyboardZoom.js","node_modules/ol/Kinetic.js","node_modules/ol/interaction/MouseWheelZoom.js","node_modules/ol/interaction/PinchRotate.js","node_modules/ol/interaction/PinchZoom.js","node_modules/ol/size.js","node_modules/ol/layer/Tile.js","node_modules/ol/layer/BaseTile.js","node_modules/ol/layer/TileProperty.js","node_modules/ol/renderer/canvas/TileLayer.js","node_modules/ol/renderer/canvas/Layer.js","node_modules/ol/renderer/Layer.js","node_modules/ol/ImageState.js","node_modules/ol/ImageTile.js","node_modules/ol/Tile.js","node_modules/ol/Image.js","node_modules/ol/reproj/Tile.js","node_modules/ol/reproj/common.js","node_modules/ol/reproj/Triangulation.js","node_modules/ol/reproj.js","node_modules/ol/TileRange.js","node_modules/ol/Overlay.js","node_modules/ol/source/WMTS.js","node_modules/ol/source/TileImage.js","node_modules/ol/TileCache.js","node_modules/ol/structs/LRUCache.js","node_modules/ol/tilecoord.js","node_modules/ol/source/UrlTile.js","node_modules/ol/source/TileEventType.js","node_modules/ol/source/Tile.js","node_modules/ol/source/Source.js","node_modules/ol/tilegrid.js","node_modules/ol/tilegrid/TileGrid.js","node_modules/ol/tileurlfunction.js","node_modules/ol/uri.js","node_modules/ol/tilegrid/WMTS.js","node_modules/ol/source/Vector.js","node_modules/ol/structs/RBush.js","node_modules/rbush/rbush.min.js","node_modules/ol/source/VectorEventType.js","node_modules/ol/loadingstrategy.js","node_modules/ol/featureloader.js","node_modules/ol/format/GeoJSON.js","node_modules/ol/Feature.js","node_modules/ol/geom/GeometryCollection.js","node_modules/ol/format/JSONFeature.js","node_modules/ol/format/Feature.js","node_modules/ol/geom/LineString.js","node_modules/ol/geom/flat/interpolate.js","node_modules/ol/geom/flat/length.js","node_modules/ol/geom/MultiLineString.js","node_modules/ol/geom/MultiPoint.js","node_modules/ol/geom/MultiPolygon.js","node_modules/ol/geom/flat/center.js","node_modules/ol/layer/Vector.js","node_modules/ol/layer/BaseVector.js","node_modules/ol/style/Style.js","node_modules/ol/style/Circle.js","node_modules/ol/style/RegularShape.js","node_modules/ol/style/Image.js","node_modules/ol/colorlike.js","node_modules/ol/style/Fill.js","node_modules/ol/style/Stroke.js","node_modules/ol/render/canvas/style.js","node_modules/ol/style/Icon.js","node_modules/ol/style/IconImage.js","node_modules/ol/style/Text.js","node_modules/ol/expr/expression.js","node_modules/ol/expr/cpu.js","node_modules/ol/renderer/canvas/VectorLayer.js","node_modules/ol/render/canvas/BuilderGroup.js","node_modules/ol/render/canvas/Builder.js","node_modules/ol/render/canvas/Instruction.js","node_modules/ol/render/VectorContext.js","node_modules/ol/render/canvas/ImageBuilder.js","node_modules/ol/render/canvas/LineStringBuilder.js","node_modules/ol/render/canvas/PolygonBuilder.js","node_modules/ol/render/canvas/TextBuilder.js","node_modules/ol/geom/flat/linechunk.js","node_modules/ol/geom/flat/straightchunk.js","node_modules/ol/render/canvas/ExecutorGroup.js","node_modules/ol/render/canvas/Executor.js","node_modules/ol/geom/flat/textpath.js","node_modules/ol/render/canvas/hitdetect.js","node_modules/ol/render/canvas/Immediate.js","node_modules/ol/renderer/vector.js","dmatgm.json","dmatto.json"],"sourcesContent":["function $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\n/**\n * @module ol/Map\n */ /**\n * @module ol/Object\n */ /**\n * @module ol/events/Event\n */ /**\n * @classdesc\n * Stripped down implementation of the W3C DOM Level 2 Event interface.\n * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.\n *\n * This implementation only provides `type` and `target` properties, and\n * `stopPropagation` and `preventDefault` methods. It is meant as base class\n * for higher level events defined in the library, and works with\n * {@link module:ol/events/Target~Target}.\n */ class $aeedce20e9577100$var$BaseEvent {\n    /**\n   * @param {string} type Type.\n   */ constructor(type){\n        /**\n     * @type {boolean}\n     */ this.propagationStopped;\n        /**\n     * @type {boolean}\n     */ this.defaultPrevented;\n        /**\n     * The event type.\n     * @type {string}\n     * @api\n     */ this.type = type;\n        /**\n     * The event target.\n     * @type {Object}\n     * @api\n     */ this.target = null;\n    }\n    /**\n   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events\n   * will be fired.\n   * @api\n   */ preventDefault() {\n        this.defaultPrevented = true;\n    }\n    /**\n   * Stop event propagation.\n   * @api\n   */ stopPropagation() {\n        this.propagationStopped = true;\n    }\n}\nfunction $aeedce20e9577100$export$51134cce184326b9(evt) {\n    evt.stopPropagation();\n}\nfunction $aeedce20e9577100$export$fa3b29edae795ef4(evt) {\n    evt.preventDefault();\n}\nvar $aeedce20e9577100$export$2e2bcd8739ae039 = $aeedce20e9577100$var$BaseEvent;\n\n\n/**\n * @module ol/ObjectEventType\n */ /**\n * @enum {string}\n */ var $e881b5dca21eb5d4$export$2e2bcd8739ae039 /**\n * @typedef {'propertychange'} Types\n */  = {\n    /**\n   * Triggered when a property is changed.\n   * @event module:ol/Object.ObjectEvent#propertychange\n   * @api\n   */ PROPERTYCHANGE: \"propertychange\"\n};\n\n\n/**\n * @module ol/Observable\n */ /**\n * @module ol/events/Target\n */ /**\n * @module ol/Disposable\n */ /**\n * @classdesc\n * Objects that need to clean up after themselves.\n */ class $3273ed08087da3da$var$Disposable {\n    constructor(){\n        /**\n     * The object has already been disposed.\n     * @type {boolean}\n     * @protected\n     */ this.disposed = false;\n    }\n    /**\n   * Clean up.\n   */ dispose() {\n        if (!this.disposed) {\n            this.disposed = true;\n            this.disposeInternal();\n        }\n    }\n    /**\n   * Extension point for disposable objects.\n   * @protected\n   */ disposeInternal() {}\n}\nvar $3273ed08087da3da$export$2e2bcd8739ae039 = $3273ed08087da3da$var$Disposable;\n\n\n\n/**\n * @module ol/functions\n */ /**\n * @module ol/array\n */ /**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */ function $b998d41b678ed5d1$export$2e0ae67339d5f1ac(haystack, needle, comparator) {\n    let mid, cmp;\n    comparator = comparator || $b998d41b678ed5d1$export$fcb633242ef15540;\n    let low = 0;\n    let high = haystack.length;\n    let found = false;\n    while(low < high){\n        /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */ mid = low + (high - low >> 1);\n        cmp = +comparator(haystack[mid], needle);\n        if (cmp < 0.0) /* Too low. */ low = mid + 1;\n        else {\n            /* Key found or too high */ high = mid;\n            found = !cmp;\n        }\n    }\n    /* Key not found. */ return found ? low : ~low;\n}\nfunction $b998d41b678ed5d1$export$fcb633242ef15540(a, b) {\n    return a > b ? 1 : a < b ? -1 : 0;\n}\nfunction $b998d41b678ed5d1$export$4fa3190a997c3d8f(a, b) {\n    return a < b ? 1 : a > b ? -1 : 0;\n}\nfunction $b998d41b678ed5d1$export$8a3786cc03fdb777(arr, target, direction) {\n    if (arr[0] <= target) return 0;\n    const n = arr.length;\n    if (target <= arr[n - 1]) return n - 1;\n    if (typeof direction === \"function\") {\n        for(let i = 1; i < n; ++i){\n            const candidate = arr[i];\n            if (candidate === target) return i;\n            if (candidate < target) {\n                if (direction(target, arr[i - 1], candidate) > 0) return i - 1;\n                return i;\n            }\n        }\n        return n - 1;\n    }\n    if (direction > 0) {\n        for(let i = 1; i < n; ++i){\n            if (arr[i] < target) return i - 1;\n        }\n        return n - 1;\n    }\n    if (direction < 0) {\n        for(let i = 1; i < n; ++i){\n            if (arr[i] <= target) return i;\n        }\n        return n - 1;\n    }\n    for(let i = 1; i < n; ++i){\n        if (arr[i] == target) return i;\n        if (arr[i] < target) {\n            if (arr[i - 1] - target < target - arr[i]) return i - 1;\n            return i;\n        }\n    }\n    return n - 1;\n}\nfunction $b998d41b678ed5d1$export$292cfa960964f0e0(arr, begin, end) {\n    while(begin < end){\n        const tmp = arr[begin];\n        arr[begin] = arr[end];\n        arr[end] = tmp;\n        ++begin;\n        --end;\n    }\n}\nfunction $b998d41b678ed5d1$export$8b58be045bf06082(arr, data) {\n    const extension = Array.isArray(data) ? data : [\n        data\n    ];\n    const length = extension.length;\n    for(let i = 0; i < length; i++)arr[arr.length] = extension[i];\n}\nfunction $b998d41b678ed5d1$export$cd7f480d6b8286c3(arr, obj) {\n    const i = arr.indexOf(obj);\n    const found = i > -1;\n    if (found) arr.splice(i, 1);\n    return found;\n}\nfunction $b998d41b678ed5d1$export$e9bab7fafb253603(arr1, arr2) {\n    const len1 = arr1.length;\n    if (len1 !== arr2.length) return false;\n    for(let i = 0; i < len1; i++){\n        if (arr1[i] !== arr2[i]) return false;\n    }\n    return true;\n}\nfunction $b998d41b678ed5d1$export$c7d3d1f96a700512(arr, compareFnc) {\n    const length = arr.length;\n    const tmp = Array(arr.length);\n    let i;\n    for(i = 0; i < length; i++)tmp[i] = {\n        index: i,\n        value: arr[i]\n    };\n    tmp.sort(function(a, b) {\n        return compareFnc(a.value, b.value) || a.index - b.index;\n    });\n    for(i = 0; i < arr.length; i++)arr[i] = tmp[i].value;\n}\nfunction $b998d41b678ed5d1$export$efa610630f9e181(arr, func, strict) {\n    const compare = func || $b998d41b678ed5d1$export$fcb633242ef15540;\n    return arr.every(function(currentVal, index) {\n        if (index === 0) return true;\n        const res = compare(arr[index - 1], currentVal);\n        return !(res > 0 || strict && res === 0);\n    });\n}\n\n\nfunction $013a1733c226ec50$export$22e23a2304399231() {\n    return true;\n}\nfunction $013a1733c226ec50$export$8f11cee4bdc7e668() {\n    return false;\n}\nfunction $013a1733c226ec50$export$1cd1943b3a73bbe8() {}\nfunction $013a1733c226ec50$export$ff83df6f9971435f(fn) {\n    let called = false;\n    /** @type {ReturnType} */ let lastResult;\n    /** @type {Array<any>} */ let lastArgs;\n    let lastThis;\n    return function() {\n        const nextArgs = Array.prototype.slice.call(arguments);\n        if (!called || this !== lastThis || !(0, $b998d41b678ed5d1$export$e9bab7fafb253603)(nextArgs, lastArgs)) {\n            called = true;\n            lastThis = this;\n            lastArgs = nextArgs;\n            lastResult = fn.apply(this, arguments);\n        }\n        return lastResult;\n    };\n}\nfunction $013a1733c226ec50$export$4dbaaf6c79705e6c(getter) {\n    function promiseGetter() {\n        let value;\n        try {\n            value = getter();\n        } catch (err) {\n            return Promise.reject(err);\n        }\n        if (value instanceof Promise) return value;\n        return Promise.resolve(value);\n    }\n    return promiseGetter();\n}\n\n\n/**\n * @module ol/obj\n */ /**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */ function $beaefe87199bb537$export$42ffd38884aecdac(object) {\n    for(const property in object)delete object[property];\n}\nfunction $beaefe87199bb537$export$dd1bc94b04021eeb(object) {\n    let property;\n    for(property in object)return false;\n    return !property;\n}\n\n\n/**\n * @typedef {EventTarget|Target} EventTargetLike\n */ /**\n * @classdesc\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\n *\n * There are two important simplifications compared to the specification:\n *\n * 1. The handling of `useCapture` in `addEventListener` and\n *    `removeEventListener`. There is no real capture model.\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\n *    There is no event target hierarchy. When a listener calls\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\n *    more listeners after this one will be called. Same as when the listener\n *    returns false.\n */ class $08c28d22c0cb5a39$var$Target extends (0, $3273ed08087da3da$export$2e2bcd8739ae039) {\n    /**\n   * @param {*} [target] Default event target for dispatched events.\n   */ constructor(target){\n        super();\n        /**\n     * @private\n     * @type {*}\n     */ this.eventTarget_ = target;\n        /**\n     * @private\n     * @type {Object<string, number>}\n     */ this.pendingRemovals_ = null;\n        /**\n     * @private\n     * @type {Object<string, number>}\n     */ this.dispatching_ = null;\n        /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>}\n     */ this.listeners_ = null;\n    }\n    /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */ addEventListener(type, listener) {\n        if (!type || !listener) return;\n        const listeners = this.listeners_ || (this.listeners_ = {});\n        const listenersForType = listeners[type] || (listeners[type] = []);\n        if (!listenersForType.includes(listener)) listenersForType.push(listener);\n    }\n    /**\n   * Dispatches an event and calls all listeners listening for events\n   * of this type. The event parameter can either be a string or an\n   * Object with a `type` property.\n   *\n   * @param {import(\"./Event.js\").default|string} event Event object.\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\n   *     event object or if any of the listeners returned false.\n   * @api\n   */ dispatchEvent(event) {\n        const isString = typeof event === \"string\";\n        const type = isString ? event : event.type;\n        const listeners = this.listeners_ && this.listeners_[type];\n        if (!listeners) return;\n        const evt = isString ? new (0, $aeedce20e9577100$export$2e2bcd8739ae039)(event) : /** @type {Event} */ event;\n        if (!evt.target) evt.target = this.eventTarget_ || this;\n        const dispatching = this.dispatching_ || (this.dispatching_ = {});\n        const pendingRemovals = this.pendingRemovals_ || (this.pendingRemovals_ = {});\n        if (!(type in dispatching)) {\n            dispatching[type] = 0;\n            pendingRemovals[type] = 0;\n        }\n        ++dispatching[type];\n        let propagate;\n        for(let i = 0, ii = listeners.length; i < ii; ++i){\n            if (\"handleEvent\" in listeners[i]) propagate = /** @type {import(\"../events.js\").ListenerObject} */ listeners[i].handleEvent(evt);\n            else propagate = /** @type {import(\"../events.js\").ListenerFunction} */ listeners[i].call(this, evt);\n            if (propagate === false || evt.propagationStopped) {\n                propagate = false;\n                break;\n            }\n        }\n        if (--dispatching[type] === 0) {\n            let pr = pendingRemovals[type];\n            delete pendingRemovals[type];\n            while(pr--)this.removeEventListener(type, (0, $013a1733c226ec50$export$1cd1943b3a73bbe8));\n            delete dispatching[type];\n        }\n        return propagate;\n    }\n    /**\n   * Clean up.\n   */ disposeInternal() {\n        this.listeners_ && (0, $beaefe87199bb537$export$42ffd38884aecdac)(this.listeners_);\n    }\n    /**\n   * Get the listeners for a specified event type. Listeners are returned in the\n   * order that they will be called in.\n   *\n   * @param {string} type Type.\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\n   */ getListeners(type) {\n        return this.listeners_ && this.listeners_[type] || undefined;\n    }\n    /**\n   * @param {string} [type] Type. If not provided,\n   *     `true` will be returned if this event target has any listeners.\n   * @return {boolean} Has listeners.\n   */ hasListener(type) {\n        if (!this.listeners_) return false;\n        return type ? type in this.listeners_ : Object.keys(this.listeners_).length > 0;\n    }\n    /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */ removeEventListener(type, listener) {\n        const listeners = this.listeners_ && this.listeners_[type];\n        if (listeners) {\n            const index = listeners.indexOf(listener);\n            if (index !== -1) {\n                if (this.pendingRemovals_ && type in this.pendingRemovals_) {\n                    // make listener a no-op, and remove later in #dispatchEvent()\n                    listeners[index] = (0, $013a1733c226ec50$export$1cd1943b3a73bbe8);\n                    ++this.pendingRemovals_[type];\n                } else {\n                    listeners.splice(index, 1);\n                    if (listeners.length === 0) delete this.listeners_[type];\n                }\n            }\n        }\n    }\n}\nvar $08c28d22c0cb5a39$export$2e2bcd8739ae039 = $08c28d22c0cb5a39$var$Target;\n\n\n/**\n * @module ol/events/EventType\n */ /**\n * @enum {string}\n * @const\n */ var $294047c5e65f31a3$export$2e2bcd8739ae039 = {\n    /**\n   * Generic change event. Triggered when the revision counter is increased.\n   * @event module:ol/events/Event~BaseEvent#change\n   * @api\n   */ CHANGE: \"change\",\n    /**\n   * Generic error event. Triggered when an error occurs.\n   * @event module:ol/events/Event~BaseEvent#error\n   * @api\n   */ ERROR: \"error\",\n    BLUR: \"blur\",\n    CLEAR: \"clear\",\n    CONTEXTMENU: \"contextmenu\",\n    CLICK: \"click\",\n    DBLCLICK: \"dblclick\",\n    DRAGENTER: \"dragenter\",\n    DRAGOVER: \"dragover\",\n    DROP: \"drop\",\n    FOCUS: \"focus\",\n    KEYDOWN: \"keydown\",\n    KEYPRESS: \"keypress\",\n    LOAD: \"load\",\n    RESIZE: \"resize\",\n    TOUCHMOVE: \"touchmove\",\n    WHEEL: \"wheel\"\n};\n\n\n/**\n * @module ol/events\n */ \nfunction $d5bf8abd656a3cdc$export$63174c828edd6ff8(target, type, listener, thisArg, once) {\n    if (thisArg && thisArg !== target) listener = listener.bind(thisArg);\n    if (once) {\n        const originalListener = listener;\n        listener = function() {\n            target.removeEventListener(type, listener);\n            originalListener.apply(this, arguments);\n        };\n    }\n    const eventsKey = {\n        target: target,\n        type: type,\n        listener: listener\n    };\n    target.addEventListener(type, listener);\n    return eventsKey;\n}\nfunction $d5bf8abd656a3cdc$export$8d2a95bc11b44725(target, type, listener, thisArg) {\n    return $d5bf8abd656a3cdc$export$63174c828edd6ff8(target, type, listener, thisArg, true);\n}\nfunction $d5bf8abd656a3cdc$export$b0a21c8b3c1c921(key) {\n    if (key && key.target) {\n        key.target.removeEventListener(key.type, key.listener);\n        (0, $beaefe87199bb537$export$42ffd38884aecdac)(key);\n    }\n}\n\n\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */ /***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */ /**\n * @typedef {'change'|'error'} EventTypes\n */ /***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */ /**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */ class $1f093ab5083c8a1f$var$Observable extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n        this.on = /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ this.onInternal;\n        this.once = /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ this.onceInternal;\n        this.un = /** @type {ObservableOnSignature<void>} */ this.unInternal;\n        /**\n     * @private\n     * @type {number}\n     */ this.revision_ = 0;\n    }\n    /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */ changed() {\n        ++this.revision_;\n        this.dispatchEvent((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE);\n    }\n    /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */ getRevision() {\n        return this.revision_;\n    }\n    /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */ onInternal(type, listener) {\n        if (Array.isArray(type)) {\n            const len = type.length;\n            const keys = new Array(len);\n            for(let i = 0; i < len; ++i)keys[i] = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this, type[i], listener);\n            return keys;\n        }\n        return (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this, /** @type {string} */ type, listener);\n    }\n    /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */ onceInternal(type, listener) {\n        let key;\n        if (Array.isArray(type)) {\n            const len = type.length;\n            key = new Array(len);\n            for(let i = 0; i < len; ++i)key[i] = (0, $d5bf8abd656a3cdc$export$8d2a95bc11b44725)(this, type[i], listener);\n        } else key = (0, $d5bf8abd656a3cdc$export$8d2a95bc11b44725)(this, /** @type {string} */ type, listener);\n        /** @type {Object} */ listener.ol_key = key;\n        return key;\n    }\n    /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @protected\n   */ unInternal(type, listener) {\n        const key = /** @type {Object} */ listener.ol_key;\n        if (key) $1f093ab5083c8a1f$export$b7ef3f8527533384(key);\n        else if (Array.isArray(type)) for(let i = 0, ii = type.length; i < ii; ++i)this.removeEventListener(type[i], listener);\n        else this.removeEventListener(type, listener);\n    }\n}\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */ $1f093ab5083c8a1f$var$Observable.prototype.on;\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */ $1f093ab5083c8a1f$var$Observable.prototype.once;\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */ $1f093ab5083c8a1f$var$Observable.prototype.un;\nfunction $1f093ab5083c8a1f$export$b7ef3f8527533384(key) {\n    if (Array.isArray(key)) for(let i = 0, ii = key.length; i < ii; ++i)(0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(key[i]);\n    else (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(/** @type {import(\"./events.js\").EventsKey} */ key);\n}\nvar $1f093ab5083c8a1f$export$2e2bcd8739ae039 = $1f093ab5083c8a1f$var$Observable;\n\n\n/**\n * @module ol/util\n */ /**\n * @return {never} Any return.\n */ function $6c5e11070e371322$export$817eb92a8194bab0() {\n    throw new Error(\"Unimplemented abstract method.\");\n}\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */ let $6c5e11070e371322$var$uidCounter_ = 0;\nfunction $6c5e11070e371322$export$5e82334337e0f204(obj) {\n    return obj.ol_uid || (obj.ol_uid = String(++$6c5e11070e371322$var$uidCounter_));\n}\nconst $6c5e11070e371322$export$a4ad2735b021c132 = \"8.1.0\";\n\n\n\nclass $b68b3d6e32e3074a$export$cf395d7c4a2d5a17 extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */ constructor(type, key, oldValue){\n        super(type);\n        /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */ this.key = key;\n        /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */ this.oldValue = oldValue;\n    }\n}\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */ /**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */ class $b68b3d6e32e3074a$var$BaseObject extends (0, $1f093ab5083c8a1f$export$2e2bcd8739ae039) {\n    /**\n   * @param {Object<string, *>} [values] An object with key-value pairs.\n   */ constructor(values){\n        super();\n        /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {ObjectOnSignature<void>}\n     */ this.un;\n        // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n        // the same as the order in which they were created.  This also helps to\n        // ensure that object properties are always added in the same order, which\n        // helps many JavaScript engines generate faster code.\n        (0, $6c5e11070e371322$export$5e82334337e0f204)(this);\n        /**\n     * @private\n     * @type {Object<string, *>}\n     */ this.values_ = null;\n        if (values !== undefined) this.setProperties(values);\n    }\n    /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */ get(key) {\n        let value;\n        if (this.values_ && this.values_.hasOwnProperty(key)) value = this.values_[key];\n        return value;\n    }\n    /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */ getKeys() {\n        return this.values_ && Object.keys(this.values_) || [];\n    }\n    /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */ getProperties() {\n        return this.values_ && Object.assign({}, this.values_) || {};\n    }\n    /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>?} Object.\n   */ getPropertiesInternal() {\n        return this.values_;\n    }\n    /**\n   * @return {boolean} The object has properties.\n   */ hasProperties() {\n        return !!this.values_;\n    }\n    /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */ notify(key, oldValue) {\n        let eventType;\n        eventType = `change:${key}`;\n        if (this.hasListener(eventType)) this.dispatchEvent(new $b68b3d6e32e3074a$export$cf395d7c4a2d5a17(eventType, key, oldValue));\n        eventType = (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE;\n        if (this.hasListener(eventType)) this.dispatchEvent(new $b68b3d6e32e3074a$export$cf395d7c4a2d5a17(eventType, key, oldValue));\n    }\n    /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */ addChangeListener(key, listener) {\n        this.addEventListener(`change:${key}`, listener);\n    }\n    /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */ removeChangeListener(key, listener) {\n        this.removeEventListener(`change:${key}`, listener);\n    }\n    /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */ set(key, value, silent) {\n        const values = this.values_ || (this.values_ = {});\n        if (silent) values[key] = value;\n        else {\n            const oldValue = values[key];\n            values[key] = value;\n            if (oldValue !== value) this.notify(key, oldValue);\n        }\n    }\n    /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */ setProperties(values, silent) {\n        for(const key in values)this.set(key, values[key], silent);\n    }\n    /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */ applyProperties(source) {\n        if (!source.values_) return;\n        Object.assign(this.values_ || (this.values_ = {}), source.values_);\n    }\n    /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [silent] Unset without triggering an event.\n   * @api\n   */ unset(key, silent) {\n        if (this.values_ && key in this.values_) {\n            const oldValue = this.values_[key];\n            delete this.values_[key];\n            if ((0, $beaefe87199bb537$export$dd1bc94b04021eeb)(this.values_)) this.values_ = null;\n            if (!silent) this.notify(key, oldValue);\n        }\n    }\n}\nvar $b68b3d6e32e3074a$export$2e2bcd8739ae039 = $b68b3d6e32e3074a$var$BaseObject;\n\n\n/**\n * @module ol/Collection\n */ \n/**\n * @module ol/CollectionEventType\n */ /**\n * @enum {string}\n */ var $161dd067fe2d672c$export$2e2bcd8739ae039 = {\n    /**\n   * Triggered when an item is added to the collection.\n   * @event module:ol/Collection.CollectionEvent#add\n   * @api\n   */ ADD: \"add\",\n    /**\n   * Triggered when an item is removed from the collection.\n   * @event module:ol/Collection.CollectionEvent#remove\n   * @api\n   */ REMOVE: \"remove\"\n};\n\n\n\n/**\n * @enum {string}\n * @private\n */ const $931ffc4e747c14db$var$Property = {\n    LENGTH: \"length\"\n};\nclass $931ffc4e747c14db$export$a87ae6eb2761ec6d extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\n   * @param {T} element Element.\n   * @param {number} index The index of the added or removed element.\n   */ constructor(type, element, index){\n        super(type);\n        /**\n     * The element that is added to or removed from the collection.\n     * @type {T}\n     * @api\n     */ this.element = element;\n        /**\n     * The index of the added or removed element.\n     * @type {number}\n     * @api\n     */ this.index = index;\n    }\n}\n/***\n * @template T\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\n */ /**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */ /**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */ class $931ffc4e747c14db$var$Collection extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\n   * @param {Array<T>} [array] Array.\n   * @param {Options} [options] Collection options.\n   */ constructor(array, options){\n        super();\n        /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {CollectionOnSignature<T, void>}\n     */ this.un;\n        options = options || {};\n        /**\n     * @private\n     * @type {boolean}\n     */ this.unique_ = !!options.unique;\n        /**\n     * @private\n     * @type {!Array<T>}\n     */ this.array_ = array ? array : [];\n        if (this.unique_) for(let i = 0, ii = this.array_.length; i < ii; ++i)this.assertUnique_(this.array_[i], i);\n        this.updateLength_();\n    }\n    /**\n   * Remove all elements from the collection.\n   * @api\n   */ clear() {\n        while(this.getLength() > 0)this.pop();\n    }\n    /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */ extend(arr) {\n        for(let i = 0, ii = arr.length; i < ii; ++i)this.push(arr[i]);\n        return this;\n    }\n    /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */ forEach(f) {\n        const array = this.array_;\n        for(let i = 0, ii = array.length; i < ii; ++i)f(array[i], i, array);\n    }\n    /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */ getArray() {\n        return this.array_;\n    }\n    /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */ item(index) {\n        return this.array_[index];\n    }\n    /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */ getLength() {\n        return this.get($931ffc4e747c14db$var$Property.LENGTH);\n    }\n    /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */ insertAt(index, elem) {\n        if (index < 0 || index > this.getLength()) throw new Error(\"Index out of bounds: \" + index);\n        if (this.unique_) this.assertUnique_(elem);\n        this.array_.splice(index, 0, elem);\n        this.updateLength_();\n        this.dispatchEvent(new $931ffc4e747c14db$export$a87ae6eb2761ec6d((0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, elem, index));\n    }\n    /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */ pop() {\n        return this.removeAt(this.getLength() - 1);\n    }\n    /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */ push(elem) {\n        if (this.unique_) this.assertUnique_(elem);\n        const n = this.getLength();\n        this.insertAt(n, elem);\n        return this.getLength();\n    }\n    /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */ remove(elem) {\n        const arr = this.array_;\n        for(let i = 0, ii = arr.length; i < ii; ++i){\n            if (arr[i] === elem) return this.removeAt(i);\n        }\n        return undefined;\n    }\n    /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */ removeAt(index) {\n        if (index < 0 || index >= this.getLength()) return undefined;\n        const prev = this.array_[index];\n        this.array_.splice(index, 1);\n        this.updateLength_();\n        this.dispatchEvent(/** @type {CollectionEvent<T>} */ new $931ffc4e747c14db$export$a87ae6eb2761ec6d((0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, prev, index));\n        return prev;\n    }\n    /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */ setAt(index, elem) {\n        const n = this.getLength();\n        if (index >= n) {\n            this.insertAt(index, elem);\n            return;\n        }\n        if (index < 0) throw new Error(\"Index out of bounds: \" + index);\n        if (this.unique_) this.assertUnique_(elem, index);\n        const prev = this.array_[index];\n        this.array_[index] = elem;\n        this.dispatchEvent(/** @type {CollectionEvent<T>} */ new $931ffc4e747c14db$export$a87ae6eb2761ec6d((0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, prev, index));\n        this.dispatchEvent(/** @type {CollectionEvent<T>} */ new $931ffc4e747c14db$export$a87ae6eb2761ec6d((0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, elem, index));\n    }\n    /**\n   * @private\n   */ updateLength_() {\n        this.set($931ffc4e747c14db$var$Property.LENGTH, this.array_.length);\n    }\n    /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number} [except] Optional index to ignore.\n   */ assertUnique_(elem, except) {\n        for(let i = 0, ii = this.array_.length; i < ii; ++i){\n            if (this.array_[i] === elem && i !== except) throw new Error(\"Duplicate item added to a unique collection\");\n        }\n    }\n}\nvar $931ffc4e747c14db$export$2e2bcd8739ae039 = $931ffc4e747c14db$var$Collection;\n\n\n\n/**\n * @module ol/renderer/Composite\n */ /**\n * @module ol/renderer/Map\n */ \n\n\n/**\n * @module ol/transform\n */ /**\n * @module ol/has\n */ const $67c66761d21428d0$var$ua = typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\" ? navigator.userAgent.toLowerCase() : \"\";\nconst $67c66761d21428d0$export$8442bdfd18b7b8a6 = $67c66761d21428d0$var$ua.includes(\"firefox\");\nconst $67c66761d21428d0$export$3227bfbdaa9275de = $67c66761d21428d0$var$ua.includes(\"safari\") && !$67c66761d21428d0$var$ua.includes(\"chrom\");\nconst $67c66761d21428d0$export$b23eed0e325a206a = $67c66761d21428d0$export$3227bfbdaa9275de && ($67c66761d21428d0$var$ua.includes(\"version/15.4\") || /cpu (os|iphone os) 15_4 like mac os x/.test($67c66761d21428d0$var$ua));\nconst $67c66761d21428d0$export$39dfd62a25e0fe93 = $67c66761d21428d0$var$ua.includes(\"webkit\") && !$67c66761d21428d0$var$ua.includes(\"edge\");\nconst $67c66761d21428d0$export$76c0a3b101d93136 = $67c66761d21428d0$var$ua.includes(\"macintosh\");\nconst $67c66761d21428d0$export$6b83a0446fc26f94 = typeof devicePixelRatio !== \"undefined\" ? devicePixelRatio : 1;\nconst $67c66761d21428d0$export$98fcef3dc9973292 = typeof WorkerGlobalScope !== \"undefined\" && typeof OffscreenCanvas !== \"undefined\" && self instanceof WorkerGlobalScope; //eslint-disable-line\nconst $67c66761d21428d0$export$716f8695eedb9bad = typeof Image !== \"undefined\" && Image.prototype.decode;\nconst $67c66761d21428d0$export$7478563940788376 = typeof createImageBitmap === \"function\";\nconst $67c66761d21428d0$export$f751ce96c6c4e4fc = function() {\n    let passive = false;\n    try {\n        const options = Object.defineProperty({}, \"passive\", {\n            get: function() {\n                passive = true;\n            }\n        });\n        window.addEventListener(\"_\", null, options);\n        window.removeEventListener(\"_\", null, options);\n    } catch (error) {\n    // passive not supported\n    }\n    return passive;\n}();\n\n\n/**\n * @module ol/asserts\n */ /**\n * @param {*} assertion Assertion we expected to be truthy.\n * @param {string} errorMessage Error message.\n */ function $35d5ec884318008e$export$a7a9523472993e97(assertion, errorMessage) {\n    if (!assertion) throw new Error(errorMessage);\n}\n\n\n/**\n * An array representing an affine 2d transformation for use with\n * {@link module:ol/transform} functions. The array has 6 elements.\n * @typedef {!Array<number>} Transform\n * @api\n */ /**\n * Collection of affine 2d transformation functions. The functions work on an\n * array of 6 elements. The element order is compatible with the [SVGMatrix\n * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is\n * a subset (elements a to f) of a 3×3 matrix:\n * ```\n * [ a c e ]\n * [ b d f ]\n * [ 0 0 1 ]\n * ```\n */ /**\n * @private\n * @type {Transform}\n */ const $e22e7611e69f42a9$var$tmp_ = new Array(6);\nfunction $e22e7611e69f42a9$export$185802fd694ee1f5() {\n    return [\n        1,\n        0,\n        0,\n        1,\n        0,\n        0\n    ];\n}\nfunction $e22e7611e69f42a9$export$aad8462122ac592b(transform) {\n    return $e22e7611e69f42a9$export$adaa4cf7ef1b65be(transform, 1, 0, 0, 1, 0, 0);\n}\nfunction $e22e7611e69f42a9$export$2060d2db72cce88f(transform1, transform2) {\n    const a1 = transform1[0];\n    const b1 = transform1[1];\n    const c1 = transform1[2];\n    const d1 = transform1[3];\n    const e1 = transform1[4];\n    const f1 = transform1[5];\n    const a2 = transform2[0];\n    const b2 = transform2[1];\n    const c2 = transform2[2];\n    const d2 = transform2[3];\n    const e2 = transform2[4];\n    const f2 = transform2[5];\n    transform1[0] = a1 * a2 + c1 * b2;\n    transform1[1] = b1 * a2 + d1 * b2;\n    transform1[2] = a1 * c2 + c1 * d2;\n    transform1[3] = b1 * c2 + d1 * d2;\n    transform1[4] = a1 * e2 + c1 * f2 + e1;\n    transform1[5] = b1 * e2 + d1 * f2 + f1;\n    return transform1;\n}\nfunction $e22e7611e69f42a9$export$adaa4cf7ef1b65be(transform, a, b, c, d, e, f) {\n    transform[0] = a;\n    transform[1] = b;\n    transform[2] = c;\n    transform[3] = d;\n    transform[4] = e;\n    transform[5] = f;\n    return transform;\n}\nfunction $e22e7611e69f42a9$export$42b4187a82d80ed0(transform1, transform2) {\n    transform1[0] = transform2[0];\n    transform1[1] = transform2[1];\n    transform1[2] = transform2[2];\n    transform1[3] = transform2[3];\n    transform1[4] = transform2[4];\n    transform1[5] = transform2[5];\n    return transform1;\n}\nfunction $e22e7611e69f42a9$export$5635d7ef4b8fee1c(transform, coordinate) {\n    const x = coordinate[0];\n    const y = coordinate[1];\n    coordinate[0] = transform[0] * x + transform[2] * y + transform[4];\n    coordinate[1] = transform[1] * x + transform[3] * y + transform[5];\n    return coordinate;\n}\nfunction $e22e7611e69f42a9$export$bb628a54ab399bc9(transform, angle) {\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    return $e22e7611e69f42a9$export$2060d2db72cce88f(transform, $e22e7611e69f42a9$export$adaa4cf7ef1b65be($e22e7611e69f42a9$var$tmp_, cos, sin, -sin, cos, 0, 0));\n}\nfunction $e22e7611e69f42a9$export$dcdf75081b88279d(transform, x, y) {\n    return $e22e7611e69f42a9$export$2060d2db72cce88f(transform, $e22e7611e69f42a9$export$adaa4cf7ef1b65be($e22e7611e69f42a9$var$tmp_, x, 0, 0, y, 0, 0));\n}\nfunction $e22e7611e69f42a9$export$3e4e33ea14aeb531(target, x, y) {\n    return $e22e7611e69f42a9$export$adaa4cf7ef1b65be(target, x, 0, 0, y, 0, 0);\n}\nfunction $e22e7611e69f42a9$export$d73ee8ef04f5226a(transform, dx, dy) {\n    return $e22e7611e69f42a9$export$2060d2db72cce88f(transform, $e22e7611e69f42a9$export$adaa4cf7ef1b65be($e22e7611e69f42a9$var$tmp_, 1, 0, 0, 1, dx, dy));\n}\nfunction $e22e7611e69f42a9$export$f672e0b6f7222cd7(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {\n    const sin = Math.sin(angle);\n    const cos = Math.cos(angle);\n    transform[0] = sx * cos;\n    transform[1] = sy * sin;\n    transform[2] = -sx * sin;\n    transform[3] = sy * cos;\n    transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;\n    transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;\n    return transform;\n}\nfunction $e22e7611e69f42a9$export$12a96a1aaf5558e3(dx1, dy1, sx, sy, angle, dx2, dy2) {\n    return $e22e7611e69f42a9$export$f84e8e69fd4488a5($e22e7611e69f42a9$export$f672e0b6f7222cd7($e22e7611e69f42a9$export$185802fd694ee1f5(), dx1, dy1, sx, sy, angle, dx2, dy2));\n}\nfunction $e22e7611e69f42a9$export$6897c284b6f9f4dc(source) {\n    return $e22e7611e69f42a9$export$bd70ea2a93c0fa4(source, source);\n}\nfunction $e22e7611e69f42a9$export$bd70ea2a93c0fa4(target, source) {\n    const det = $e22e7611e69f42a9$export$a04698f914c55ed9(source);\n    (0, $35d5ec884318008e$export$a7a9523472993e97)(det !== 0, \"Transformation matrix cannot be inverted\");\n    const a = source[0];\n    const b = source[1];\n    const c = source[2];\n    const d = source[3];\n    const e = source[4];\n    const f = source[5];\n    target[0] = d / det;\n    target[1] = -b / det;\n    target[2] = -c / det;\n    target[3] = a / det;\n    target[4] = (c * f - d * e) / det;\n    target[5] = -(a * f - b * e) / det;\n    return target;\n}\nfunction $e22e7611e69f42a9$export$a04698f914c55ed9(mat) {\n    return mat[0] * mat[3] - mat[1] * mat[2];\n}\n/**\n * @type {HTMLElement}\n * @private\n */ let $e22e7611e69f42a9$var$transformStringDiv;\nfunction $e22e7611e69f42a9$export$f84e8e69fd4488a5(mat) {\n    const transformString = \"matrix(\" + mat.join(\", \") + \")\";\n    if (0, $67c66761d21428d0$export$98fcef3dc9973292) return transformString;\n    const node = $e22e7611e69f42a9$var$transformStringDiv || ($e22e7611e69f42a9$var$transformStringDiv = document.createElement(\"div\"));\n    node.style.transform = transformString;\n    return node.style.transform;\n}\n\n\n/**\n * @module ol/extent\n */ /**\n * @module ol/extent/Relationship\n */ /**\n * Relationship to an extent.\n * @enum {number}\n */ var $dab4245bc22b806c$export$2e2bcd8739ae039 = {\n    UNKNOWN: 0,\n    INTERSECTING: 1,\n    ABOVE: 2,\n    RIGHT: 4,\n    BELOW: 8,\n    LEFT: 16\n};\n\n\nfunction $6da4c8ed3074c92b$export$8aceca7c77505534(coordinates) {\n    const extent = $6da4c8ed3074c92b$export$fe201bb3bbe031e9();\n    for(let i = 0, ii = coordinates.length; i < ii; ++i)$6da4c8ed3074c92b$export$1f820e3920fa5715(extent, coordinates[i]);\n    return extent;\n}\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */ function $6da4c8ed3074c92b$var$_boundingExtentXYs(xs, ys, dest) {\n    const minX = Math.min.apply(null, xs);\n    const minY = Math.min.apply(null, ys);\n    const maxX = Math.max.apply(null, xs);\n    const maxY = Math.max.apply(null, ys);\n    return $6da4c8ed3074c92b$export$958e3e1a02eac4b6(minX, minY, maxX, maxY, dest);\n}\nfunction $6da4c8ed3074c92b$export$ab1029bcae9ddb4a(extent, value, dest) {\n    if (dest) {\n        dest[0] = extent[0] - value;\n        dest[1] = extent[1] - value;\n        dest[2] = extent[2] + value;\n        dest[3] = extent[3] + value;\n        return dest;\n    }\n    return [\n        extent[0] - value,\n        extent[1] - value,\n        extent[2] + value,\n        extent[3] + value\n    ];\n}\nfunction $6da4c8ed3074c92b$export$9cd59f9826255e47(extent, dest) {\n    if (dest) {\n        dest[0] = extent[0];\n        dest[1] = extent[1];\n        dest[2] = extent[2];\n        dest[3] = extent[3];\n        return dest;\n    }\n    return extent.slice();\n}\nfunction $6da4c8ed3074c92b$export$cbe64c389534206f(extent, x, y) {\n    let dx, dy;\n    if (x < extent[0]) dx = extent[0] - x;\n    else if (extent[2] < x) dx = x - extent[2];\n    else dx = 0;\n    if (y < extent[1]) dy = extent[1] - y;\n    else if (extent[3] < y) dy = y - extent[3];\n    else dy = 0;\n    return dx * dx + dy * dy;\n}\nfunction $6da4c8ed3074c92b$export$ac68c24d37ca240f(extent, coordinate) {\n    return $6da4c8ed3074c92b$export$805bdfd6d6690e97(extent, coordinate[0], coordinate[1]);\n}\nfunction $6da4c8ed3074c92b$export$be866b1e0809b17e(extent1, extent2) {\n    return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] && extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\n}\nfunction $6da4c8ed3074c92b$export$805bdfd6d6690e97(extent, x, y) {\n    return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\nfunction $6da4c8ed3074c92b$export$f97905ead28c61a8(extent, coordinate) {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let relationship = (0, $dab4245bc22b806c$export$2e2bcd8739ae039).UNKNOWN;\n    if (x < minX) relationship = relationship | (0, $dab4245bc22b806c$export$2e2bcd8739ae039).LEFT;\n    else if (x > maxX) relationship = relationship | (0, $dab4245bc22b806c$export$2e2bcd8739ae039).RIGHT;\n    if (y < minY) relationship = relationship | (0, $dab4245bc22b806c$export$2e2bcd8739ae039).BELOW;\n    else if (y > maxY) relationship = relationship | (0, $dab4245bc22b806c$export$2e2bcd8739ae039).ABOVE;\n    if (relationship === (0, $dab4245bc22b806c$export$2e2bcd8739ae039).UNKNOWN) relationship = (0, $dab4245bc22b806c$export$2e2bcd8739ae039).INTERSECTING;\n    return relationship;\n}\nfunction $6da4c8ed3074c92b$export$fe201bb3bbe031e9() {\n    return [\n        Infinity,\n        Infinity,\n        -Infinity,\n        -Infinity\n    ];\n}\nfunction $6da4c8ed3074c92b$export$958e3e1a02eac4b6(minX, minY, maxX, maxY, dest) {\n    if (dest) {\n        dest[0] = minX;\n        dest[1] = minY;\n        dest[2] = maxX;\n        dest[3] = maxY;\n        return dest;\n    }\n    return [\n        minX,\n        minY,\n        maxX,\n        maxY\n    ];\n}\nfunction $6da4c8ed3074c92b$export$3e2152b047719fa1(dest) {\n    return $6da4c8ed3074c92b$export$958e3e1a02eac4b6(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\nfunction $6da4c8ed3074c92b$export$4838bf78d04a9440(coordinate, dest) {\n    const x = coordinate[0];\n    const y = coordinate[1];\n    return $6da4c8ed3074c92b$export$958e3e1a02eac4b6(x, y, x, y, dest);\n}\nfunction $6da4c8ed3074c92b$export$29e3ad4dbd0cb863(coordinates, dest) {\n    const extent = $6da4c8ed3074c92b$export$3e2152b047719fa1(dest);\n    return $6da4c8ed3074c92b$export$795cd48be4d5f252(extent, coordinates);\n}\nfunction $6da4c8ed3074c92b$export$be0ab0bf96ca59ca(flatCoordinates, offset, end, stride, dest) {\n    const extent = $6da4c8ed3074c92b$export$3e2152b047719fa1(dest);\n    return $6da4c8ed3074c92b$export$30570204156ffd18(extent, flatCoordinates, offset, end, stride);\n}\nfunction $6da4c8ed3074c92b$export$73b4897e93bc5c83(rings, dest) {\n    const extent = $6da4c8ed3074c92b$export$3e2152b047719fa1(dest);\n    return $6da4c8ed3074c92b$export$9b319549574402d7(extent, rings);\n}\nfunction $6da4c8ed3074c92b$export$e9bab7fafb253603(extent1, extent2) {\n    return extent1[0] == extent2[0] && extent1[2] == extent2[2] && extent1[1] == extent2[1] && extent1[3] == extent2[3];\n}\nfunction $6da4c8ed3074c92b$export$998afeab28643bd6(extent1, extent2, tolerance) {\n    return Math.abs(extent1[0] - extent2[0]) < tolerance && Math.abs(extent1[2] - extent2[2]) < tolerance && Math.abs(extent1[1] - extent2[1]) < tolerance && Math.abs(extent1[3] - extent2[3]) < tolerance;\n}\nfunction $6da4c8ed3074c92b$export$8b58be045bf06082(extent1, extent2) {\n    if (extent2[0] < extent1[0]) extent1[0] = extent2[0];\n    if (extent2[2] > extent1[2]) extent1[2] = extent2[2];\n    if (extent2[1] < extent1[1]) extent1[1] = extent2[1];\n    if (extent2[3] > extent1[3]) extent1[3] = extent2[3];\n    return extent1;\n}\nfunction $6da4c8ed3074c92b$export$1f820e3920fa5715(extent, coordinate) {\n    if (coordinate[0] < extent[0]) extent[0] = coordinate[0];\n    if (coordinate[0] > extent[2]) extent[2] = coordinate[0];\n    if (coordinate[1] < extent[1]) extent[1] = coordinate[1];\n    if (coordinate[1] > extent[3]) extent[3] = coordinate[1];\n}\nfunction $6da4c8ed3074c92b$export$795cd48be4d5f252(extent, coordinates) {\n    for(let i = 0, ii = coordinates.length; i < ii; ++i)$6da4c8ed3074c92b$export$1f820e3920fa5715(extent, coordinates[i]);\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$30570204156ffd18(extent, flatCoordinates, offset, end, stride) {\n    for(; offset < end; offset += stride)$6da4c8ed3074c92b$export$f1dab130b92b85a9(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$9b319549574402d7(extent, rings) {\n    for(let i = 0, ii = rings.length; i < ii; ++i)$6da4c8ed3074c92b$export$795cd48be4d5f252(extent, rings[i]);\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$f1dab130b92b85a9(extent, x, y) {\n    extent[0] = Math.min(extent[0], x);\n    extent[1] = Math.min(extent[1], y);\n    extent[2] = Math.max(extent[2], x);\n    extent[3] = Math.max(extent[3], y);\n}\nfunction $6da4c8ed3074c92b$export$f9ed8a3d123a08e2(extent, callback) {\n    let val;\n    val = callback($6da4c8ed3074c92b$export$8d09f5e2e1bf560d(extent));\n    if (val) return val;\n    val = callback($6da4c8ed3074c92b$export$e77c1cf70445e168(extent));\n    if (val) return val;\n    val = callback($6da4c8ed3074c92b$export$b84fa077c8b05295(extent));\n    if (val) return val;\n    val = callback($6da4c8ed3074c92b$export$cb1538b07e6964ff(extent));\n    if (val) return val;\n    return false;\n}\nfunction $6da4c8ed3074c92b$export$520c40045967cb15(extent) {\n    let area = 0;\n    if (!$6da4c8ed3074c92b$export$dd1bc94b04021eeb(extent)) area = $6da4c8ed3074c92b$export$3c49c185de0c2bfc(extent) * $6da4c8ed3074c92b$export$c08559766941f856(extent);\n    return area;\n}\nfunction $6da4c8ed3074c92b$export$8d09f5e2e1bf560d(extent) {\n    return [\n        extent[0],\n        extent[1]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$e77c1cf70445e168(extent) {\n    return [\n        extent[2],\n        extent[1]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$c91255cadecfe081(extent) {\n    return [\n        (extent[0] + extent[2]) / 2,\n        (extent[1] + extent[3]) / 2\n    ];\n}\nfunction $6da4c8ed3074c92b$export$a1cfd206661d0801(extent, corner) {\n    let coordinate;\n    if (corner === \"bottom-left\") coordinate = $6da4c8ed3074c92b$export$8d09f5e2e1bf560d(extent);\n    else if (corner === \"bottom-right\") coordinate = $6da4c8ed3074c92b$export$e77c1cf70445e168(extent);\n    else if (corner === \"top-left\") coordinate = $6da4c8ed3074c92b$export$cb1538b07e6964ff(extent);\n    else if (corner === \"top-right\") coordinate = $6da4c8ed3074c92b$export$b84fa077c8b05295(extent);\n    else throw new Error(\"Invalid corner\");\n    return coordinate;\n}\nfunction $6da4c8ed3074c92b$export$7d6fa884b32a3751(extent1, extent2) {\n    const minX = Math.min(extent1[0], extent2[0]);\n    const minY = Math.min(extent1[1], extent2[1]);\n    const maxX = Math.max(extent1[2], extent2[2]);\n    const maxY = Math.max(extent1[3], extent2[3]);\n    return (maxX - minX) * (maxY - minY);\n}\nfunction $6da4c8ed3074c92b$export$13ba650faf8308(center, resolution, rotation, size, dest) {\n    const [x0, y0, x1, y1, x2, y2, x3, y3] = $6da4c8ed3074c92b$export$4b7a6fb4002cd6ac(center, resolution, rotation, size);\n    return $6da4c8ed3074c92b$export$958e3e1a02eac4b6(Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3), Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3), dest);\n}\nfunction $6da4c8ed3074c92b$export$4b7a6fb4002cd6ac(center, resolution, rotation, size) {\n    const dx = resolution * size[0] / 2;\n    const dy = resolution * size[1] / 2;\n    const cosRotation = Math.cos(rotation);\n    const sinRotation = Math.sin(rotation);\n    const xCos = dx * cosRotation;\n    const xSin = dx * sinRotation;\n    const yCos = dy * cosRotation;\n    const ySin = dy * sinRotation;\n    const x = center[0];\n    const y = center[1];\n    return [\n        x - xCos + ySin,\n        y - xSin - yCos,\n        x - xCos - ySin,\n        y - xSin + yCos,\n        x + xCos - ySin,\n        y + xSin + yCos,\n        x + xCos + ySin,\n        y + xSin - yCos,\n        x - xCos + ySin,\n        y - xSin - yCos\n    ];\n}\nfunction $6da4c8ed3074c92b$export$c08559766941f856(extent) {\n    return extent[3] - extent[1];\n}\nfunction $6da4c8ed3074c92b$export$f3fe0e9a60cde324(extent1, extent2) {\n    const intersection = $6da4c8ed3074c92b$export$72209efa88586d42(extent1, extent2);\n    return $6da4c8ed3074c92b$export$520c40045967cb15(intersection);\n}\nfunction $6da4c8ed3074c92b$export$72209efa88586d42(extent1, extent2, dest) {\n    const intersection = dest ? dest : $6da4c8ed3074c92b$export$fe201bb3bbe031e9();\n    if ($6da4c8ed3074c92b$export$7b0a31e10bbff018(extent1, extent2)) {\n        if (extent1[0] > extent2[0]) intersection[0] = extent1[0];\n        else intersection[0] = extent2[0];\n        if (extent1[1] > extent2[1]) intersection[1] = extent1[1];\n        else intersection[1] = extent2[1];\n        if (extent1[2] < extent2[2]) intersection[2] = extent1[2];\n        else intersection[2] = extent2[2];\n        if (extent1[3] < extent2[3]) intersection[3] = extent1[3];\n        else intersection[3] = extent2[3];\n    } else $6da4c8ed3074c92b$export$3e2152b047719fa1(intersection);\n    return intersection;\n}\nfunction $6da4c8ed3074c92b$export$1bc603050bd777b1(extent) {\n    return $6da4c8ed3074c92b$export$3c49c185de0c2bfc(extent) + $6da4c8ed3074c92b$export$c08559766941f856(extent);\n}\nfunction $6da4c8ed3074c92b$export$31b21d0167753bb4(extent) {\n    return [\n        extent[2] - extent[0],\n        extent[3] - extent[1]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$cb1538b07e6964ff(extent) {\n    return [\n        extent[0],\n        extent[3]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$b84fa077c8b05295(extent) {\n    return [\n        extent[2],\n        extent[3]\n    ];\n}\nfunction $6da4c8ed3074c92b$export$3c49c185de0c2bfc(extent) {\n    return extent[2] - extent[0];\n}\nfunction $6da4c8ed3074c92b$export$7b0a31e10bbff018(extent1, extent2) {\n    return extent1[0] <= extent2[2] && extent1[2] >= extent2[0] && extent1[1] <= extent2[3] && extent1[3] >= extent2[1];\n}\nfunction $6da4c8ed3074c92b$export$dd1bc94b04021eeb(extent) {\n    return extent[2] < extent[0] || extent[3] < extent[1];\n}\nfunction $6da4c8ed3074c92b$export$6a4fe494c558c238(extent, dest) {\n    if (dest) {\n        dest[0] = extent[0];\n        dest[1] = extent[1];\n        dest[2] = extent[2];\n        dest[3] = extent[3];\n        return dest;\n    }\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$80cbab86674143b6(extent, value) {\n    const deltaX = (extent[2] - extent[0]) / 2 * (value - 1);\n    const deltaY = (extent[3] - extent[1]) / 2 * (value - 1);\n    extent[0] -= deltaX;\n    extent[2] += deltaX;\n    extent[1] -= deltaY;\n    extent[3] += deltaY;\n}\nfunction $6da4c8ed3074c92b$export$a6a5a7a461419425(extent, start, end) {\n    let intersects = false;\n    const startRel = $6da4c8ed3074c92b$export$f97905ead28c61a8(extent, start);\n    const endRel = $6da4c8ed3074c92b$export$f97905ead28c61a8(extent, end);\n    if (startRel === (0, $dab4245bc22b806c$export$2e2bcd8739ae039).INTERSECTING || endRel === (0, $dab4245bc22b806c$export$2e2bcd8739ae039).INTERSECTING) intersects = true;\n    else {\n        const minX = extent[0];\n        const minY = extent[1];\n        const maxX = extent[2];\n        const maxY = extent[3];\n        const startX = start[0];\n        const startY = start[1];\n        const endX = end[0];\n        const endY = end[1];\n        const slope = (endY - startY) / (endX - startX);\n        let x, y;\n        if (!!(endRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).ABOVE) && !(startRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).ABOVE)) {\n            // potentially intersects top\n            x = endX - (endY - maxY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects && !!(endRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).RIGHT) && !(startRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).RIGHT)) {\n            // potentially intersects right\n            y = endY - (endX - maxX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n        if (!intersects && !!(endRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).BELOW) && !(startRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).BELOW)) {\n            // potentially intersects bottom\n            x = endX - (endY - minY) / slope;\n            intersects = x >= minX && x <= maxX;\n        }\n        if (!intersects && !!(endRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).LEFT) && !(startRel & (0, $dab4245bc22b806c$export$2e2bcd8739ae039).LEFT)) {\n            // potentially intersects left\n            y = endY - (endX - minX) * slope;\n            intersects = y >= minY && y <= maxY;\n        }\n    }\n    return intersects;\n}\nfunction $6da4c8ed3074c92b$export$9f9dcb98c894b623(extent, transformFn, dest, stops) {\n    if ($6da4c8ed3074c92b$export$dd1bc94b04021eeb(extent)) return $6da4c8ed3074c92b$export$3e2152b047719fa1(dest);\n    let coordinates = [];\n    if (stops > 1) {\n        const width = extent[2] - extent[0];\n        const height = extent[3] - extent[1];\n        for(let i = 0; i < stops; ++i)coordinates.push(extent[0] + width * i / stops, extent[1], extent[2], extent[1] + height * i / stops, extent[2] - width * i / stops, extent[3], extent[0], extent[3] - height * i / stops);\n    } else coordinates = [\n        extent[0],\n        extent[1],\n        extent[2],\n        extent[1],\n        extent[2],\n        extent[3],\n        extent[0],\n        extent[3]\n    ];\n    transformFn(coordinates, coordinates, 2);\n    const xs = [];\n    const ys = [];\n    for(let i = 0, l = coordinates.length; i < l; i += 2){\n        xs.push(coordinates[i]);\n        ys.push(coordinates[i + 1]);\n    }\n    return $6da4c8ed3074c92b$var$_boundingExtentXYs(xs, ys, dest);\n}\nfunction $6da4c8ed3074c92b$export$39a9ce3624977b84(extent, projection) {\n    const projectionExtent = projection.getExtent();\n    const center = $6da4c8ed3074c92b$export$c91255cadecfe081(extent);\n    if (projection.canWrapX() && (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])) {\n        const worldWidth = $6da4c8ed3074c92b$export$3c49c185de0c2bfc(projectionExtent);\n        const worldsAway = Math.floor((center[0] - projectionExtent[0]) / worldWidth);\n        const offset = worldsAway * worldWidth;\n        extent[0] -= offset;\n        extent[2] -= offset;\n    }\n    return extent;\n}\nfunction $6da4c8ed3074c92b$export$9031237f01de0947(extent, projection) {\n    if (projection.canWrapX()) {\n        const projectionExtent = projection.getExtent();\n        if (!isFinite(extent[0]) || !isFinite(extent[2])) return [\n            [\n                projectionExtent[0],\n                extent[1],\n                projectionExtent[2],\n                extent[3]\n            ]\n        ];\n        $6da4c8ed3074c92b$export$39a9ce3624977b84(extent, projection);\n        const worldWidth = $6da4c8ed3074c92b$export$3c49c185de0c2bfc(projectionExtent);\n        if ($6da4c8ed3074c92b$export$3c49c185de0c2bfc(extent) > worldWidth) // the extent wraps around on itself\n        return [\n            [\n                projectionExtent[0],\n                extent[1],\n                projectionExtent[2],\n                extent[3]\n            ]\n        ];\n        if (extent[0] < projectionExtent[0]) // the extent crosses the anti meridian, so it needs to be sliced\n        return [\n            [\n                extent[0] + worldWidth,\n                extent[1],\n                projectionExtent[2],\n                extent[3]\n            ],\n            [\n                projectionExtent[0],\n                extent[1],\n                extent[2],\n                extent[3]\n            ]\n        ];\n        if (extent[2] > projectionExtent[2]) // the extent crosses the anti meridian, so it needs to be sliced\n        return [\n            [\n                extent[0],\n                extent[1],\n                projectionExtent[2],\n                extent[3]\n            ],\n            [\n                projectionExtent[0],\n                extent[1],\n                extent[2] - worldWidth,\n                extent[3]\n            ]\n        ];\n    }\n    return [\n        extent\n    ];\n}\n\n\n/**\n * @module ol/style/IconImageCache\n */ /**\n * @module ol/color\n */ /**\n * @module ol/math\n */ /**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */ function $6b000a049d919fe5$export$7d15b64cf5a3a4c4(value, min, max) {\n    return Math.min(Math.max(value, min), max);\n}\nfunction $6b000a049d919fe5$export$251bb0a9cef172e6(x, y, x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    if (dx !== 0 || dy !== 0) {\n        const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) {\n            x1 = x2;\n            y1 = y2;\n        } else if (t > 0) {\n            x1 += dx * t;\n            y1 += dy * t;\n        }\n    }\n    return $6b000a049d919fe5$export$88e6ebb4fe54f538(x, y, x1, y1);\n}\nfunction $6b000a049d919fe5$export$88e6ebb4fe54f538(x1, y1, x2, y2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    return dx * dx + dy * dy;\n}\nfunction $6b000a049d919fe5$export$8240f01c446270e6(mat) {\n    const n = mat.length;\n    for(let i = 0; i < n; i++){\n        // Find max in the i-th column (ignoring i - 1 first rows)\n        let maxRow = i;\n        let maxEl = Math.abs(mat[i][i]);\n        for(let r = i + 1; r < n; r++){\n            const absValue = Math.abs(mat[r][i]);\n            if (absValue > maxEl) {\n                maxEl = absValue;\n                maxRow = r;\n            }\n        }\n        if (maxEl === 0) return null; // matrix is singular\n        // Swap max row with i-th (current) row\n        const tmp = mat[maxRow];\n        mat[maxRow] = mat[i];\n        mat[i] = tmp;\n        // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n        for(let j = i + 1; j < n; j++){\n            const coef = -mat[j][i] / mat[i][i];\n            for(let k = i; k < n + 1; k++)if (i == k) mat[j][k] = 0;\n            else mat[j][k] += coef * mat[i][k];\n        }\n    }\n    // Solve Ax=b for upper triangular matrix A (mat)\n    const x = new Array(n);\n    for(let l = n - 1; l >= 0; l--){\n        x[l] = mat[l][n] / mat[l][l];\n        for(let m = l - 1; m >= 0; m--)mat[m][n] -= mat[m][l] * x[l];\n    }\n    return x;\n}\nfunction $6b000a049d919fe5$export$56cb859c01fa134d(angleInRadians) {\n    return angleInRadians * 180 / Math.PI;\n}\nfunction $6b000a049d919fe5$export$cba01ba138429a1d(angleInDegrees) {\n    return angleInDegrees * Math.PI / 180;\n}\nfunction $6b000a049d919fe5$export$ba467bec01d66def(a, b) {\n    const r = a % b;\n    return r * b < 0 ? r + b : r;\n}\nfunction $6b000a049d919fe5$export$3a89f8d6f6bf6c9f(a, b, x) {\n    return a + x * (b - a);\n}\nfunction $6b000a049d919fe5$export$a81f732198733497(n, decimals) {\n    const factor = Math.pow(10, decimals);\n    return Math.round(n * factor) / factor;\n}\nfunction $6b000a049d919fe5$export$2077e0241d6afd3c(n, decimals) {\n    return Math.round($6b000a049d919fe5$export$a81f732198733497(n, decimals));\n}\nfunction $6b000a049d919fe5$export$a3fe094919f356fd(n, decimals) {\n    return Math.floor($6b000a049d919fe5$export$a81f732198733497(n, decimals));\n}\nfunction $6b000a049d919fe5$export$803ce6b71a0a94b2(n, decimals) {\n    return Math.ceil($6b000a049d919fe5$export$a81f732198733497(n, decimals));\n}\n\n\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */ /**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */ const $322346e1ff7894ca$var$HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */ const $322346e1ff7894ca$var$NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\nfunction $322346e1ff7894ca$export$590567be997858b6(color) {\n    if (typeof color === \"string\") return color;\n    return $322346e1ff7894ca$export$f84e8e69fd4488a5(color);\n}\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */ function $322346e1ff7894ca$var$fromNamed(color) {\n    const el = document.createElement(\"div\");\n    el.style.color = color;\n    if (el.style.color !== \"\") {\n        document.body.appendChild(el);\n        const rgb = getComputedStyle(el).color;\n        document.body.removeChild(el);\n        return rgb;\n    }\n    return \"\";\n}\nconst $322346e1ff7894ca$export$3004f64547af360e = function() {\n    // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n    // semantics, whenever the cache grows too large we simply delete an\n    // arbitrary 25% of the entries.\n    /**\n   * @const\n   * @type {number}\n   */ const MAX_CACHE_SIZE = 1024;\n    /**\n   * @type {Object<string, Color>}\n   */ const cache = {};\n    /**\n   * @type {number}\n   */ let cacheSize = 0;\n    return(/**\n     * @param {string} s String.\n     * @return {Color} Color.\n     */ function(s) {\n        let color;\n        if (cache.hasOwnProperty(s)) color = cache[s];\n        else {\n            if (cacheSize >= MAX_CACHE_SIZE) {\n                let i = 0;\n                for(const key in cache)if ((i++ & 3) === 0) {\n                    delete cache[key];\n                    --cacheSize;\n                }\n            }\n            color = $322346e1ff7894ca$var$fromStringInternal_(s);\n            cache[s] = color;\n            ++cacheSize;\n        }\n        return color;\n    });\n}();\nfunction $322346e1ff7894ca$export$75093a47a9fa838d(color) {\n    if (Array.isArray(color)) return color;\n    return $322346e1ff7894ca$export$3004f64547af360e(color);\n}\n/**\n * @param {string} s String.\n * @private\n * @return {Color} Color.\n */ function $322346e1ff7894ca$var$fromStringInternal_(s) {\n    let r, g, b, a, color;\n    if ($322346e1ff7894ca$var$NAMED_COLOR_RE_.exec(s)) s = $322346e1ff7894ca$var$fromNamed(s);\n    if ($322346e1ff7894ca$var$HEX_COLOR_RE_.exec(s)) {\n        // hex\n        const n = s.length - 1; // number of hex digits\n        let d; // number of digits per channel\n        if (n <= 4) d = 1;\n        else d = 2;\n        const hasAlpha = n === 4 || n === 8;\n        r = parseInt(s.substr(1 + 0 * d, d), 16);\n        g = parseInt(s.substr(1 + 1 * d, d), 16);\n        b = parseInt(s.substr(1 + 2 * d, d), 16);\n        if (hasAlpha) a = parseInt(s.substr(1 + 3 * d, d), 16);\n        else a = 255;\n        if (d == 1) {\n            r = (r << 4) + r;\n            g = (g << 4) + g;\n            b = (b << 4) + b;\n            if (hasAlpha) a = (a << 4) + a;\n        }\n        color = [\n            r,\n            g,\n            b,\n            a / 255\n        ];\n    } else if (s.startsWith(\"rgba(\")) {\n        // rgba()\n        color = s.slice(5, -1).split(\",\").map(Number);\n        $322346e1ff7894ca$export$a3295358bff77e(color);\n    } else if (s.startsWith(\"rgb(\")) {\n        // rgb()\n        color = s.slice(4, -1).split(\",\").map(Number);\n        color.push(1);\n        $322346e1ff7894ca$export$a3295358bff77e(color);\n    } else throw new Error(\"Invalid color\");\n    return color;\n}\nfunction $322346e1ff7894ca$export$a3295358bff77e(color) {\n    color[0] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(color[0] + 0.5 | 0, 0, 255);\n    color[1] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(color[1] + 0.5 | 0, 0, 255);\n    color[2] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(color[2] + 0.5 | 0, 0, 255);\n    color[3] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(color[3], 0, 1);\n    return color;\n}\nfunction $322346e1ff7894ca$export$f84e8e69fd4488a5(color) {\n    let r = color[0];\n    if (r != (r | 0)) r = r + 0.5 | 0;\n    let g = color[1];\n    if (g != (g | 0)) g = g + 0.5 | 0;\n    let b = color[2];\n    if (b != (b | 0)) b = b + 0.5 | 0;\n    const a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;\n    return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";\n}\nfunction $322346e1ff7894ca$export$40dd713d7775a0b1(s) {\n    if ($322346e1ff7894ca$var$NAMED_COLOR_RE_.test(s)) s = $322346e1ff7894ca$var$fromNamed(s);\n    return $322346e1ff7894ca$var$HEX_COLOR_RE_.test(s) || s.startsWith(\"rgba(\") || s.startsWith(\"rgb(\");\n}\n\n\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.\n */ class $f351daabfe6e2d22$var$IconImageCache {\n    constructor(){\n        /**\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\n     * @private\n     */ this.cache_ = {};\n        /**\n     * @type {number}\n     * @private\n     */ this.cacheSize_ = 0;\n        /**\n     * @type {number}\n     * @private\n     */ this.maxCacheSize_ = 32;\n    }\n    /**\n   * FIXME empty description for jsdoc\n   */ clear() {\n        this.cache_ = {};\n        this.cacheSize_ = 0;\n    }\n    /**\n   * @return {boolean} Can expire cache.\n   */ canExpireCache() {\n        return this.cacheSize_ > this.maxCacheSize_;\n    }\n    /**\n   * FIXME empty description for jsdoc\n   */ expire() {\n        if (this.canExpireCache()) {\n            let i = 0;\n            for(const key in this.cache_){\n                const iconImage = this.cache_[key];\n                if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n                    delete this.cache_[key];\n                    --this.cacheSize_;\n                }\n            }\n        }\n    }\n    /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @return {import(\"./IconImage.js\").default} Icon image.\n   */ get(src, crossOrigin, color) {\n        const key = $f351daabfe6e2d22$var$getKey(src, crossOrigin, color);\n        return key in this.cache_ ? this.cache_[key] : null;\n    }\n    /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n   */ set(src, crossOrigin, color, iconImage) {\n        const key = $f351daabfe6e2d22$var$getKey(src, crossOrigin, color);\n        this.cache_[key] = iconImage;\n        ++this.cacheSize_;\n    }\n    /**\n   * Set the cache size of the icon cache. Default is `32`. Change this value when\n   * your map uses more than 32 different icon images and you are not caching icon\n   * styles on the application level.\n   * @param {number} maxCacheSize Cache max size.\n   * @api\n   */ setSize(maxCacheSize) {\n        this.maxCacheSize_ = maxCacheSize;\n        this.expire();\n    }\n}\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */ function $f351daabfe6e2d22$var$getKey(src, crossOrigin, color) {\n    const colorString = color ? (0, $322346e1ff7894ca$export$590567be997858b6)(color) : \"null\";\n    return crossOrigin + \":\" + src + \":\" + colorString;\n}\nvar $f351daabfe6e2d22$export$2e2bcd8739ae039 = $f351daabfe6e2d22$var$IconImageCache;\nconst $f351daabfe6e2d22$export$747ccdf771a87ab8 = new $f351daabfe6e2d22$var$IconImageCache();\n\n\n/**\n * @module ol/layer/Layer\n */ /**\n * @module ol/layer/Base\n */ \n/**\n * @module ol/layer/Property\n */ /**\n * @enum {string}\n */ var $f6d1853b3fcae320$export$2e2bcd8739ae039 = {\n    OPACITY: \"opacity\",\n    VISIBLE: \"visible\",\n    EXTENT: \"extent\",\n    Z_INDEX: \"zIndex\",\n    MAX_RESOLUTION: \"maxResolution\",\n    MIN_RESOLUTION: \"minResolution\",\n    MAX_ZOOM: \"maxZoom\",\n    MIN_ZOOM: \"minZoom\",\n    SOURCE: \"source\",\n    MAP: \"map\"\n};\n\n\n\n\n\n/**\n * A css color, or a function called with a view resolution returning a css color.\n *\n * @typedef {string|function(number):string} BackgroundColor\n * @api\n */ /**\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\n */ /***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\n */ /**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number | undefined} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */ /**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */ class $57c5f0299cb9b82f$var$BaseLayer extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options Layer options.\n   */ constructor(options){\n        super();\n        /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {BaseLayerOnSignature<void>}\n     */ this.un;\n        /**\n     * @type {BackgroundColor|false}\n     * @private\n     */ this.background_ = options.background;\n        /**\n     * @type {Object<string, *>}\n     */ const properties = Object.assign({}, options);\n        if (typeof options.properties === \"object\") {\n            delete properties.properties;\n            Object.assign(properties, options.properties);\n        }\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).OPACITY] = options.opacity !== undefined ? options.opacity : 1;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).OPACITY] === \"number\", \"Layer opacity must be a number\");\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).VISIBLE] = options.visible !== undefined ? options.visible : true;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).Z_INDEX] = options.zIndex;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_RESOLUTION] = options.maxResolution !== undefined ? options.maxResolution : Infinity;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_RESOLUTION] = options.minResolution !== undefined ? options.minResolution : 0;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_ZOOM] = options.minZoom !== undefined ? options.minZoom : -Infinity;\n        properties[(0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_ZOOM] = options.maxZoom !== undefined ? options.maxZoom : Infinity;\n        /**\n     * @type {string}\n     * @private\n     */ this.className_ = properties.className !== undefined ? properties.className : \"ol-layer\";\n        delete properties.className;\n        this.setProperties(properties);\n        /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */ this.state_ = null;\n    }\n    /**\n   * Get the background for this layer.\n   * @return {BackgroundColor|false} Layer background.\n   */ getBackground() {\n        return this.background_;\n    }\n    /**\n   * @return {string} CSS class name.\n   */ getClassName() {\n        return this.className_;\n    }\n    /**\n   * This method is not meant to be called by layers or layer renderers because the state\n   * is incorrect if the layer is included in a layer group.\n   *\n   * @param {boolean} [managed] Layer is managed.\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */ getLayerState(managed) {\n        /** @type {import(\"./Layer.js\").State} */ const state = this.state_ || /** @type {?} */ {\n            layer: this,\n            managed: managed === undefined ? true : managed\n        };\n        const zIndex = this.getZIndex();\n        state.opacity = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n        state.visible = this.getVisible();\n        state.extent = this.getExtent();\n        state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n        state.maxResolution = this.getMaxResolution();\n        state.minResolution = Math.max(this.getMinResolution(), 0);\n        state.minZoom = this.getMinZoom();\n        state.maxZoom = this.getMaxZoom();\n        this.state_ = state;\n        return state;\n    }\n    /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */ getLayersArray(array) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */ getLayerStatesArray(states) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */ getExtent() {\n        return /** @type {import(\"../extent.js\").Extent|undefined} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).EXTENT);\n    }\n    /**\n   * Return the maximum resolution of the layer. Returns Infinity if\n   * the layer has no maximum resolution set.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */ getMaxResolution() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_RESOLUTION);\n    }\n    /**\n   * Return the minimum resolution of the layer. Returns 0 if\n   * the layer has no minimum resolution set.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */ getMinResolution() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_RESOLUTION);\n    }\n    /**\n   * Return the minimum zoom level of the layer. Returns -Infinity if\n   * the layer has no minimum zoom set.\n   * @return {number} The minimum zoom level of the layer.\n   * @observable\n   * @api\n   */ getMinZoom() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_ZOOM);\n    }\n    /**\n   * Return the maximum zoom level of the layer. Returns Infinity if\n   * the layer has no maximum zoom set.\n   * @return {number} The maximum zoom level of the layer.\n   * @observable\n   * @api\n   */ getMaxZoom() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_ZOOM);\n    }\n    /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */ getOpacity() {\n        return /** @type {number} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).OPACITY);\n    }\n    /**\n   * @abstract\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */ getSourceState() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Return the value of this layer's `visible` property. To find out whether the layer\n   * is visible on a map, use `isVisible()` instead.\n   * @return {boolean} The value of the `visible` property of the layer.\n   * @observable\n   * @api\n   */ getVisible() {\n        return /** @type {boolean} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).VISIBLE);\n    }\n    /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. Returns undefined if the layer is unmanaged.\n   * @return {number|undefined} The Z-index of the layer.\n   * @observable\n   * @api\n   */ getZIndex() {\n        return /** @type {number|undefined} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).Z_INDEX);\n    }\n    /**\n   * Sets the background color.\n   * @param {BackgroundColor} [background] Background color.\n   */ setBackground(background) {\n        this.background_ = background;\n        this.changed();\n    }\n    /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */ setExtent(extent) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).EXTENT, extent);\n    }\n    /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */ setMaxResolution(maxResolution) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_RESOLUTION, maxResolution);\n    }\n    /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */ setMinResolution(minResolution) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_RESOLUTION, minResolution);\n    }\n    /**\n   * Set the maximum zoom (exclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} maxZoom The maximum zoom of the layer.\n   * @observable\n   * @api\n   */ setMaxZoom(maxZoom) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAX_ZOOM, maxZoom);\n    }\n    /**\n   * Set the minimum zoom (inclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} minZoom The minimum zoom of the layer.\n   * @observable\n   * @api\n   */ setMinZoom(minZoom) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MIN_ZOOM, minZoom);\n    }\n    /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */ setOpacity(opacity) {\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof opacity === \"number\", \"Layer opacity must be a number\");\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).OPACITY, opacity);\n    }\n    /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */ setVisible(visible) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).VISIBLE, visible);\n    }\n    /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */ setZIndex(zindex) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).Z_INDEX, zindex);\n    }\n    /**\n   * Clean up.\n   */ disposeInternal() {\n        if (this.state_) {\n            this.state_.layer = null;\n            this.state_ = null;\n        }\n        super.disposeInternal();\n    }\n}\nvar $57c5f0299cb9b82f$export$2e2bcd8739ae039 = $57c5f0299cb9b82f$var$BaseLayer;\n\n\n\n\n/**\n * @module ol/render/EventType\n */ /**\n * @enum {string}\n */ var $f5e92a4d985a2824$export$2e2bcd8739ae039 /**\n * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes\n */  /**\n * @typedef {'postrender'|'prerender'} LayerRenderEventTypes\n */  = {\n    /**\n   * Triggered before a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#prerender\n   * @api\n   */ PRERENDER: \"prerender\",\n    /**\n   * Triggered after a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#postrender\n   * @api\n   */ POSTRENDER: \"postrender\",\n    /**\n   * Triggered before layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#precompose\n   * @api\n   */ PRECOMPOSE: \"precompose\",\n    /**\n   * Triggered after layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#postcompose\n   * @api\n   */ POSTCOMPOSE: \"postcompose\",\n    /**\n   * Triggered when rendering is complete, i.e. all sources and tiles have\n   * finished loading for the current viewport, and all tiles are faded in.\n   * The event object will not have a `context` set.\n   * @event module:ol/render/Event~RenderEvent#rendercomplete\n   * @api\n   */ RENDERCOMPLETE: \"rendercomplete\"\n};\n\n\n/**\n * @module ol/View\n */ \n/**\n * @module ol/ViewHint\n */ /**\n * @enum {number}\n */ var $7d362782b4ccb93d$export$2e2bcd8739ae039 = {\n    ANIMATING: 0,\n    INTERACTING: 1\n};\n\n\n/**\n * @module ol/ViewProperty\n */ /**\n * @enum {string}\n */ var $d35baefbe89be4c5$export$2e2bcd8739ae039 = {\n    CENTER: \"center\",\n    RESOLUTION: \"resolution\",\n    ROTATION: \"rotation\"\n};\n\n\n/**\n * @module ol/tilegrid/common\n */ /**\n * Default maximum zoom for default tile grids.\n * @type {number}\n */ const $57cd8651d88957a0$export$e98a216cdcc847dc = 42;\nconst $57cd8651d88957a0$export$6b8cb5cd370bd90c = 256;\n\n\n/**\n * @module ol/proj\n */ /**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection~Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */ \n/**\n * @module ol/proj/epsg3857\n */ /**\n * @module ol/proj/Projection\n */ /**\n * @module ol/proj/Units\n */ /**\n * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units\n * Projection units.\n */ /**\n * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt\n * @type {Object<number, Units>}\n */ const $03edbd434a9e6608$var$unitByCode = {\n    \"9001\": \"m\",\n    \"9002\": \"ft\",\n    \"9003\": \"us-ft\",\n    \"9101\": \"radians\",\n    \"9102\": \"degrees\"\n};\nfunction $03edbd434a9e6608$export$7f58726df3255edc(code) {\n    return $03edbd434a9e6608$var$unitByCode[code];\n}\nconst $03edbd434a9e6608$export$1482081eec883108 = {\n    // use the radius of the Normal sphere\n    \"radians\": 6370997 / (2 * Math.PI),\n    \"degrees\": 2 * Math.PI * 6370997 / 360,\n    \"ft\": 0.3048,\n    \"m\": 1,\n    \"us-ft\": 1200 / 3937\n};\n\n\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution} function will be used.\n */ /**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4.register} function.\n *\n * @api\n */ class $6dc418afeec7068a$var$Projection {\n    /**\n   * @param {Options} options Projection options.\n   */ constructor(options){\n        /**\n     * @private\n     * @type {string}\n     */ this.code_ = options.code;\n        /**\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\n     * tile.\n     * @private\n     * @type {import(\"./Units.js\").Units}\n     */ this.units_ = /** @type {import(\"./Units.js\").Units} */ options.units;\n        /**\n     * Validity extent of the projection in projected coordinates. For projections\n     * with `TILE_PIXELS` units, this is the extent of the tile in\n     * tile pixel space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.extent_ = options.extent !== undefined ? options.extent : null;\n        /**\n     * Extent of the world in EPSG:4326. For projections with\n     * `TILE_PIXELS` units, this is the extent of the tile in\n     * projected coordinate space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.worldExtent_ = options.worldExtent !== undefined ? options.worldExtent : null;\n        /**\n     * @private\n     * @type {string}\n     */ this.axisOrientation_ = options.axisOrientation !== undefined ? options.axisOrientation : \"enu\";\n        /**\n     * @private\n     * @type {boolean}\n     */ this.global_ = options.global !== undefined ? options.global : false;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.canWrapX_ = !!(this.global_ && this.extent_);\n        /**\n     * @private\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n     */ this.getPointResolutionFunc_ = options.getPointResolution;\n        /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */ this.defaultTileGrid_ = null;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.metersPerUnit_ = options.metersPerUnit;\n    }\n    /**\n   * @return {boolean} The projection is suitable for wrapping the x-axis\n   */ canWrapX() {\n        return this.canWrapX_;\n    }\n    /**\n   * Get the code for this projection, e.g. 'EPSG:4326'.\n   * @return {string} Code.\n   * @api\n   */ getCode() {\n        return this.code_;\n    }\n    /**\n   * Get the validity extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */ getExtent() {\n        return this.extent_;\n    }\n    /**\n   * Get the units of this projection.\n   * @return {import(\"./Units.js\").Units} Units.\n   * @api\n   */ getUnits() {\n        return this.units_;\n    }\n    /**\n   * Get the amount of meters per unit of this projection.  If the projection is\n   * not configured with `metersPerUnit` or a units identifier, the return is\n   * `undefined`.\n   * @return {number|undefined} Meters.\n   * @api\n   */ getMetersPerUnit() {\n        return this.metersPerUnit_ || (0, $03edbd434a9e6608$export$1482081eec883108)[this.units_];\n    }\n    /**\n   * Get the world extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */ getWorldExtent() {\n        return this.worldExtent_;\n    }\n    /**\n   * Get the axis orientation of this projection.\n   * Example values are:\n   * enu - the default easting, northing, elevation.\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n   *     or south orientated transverse mercator.\n   * wnu - westing, northing, up - some planetary coordinate systems have\n   *     \"west positive\" coordinate systems\n   * @return {string} Axis orientation.\n   * @api\n   */ getAxisOrientation() {\n        return this.axisOrientation_;\n    }\n    /**\n   * Is this projection a global projection which spans the whole world?\n   * @return {boolean} Whether the projection is global.\n   * @api\n   */ isGlobal() {\n        return this.global_;\n    }\n    /**\n   * Set if the projection is a global projection which spans the whole world\n   * @param {boolean} global Whether the projection is global.\n   * @api\n   */ setGlobal(global) {\n        this.global_ = global;\n        this.canWrapX_ = !!(global && this.extent_);\n    }\n    /**\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n   */ getDefaultTileGrid() {\n        return this.defaultTileGrid_;\n    }\n    /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n   */ setDefaultTileGrid(tileGrid) {\n        this.defaultTileGrid_ = tileGrid;\n    }\n    /**\n   * Set the validity extent for this projection.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */ setExtent(extent) {\n        this.extent_ = extent;\n        this.canWrapX_ = !!(this.global_ && extent);\n    }\n    /**\n   * Set the world extent for this projection.\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\n   *     [minlon, minlat, maxlon, maxlat].\n   * @api\n   */ setWorldExtent(worldExtent) {\n        this.worldExtent_ = worldExtent;\n    }\n    /**\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n   * for this projection.\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n   * @api\n   */ setGetPointResolution(func) {\n        this.getPointResolutionFunc_ = func;\n    }\n    /**\n   * Get the custom point resolution function for this projection (if set).\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n   * resolution function (if set).\n   */ getPointResolutionFunc() {\n        return this.getPointResolutionFunc_;\n    }\n}\nvar $6dc418afeec7068a$export$2e2bcd8739ae039 = $6dc418afeec7068a$var$Projection;\n\n\nconst $84ad988f04807ab1$export$2d2c9be8b5b863f = 6378137;\nconst $84ad988f04807ab1$export$f3928063e5e96d35 = Math.PI * $84ad988f04807ab1$export$2d2c9be8b5b863f;\nconst $84ad988f04807ab1$export$21e6da8a7375dfe8 = [\n    -$84ad988f04807ab1$export$f3928063e5e96d35,\n    -$84ad988f04807ab1$export$f3928063e5e96d35,\n    $84ad988f04807ab1$export$f3928063e5e96d35,\n    $84ad988f04807ab1$export$f3928063e5e96d35\n];\nconst $84ad988f04807ab1$export$ae9d6ed80df710e5 = [\n    -180,\n    -85,\n    180,\n    85\n];\nconst $84ad988f04807ab1$export$d26945d1ad52feeb = $84ad988f04807ab1$export$2d2c9be8b5b863f * Math.log(Math.tan(Math.PI / 2));\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */ class $84ad988f04807ab1$var$EPSG3857Projection extends (0, $6dc418afeec7068a$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} code Code.\n   */ constructor(code){\n        super({\n            code: code,\n            units: \"m\",\n            extent: $84ad988f04807ab1$export$21e6da8a7375dfe8,\n            global: true,\n            worldExtent: $84ad988f04807ab1$export$ae9d6ed80df710e5,\n            getPointResolution: function(resolution, point) {\n                return resolution / Math.cosh(point[1] / $84ad988f04807ab1$export$2d2c9be8b5b863f);\n            }\n        });\n    }\n}\nconst $84ad988f04807ab1$export$b508d7ad9a891c1b = [\n    new $84ad988f04807ab1$var$EPSG3857Projection(\"EPSG:3857\"),\n    new $84ad988f04807ab1$var$EPSG3857Projection(\"EPSG:102100\"),\n    new $84ad988f04807ab1$var$EPSG3857Projection(\"EPSG:102113\"),\n    new $84ad988f04807ab1$var$EPSG3857Projection(\"EPSG:900913\"),\n    new $84ad988f04807ab1$var$EPSG3857Projection(\"http://www.opengis.net/def/crs/EPSG/0/3857\"),\n    new $84ad988f04807ab1$var$EPSG3857Projection(\"http://www.opengis.net/gml/srs/epsg.xml#3857\")\n];\nfunction $84ad988f04807ab1$export$1ff8bb36c0983070(input, output, dimension) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    if (output === undefined) {\n        if (dimension > 2) // preserve values beyond second dimension\n        output = input.slice();\n        else output = new Array(length);\n    }\n    for(let i = 0; i < length; i += dimension){\n        output[i] = $84ad988f04807ab1$export$f3928063e5e96d35 * input[i] / 180;\n        let y = $84ad988f04807ab1$export$2d2c9be8b5b863f * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));\n        if (y > $84ad988f04807ab1$export$d26945d1ad52feeb) y = $84ad988f04807ab1$export$d26945d1ad52feeb;\n        else if (y < -$84ad988f04807ab1$export$d26945d1ad52feeb) y = -$84ad988f04807ab1$export$d26945d1ad52feeb;\n        output[i + 1] = y;\n    }\n    return output;\n}\nfunction $84ad988f04807ab1$export$8c71322ec28ed6b4(input, output, dimension) {\n    const length = input.length;\n    dimension = dimension > 1 ? dimension : 2;\n    if (output === undefined) {\n        if (dimension > 2) // preserve values beyond second dimension\n        output = input.slice();\n        else output = new Array(length);\n    }\n    for(let i = 0; i < length; i += dimension){\n        output[i] = 180 * input[i] / $84ad988f04807ab1$export$f3928063e5e96d35;\n        output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / $84ad988f04807ab1$export$2d2c9be8b5b863f)) / Math.PI - 90;\n    }\n    return output;\n}\n\n\n/**\n * @module ol/proj/epsg4326\n */ \nconst $b58ae362632b32c5$export$2d2c9be8b5b863f = 6378137;\nconst $b58ae362632b32c5$export$21e6da8a7375dfe8 = [\n    -180,\n    -90,\n    180,\n    90\n];\nconst $b58ae362632b32c5$export$1482081eec883108 = Math.PI * $b58ae362632b32c5$export$2d2c9be8b5b863f / 180;\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */ class $b58ae362632b32c5$var$EPSG4326Projection extends (0, $6dc418afeec7068a$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} code Code.\n   * @param {string} [axisOrientation] Axis orientation.\n   */ constructor(code, axisOrientation){\n        super({\n            code: code,\n            units: \"degrees\",\n            extent: $b58ae362632b32c5$export$21e6da8a7375dfe8,\n            axisOrientation: axisOrientation,\n            global: true,\n            metersPerUnit: $b58ae362632b32c5$export$1482081eec883108,\n            worldExtent: $b58ae362632b32c5$export$21e6da8a7375dfe8\n        });\n    }\n}\nconst $b58ae362632b32c5$export$b508d7ad9a891c1b = [\n    new $b58ae362632b32c5$var$EPSG4326Projection(\"CRS:84\"),\n    new $b58ae362632b32c5$var$EPSG4326Projection(\"EPSG:4326\", \"neu\"),\n    new $b58ae362632b32c5$var$EPSG4326Projection(\"urn:ogc:def:crs:OGC:1.3:CRS84\"),\n    new $b58ae362632b32c5$var$EPSG4326Projection(\"urn:ogc:def:crs:OGC:2:84\"),\n    new $b58ae362632b32c5$var$EPSG4326Projection(\"http://www.opengis.net/def/crs/OGC/1.3/CRS84\"),\n    new $b58ae362632b32c5$var$EPSG4326Projection(\"http://www.opengis.net/gml/srs/epsg.xml#4326\", \"neu\"),\n    new $b58ae362632b32c5$var$EPSG4326Projection(\"http://www.opengis.net/def/crs/EPSG/0/4326\", \"neu\")\n];\n\n\n\n/**\n * @module ol/proj/projections\n */ /**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */ let $f5ec5c943d804ecb$var$cache = {};\nfunction $f5ec5c943d804ecb$export$42ffd38884aecdac() {\n    $f5ec5c943d804ecb$var$cache = {};\n}\nfunction $f5ec5c943d804ecb$export$3988ae62b71be9a3(code) {\n    return $f5ec5c943d804ecb$var$cache[code] || $f5ec5c943d804ecb$var$cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, \"EPSG:$3\")] || null;\n}\nfunction $f5ec5c943d804ecb$export$e16d8520af44a096(code, projection) {\n    $f5ec5c943d804ecb$var$cache[code] = projection;\n}\n\n\n/**\n * @module ol/proj/transforms\n */ \n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */ let $11b5dd198626e1de$var$transforms = {};\nfunction $11b5dd198626e1de$export$42ffd38884aecdac() {\n    $11b5dd198626e1de$var$transforms = {};\n}\nfunction $11b5dd198626e1de$export$e16d8520af44a096(source, destination, transformFn) {\n    const sourceCode = source.getCode();\n    const destinationCode = destination.getCode();\n    if (!(sourceCode in $11b5dd198626e1de$var$transforms)) $11b5dd198626e1de$var$transforms[sourceCode] = {};\n    $11b5dd198626e1de$var$transforms[sourceCode][destinationCode] = transformFn;\n}\nfunction $11b5dd198626e1de$export$cd7f480d6b8286c3(source, destination) {\n    const sourceCode = source.getCode();\n    const destinationCode = destination.getCode();\n    const transform = $11b5dd198626e1de$var$transforms[sourceCode][destinationCode];\n    delete $11b5dd198626e1de$var$transforms[sourceCode][destinationCode];\n    if ((0, $beaefe87199bb537$export$dd1bc94b04021eeb)($11b5dd198626e1de$var$transforms[sourceCode])) delete $11b5dd198626e1de$var$transforms[sourceCode];\n    return transform;\n}\nfunction $11b5dd198626e1de$export$3988ae62b71be9a3(sourceCode, destinationCode) {\n    let transform;\n    if (sourceCode in $11b5dd198626e1de$var$transforms && destinationCode in $11b5dd198626e1de$var$transforms[sourceCode]) transform = $11b5dd198626e1de$var$transforms[sourceCode][destinationCode];\n    return transform;\n}\n\n\n\n\n/**\n * @module ol/coordinate\n */ \n\n/**\n * @module ol/string\n */ /**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */ function $ff7180bdd45ebb19$export$24be126cb0a7bbeb(number, width, precision) {\n    const numberString = precision !== undefined ? number.toFixed(precision) : \"\" + number;\n    let decimal = numberString.indexOf(\".\");\n    decimal = decimal === -1 ? numberString.length : decimal;\n    return decimal > width ? numberString : new Array(1 + width - decimal).join(\"0\") + numberString;\n}\nfunction $ff7180bdd45ebb19$export$66e1c0999abad646(v1, v2) {\n    const s1 = (\"\" + v1).split(\".\");\n    const s2 = (\"\" + v2).split(\".\");\n    for(let i = 0; i < Math.max(s1.length, s2.length); i++){\n        const n1 = parseInt(s1[i] || \"0\", 10);\n        const n2 = parseInt(s2[i] || \"0\", 10);\n        if (n1 > n2) return 1;\n        if (n2 > n1) return -1;\n    }\n    return 0;\n}\n\n\nfunction $1bd0a226f9a16141$export$e16d8520af44a096(coordinate, delta) {\n    coordinate[0] += +delta[0];\n    coordinate[1] += +delta[1];\n    return coordinate;\n}\nfunction $1bd0a226f9a16141$export$cbe80a3fcd2b99b7(coordinate, circle) {\n    const r = circle.getRadius();\n    const center = circle.getCenter();\n    const x0 = center[0];\n    const y0 = center[1];\n    const x1 = coordinate[0];\n    const y1 = coordinate[1];\n    let dx = x1 - x0;\n    const dy = y1 - y0;\n    if (dx === 0 && dy === 0) dx = 1;\n    const d = Math.sqrt(dx * dx + dy * dy);\n    const x = x0 + r * dx / d;\n    const y = y0 + r * dy / d;\n    return [\n        x,\n        y\n    ];\n}\nfunction $1bd0a226f9a16141$export$18cdd31d17f97131(coordinate, segment) {\n    const x0 = coordinate[0];\n    const y0 = coordinate[1];\n    const start = segment[0];\n    const end = segment[1];\n    const x1 = start[0];\n    const y1 = start[1];\n    const x2 = end[0];\n    const y2 = end[1];\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const along = dx === 0 && dy === 0 ? 0 : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n    let x, y;\n    if (along <= 0) {\n        x = x1;\n        y = y1;\n    } else if (along >= 1) {\n        x = x2;\n        y = y2;\n    } else {\n        x = x1 + along * dx;\n        y = y1 + along * dy;\n    }\n    return [\n        x,\n        y\n    ];\n}\nfunction $1bd0a226f9a16141$export$35ad6765fe262b6(fractionDigits) {\n    return(/**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */ function(coordinate) {\n        return $1bd0a226f9a16141$export$9ff8f16060979e0a(coordinate, fractionDigits);\n    });\n}\nfunction $1bd0a226f9a16141$export$6eb0ac5f024d8590(hemispheres, degrees, fractionDigits) {\n    const normalizedDegrees = (0, $6b000a049d919fe5$export$ba467bec01d66def)(degrees + 180, 360) - 180;\n    const x = Math.abs(3600 * normalizedDegrees);\n    const decimals = fractionDigits || 0;\n    let deg = Math.floor(x / 3600);\n    let min = Math.floor((x - deg * 3600) / 60);\n    let sec = (0, $6b000a049d919fe5$export$a81f732198733497)(x - deg * 3600 - min * 60, decimals);\n    if (sec >= 60) {\n        sec = 0;\n        min += 1;\n    }\n    if (min >= 60) {\n        min = 0;\n        deg += 1;\n    }\n    let hdms = deg + \"\\xb0\";\n    if (min !== 0 || sec !== 0) hdms += \" \" + (0, $ff7180bdd45ebb19$export$24be126cb0a7bbeb)(min, 2) + \"′\";\n    if (sec !== 0) hdms += \" \" + (0, $ff7180bdd45ebb19$export$24be126cb0a7bbeb)(sec, 2, decimals) + \"″\";\n    if (normalizedDegrees !== 0) hdms += \" \" + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n    return hdms;\n}\nfunction $1bd0a226f9a16141$export$d9468344d3651243(coordinate, template, fractionDigits) {\n    if (coordinate) return template.replace(\"{x}\", coordinate[0].toFixed(fractionDigits)).replace(\"{y}\", coordinate[1].toFixed(fractionDigits));\n    return \"\";\n}\nfunction $1bd0a226f9a16141$export$e9bab7fafb253603(coordinate1, coordinate2) {\n    let equals = true;\n    for(let i = coordinate1.length - 1; i >= 0; --i)if (coordinate1[i] != coordinate2[i]) {\n        equals = false;\n        break;\n    }\n    return equals;\n}\nfunction $1bd0a226f9a16141$export$bb628a54ab399bc9(coordinate, angle) {\n    const cosAngle = Math.cos(angle);\n    const sinAngle = Math.sin(angle);\n    const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    coordinate[0] = x;\n    coordinate[1] = y;\n    return coordinate;\n}\nfunction $1bd0a226f9a16141$export$dcdf75081b88279d(coordinate, scale) {\n    coordinate[0] *= scale;\n    coordinate[1] *= scale;\n    return coordinate;\n}\nfunction $1bd0a226f9a16141$export$88e6ebb4fe54f538(coord1, coord2) {\n    const dx = coord1[0] - coord2[0];\n    const dy = coord1[1] - coord2[1];\n    return dx * dx + dy * dy;\n}\nfunction $1bd0a226f9a16141$export$9f17032d917177de(coord1, coord2) {\n    return Math.sqrt($1bd0a226f9a16141$export$88e6ebb4fe54f538(coord1, coord2));\n}\nfunction $1bd0a226f9a16141$export$6985570514055196(coordinate, segment) {\n    return $1bd0a226f9a16141$export$88e6ebb4fe54f538(coordinate, $1bd0a226f9a16141$export$18cdd31d17f97131(coordinate, segment));\n}\nfunction $1bd0a226f9a16141$export$c883fd238161f841(coordinate, fractionDigits) {\n    if (coordinate) return $1bd0a226f9a16141$export$6eb0ac5f024d8590(\"NS\", coordinate[1], fractionDigits) + \" \" + $1bd0a226f9a16141$export$6eb0ac5f024d8590(\"EW\", coordinate[0], fractionDigits);\n    return \"\";\n}\nfunction $1bd0a226f9a16141$export$9ff8f16060979e0a(coordinate, fractionDigits) {\n    return $1bd0a226f9a16141$export$d9468344d3651243(coordinate, \"{x}, {y}\", fractionDigits);\n}\nfunction $1bd0a226f9a16141$export$39a9ce3624977b84(coordinate, projection) {\n    if (projection.canWrapX()) {\n        const worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projection.getExtent());\n        const worldsAway = $1bd0a226f9a16141$export$24e2b27d1ff0c1d5(coordinate, projection, worldWidth);\n        if (worldsAway) coordinate[0] -= worldsAway * worldWidth;\n    }\n    return coordinate;\n}\nfunction $1bd0a226f9a16141$export$24e2b27d1ff0c1d5(coordinate, projection, sourceExtentWidth) {\n    const projectionExtent = projection.getExtent();\n    let worldsAway = 0;\n    if (projection.canWrapX() && (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])) {\n        sourceExtentWidth = sourceExtentWidth || (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent);\n        worldsAway = Math.floor((coordinate[0] - projectionExtent[0]) / sourceExtentWidth);\n    }\n    return worldsAway;\n}\n\n\n/**\n * @module ol/sphere\n */ \nconst $fb75384508533d8f$export$63f2df7bd7371262 = 6371008.8;\nfunction $fb75384508533d8f$export$79376507b09a66f(c1, c2, radius) {\n    radius = radius || $fb75384508533d8f$export$63f2df7bd7371262;\n    const lat1 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c1[1]);\n    const lat2 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c2[1]);\n    const deltaLatBy2 = (lat2 - lat1) / 2;\n    const deltaLonBy2 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c2[0] - c1[0]) / 2;\n    const a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) + Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) * Math.cos(lat1) * Math.cos(lat2);\n    return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */ function $fb75384508533d8f$var$getLengthInternal(coordinates, radius) {\n    let length = 0;\n    for(let i = 0, ii = coordinates.length; i < ii - 1; ++i)length += $fb75384508533d8f$export$79376507b09a66f(coordinates[i], coordinates[i + 1], radius);\n    return length;\n}\nfunction $fb75384508533d8f$export$f0d11c074a923179(geometry, options) {\n    options = options || {};\n    const radius = options.radius || $fb75384508533d8f$export$63f2df7bd7371262;\n    const projection = options.projection || \"EPSG:3857\";\n    const type = geometry.getType();\n    if (type !== \"GeometryCollection\") geometry = geometry.clone().transform(projection, \"EPSG:4326\");\n    let length = 0;\n    let coordinates, coords, i, ii, j, jj;\n    switch(type){\n        case \"Point\":\n        case \"MultiPoint\":\n            break;\n        case \"LineString\":\n        case \"LinearRing\":\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n            length = $fb75384508533d8f$var$getLengthInternal(coordinates, radius);\n            break;\n        case \"MultiLineString\":\n        case \"Polygon\":\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n            for(i = 0, ii = coordinates.length; i < ii; ++i)length += $fb75384508533d8f$var$getLengthInternal(coordinates[i], radius);\n            break;\n        case \"MultiPolygon\":\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n            for(i = 0, ii = coordinates.length; i < ii; ++i){\n                coords = coordinates[i];\n                for(j = 0, jj = coords.length; j < jj; ++j)length += $fb75384508533d8f$var$getLengthInternal(coords[j], radius);\n            }\n            break;\n        case \"GeometryCollection\":\n            {\n                const geometries = /** @type {import(\"./geom/GeometryCollection.js\").default} */ geometry.getGeometries();\n                for(i = 0, ii = geometries.length; i < ii; ++i)length += $fb75384508533d8f$export$f0d11c074a923179(geometries[i], options);\n                break;\n            }\n        default:\n            throw new Error(\"Unsupported geometry type: \" + type);\n    }\n    return length;\n}\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */ function $fb75384508533d8f$var$getAreaInternal(coordinates, radius) {\n    let area = 0;\n    const len = coordinates.length;\n    let x1 = coordinates[len - 1][0];\n    let y1 = coordinates[len - 1][1];\n    for(let i = 0; i < len; i++){\n        const x2 = coordinates[i][0];\n        const y2 = coordinates[i][1];\n        area += (0, $6b000a049d919fe5$export$cba01ba138429a1d)(x2 - x1) * (2 + Math.sin((0, $6b000a049d919fe5$export$cba01ba138429a1d)(y1)) + Math.sin((0, $6b000a049d919fe5$export$cba01ba138429a1d)(y2)));\n        x1 = x2;\n        y1 = y2;\n    }\n    return area * radius * radius / 2.0;\n}\nfunction $fb75384508533d8f$export$520c40045967cb15(geometry, options) {\n    options = options || {};\n    const radius = options.radius || $fb75384508533d8f$export$63f2df7bd7371262;\n    const projection = options.projection || \"EPSG:3857\";\n    const type = geometry.getType();\n    if (type !== \"GeometryCollection\") geometry = geometry.clone().transform(projection, \"EPSG:4326\");\n    let area = 0;\n    let coordinates, coords, i, ii, j, jj;\n    switch(type){\n        case \"Point\":\n        case \"MultiPoint\":\n        case \"LineString\":\n        case \"MultiLineString\":\n        case \"LinearRing\":\n            break;\n        case \"Polygon\":\n            coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ geometry.getCoordinates();\n            area = Math.abs($fb75384508533d8f$var$getAreaInternal(coordinates[0], radius));\n            for(i = 1, ii = coordinates.length; i < ii; ++i)area -= Math.abs($fb75384508533d8f$var$getAreaInternal(coordinates[i], radius));\n            break;\n        case \"MultiPolygon\":\n            coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometry.getCoordinates();\n            for(i = 0, ii = coordinates.length; i < ii; ++i){\n                coords = coordinates[i];\n                area += Math.abs($fb75384508533d8f$var$getAreaInternal(coords[0], radius));\n                for(j = 1, jj = coords.length; j < jj; ++j)area -= Math.abs($fb75384508533d8f$var$getAreaInternal(coords[j], radius));\n            }\n            break;\n        case \"GeometryCollection\":\n            {\n                const geometries = /** @type {import(\"./geom/GeometryCollection.js\").default} */ geometry.getGeometries();\n                for(i = 0, ii = geometries.length; i < ii; ++i)area += $fb75384508533d8f$export$520c40045967cb15(geometries[i], options);\n                break;\n            }\n        default:\n            throw new Error(\"Unsupported geometry type: \" + type);\n    }\n    return area;\n}\nfunction $fb75384508533d8f$export$cc800923e997bb8(c1, distance, bearing, radius) {\n    radius = radius || $fb75384508533d8f$export$63f2df7bd7371262;\n    const lat1 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c1[1]);\n    const lon1 = (0, $6b000a049d919fe5$export$cba01ba138429a1d)(c1[0]);\n    const dByR = distance / radius;\n    const lat = Math.asin(Math.sin(lat1) * Math.cos(dByR) + Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\n    const lon = lon1 + Math.atan2(Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1), Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\n    return [\n        (0, $6b000a049d919fe5$export$56cb859c01fa134d)(lon),\n        (0, $6b000a049d919fe5$export$56cb859c01fa134d)(lat)\n    ];\n}\n\n\n/**\n * @module ol/console\n */ /**\n * @typedef {'info'|'warn'|'error'|'none'} Level\n */ /**\n * @type {Object<Level, number>}\n */ const $8c65b0699f3f3f8e$var$levels = {\n    info: 1,\n    warn: 2,\n    error: 3,\n    none: 4\n};\n/**\n * @type {number}\n */ let $8c65b0699f3f3f8e$var$level = $8c65b0699f3f3f8e$var$levels.info;\nfunction $8c65b0699f3f3f8e$export$2c97a59140dbf245(l) {\n    $8c65b0699f3f3f8e$var$level = $8c65b0699f3f3f8e$var$levels[l];\n}\nfunction $8c65b0699f3f3f8e$export$bef1f36f5486a6a3(...args) {\n    if ($8c65b0699f3f3f8e$var$level > $8c65b0699f3f3f8e$var$levels.info) return;\n    console.log(...args); // eslint-disable-line no-console\n}\nfunction $8c65b0699f3f3f8e$export$c106dd0671a0fc2d(...args) {\n    if ($8c65b0699f3f3f8e$var$level > $8c65b0699f3f3f8e$var$levels.warn) return;\n    console.warn(...args); // eslint-disable-line no-console\n}\nfunction $8c65b0699f3f3f8e$export$a3bc9b8ed74fc(...args) {\n    if ($8c65b0699f3f3f8e$var$level > $8c65b0699f3f3f8e$var$levels.error) return;\n    console.error(...args); // eslint-disable-line no-console\n}\n\n\nlet $9c4744460e43e41b$var$showCoordinateWarning = true;\nfunction $9c4744460e43e41b$export$ed949affbc7c4223(disable) {\n    const hide = disable === undefined ? true : disable;\n    $9c4744460e43e41b$var$showCoordinateWarning = !hide;\n}\nfunction $9c4744460e43e41b$export$dd516654c5f598fb(input, output) {\n    if (output !== undefined) {\n        for(let i = 0, ii = input.length; i < ii; ++i)output[i] = input[i];\n        output;\n    } else output = input.slice();\n    return output;\n}\nfunction $9c4744460e43e41b$export$83e8ab53904f8022(input, output) {\n    if (output !== undefined && input !== output) {\n        for(let i = 0, ii = input.length; i < ii; ++i)output[i] = input[i];\n        input = output;\n    }\n    return input;\n}\nfunction $9c4744460e43e41b$export$59ae956cd3e343f7(projection) {\n    (0, $f5ec5c943d804ecb$export$e16d8520af44a096)(projection.getCode(), projection);\n    (0, $11b5dd198626e1de$export$e16d8520af44a096)(projection, projection, $9c4744460e43e41b$export$dd516654c5f598fb);\n}\nfunction $9c4744460e43e41b$export$638ad73f7aafb913(projections) {\n    projections.forEach($9c4744460e43e41b$export$59ae956cd3e343f7);\n}\nfunction $9c4744460e43e41b$export$3988ae62b71be9a3(projectionLike) {\n    return typeof projectionLike === \"string\" ? (0, $f5ec5c943d804ecb$export$3988ae62b71be9a3)(/** @type {string} */ projectionLike) : /** @type {Projection} */ projectionLike || null;\n}\nfunction $9c4744460e43e41b$export$2d8f7b4eec383d44(projection, resolution, point, units) {\n    projection = $9c4744460e43e41b$export$3988ae62b71be9a3(projection);\n    let pointResolution;\n    const getter = projection.getPointResolutionFunc();\n    if (getter) {\n        pointResolution = getter(resolution, point);\n        if (units && units !== projection.getUnits()) {\n            const metersPerUnit = projection.getMetersPerUnit();\n            if (metersPerUnit) pointResolution = pointResolution * metersPerUnit / (0, $03edbd434a9e6608$export$1482081eec883108)[units];\n        }\n    } else {\n        const projUnits = projection.getUnits();\n        if (projUnits == \"degrees\" && !units || units == \"degrees\") pointResolution = resolution;\n        else {\n            // Estimate point resolution by transforming the center pixel to EPSG:4326,\n            // measuring its width and height on the normal sphere, and taking the\n            // average of the width and height.\n            const toEPSG4326 = $9c4744460e43e41b$export$e3c4995a701c26a3(projection, $9c4744460e43e41b$export$3988ae62b71be9a3(\"EPSG:4326\"));\n            if (toEPSG4326 === $9c4744460e43e41b$export$83e8ab53904f8022 && projUnits !== \"degrees\") // no transform is available\n            pointResolution = resolution * projection.getMetersPerUnit();\n            else {\n                let vertices = [\n                    point[0] - resolution / 2,\n                    point[1],\n                    point[0] + resolution / 2,\n                    point[1],\n                    point[0],\n                    point[1] - resolution / 2,\n                    point[0],\n                    point[1] + resolution / 2\n                ];\n                vertices = toEPSG4326(vertices, vertices, 2);\n                const width = (0, $fb75384508533d8f$export$79376507b09a66f)(vertices.slice(0, 2), vertices.slice(2, 4));\n                const height = (0, $fb75384508533d8f$export$79376507b09a66f)(vertices.slice(4, 6), vertices.slice(6, 8));\n                pointResolution = (width + height) / 2;\n            }\n            const metersPerUnit = units ? (0, $03edbd434a9e6608$export$1482081eec883108)[units] : projection.getMetersPerUnit();\n            if (metersPerUnit !== undefined) pointResolution /= metersPerUnit;\n        }\n    }\n    return pointResolution;\n}\nfunction $9c4744460e43e41b$export$eeb8392580a05a37(projections) {\n    $9c4744460e43e41b$export$638ad73f7aafb913(projections);\n    projections.forEach(function(source) {\n        projections.forEach(function(destination) {\n            if (source !== destination) (0, $11b5dd198626e1de$export$e16d8520af44a096)(source, destination, $9c4744460e43e41b$export$dd516654c5f598fb);\n        });\n    });\n}\nfunction $9c4744460e43e41b$export$4856f21c2f184f24(projections1, projections2, forwardTransform, inverseTransform) {\n    projections1.forEach(function(projection1) {\n        projections2.forEach(function(projection2) {\n            (0, $11b5dd198626e1de$export$e16d8520af44a096)(projection1, projection2, forwardTransform);\n            (0, $11b5dd198626e1de$export$e16d8520af44a096)(projection2, projection1, inverseTransform);\n        });\n    });\n}\nfunction $9c4744460e43e41b$export$4860237d10380594() {\n    (0, $f5ec5c943d804ecb$export$42ffd38884aecdac)();\n    (0, $11b5dd198626e1de$export$42ffd38884aecdac)();\n}\nfunction $9c4744460e43e41b$export$549167224996a0fb(projection, defaultCode) {\n    if (!projection) return $9c4744460e43e41b$export$3988ae62b71be9a3(defaultCode);\n    if (typeof projection === \"string\") return $9c4744460e43e41b$export$3988ae62b71be9a3(projection);\n    return /** @type {Projection} */ projection;\n}\nfunction $9c4744460e43e41b$export$6b4aafd331159e0d(coordTransform) {\n    return(/**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [output] Output.\n     * @param {number} [dimension] Dimension.\n     * @return {Array<number>} Output.\n     */ function(input, output, dimension) {\n        const length = input.length;\n        dimension = dimension !== undefined ? dimension : 2;\n        output = output !== undefined ? output : new Array(length);\n        for(let i = 0; i < length; i += dimension){\n            const point = coordTransform(input.slice(i, i + dimension));\n            const pointLength = point.length;\n            for(let j = 0, jj = dimension; j < jj; ++j)output[i + j] = j >= pointLength ? input[i + j] : point[j];\n        }\n        return output;\n    });\n}\nfunction $9c4744460e43e41b$export$6b1c2e6623f4f49d(source, destination, forward, inverse) {\n    const sourceProj = $9c4744460e43e41b$export$3988ae62b71be9a3(source);\n    const destProj = $9c4744460e43e41b$export$3988ae62b71be9a3(destination);\n    (0, $11b5dd198626e1de$export$e16d8520af44a096)(sourceProj, destProj, $9c4744460e43e41b$export$6b4aafd331159e0d(forward));\n    (0, $11b5dd198626e1de$export$e16d8520af44a096)(destProj, sourceProj, $9c4744460e43e41b$export$6b4aafd331159e0d(inverse));\n}\nfunction $9c4744460e43e41b$export$b15d9668511529b9(coordinate, projection) {\n    $9c4744460e43e41b$export$ed949affbc7c4223();\n    return $9c4744460e43e41b$export$51186ad6e864892a(coordinate, \"EPSG:4326\", projection !== undefined ? projection : \"EPSG:3857\");\n}\nfunction $9c4744460e43e41b$export$3fb495868742d370(coordinate, projection) {\n    const lonLat = $9c4744460e43e41b$export$51186ad6e864892a(coordinate, projection !== undefined ? projection : \"EPSG:3857\", \"EPSG:4326\");\n    const lon = lonLat[0];\n    if (lon < -180 || lon > 180) lonLat[0] = (0, $6b000a049d919fe5$export$ba467bec01d66def)(lon + 180, 360) - 180;\n    return lonLat;\n}\nfunction $9c4744460e43e41b$export$fe091d73a555748b(projection1, projection2) {\n    if (projection1 === projection2) return true;\n    const equalUnits = projection1.getUnits() === projection2.getUnits();\n    if (projection1.getCode() === projection2.getCode()) return equalUnits;\n    const transformFunc = $9c4744460e43e41b$export$e3c4995a701c26a3(projection1, projection2);\n    return transformFunc === $9c4744460e43e41b$export$dd516654c5f598fb && equalUnits;\n}\nfunction $9c4744460e43e41b$export$e3c4995a701c26a3(sourceProjection, destinationProjection) {\n    const sourceCode = sourceProjection.getCode();\n    const destinationCode = destinationProjection.getCode();\n    let transformFunc = (0, $11b5dd198626e1de$export$3988ae62b71be9a3)(sourceCode, destinationCode);\n    if (!transformFunc) transformFunc = $9c4744460e43e41b$export$83e8ab53904f8022;\n    return transformFunc;\n}\nfunction $9c4744460e43e41b$export$fce0c6cfca85ed96(source, destination) {\n    const sourceProjection = $9c4744460e43e41b$export$3988ae62b71be9a3(source);\n    const destinationProjection = $9c4744460e43e41b$export$3988ae62b71be9a3(destination);\n    return $9c4744460e43e41b$export$e3c4995a701c26a3(sourceProjection, destinationProjection);\n}\nfunction $9c4744460e43e41b$export$51186ad6e864892a(coordinate, source, destination) {\n    const transformFunc = $9c4744460e43e41b$export$fce0c6cfca85ed96(source, destination);\n    return transformFunc(coordinate, undefined, coordinate.length);\n}\nfunction $9c4744460e43e41b$export$751c68e0e0efff79(extent, source, destination, stops) {\n    const transformFunc = $9c4744460e43e41b$export$fce0c6cfca85ed96(source, destination);\n    return (0, $6da4c8ed3074c92b$export$9f9dcb98c894b623)(extent, transformFunc, undefined, stops);\n}\nfunction $9c4744460e43e41b$export$affbde93b1db73f8(point, sourceProjection, destinationProjection) {\n    const transformFunc = $9c4744460e43e41b$export$e3c4995a701c26a3(sourceProjection, destinationProjection);\n    return transformFunc(point);\n}\n/**\n * @type {Projection|null}\n */ let $9c4744460e43e41b$var$userProjection = null;\nfunction $9c4744460e43e41b$export$d0aeadbeac54116e(projection) {\n    $9c4744460e43e41b$var$userProjection = $9c4744460e43e41b$export$3988ae62b71be9a3(projection);\n}\nfunction $9c4744460e43e41b$export$1ae11279759d4e8f() {\n    $9c4744460e43e41b$var$userProjection = null;\n}\nfunction $9c4744460e43e41b$export$3973b77d5f6f2790() {\n    return $9c4744460e43e41b$var$userProjection;\n}\nfunction $9c4744460e43e41b$export$aa7494edfbe36197() {\n    $9c4744460e43e41b$export$d0aeadbeac54116e(\"EPSG:4326\");\n}\nfunction $9c4744460e43e41b$export$698f563af1ba02a5(coordinate, sourceProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return coordinate;\n    return $9c4744460e43e41b$export$51186ad6e864892a(coordinate, sourceProjection, $9c4744460e43e41b$var$userProjection);\n}\nfunction $9c4744460e43e41b$export$d4b8ec0b96db1ee2(coordinate, destProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) {\n        if ($9c4744460e43e41b$var$showCoordinateWarning && !(0, $1bd0a226f9a16141$export$e9bab7fafb253603)(coordinate, [\n            0,\n            0\n        ]) && coordinate[0] >= -180 && coordinate[0] <= 180 && coordinate[1] >= -90 && coordinate[1] <= 90) {\n            $9c4744460e43e41b$var$showCoordinateWarning = false;\n            (0, $8c65b0699f3f3f8e$export$c106dd0671a0fc2d)(\"Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.\");\n        }\n        return coordinate;\n    }\n    return $9c4744460e43e41b$export$51186ad6e864892a(coordinate, $9c4744460e43e41b$var$userProjection, destProjection);\n}\nfunction $9c4744460e43e41b$export$96bfd09e2cffb006(extent, sourceProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return extent;\n    return $9c4744460e43e41b$export$751c68e0e0efff79(extent, sourceProjection, $9c4744460e43e41b$var$userProjection);\n}\nfunction $9c4744460e43e41b$export$494be3a3a25689ca(extent, destProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return extent;\n    return $9c4744460e43e41b$export$751c68e0e0efff79(extent, $9c4744460e43e41b$var$userProjection, destProjection);\n}\nfunction $9c4744460e43e41b$export$b56bb8ad8b3a00e9(resolution, sourceProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return resolution;\n    const sourceUnits = $9c4744460e43e41b$export$3988ae62b71be9a3(sourceProjection).getUnits();\n    const userUnits = $9c4744460e43e41b$var$userProjection.getUnits();\n    return sourceUnits && userUnits ? resolution * (0, $03edbd434a9e6608$export$1482081eec883108)[sourceUnits] / (0, $03edbd434a9e6608$export$1482081eec883108)[userUnits] : resolution;\n}\nfunction $9c4744460e43e41b$export$bd1cd3b88140b906(resolution, destProjection) {\n    if (!$9c4744460e43e41b$var$userProjection) return resolution;\n    const sourceUnits = $9c4744460e43e41b$export$3988ae62b71be9a3(destProjection).getUnits();\n    const userUnits = $9c4744460e43e41b$var$userProjection.getUnits();\n    return sourceUnits && userUnits ? resolution * (0, $03edbd434a9e6608$export$1482081eec883108)[userUnits] / (0, $03edbd434a9e6608$export$1482081eec883108)[sourceUnits] : resolution;\n}\nfunction $9c4744460e43e41b$export$1873f9cfeb8bd1d6(sourceProj, destProj, transform) {\n    return function(coord) {\n        let transformed, worldsAway;\n        if (sourceProj.canWrapX()) {\n            const sourceExtent = sourceProj.getExtent();\n            const sourceExtentWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceExtent);\n            coord = coord.slice(0);\n            worldsAway = (0, $1bd0a226f9a16141$export$24e2b27d1ff0c1d5)(coord, sourceProj, sourceExtentWidth);\n            if (worldsAway) // Move x to the real world\n            coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n            coord[0] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(coord[0], sourceExtent[0], sourceExtent[2]);\n            coord[1] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(coord[1], sourceExtent[1], sourceExtent[3]);\n            transformed = transform(coord);\n        } else transformed = transform(coord);\n        if (worldsAway && destProj.canWrapX()) // Move transformed coordinate back to the offset world\n        transformed[0] += worldsAway * (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(destProj.getExtent());\n        return transformed;\n    };\n}\nfunction $9c4744460e43e41b$export$86eed449eb2dcac4() {\n    // Add transformations that don't alter coordinates to convert within set of\n    // projections with equal meaning.\n    $9c4744460e43e41b$export$eeb8392580a05a37((0, $84ad988f04807ab1$export$b508d7ad9a891c1b));\n    $9c4744460e43e41b$export$eeb8392580a05a37((0, $b58ae362632b32c5$export$b508d7ad9a891c1b));\n    // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n    // coordinates and back.\n    $9c4744460e43e41b$export$4856f21c2f184f24((0, $b58ae362632b32c5$export$b508d7ad9a891c1b), (0, $84ad988f04807ab1$export$b508d7ad9a891c1b), (0, $84ad988f04807ab1$export$1ff8bb36c0983070), (0, $84ad988f04807ab1$export$8c71322ec28ed6b4));\n}\n$9c4744460e43e41b$export$86eed449eb2dcac4();\n\n\n\n\n\n/**\n * @module ol/centerconstraint\n */ \nfunction $b21a6e049949bb31$export$c2f0af2c946f6897(extent, onlyCenter, smooth) {\n    return(/**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number|undefined} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */ function(center, resolution, size, isMoving, centerShift) {\n        if (!center) return undefined;\n        if (!resolution && !onlyCenter) return center;\n        const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n        const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n        const shiftX = centerShift ? centerShift[0] : 0;\n        const shiftY = centerShift ? centerShift[1] : 0;\n        let minX = extent[0] + viewWidth / 2 + shiftX;\n        let maxX = extent[2] - viewWidth / 2 + shiftX;\n        let minY = extent[1] + viewHeight / 2 + shiftY;\n        let maxY = extent[3] - viewHeight / 2 + shiftY;\n        // note: when zooming out of bounds, min and max values for x and y may\n        // end up inverted (min > max); this has to be accounted for\n        if (minX > maxX) {\n            minX = (maxX + minX) / 2;\n            maxX = minX;\n        }\n        if (minY > maxY) {\n            minY = (maxY + minY) / 2;\n            maxY = minY;\n        }\n        let x = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(center[0], minX, maxX);\n        let y = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(center[1], minY, maxY);\n        // during an interaction, allow some overscroll\n        if (isMoving && smooth && resolution) {\n            const ratio = 30 * resolution;\n            x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) + ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n            y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) + ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n        }\n        return [\n            x,\n            y\n        ];\n    });\n}\nfunction $b21a6e049949bb31$export$f883a24d5edde77c(center) {\n    return center;\n}\n\n\n\n/**\n * @module ol/resolutionconstraint\n */ \n\n\n/**\n * @typedef {function((number|undefined), number, import(\"./size.js\").Size, boolean=): (number|undefined)} Type\n */ /**\n * Returns a modified resolution taking into account the viewport size and maximum\n * allowed extent.\n * @param {number} resolution Resolution\n * @param {import(\"./extent.js\").Extent} maxExtent Maximum allowed extent.\n * @param {import(\"./size.js\").Size} viewportSize Viewport size.\n * @param {boolean} showFullExtent Whether to show the full extent.\n * @return {number} Capped resolution.\n */ function $bac43a1f4a628548$var$getViewportClampedResolution(resolution, maxExtent, viewportSize, showFullExtent) {\n    const xResolution = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(maxExtent) / viewportSize[0];\n    const yResolution = (0, $6da4c8ed3074c92b$export$c08559766941f856)(maxExtent) / viewportSize[1];\n    if (showFullExtent) return Math.min(resolution, Math.max(xResolution, yResolution));\n    return Math.min(resolution, Math.min(xResolution, yResolution));\n}\n/**\n * Returns a modified resolution to be between maxResolution and minResolution while\n * still allowing the value to be slightly out of bounds.\n * Note: the computation is based on the logarithm function (ln):\n *  - at 1, ln(x) is 0\n *  - above 1, ln(x) keeps increasing but at a much slower pace than x\n * The final result is clamped to prevent getting too far away from bounds.\n * @param {number} resolution Resolution.\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @return {number} Smoothed resolution.\n */ function $bac43a1f4a628548$var$getSmoothClampedResolution(resolution, maxResolution, minResolution) {\n    let result = Math.min(resolution, maxResolution);\n    const ratio = 50;\n    result *= Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio + 1;\n    if (minResolution) {\n        result = Math.max(result, minResolution);\n        result /= Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) / ratio + 1;\n    }\n    return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(result, minResolution / 2, maxResolution * 2);\n}\nfunction $bac43a1f4a628548$export$d65a517690fc4385(resolutions, smooth, maxExtent, showFullExtent) {\n    smooth = smooth !== undefined ? smooth : true;\n    return(/**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */ function(resolution, direction, size, isMoving) {\n        if (resolution !== undefined) {\n            const maxResolution = resolutions[0];\n            const minResolution = resolutions[resolutions.length - 1];\n            const cappedMaxRes = maxExtent ? $bac43a1f4a628548$var$getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;\n            // during interacting or animating, allow intermediary values\n            if (isMoving) {\n                if (!smooth) return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(resolution, minResolution, cappedMaxRes);\n                return $bac43a1f4a628548$var$getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);\n            }\n            const capped = Math.min(cappedMaxRes, resolution);\n            const z = Math.floor((0, $b998d41b678ed5d1$export$8a3786cc03fdb777)(resolutions, capped, direction));\n            if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) return resolutions[z + 1];\n            return resolutions[z];\n        }\n        return undefined;\n    });\n}\nfunction $bac43a1f4a628548$export$22ac0f6b219de91a(power, maxResolution, minResolution, smooth, maxExtent, showFullExtent) {\n    smooth = smooth !== undefined ? smooth : true;\n    minResolution = minResolution !== undefined ? minResolution : 0;\n    return(/**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */ function(resolution, direction, size, isMoving) {\n        if (resolution !== undefined) {\n            const cappedMaxRes = maxExtent ? $bac43a1f4a628548$var$getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;\n            // during interacting or animating, allow intermediary values\n            if (isMoving) {\n                if (!smooth) return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(resolution, minResolution, cappedMaxRes);\n                return $bac43a1f4a628548$var$getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);\n            }\n            const tolerance = 1e-9;\n            const minZoomLevel = Math.ceil(Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance);\n            const offset = -direction * (0.5 - tolerance) + 0.5;\n            const capped = Math.min(cappedMaxRes, resolution);\n            const cappedZoomLevel = Math.floor(Math.log(maxResolution / capped) / Math.log(power) + offset);\n            const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);\n            const newResolution = maxResolution / Math.pow(power, zoomLevel);\n            return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(newResolution, minResolution, cappedMaxRes);\n        }\n        return undefined;\n    });\n}\nfunction $bac43a1f4a628548$export$1c4e6da9b4b066fe(maxResolution, minResolution, smooth, maxExtent, showFullExtent) {\n    smooth = smooth !== undefined ? smooth : true;\n    return(/**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */ function(resolution, direction, size, isMoving) {\n        if (resolution !== undefined) {\n            const cappedMaxRes = maxExtent ? $bac43a1f4a628548$var$getViewportClampedResolution(maxResolution, maxExtent, size, showFullExtent) : maxResolution;\n            if (!smooth || !isMoving) return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(resolution, minResolution, cappedMaxRes);\n            return $bac43a1f4a628548$var$getSmoothClampedResolution(resolution, cappedMaxRes, minResolution);\n        }\n        return undefined;\n    });\n}\n\n\n/**\n * @module ol/rotationconstraint\n */ \nfunction $d65f0a322291d127$export$e20fbacbb41798b(rotation) {\n    if (rotation !== undefined) return 0;\n    return undefined;\n}\nfunction $d65f0a322291d127$export$f883a24d5edde77c(rotation) {\n    if (rotation !== undefined) return rotation;\n    return undefined;\n}\nfunction $d65f0a322291d127$export$9ba78806de831083(n) {\n    const theta = 2 * Math.PI / n;\n    return(/**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */ function(rotation, isMoving) {\n        if (isMoving) return rotation;\n        if (rotation !== undefined) {\n            rotation = Math.floor(rotation / theta + 0.5) * theta;\n            return rotation;\n        }\n        return undefined;\n    });\n}\nfunction $d65f0a322291d127$export$17a6e6f3448b17e8(tolerance) {\n    tolerance = tolerance || (0, $6b000a049d919fe5$export$cba01ba138429a1d)(5);\n    return(/**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */ function(rotation, isMoving) {\n        if (isMoving) return rotation;\n        if (rotation !== undefined) {\n            if (Math.abs(rotation) <= tolerance) return 0;\n            return rotation;\n        }\n        return undefined;\n    });\n}\n\n\n/**\n * @module ol/easing\n */ /**\n * Start slow and speed up.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */ function $c7ccf7e681a9b333$export$929e5a82286172a6(t) {\n    return Math.pow(t, 3);\n}\nfunction $c7ccf7e681a9b333$export$57636bb43b1ccbb0(t) {\n    return 1 - $c7ccf7e681a9b333$export$929e5a82286172a6(1 - t);\n}\nfunction $c7ccf7e681a9b333$export$9b47139b511b56e4(t) {\n    return 3 * t * t - 2 * t * t * t;\n}\nfunction $c7ccf7e681a9b333$export$45db2fc2f15997e7(t) {\n    return t;\n}\nfunction $c7ccf7e681a9b333$export$7f4472f6708afaf3(t) {\n    if (t < 0.5) return $c7ccf7e681a9b333$export$9b47139b511b56e4(2 * t);\n    return 1 - $c7ccf7e681a9b333$export$9b47139b511b56e4(2 * (t - 0.5));\n}\n\n\n\n\n/**\n * @module ol/geom/Polygon\n */ /**\n * @module ol/geom/LinearRing\n */ /**\n * @module ol/geom/SimpleGeometry\n */ /**\n * @module ol/geom/Geometry\n */ \n\n\n\n\n\n/**\n * @module ol/geom/flat/transform\n */ /**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */ function $14c6e714516e527b$export$b92b2dedcfff79de(flatCoordinates, offset, end, stride, transform, dest) {\n    dest = dest ? dest : [];\n    let i = 0;\n    for(let j = offset; j < end; j += stride){\n        const x = flatCoordinates[j];\n        const y = flatCoordinates[j + 1];\n        dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n        dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n    }\n    if (dest && dest.length != i) dest.length = i;\n    return dest;\n}\nfunction $14c6e714516e527b$export$bb628a54ab399bc9(flatCoordinates, offset, end, stride, angle, anchor, dest) {\n    dest = dest ? dest : [];\n    const cos = Math.cos(angle);\n    const sin = Math.sin(angle);\n    const anchorX = anchor[0];\n    const anchorY = anchor[1];\n    let i = 0;\n    for(let j = offset; j < end; j += stride){\n        const deltaX = flatCoordinates[j] - anchorX;\n        const deltaY = flatCoordinates[j + 1] - anchorY;\n        dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n        dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n        for(let k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];\n    }\n    if (dest && dest.length != i) dest.length = i;\n    return dest;\n}\nfunction $14c6e714516e527b$export$dcdf75081b88279d(flatCoordinates, offset, end, stride, sx, sy, anchor, dest) {\n    dest = dest ? dest : [];\n    const anchorX = anchor[0];\n    const anchorY = anchor[1];\n    let i = 0;\n    for(let j = offset; j < end; j += stride){\n        const deltaX = flatCoordinates[j] - anchorX;\n        const deltaY = flatCoordinates[j + 1] - anchorY;\n        dest[i++] = anchorX + sx * deltaX;\n        dest[i++] = anchorY + sy * deltaY;\n        for(let k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];\n    }\n    if (dest && dest.length != i) dest.length = i;\n    return dest;\n}\nfunction $14c6e714516e527b$export$d73ee8ef04f5226a(flatCoordinates, offset, end, stride, deltaX, deltaY, dest) {\n    dest = dest ? dest : [];\n    let i = 0;\n    for(let j = offset; j < end; j += stride){\n        dest[i++] = flatCoordinates[j] + deltaX;\n        dest[i++] = flatCoordinates[j + 1] + deltaY;\n        for(let k = j + 2; k < j + stride; ++k)dest[i++] = flatCoordinates[k];\n    }\n    if (dest && dest.length != i) dest.length = i;\n    return dest;\n}\n\n\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */ /**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */ /**\n * @type {import(\"../transform.js\").Transform}\n */ const $50db89a00eb954f6$var$tmpTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */ class $50db89a00eb954f6$var$Geometry extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n        /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.extent_ = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        /**\n     * @private\n     * @type {number}\n     */ this.extentRevision_ = -1;\n        /**\n     * @protected\n     * @type {number}\n     */ this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n        /**\n     * @protected\n     * @type {number}\n     */ this.simplifiedGeometryRevision = 0;\n        /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */ this.simplifyTransformedInternal = (0, $013a1733c226ec50$export$ff83df6f9971435f)(function(revision, squaredTolerance, transform) {\n            if (!transform) return this.getSimplifiedGeometry(squaredTolerance);\n            const clone = this.clone();\n            clone.applyTransform(transform);\n            return clone.getSimplifiedGeometry(squaredTolerance);\n        });\n    }\n    /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */ simplifyTransformed(squaredTolerance, transform) {\n        return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, transform);\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */ clone() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */ containsXY(x, y) {\n        const coord = this.getClosestPoint([\n            x,\n            y\n        ]);\n        return coord[0] === x && coord[1] === y;\n    }\n    /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */ getClosestPoint(point, closestPoint) {\n        closestPoint = closestPoint ? closestPoint : [\n            NaN,\n            NaN\n        ];\n        this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n        return closestPoint;\n    }\n    /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */ intersectsCoordinate(coordinate) {\n        return this.containsXY(coordinate[0], coordinate[1]);\n    }\n    /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */ computeExtent(extent) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */ getExtent(extent) {\n        if (this.extentRevision_ != this.getRevision()) {\n            const extent = this.computeExtent(this.extent_);\n            if (isNaN(extent[0]) || isNaN(extent[1])) (0, $6da4c8ed3074c92b$export$3e2152b047719fa1)(extent);\n            this.extentRevision_ = this.getRevision();\n        }\n        return (0, $6da4c8ed3074c92b$export$6a4fe494c558c238)(this.extent_, extent);\n    }\n    /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */ rotate(angle, anchor) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */ scale(sx, sy, anchor) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */ simplify(tolerance) {\n        return this.getSimplifiedGeometry(tolerance * tolerance);\n    }\n    /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */ getSimplifiedGeometry(squaredTolerance) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */ getType() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */ applyTransform(transformFn) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */ intersectsExtent(extent) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */ translate(deltaX, deltaY) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {Geometry} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */ transform(source, destination) {\n        /** @type {import(\"../proj/Projection.js\").default} */ const sourceProj = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(source);\n        const transformFn = sourceProj.getUnits() == \"tile-pixels\" ? function(inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = (0, $6da4c8ed3074c92b$export$c08559766941f856)(projectedExtent) / (0, $6da4c8ed3074c92b$export$c08559766941f856)(pixelExtent);\n            (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)($50db89a00eb954f6$var$tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n            (0, $14c6e714516e527b$export$b92b2dedcfff79de)(inCoordinates, 0, inCoordinates.length, stride, $50db89a00eb954f6$var$tmpTransform, outCoordinates);\n            return (0, $9c4744460e43e41b$export$fce0c6cfca85ed96)(sourceProj, destination)(inCoordinates, outCoordinates, stride);\n        } : (0, $9c4744460e43e41b$export$fce0c6cfca85ed96)(sourceProj, destination);\n        this.applyTransform(transformFn);\n        return this;\n    }\n}\nvar $50db89a00eb954f6$export$2e2bcd8739ae039 = $50db89a00eb954f6$var$Geometry;\n\n\n\n\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */ class $c76e993e57efc8c4$var$SimpleGeometry extends (0, $50db89a00eb954f6$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n        /**\n     * @protected\n     * @type {import(\"./Geometry.js\").GeometryLayout}\n     */ this.layout = \"XY\";\n        /**\n     * @protected\n     * @type {number}\n     */ this.stride = 2;\n        /**\n     * @protected\n     * @type {Array<number>}\n     */ this.flatCoordinates = null;\n    }\n    /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */ computeExtent(extent) {\n        return (0, $6da4c8ed3074c92b$export$be0ab0bf96ca59ca)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n    }\n    /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */ getCoordinates() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */ getFirstCoordinate() {\n        return this.flatCoordinates.slice(0, this.stride);\n    }\n    /**\n   * @return {Array<number>} Flat coordinates.\n   */ getFlatCoordinates() {\n        return this.flatCoordinates;\n    }\n    /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */ getLastCoordinate() {\n        return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n    }\n    /**\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\n   * @api\n   */ getLayout() {\n        return this.layout;\n    }\n    /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   */ getSimplifiedGeometry(squaredTolerance) {\n        if (this.simplifiedGeometryRevision !== this.getRevision()) {\n            this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n            this.simplifiedGeometryRevision = this.getRevision();\n        }\n        // If squaredTolerance is negative or if we know that simplification will not\n        // have any effect then just return this.\n        if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) return this;\n        const simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n        const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n        if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) return simplifiedGeometry;\n        // Simplification did not actually remove any coordinates.  We now know\n        // that any calls to getSimplifiedGeometry with a squaredTolerance less\n        // than or equal to the current squaredTolerance will also not have any\n        // effect.  This allows us to short circuit simplification (saving CPU\n        // cycles) and prevents the cache of simplified geometries from filling\n        // up with useless identical copies of this geometry (saving memory).\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n    }\n    /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        return this;\n    }\n    /**\n   * @return {number} Stride.\n   */ getStride() {\n        return this.stride;\n    }\n    /**\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */ setFlatCoordinates(layout, flatCoordinates) {\n        this.stride = $c76e993e57efc8c4$export$6af0c1b4a8549a43(layout);\n        this.layout = layout;\n        this.flatCoordinates = flatCoordinates;\n    }\n    /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */ setCoordinates(coordinates, layout) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */ setLayout(layout, coordinates, nesting) {\n        /** @type {number} */ let stride;\n        if (layout) stride = $c76e993e57efc8c4$export$6af0c1b4a8549a43(layout);\n        else {\n            for(let i = 0; i < nesting; ++i){\n                if (coordinates.length === 0) {\n                    this.layout = \"XY\";\n                    this.stride = 2;\n                    return;\n                }\n                coordinates = /** @type {Array} */ coordinates[0];\n            }\n            stride = coordinates.length;\n            layout = $c76e993e57efc8c4$var$getLayoutForStride(stride);\n        }\n        this.layout = layout;\n        this.stride = stride;\n    }\n    /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */ applyTransform(transformFn) {\n        if (this.flatCoordinates) {\n            transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n            this.changed();\n        }\n    }\n    /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */ rotate(angle, anchor) {\n        const flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            const stride = this.getStride();\n            (0, $14c6e714516e527b$export$bb628a54ab399bc9)(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n            this.changed();\n        }\n    }\n    /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */ scale(sx, sy, anchor) {\n        if (sy === undefined) sy = sx;\n        if (!anchor) anchor = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(this.getExtent());\n        const flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            const stride = this.getStride();\n            (0, $14c6e714516e527b$export$dcdf75081b88279d)(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n            this.changed();\n        }\n    }\n    /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */ translate(deltaX, deltaY) {\n        const flatCoordinates = this.getFlatCoordinates();\n        if (flatCoordinates) {\n            const stride = this.getStride();\n            (0, $14c6e714516e527b$export$d73ee8ef04f5226a)(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n            this.changed();\n        }\n    }\n}\n/**\n * @param {number} stride Stride.\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n */ function $c76e993e57efc8c4$var$getLayoutForStride(stride) {\n    let layout;\n    if (stride == 2) layout = \"XY\";\n    else if (stride == 3) layout = \"XYZ\";\n    else if (stride == 4) layout = \"XYZM\";\n    return /** @type {import(\"./Geometry.js\").GeometryLayout} */ layout;\n}\nfunction $c76e993e57efc8c4$export$6af0c1b4a8549a43(layout) {\n    let stride;\n    if (layout == \"XY\") stride = 2;\n    else if (layout == \"XYZ\" || layout == \"XYM\") stride = 3;\n    else if (layout == \"XYZM\") stride = 4;\n    return /** @type {number} */ stride;\n}\nfunction $c76e993e57efc8c4$export$a3767472617c7861(simpleGeometry, transform, dest) {\n    const flatCoordinates = simpleGeometry.getFlatCoordinates();\n    if (!flatCoordinates) return null;\n    const stride = simpleGeometry.getStride();\n    return (0, $14c6e714516e527b$export$b92b2dedcfff79de)(flatCoordinates, 0, flatCoordinates.length, stride, transform, dest);\n}\nvar $c76e993e57efc8c4$export$2e2bcd8739ae039 = $c76e993e57efc8c4$var$SimpleGeometry;\n\n\n/**\n * @module ol/geom/flat/closest\n */ \n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */ function $bf5604c1b8258b71$var$assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {\n    const x1 = flatCoordinates[offset1];\n    const y1 = flatCoordinates[offset1 + 1];\n    const dx = flatCoordinates[offset2] - x1;\n    const dy = flatCoordinates[offset2 + 1] - y1;\n    let offset;\n    if (dx === 0 && dy === 0) offset = offset1;\n    else {\n        const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n        if (t > 1) offset = offset2;\n        else if (t > 0) {\n            for(let i = 0; i < stride; ++i)closestPoint[i] = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);\n            closestPoint.length = stride;\n            return;\n        } else offset = offset1;\n    }\n    for(let i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[offset + i];\n    closestPoint.length = stride;\n}\nfunction $bf5604c1b8258b71$export$bc2eb611ddf80103(flatCoordinates, offset, end, stride, max) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    for(offset += stride; offset < end; offset += stride){\n        const x2 = flatCoordinates[offset];\n        const y2 = flatCoordinates[offset + 1];\n        const squaredDelta = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x1, y1, x2, y2);\n        if (squaredDelta > max) max = squaredDelta;\n        x1 = x2;\n        y1 = y2;\n    }\n    return max;\n}\nfunction $bf5604c1b8258b71$export$fbf31c8f2668ed5a(flatCoordinates, offset, ends, stride, max) {\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        max = $bf5604c1b8258b71$export$bc2eb611ddf80103(flatCoordinates, offset, end, stride, max);\n        offset = end;\n    }\n    return max;\n}\nfunction $bf5604c1b8258b71$export$37c18e6e7d50501a(flatCoordinates, offset, endss, stride, max) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        max = $bf5604c1b8258b71$export$fbf31c8f2668ed5a(flatCoordinates, offset, ends, stride, max);\n        offset = ends[ends.length - 1];\n    }\n    return max;\n}\nfunction $bf5604c1b8258b71$export$4adc8e5135fb44c(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint) {\n    if (offset == end) return minSquaredDistance;\n    let i, squaredDistance;\n    if (maxDelta === 0) {\n        // All points are identical, so just test the first point.\n        squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);\n        if (squaredDistance < minSquaredDistance) {\n            for(i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[offset + i];\n            closestPoint.length = stride;\n            return squaredDistance;\n        }\n        return minSquaredDistance;\n    }\n    tmpPoint = tmpPoint ? tmpPoint : [\n        NaN,\n        NaN\n    ];\n    let index = offset + stride;\n    while(index < end){\n        $bf5604c1b8258b71$var$assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);\n        squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, tmpPoint[0], tmpPoint[1]);\n        if (squaredDistance < minSquaredDistance) {\n            minSquaredDistance = squaredDistance;\n            for(i = 0; i < stride; ++i)closestPoint[i] = tmpPoint[i];\n            closestPoint.length = stride;\n            index += stride;\n        } else // Skip ahead multiple points, because we know that all the skipped\n        // points cannot be any closer than the closest point we have found so\n        // far.  We know this because we know how close the current point is, how\n        // close the closest point we have found so far is, and the maximum\n        // distance between consecutive points.  For example, if we're currently\n        // at distance 10, the best we've found so far is 3, and that the maximum\n        // distance between consecutive points is 2, then we'll need to skip at\n        // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n        // finding a closer point.  We use Math.max(..., 1) to ensure that we\n        // always advance at least one point, to avoid an infinite loop.\n        index += stride * Math.max((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) / maxDelta | 0, 1);\n    }\n    if (isRing) {\n        // Check the closing segment.\n        $bf5604c1b8258b71$var$assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);\n        squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, tmpPoint[0], tmpPoint[1]);\n        if (squaredDistance < minSquaredDistance) {\n            minSquaredDistance = squaredDistance;\n            for(i = 0; i < stride; ++i)closestPoint[i] = tmpPoint[i];\n            closestPoint.length = stride;\n        }\n    }\n    return minSquaredDistance;\n}\nfunction $bf5604c1b8258b71$export$5a48a0eefcf14992(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint) {\n    tmpPoint = tmpPoint ? tmpPoint : [\n        NaN,\n        NaN\n    ];\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        minSquaredDistance = $bf5604c1b8258b71$export$4adc8e5135fb44c(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n        offset = end;\n    }\n    return minSquaredDistance;\n}\nfunction $bf5604c1b8258b71$export$60e067685eb8f9c4(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint) {\n    tmpPoint = tmpPoint ? tmpPoint : [\n        NaN,\n        NaN\n    ];\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        minSquaredDistance = $bf5604c1b8258b71$export$5a48a0eefcf14992(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n        offset = ends[ends.length - 1];\n    }\n    return minSquaredDistance;\n}\n\n\n\n/**\n * @module ol/geom/flat/deflate\n */ /**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */ function $6b086aa46281540d$export$60815ead40ec79ab(flatCoordinates, offset, coordinate, stride) {\n    for(let i = 0, ii = coordinate.length; i < ii; ++i)flatCoordinates[offset++] = coordinate[i];\n    return offset;\n}\nfunction $6b086aa46281540d$export$5c4daf67e03c190f(flatCoordinates, offset, coordinates, stride) {\n    for(let i = 0, ii = coordinates.length; i < ii; ++i){\n        const coordinate = coordinates[i];\n        for(let j = 0; j < stride; ++j)flatCoordinates[offset++] = coordinate[j];\n    }\n    return offset;\n}\nfunction $6b086aa46281540d$export$47c3746a74384d45(flatCoordinates, offset, coordinatess, stride, ends) {\n    ends = ends ? ends : [];\n    let i = 0;\n    for(let j = 0, jj = coordinatess.length; j < jj; ++j){\n        const end = $6b086aa46281540d$export$5c4daf67e03c190f(flatCoordinates, offset, coordinatess[j], stride);\n        ends[i++] = end;\n        offset = end;\n    }\n    ends.length = i;\n    return ends;\n}\nfunction $6b086aa46281540d$export$f9f2bb59da4accd3(flatCoordinates, offset, coordinatesss, stride, endss) {\n    endss = endss ? endss : [];\n    let i = 0;\n    for(let j = 0, jj = coordinatesss.length; j < jj; ++j){\n        const ends = $6b086aa46281540d$export$47c3746a74384d45(flatCoordinates, offset, coordinatesss[j], stride, endss[i]);\n        if (ends.length === 0) ends[0] = offset;\n        endss[i++] = ends;\n        offset = ends[ends.length - 1];\n    }\n    endss.length = i;\n    return endss;\n}\n\n\n/**\n * @module ol/geom/flat/simplify\n */ // Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nfunction $8780aae6970f5f65$export$2cbbcce9030b8734(flatCoordinates, offset, end, stride, squaredTolerance, highQuality, simplifiedFlatCoordinates) {\n    simplifiedFlatCoordinates = simplifiedFlatCoordinates !== undefined ? simplifiedFlatCoordinates : [];\n    if (!highQuality) {\n        end = $8780aae6970f5f65$export$46dba205a0107e9e(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        flatCoordinates = simplifiedFlatCoordinates;\n        offset = 0;\n        stride = 2;\n    }\n    simplifiedFlatCoordinates.length = $8780aae6970f5f65$export$ef693d1572e64fb8(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return simplifiedFlatCoordinates;\n}\nfunction $8780aae6970f5f65$export$ef693d1572e64fb8(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n    const n = (end - offset) / stride;\n    if (n < 3) {\n        for(; offset < end; offset += stride){\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];\n        }\n        return simplifiedOffset;\n    }\n    /** @type {Array<number>} */ const markers = new Array(n);\n    markers[0] = 1;\n    markers[n - 1] = 1;\n    /** @type {Array<number>} */ const stack = [\n        offset,\n        end - stride\n    ];\n    let index = 0;\n    while(stack.length > 0){\n        const last = stack.pop();\n        const first = stack.pop();\n        let maxSquaredDistance = 0;\n        const x1 = flatCoordinates[first];\n        const y1 = flatCoordinates[first + 1];\n        const x2 = flatCoordinates[last];\n        const y2 = flatCoordinates[last + 1];\n        for(let i = first + stride; i < last; i += stride){\n            const x = flatCoordinates[i];\n            const y = flatCoordinates[i + 1];\n            const squaredDistance = (0, $6b000a049d919fe5$export$251bb0a9cef172e6)(x, y, x1, y1, x2, y2);\n            if (squaredDistance > maxSquaredDistance) {\n                index = i;\n                maxSquaredDistance = squaredDistance;\n            }\n        }\n        if (maxSquaredDistance > squaredTolerance) {\n            markers[(index - offset) / stride] = 1;\n            if (first + stride < index) stack.push(first, index);\n            if (index + stride < last) stack.push(index, last);\n        }\n    }\n    for(let i = 0; i < n; ++i)if (markers[i]) {\n        simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride];\n        simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride + 1];\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$cedb9900c0b225c2(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        simplifiedOffset = $8780aae6970f5f65$export$ef693d1572e64fb8(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset);\n        simplifiedEnds.push(simplifiedOffset);\n        offset = end;\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$5d74fb54bb752ea0(flatCoordinates, offset, endss, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        const simplifiedEnds = [];\n        simplifiedOffset = $8780aae6970f5f65$export$cedb9900c0b225c2(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n        simplifiedEndss.push(simplifiedEnds);\n        offset = ends[ends.length - 1];\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$46dba205a0107e9e(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n    if (end <= offset + stride) {\n        // zero or one point, no simplification possible, so copy and return\n        for(; offset < end; offset += stride){\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n            simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];\n        }\n        return simplifiedOffset;\n    }\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    // copy first point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n    let x2 = x1;\n    let y2 = y1;\n    for(offset += stride; offset < end; offset += stride){\n        x2 = flatCoordinates[offset];\n        y2 = flatCoordinates[offset + 1];\n        if ((0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x1, y1, x2, y2) > squaredTolerance) {\n            // copy point at offset\n            simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n            simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n            x1 = x2;\n            y1 = y2;\n        }\n    }\n    if (x2 != x1 || y2 != y1) {\n        // copy last point\n        simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n        simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$51a0620f7a28532b(value, tolerance) {\n    return tolerance * Math.round(value / tolerance);\n}\nfunction $8780aae6970f5f65$export$b84e8d2c4920a0c6(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n    // do nothing if the line is empty\n    if (offset == end) return simplifiedOffset;\n    // snap the first coordinate (P1)\n    let x1 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset], tolerance);\n    let y1 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    // add the first coordinate to the output\n    simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n    // find the next coordinate that does not snap to the same value as the first\n    // coordinate (P2)\n    let x2, y2;\n    do {\n        x2 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset], tolerance);\n        y2 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset + 1], tolerance);\n        offset += stride;\n        if (offset == end) {\n            // all coordinates snap to the same value, the line collapses to a point\n            // push the last snapped value anyway to ensure that the output contains\n            // at least two points\n            // FIXME should we really return at least two points anyway?\n            simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n            simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n            return simplifiedOffset;\n        }\n    }while (x2 == x1 && y2 == y1);\n    while(offset < end){\n        // snap the next coordinate (P3)\n        const x3 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset], tolerance);\n        const y3 = $8780aae6970f5f65$export$51a0620f7a28532b(flatCoordinates[offset + 1], tolerance);\n        offset += stride;\n        // skip P3 if it is equal to P2\n        if (x3 == x2 && y3 == y2) continue;\n        // calculate the delta between P1 and P2\n        const dx1 = x2 - x1;\n        const dy1 = y2 - y1;\n        // calculate the delta between P3 and P1\n        const dx2 = x3 - x1;\n        const dy2 = y3 - y1;\n        // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n        // P1 in the same direction then P2 is on the straight line between P1 and\n        // P3\n        if (dx1 * dy2 == dy1 * dx2 && (dx1 < 0 && dx2 < dx1 || dx1 == dx2 || dx1 > 0 && dx2 > dx1) && (dy1 < 0 && dy2 < dy1 || dy1 == dy2 || dy1 > 0 && dy2 > dy1)) {\n            // discard P2 and set P2 = P3\n            x2 = x3;\n            y2 = y3;\n            continue;\n        }\n        // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n        // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n        // and continue with P1 = P2 and P2 = P3\n        simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n        simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n        x1 = x2;\n        y1 = y2;\n        x2 = x3;\n        y2 = y3;\n    }\n    // add the last point (P2)\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$60a9904b67f8d51b(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        simplifiedOffset = $8780aae6970f5f65$export$b84e8d2c4920a0c6(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);\n        simplifiedEnds.push(simplifiedOffset);\n        offset = end;\n    }\n    return simplifiedOffset;\n}\nfunction $8780aae6970f5f65$export$b9acf67ef05cd17c(flatCoordinates, offset, endss, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        const simplifiedEnds = [];\n        simplifiedOffset = $8780aae6970f5f65$export$60a9904b67f8d51b(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n        simplifiedEndss.push(simplifiedEnds);\n        offset = ends[ends.length - 1];\n    }\n    return simplifiedOffset;\n}\n\n\n/**\n * @module ol/geom/flat/inflate\n */ /**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} [coordinates] Coordinates.\n * @return {Array<import(\"../../coordinate.js\").Coordinate>} Coordinates.\n */ function $5454470599558ddd$export$9c0934e4e9c3f61e(flatCoordinates, offset, end, stride, coordinates) {\n    coordinates = coordinates !== undefined ? coordinates : [];\n    let i = 0;\n    for(let j = offset; j < end; j += stride)coordinates[i++] = flatCoordinates.slice(j, j + stride);\n    coordinates.length = i;\n    return coordinates;\n}\nfunction $5454470599558ddd$export$cbb9596fc0f40db2(flatCoordinates, offset, ends, stride, coordinatess) {\n    coordinatess = coordinatess !== undefined ? coordinatess : [];\n    let i = 0;\n    for(let j = 0, jj = ends.length; j < jj; ++j){\n        const end = ends[j];\n        coordinatess[i++] = $5454470599558ddd$export$9c0934e4e9c3f61e(flatCoordinates, offset, end, stride, coordinatess[i]);\n        offset = end;\n    }\n    coordinatess.length = i;\n    return coordinatess;\n}\nfunction $5454470599558ddd$export$915c7058aeb4dfeb(flatCoordinates, offset, endss, stride, coordinatesss) {\n    coordinatesss = coordinatesss !== undefined ? coordinatesss : [];\n    let i = 0;\n    for(let j = 0, jj = endss.length; j < jj; ++j){\n        const ends = endss[j];\n        coordinatesss[i++] = ends.length === 1 && ends[0] === offset ? [] : $5454470599558ddd$export$cbb9596fc0f40db2(flatCoordinates, offset, ends, stride, coordinatesss[i]);\n        offset = ends[ends.length - 1];\n    }\n    coordinatesss.length = i;\n    return coordinatesss;\n}\n\n\n/**\n * @module ol/geom/flat/area\n */ /**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Area.\n */ function $01ff26a2f986a1d0$export$3c5e1905f889266e(flatCoordinates, offset, end, stride) {\n    let twiceArea = 0;\n    let x1 = flatCoordinates[end - stride];\n    let y1 = flatCoordinates[end - stride + 1];\n    for(; offset < end; offset += stride){\n        const x2 = flatCoordinates[offset];\n        const y2 = flatCoordinates[offset + 1];\n        twiceArea += y1 * x2 - x1 * y2;\n        x1 = x2;\n        y1 = y2;\n    }\n    return twiceArea / 2;\n}\nfunction $01ff26a2f986a1d0$export$7a8ee541dfdf2ed5(flatCoordinates, offset, ends, stride) {\n    let area = 0;\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        area += $01ff26a2f986a1d0$export$3c5e1905f889266e(flatCoordinates, offset, end, stride);\n        offset = end;\n    }\n    return area;\n}\nfunction $01ff26a2f986a1d0$export$78e139679ca7205(flatCoordinates, offset, endss, stride) {\n    let area = 0;\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        area += $01ff26a2f986a1d0$export$7a8ee541dfdf2ed5(flatCoordinates, offset, ends, stride);\n        offset = ends[ends.length - 1];\n    }\n    return area;\n}\n\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */ class $548636579b4087f2$var$LinearRing extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */ constructor(coordinates, layout){\n        super();\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDelta_ = -1;\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDeltaRevision_ = -1;\n        if (layout !== undefined && !Array.isArray(coordinates[0])) this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n        else this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ coordinates, layout);\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   */ clone() {\n        return new $548636579b4087f2$var$LinearRing(this.flatCoordinates.slice(), this.layout);\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt((0, $bf5604c1b8258b71$export$bc2eb611ddf80103)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return (0, $bf5604c1b8258b71$export$4adc8e5135fb44c)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    }\n    /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */ getArea() {\n        return (0, $01ff26a2f986a1d0$export$3c5e1905f889266e)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n    /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */ getCoordinates() {\n        return (0, $5454470599558ddd$export$9c0934e4e9c3f61e)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n    /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        const simplifiedFlatCoordinates = [];\n        simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$ef693d1572e64fb8)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        return new $548636579b4087f2$var$LinearRing(simplifiedFlatCoordinates, \"XY\");\n    }\n    /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */ getType() {\n        return \"LinearRing\";\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */ intersectsExtent(extent) {\n        return false;\n    }\n    /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 1);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        this.flatCoordinates.length = (0, $6b086aa46281540d$export$5c4daf67e03c190f)(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    }\n}\nvar $548636579b4087f2$export$2e2bcd8739ae039 = $548636579b4087f2$var$LinearRing;\n\n\n/**\n * @module ol/geom/Point\n */ \n\n\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */ class $6eced4c969949f6b$var$Point extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */ constructor(coordinates, layout){\n        super();\n        this.setCoordinates(coordinates, layout);\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   */ clone() {\n        const point = new $6eced4c969949f6b$var$Point(this.flatCoordinates.slice(), this.layout);\n        point.applyProperties(this);\n        return point;\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        const flatCoordinates = this.flatCoordinates;\n        const squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, flatCoordinates[0], flatCoordinates[1]);\n        if (squaredDistance < minSquaredDistance) {\n            const stride = this.stride;\n            for(let i = 0; i < stride; ++i)closestPoint[i] = flatCoordinates[i];\n            closestPoint.length = stride;\n            return squaredDistance;\n        }\n        return minSquaredDistance;\n    }\n    /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   */ getCoordinates() {\n        return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n    }\n    /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */ computeExtent(extent) {\n        return (0, $6da4c8ed3074c92b$export$4838bf78d04a9440)(this.flatCoordinates, extent);\n    }\n    /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */ getType() {\n        return \"Point\";\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */ intersectsExtent(extent) {\n        return (0, $6da4c8ed3074c92b$export$805bdfd6d6690e97)(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n    }\n    /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 0);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        this.flatCoordinates.length = (0, $6b086aa46281540d$export$60815ead40ec79ab)(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    }\n}\nvar $6eced4c969949f6b$export$2e2bcd8739ae039 = $6eced4c969949f6b$var$Point;\n\n\n\n\n\n\n\n/**\n * @module ol/geom/flat/interiorpoint\n */ \n/**\n * @module ol/geom/flat/contains\n */ \nfunction $239aa88e7a573859$export$cedabedc7ac0e138(flatCoordinates, offset, end, stride, extent) {\n    const outside = (0, $6da4c8ed3074c92b$export$f9ed8a3d123a08e2)(extent, /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains (x, y).\n     */ function(coordinate) {\n        return !$239aa88e7a573859$export$949a7a3a4b6f34fa(flatCoordinates, offset, end, stride, coordinate[0], coordinate[1]);\n    });\n    return !outside;\n}\nfunction $239aa88e7a573859$export$949a7a3a4b6f34fa(flatCoordinates, offset, end, stride, x, y) {\n    // https://geomalgorithms.com/a03-_inclusion.html\n    // Copyright 2000 softSurfer, 2012 Dan Sunday\n    // This code may be freely used and modified for any purpose\n    // providing that this copyright notice is included with it.\n    // SoftSurfer makes no warranty for this code, and cannot be held\n    // liable for any real or imagined damage resulting from its use.\n    // Users of this code must verify correctness for their application.\n    let wn = 0;\n    let x1 = flatCoordinates[end - stride];\n    let y1 = flatCoordinates[end - stride + 1];\n    for(; offset < end; offset += stride){\n        const x2 = flatCoordinates[offset];\n        const y2 = flatCoordinates[offset + 1];\n        if (y1 <= y) {\n            if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) wn++;\n        } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) wn--;\n        x1 = x2;\n        y1 = y2;\n    }\n    return wn !== 0;\n}\nfunction $239aa88e7a573859$export$ae868c0f6acc3355(flatCoordinates, offset, ends, stride, x, y) {\n    if (ends.length === 0) return false;\n    if (!$239aa88e7a573859$export$949a7a3a4b6f34fa(flatCoordinates, offset, ends[0], stride, x, y)) return false;\n    for(let i = 1, ii = ends.length; i < ii; ++i){\n        if ($239aa88e7a573859$export$949a7a3a4b6f34fa(flatCoordinates, ends[i - 1], ends[i], stride, x, y)) return false;\n    }\n    return true;\n}\nfunction $239aa88e7a573859$export$c760d9d16cf92043(flatCoordinates, offset, endss, stride, x, y) {\n    if (endss.length === 0) return false;\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        if ($239aa88e7a573859$export$ae868c0f6acc3355(flatCoordinates, offset, ends, stride, x, y)) return true;\n        offset = ends[ends.length - 1];\n    }\n    return false;\n}\n\n\nfunction $2166f19777f69377$export$50e3b25928a5e892(flatCoordinates, offset, ends, stride, flatCenters, flatCentersOffset, dest) {\n    let i, ii, x, x1, x2, y1, y2;\n    const y = flatCenters[flatCentersOffset + 1];\n    /** @type {Array<number>} */ const intersections = [];\n    // Calculate intersections with the horizontal line\n    for(let r = 0, rr = ends.length; r < rr; ++r){\n        const end = ends[r];\n        x1 = flatCoordinates[end - stride];\n        y1 = flatCoordinates[end - stride + 1];\n        for(i = offset; i < end; i += stride){\n            x2 = flatCoordinates[i];\n            y2 = flatCoordinates[i + 1];\n            if (y <= y1 && y2 <= y || y1 <= y && y <= y2) {\n                x = (y - y1) / (y2 - y1) * (x2 - x1) + x1;\n                intersections.push(x);\n            }\n            x1 = x2;\n            y1 = y2;\n        }\n    }\n    // Find the longest segment of the horizontal line that has its center point\n    // inside the linear ring.\n    let pointX = NaN;\n    let maxSegmentLength = -Infinity;\n    intersections.sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n    x1 = intersections[0];\n    for(i = 1, ii = intersections.length; i < ii; ++i){\n        x2 = intersections[i];\n        const segmentLength = Math.abs(x2 - x1);\n        if (segmentLength > maxSegmentLength) {\n            x = (x1 + x2) / 2;\n            if ((0, $239aa88e7a573859$export$ae868c0f6acc3355)(flatCoordinates, offset, ends, stride, x, y)) {\n                pointX = x;\n                maxSegmentLength = segmentLength;\n            }\n        }\n        x1 = x2;\n    }\n    if (isNaN(pointX)) // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n    if (dest) {\n        dest.push(pointX, y, maxSegmentLength);\n        return dest;\n    }\n    return [\n        pointX,\n        y,\n        maxSegmentLength\n    ];\n}\nfunction $2166f19777f69377$export$11463803eda8a372(flatCoordinates, offset, endss, stride, flatCenters) {\n    let interiorPoints = [];\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        interiorPoints = $2166f19777f69377$export$50e3b25928a5e892(flatCoordinates, offset, ends, stride, flatCenters, 2 * i, interiorPoints);\n        offset = ends[ends.length - 1];\n    }\n    return interiorPoints;\n}\n\n\n\n/**\n * @module ol/geom/flat/intersectsextent\n */ \n/**\n * @module ol/geom/flat/segments\n */ /**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */ function $3e64078bffae1cbd$export$4b80e395e36b5a56(flatCoordinates, offset, end, stride, callback) {\n    let ret;\n    offset += stride;\n    for(; offset < end; offset += stride){\n        ret = callback(flatCoordinates.slice(offset - stride, offset), flatCoordinates.slice(offset, offset + stride));\n        if (ret) return ret;\n    }\n    return false;\n}\n\n\n\nfunction $acee589e5b390c5c$export$40d8d71841a3d779(flatCoordinates, offset, end, stride, extent) {\n    const coordinatesExtent = (0, $6da4c8ed3074c92b$export$30570204156ffd18)((0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)(), flatCoordinates, offset, end, stride);\n    if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(extent, coordinatesExtent)) return false;\n    if ((0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(extent, coordinatesExtent)) return true;\n    if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) return true;\n    if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) return true;\n    return (0, $3e64078bffae1cbd$export$4b80e395e36b5a56)(flatCoordinates, offset, end, stride, /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */ function(point1, point2) {\n        return (0, $6da4c8ed3074c92b$export$a6a5a7a461419425)(extent, point1, point2);\n    });\n}\nfunction $acee589e5b390c5c$export$fdb1d8e850bf7937(flatCoordinates, offset, ends, stride, extent) {\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        if ($acee589e5b390c5c$export$40d8d71841a3d779(flatCoordinates, offset, ends[i], stride, extent)) return true;\n        offset = ends[i];\n    }\n    return false;\n}\nfunction $acee589e5b390c5c$export$830a0dafbb2ef1c5(flatCoordinates, offset, end, stride, extent) {\n    if ($acee589e5b390c5c$export$40d8d71841a3d779(flatCoordinates, offset, end, stride, extent)) return true;\n    if ((0, $239aa88e7a573859$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[0], extent[1])) return true;\n    if ((0, $239aa88e7a573859$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[0], extent[3])) return true;\n    if ((0, $239aa88e7a573859$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[2], extent[1])) return true;\n    if ((0, $239aa88e7a573859$export$949a7a3a4b6f34fa)(flatCoordinates, offset, end, stride, extent[2], extent[3])) return true;\n    return false;\n}\nfunction $acee589e5b390c5c$export$76dcd8f8f83b6ddb(flatCoordinates, offset, ends, stride, extent) {\n    if (!$acee589e5b390c5c$export$830a0dafbb2ef1c5(flatCoordinates, offset, ends[0], stride, extent)) return false;\n    if (ends.length === 1) return true;\n    for(let i = 1, ii = ends.length; i < ii; ++i)if ((0, $239aa88e7a573859$export$cedabedc7ac0e138)(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n        if (!$acee589e5b390c5c$export$40d8d71841a3d779(flatCoordinates, ends[i - 1], ends[i], stride, extent)) return false;\n    }\n    return true;\n}\nfunction $acee589e5b390c5c$export$77b72fa3792f5bf0(flatCoordinates, offset, endss, stride, extent) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        if ($acee589e5b390c5c$export$76dcd8f8f83b6ddb(flatCoordinates, offset, ends, stride, extent)) return true;\n        offset = ends[ends.length - 1];\n    }\n    return false;\n}\n\n\n/**\n * @module ol/geom/flat/orient\n */ /**\n * @module ol/geom/flat/reverse\n */ /**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n */ function $155dc783a4ec227e$export$741858880c96b18c(flatCoordinates, offset, end, stride) {\n    while(offset < end - stride){\n        for(let i = 0; i < stride; ++i){\n            const tmp = flatCoordinates[offset + i];\n            flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\n            flatCoordinates[end - stride + i] = tmp;\n        }\n        offset += stride;\n        end -= stride;\n    }\n}\n\n\nfunction $7892dc06ffd23218$export$318f2842ed17e094(flatCoordinates, offset, end, stride) {\n    // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n    // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n    let edge = 0;\n    let x1 = flatCoordinates[end - stride];\n    let y1 = flatCoordinates[end - stride + 1];\n    for(; offset < end; offset += stride){\n        const x2 = flatCoordinates[offset];\n        const y2 = flatCoordinates[offset + 1];\n        edge += (x2 - x1) * (y2 + y1);\n        x1 = x2;\n        y1 = y2;\n    }\n    return edge === 0 ? undefined : edge > 0;\n}\nfunction $7892dc06ffd23218$export$f27cd06e85f4ba28(flatCoordinates, offset, ends, stride, right) {\n    right = right !== undefined ? right : false;\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        const isClockwise = $7892dc06ffd23218$export$318f2842ed17e094(flatCoordinates, offset, end, stride);\n        if (i === 0) {\n            if (right && isClockwise || !right && !isClockwise) return false;\n        } else {\n            if (right && !isClockwise || !right && isClockwise) return false;\n        }\n        offset = end;\n    }\n    return true;\n}\nfunction $7892dc06ffd23218$export$a1d138f4bd85f4b4(flatCoordinates, offset, endss, stride, right) {\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        if (!$7892dc06ffd23218$export$f27cd06e85f4ba28(flatCoordinates, offset, ends, stride, right)) return false;\n        if (ends.length) offset = ends[ends.length - 1];\n    }\n    return true;\n}\nfunction $7892dc06ffd23218$export$b71b604ddfc778c7(flatCoordinates, offset, ends, stride, right) {\n    right = right !== undefined ? right : false;\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        const isClockwise = $7892dc06ffd23218$export$318f2842ed17e094(flatCoordinates, offset, end, stride);\n        const reverse = i === 0 ? right && isClockwise || !right && !isClockwise : right && !isClockwise || !right && isClockwise;\n        if (reverse) (0, $155dc783a4ec227e$export$741858880c96b18c)(flatCoordinates, offset, end, stride);\n        offset = end;\n    }\n    return offset;\n}\nfunction $7892dc06ffd23218$export$ea9ed55fc2a85010(flatCoordinates, offset, endss, stride, right) {\n    for(let i = 0, ii = endss.length; i < ii; ++i)offset = $7892dc06ffd23218$export$b71b604ddfc778c7(flatCoordinates, offset, endss[i], stride, right);\n    return offset;\n}\nfunction $7892dc06ffd23218$export$cb72ae403d6e78e6(flatCoordinates, ends) {\n    const endss = [];\n    let offset = 0;\n    let prevEndIndex = 0;\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        // classifies an array of rings into polygons with outer rings and holes\n        if (!$7892dc06ffd23218$export$318f2842ed17e094(flatCoordinates, offset, end, 2)) endss.push(ends.slice(prevEndIndex, i + 1));\n        else {\n            if (endss.length === 0) continue;\n            endss[endss.length - 1].push(ends[prevEndIndex]);\n        }\n        prevEndIndex = i + 1;\n        offset = end;\n    }\n    return endss;\n}\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */ class $40aa8d43bbe572bf$var$Polygon extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */ constructor(coordinates, layout, ends){\n        super();\n        /**\n     * @type {Array<number>}\n     * @private\n     */ this.ends_ = [];\n        /**\n     * @private\n     * @type {number}\n     */ this.flatInteriorPointRevision_ = -1;\n        /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */ this.flatInteriorPoint_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDelta_ = -1;\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDeltaRevision_ = -1;\n        /**\n     * @private\n     * @type {number}\n     */ this.orientedRevision_ = -1;\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.orientedFlatCoordinates_ = null;\n        if (layout !== undefined && ends) {\n            this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n            this.ends_ = ends;\n        } else this.setCoordinates(/** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ coordinates, layout);\n    }\n    /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */ appendLinearRing(linearRing) {\n        if (!this.flatCoordinates) this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n        else (0, $b998d41b678ed5d1$export$8b58be045bf06082)(this.flatCoordinates, linearRing.getFlatCoordinates());\n        this.ends_.push(this.flatCoordinates.length);\n        this.changed();\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */ clone() {\n        const polygon = new $40aa8d43bbe572bf$var$Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n        polygon.applyProperties(this);\n        return polygon;\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt((0, $bf5604c1b8258b71$export$fbf31c8f2668ed5a)(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return (0, $bf5604c1b8258b71$export$5a48a0eefcf14992)(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */ containsXY(x, y) {\n        return (0, $239aa88e7a573859$export$ae868c0f6acc3355)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n    }\n    /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */ getArea() {\n        return (0, $01ff26a2f986a1d0$export$7a8ee541dfdf2ed5)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n    }\n    /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */ getCoordinates(right) {\n        let flatCoordinates;\n        if (right !== undefined) {\n            flatCoordinates = this.getOrientedFlatCoordinates().slice();\n            (0, $7892dc06ffd23218$export$b71b604ddfc778c7)(flatCoordinates, 0, this.ends_, this.stride, right);\n        } else flatCoordinates = this.flatCoordinates;\n        return (0, $5454470599558ddd$export$cbb9596fc0f40db2)(flatCoordinates, 0, this.ends_, this.stride);\n    }\n    /**\n   * @return {Array<number>} Ends.\n   */ getEnds() {\n        return this.ends_;\n    }\n    /**\n   * @return {Array<number>} Interior point.\n   */ getFlatInteriorPoint() {\n        if (this.flatInteriorPointRevision_ != this.getRevision()) {\n            const flatCenter = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(this.getExtent());\n            this.flatInteriorPoint_ = (0, $2166f19777f69377$export$50e3b25928a5e892)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n            this.flatInteriorPointRevision_ = this.getRevision();\n        }\n        return this.flatInteriorPoint_;\n    }\n    /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */ getInteriorPoint() {\n        return new (0, $6eced4c969949f6b$export$2e2bcd8739ae039)(this.getFlatInteriorPoint(), \"XYM\");\n    }\n    /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */ getLinearRingCount() {\n        return this.ends_.length;\n    }\n    /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */ getLinearRing(index) {\n        if (index < 0 || this.ends_.length <= index) return null;\n        return new (0, $548636579b4087f2$export$2e2bcd8739ae039)(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n    }\n    /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */ getLinearRings() {\n        const layout = this.layout;\n        const flatCoordinates = this.flatCoordinates;\n        const ends = this.ends_;\n        const linearRings = [];\n        let offset = 0;\n        for(let i = 0, ii = ends.length; i < ii; ++i){\n            const end = ends[i];\n            const linearRing = new (0, $548636579b4087f2$export$2e2bcd8739ae039)(flatCoordinates.slice(offset, end), layout);\n            linearRings.push(linearRing);\n            offset = end;\n        }\n        return linearRings;\n    }\n    /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */ getOrientedFlatCoordinates() {\n        if (this.orientedRevision_ != this.getRevision()) {\n            const flatCoordinates = this.flatCoordinates;\n            if ((0, $7892dc06ffd23218$export$f27cd06e85f4ba28)(flatCoordinates, 0, this.ends_, this.stride)) this.orientedFlatCoordinates_ = flatCoordinates;\n            else {\n                this.orientedFlatCoordinates_ = flatCoordinates.slice();\n                this.orientedFlatCoordinates_.length = (0, $7892dc06ffd23218$export$b71b604ddfc778c7)(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n            }\n            this.orientedRevision_ = this.getRevision();\n        }\n        return this.orientedFlatCoordinates_;\n    }\n    /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        const simplifiedFlatCoordinates = [];\n        const simplifiedEnds = [];\n        simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$60a9904b67f8d51b)(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n        return new $40aa8d43bbe572bf$var$Polygon(simplifiedFlatCoordinates, \"XY\", simplifiedEnds);\n    }\n    /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */ getType() {\n        return \"Polygon\";\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */ intersectsExtent(extent) {\n        return (0, $acee589e5b390c5c$export$76dcd8f8f83b6ddb)(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n    }\n    /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 2);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        const ends = (0, $6b086aa46281540d$export$47c3746a74384d45)(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n        this.changed();\n    }\n}\nvar $40aa8d43bbe572bf$export$2e2bcd8739ae039 = $40aa8d43bbe572bf$var$Polygon;\nfunction $40aa8d43bbe572bf$export$f99d756c6d81ae3f(center, radius, n, sphereRadius) {\n    n = n ? n : 32;\n    /** @type {Array<number>} */ const flatCoordinates = [];\n    for(let i = 0; i < n; ++i)(0, $b998d41b678ed5d1$export$8b58be045bf06082)(flatCoordinates, (0, $fb75384508533d8f$export$cc800923e997bb8)(center, radius, 2 * Math.PI * i / n, sphereRadius));\n    flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n    return new $40aa8d43bbe572bf$var$Polygon(flatCoordinates, \"XY\", [\n        flatCoordinates.length\n    ]);\n}\nfunction $40aa8d43bbe572bf$export$c16b671815801c75(extent) {\n    if ((0, $6da4c8ed3074c92b$export$dd1bc94b04021eeb)(extent)) throw new Error(\"Cannot create polygon from empty extent\");\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const flatCoordinates = [\n        minX,\n        minY,\n        minX,\n        maxY,\n        maxX,\n        maxY,\n        maxX,\n        minY,\n        minX,\n        minY\n    ];\n    return new $40aa8d43bbe572bf$var$Polygon(flatCoordinates, \"XY\", [\n        flatCoordinates.length\n    ]);\n}\nfunction $40aa8d43bbe572bf$export$2451009d645fb8c2(circle, sides, angle) {\n    sides = sides ? sides : 32;\n    const stride = circle.getStride();\n    const layout = circle.getLayout();\n    const center = circle.getCenter();\n    const arrayLength = stride * (sides + 1);\n    const flatCoordinates = new Array(arrayLength);\n    for(let i = 0; i < arrayLength; i += stride){\n        flatCoordinates[i] = 0;\n        flatCoordinates[i + 1] = 0;\n        for(let j = 2; j < stride; j++)flatCoordinates[i + j] = center[j];\n    }\n    const ends = [\n        flatCoordinates.length\n    ];\n    const polygon = new $40aa8d43bbe572bf$var$Polygon(flatCoordinates, layout, ends);\n    $40aa8d43bbe572bf$export$87d6a1539a56e47f(polygon, center, circle.getRadius(), angle);\n    return polygon;\n}\nfunction $40aa8d43bbe572bf$export$87d6a1539a56e47f(polygon, center, radius, angle) {\n    const flatCoordinates = polygon.getFlatCoordinates();\n    const stride = polygon.getStride();\n    const sides = flatCoordinates.length / stride - 1;\n    const startAngle = angle ? angle : 0;\n    for(let i = 0; i <= sides; ++i){\n        const offset = i * stride;\n        const angle = startAngle + (0, $6b000a049d919fe5$export$ba467bec01d66def)(i, sides) * 2 * Math.PI / sides;\n        flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n        flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n    }\n    polygon.changed();\n}\n\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */ /**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */ /**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */ /**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */ /**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */ /**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center (in view projection coordinates).\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */ /**\n * Like {@link import(\"./Map.js\").FrameState}, but just `viewState` and `extent`.\n * @typedef {Object} ViewStateLayerStateExtent\n * @property {State} viewState View state.\n * @property {import(\"./extent.js\").Extent} extent Extent (in user projection coordinates).\n * @property {Array<import(\"./layer/Layer.js\").State>} [layerStatesArray] Layer states.\n */ /**\n * Default min zoom level for the map view.\n * @type {number}\n */ const $70364d0195659942$var$DEFAULT_MIN_ZOOM = 0;\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */ /***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */ /**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */ class $70364d0195659942$var$View extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\n   * @param {ViewOptions} [options] View options.\n   */ constructor(options){\n        super();\n        /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {ViewOnSignature<void>}\n     */ this.un;\n        options = Object.assign({}, options);\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.hints_ = [\n            0,\n            0\n        ];\n        /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */ this.animations_ = [];\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.updateAnimationKey_;\n        /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */ this.projection_ = (0, $9c4744460e43e41b$export$549167224996a0fb)(options.projection, \"EPSG:3857\");\n        /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */ this.viewportSize_ = [\n            100,\n            100\n        ];\n        /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */ this.targetCenter_ = null;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.targetResolution_;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.targetRotation_;\n        /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */ this.nextCenter_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.nextResolution_;\n        /**\n     * @private\n     * @type {number}\n     */ this.nextRotation_;\n        /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */ this.cancelAnchor_ = undefined;\n        if (options.projection) (0, $9c4744460e43e41b$export$ed949affbc7c4223)();\n        if (options.center) options.center = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(options.center, this.projection_);\n        if (options.extent) options.extent = (0, $9c4744460e43e41b$export$494be3a3a25689ca)(options.extent, this.projection_);\n        this.applyOptions_(options);\n    }\n    /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */ applyOptions_(options) {\n        const properties = Object.assign({}, options);\n        for(const key in 0, $d35baefbe89be4c5$export$2e2bcd8739ae039)delete properties[key];\n        this.setProperties(properties, true);\n        const resolutionConstraintInfo = $70364d0195659942$export$c68d65f9148da196(options);\n        /**\n     * @private\n     * @type {number}\n     */ this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n        /**\n     * @private\n     * @type {number}\n     */ this.minResolution_ = resolutionConstraintInfo.minResolution;\n        /**\n     * @private\n     * @type {number}\n     */ this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n        /**\n     * @private\n     * @type {Array<number>|undefined}\n     */ this.resolutions_ = options.resolutions;\n        /**\n     * @type {Array<number>|undefined}\n     * @private\n     */ this.padding_ = options.padding;\n        /**\n     * @private\n     * @type {number}\n     */ this.minZoom_ = resolutionConstraintInfo.minZoom;\n        const centerConstraint = $70364d0195659942$export$964345001ee9ac52(options);\n        const resolutionConstraint = resolutionConstraintInfo.constraint;\n        const rotationConstraint = $70364d0195659942$export$4eeaa08dd550e3c0(options);\n        /**\n     * @private\n     * @type {Constraints}\n     */ this.constraints_ = {\n            center: centerConstraint,\n            resolution: resolutionConstraint,\n            rotation: rotationConstraint\n        };\n        this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n        this.setCenterInternal(options.center !== undefined ? options.center : null);\n        if (options.resolution !== undefined) this.setResolution(options.resolution);\n        else if (options.zoom !== undefined) this.setZoom(options.zoom);\n    }\n    /**\n   * Padding (in css pixels).\n   * If the map viewport is partially covered with other content (overlays) along\n   * its edges, this setting allows to shift the center of the viewport away from that\n   * content. The order of the values in the array is top, right, bottom, left.\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n   * @type {Array<number>|undefined}\n   * @api\n   */ get padding() {\n        return this.padding_;\n    }\n    set padding(padding) {\n        let oldPadding = this.padding_;\n        this.padding_ = padding;\n        const center = this.getCenterInternal();\n        if (center) {\n            const newPadding = padding || [\n                0,\n                0,\n                0,\n                0\n            ];\n            oldPadding = oldPadding || [\n                0,\n                0,\n                0,\n                0\n            ];\n            const resolution = this.getResolution();\n            const offsetX = resolution / 2 * (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n            const offsetY = resolution / 2 * (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n            this.setCenterInternal([\n                center[0] + offsetX,\n                center[1] - offsetY\n            ]);\n        }\n    }\n    /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */ getUpdatedOptions_(newOptions) {\n        const options = this.getProperties();\n        // preserve resolution (or zoom)\n        if (options.resolution !== undefined) options.resolution = this.getResolution();\n        else options.zoom = this.getZoom();\n        // preserve center\n        options.center = this.getCenterInternal();\n        // preserve rotation\n        options.rotation = this.getRotation();\n        return Object.assign({}, options, newOptions);\n    }\n    /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */ animate(var_args) {\n        if (this.isDef() && !this.getAnimating()) this.resolveConstraints(0);\n        const args = new Array(arguments.length);\n        for(let i = 0; i < args.length; ++i){\n            let options = arguments[i];\n            if (options.center) {\n                options = Object.assign({}, options);\n                options.center = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(options.center, this.getProjection());\n            }\n            if (options.anchor) {\n                options = Object.assign({}, options);\n                options.anchor = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(options.anchor, this.getProjection());\n            }\n            args[i] = options;\n        }\n        this.animateInternal.apply(this, args);\n    }\n    /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */ animateInternal(var_args) {\n        let animationCount = arguments.length;\n        let callback;\n        if (animationCount > 1 && typeof arguments[animationCount - 1] === \"function\") {\n            callback = arguments[animationCount - 1];\n            --animationCount;\n        }\n        let i = 0;\n        for(; i < animationCount && !this.isDef(); ++i){\n            // if view properties are not yet set, shortcut to the final state\n            const state = arguments[i];\n            if (state.center) this.setCenterInternal(state.center);\n            if (state.zoom !== undefined) this.setZoom(state.zoom);\n            else if (state.resolution) this.setResolution(state.resolution);\n            if (state.rotation !== undefined) this.setRotation(state.rotation);\n        }\n        if (i === animationCount) {\n            if (callback) $70364d0195659942$var$animationCallback(callback, true);\n            return;\n        }\n        let start = Date.now();\n        let center = this.targetCenter_.slice();\n        let resolution = this.targetResolution_;\n        let rotation = this.targetRotation_;\n        const series = [];\n        for(; i < animationCount; ++i){\n            const options = /** @type {AnimationOptions} */ arguments[i];\n            const animation = {\n                start: start,\n                complete: false,\n                anchor: options.anchor,\n                duration: options.duration !== undefined ? options.duration : 1000,\n                easing: options.easing || (0, $c7ccf7e681a9b333$export$9b47139b511b56e4),\n                callback: callback\n            };\n            if (options.center) {\n                animation.sourceCenter = center;\n                animation.targetCenter = options.center.slice();\n                center = animation.targetCenter;\n            }\n            if (options.zoom !== undefined) {\n                animation.sourceResolution = resolution;\n                animation.targetResolution = this.getResolutionForZoom(options.zoom);\n                resolution = animation.targetResolution;\n            } else if (options.resolution) {\n                animation.sourceResolution = resolution;\n                animation.targetResolution = options.resolution;\n                resolution = animation.targetResolution;\n            }\n            if (options.rotation !== undefined) {\n                animation.sourceRotation = rotation;\n                const delta = (0, $6b000a049d919fe5$export$ba467bec01d66def)(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n                animation.targetRotation = rotation + delta;\n                rotation = animation.targetRotation;\n            }\n            // check if animation is a no-op\n            if ($70364d0195659942$export$ee75376562060184(animation)) animation.complete = true;\n            else start += animation.duration;\n            series.push(animation);\n        }\n        this.animations_.push(series);\n        this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING, 1);\n        this.updateAnimations_();\n    }\n    /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */ getAnimating() {\n        return this.hints_[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING] > 0;\n    }\n    /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */ getInteracting() {\n        return this.hints_[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING] > 0;\n    }\n    /**\n   * Cancel any ongoing animations.\n   * @api\n   */ cancelAnimations() {\n        this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING, -this.hints_[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING]);\n        let anchor;\n        for(let i = 0, ii = this.animations_.length; i < ii; ++i){\n            const series = this.animations_[i];\n            if (series[0].callback) $70364d0195659942$var$animationCallback(series[0].callback, false);\n            if (!anchor) for(let j = 0, jj = series.length; j < jj; ++j){\n                const animation = series[j];\n                if (!animation.complete) {\n                    anchor = animation.anchor;\n                    break;\n                }\n            }\n        }\n        this.animations_.length = 0;\n        this.cancelAnchor_ = anchor;\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n    }\n    /**\n   * Update all animations.\n   */ updateAnimations_() {\n        if (this.updateAnimationKey_ !== undefined) {\n            cancelAnimationFrame(this.updateAnimationKey_);\n            this.updateAnimationKey_ = undefined;\n        }\n        if (!this.getAnimating()) return;\n        const now = Date.now();\n        let more = false;\n        for(let i = this.animations_.length - 1; i >= 0; --i){\n            const series = this.animations_[i];\n            let seriesComplete = true;\n            for(let j = 0, jj = series.length; j < jj; ++j){\n                const animation = series[j];\n                if (animation.complete) continue;\n                const elapsed = now - animation.start;\n                let fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n                if (fraction >= 1) {\n                    animation.complete = true;\n                    fraction = 1;\n                } else seriesComplete = false;\n                const progress = animation.easing(fraction);\n                if (animation.sourceCenter) {\n                    const x0 = animation.sourceCenter[0];\n                    const y0 = animation.sourceCenter[1];\n                    const x1 = animation.targetCenter[0];\n                    const y1 = animation.targetCenter[1];\n                    this.nextCenter_ = animation.targetCenter;\n                    const x = x0 + progress * (x1 - x0);\n                    const y = y0 + progress * (y1 - y0);\n                    this.targetCenter_ = [\n                        x,\n                        y\n                    ];\n                }\n                if (animation.sourceResolution && animation.targetResolution) {\n                    const resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n                    if (animation.anchor) {\n                        const size = this.getViewportSize_(this.getRotation());\n                        const constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);\n                        this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);\n                    }\n                    this.nextResolution_ = animation.targetResolution;\n                    this.targetResolution_ = resolution;\n                    this.applyTargetState_(true);\n                }\n                if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n                    const rotation = progress === 1 ? (0, $6b000a049d919fe5$export$ba467bec01d66def)(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n                    if (animation.anchor) {\n                        const constrainedRotation = this.constraints_.rotation(rotation, true);\n                        this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);\n                    }\n                    this.nextRotation_ = animation.targetRotation;\n                    this.targetRotation_ = rotation;\n                }\n                this.applyTargetState_(true);\n                more = true;\n                if (!animation.complete) break;\n            }\n            if (seriesComplete) {\n                this.animations_[i] = null;\n                this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING, -1);\n                this.nextCenter_ = null;\n                this.nextResolution_ = NaN;\n                this.nextRotation_ = NaN;\n                const callback = series[0].callback;\n                if (callback) $70364d0195659942$var$animationCallback(callback, true);\n            }\n        }\n        // prune completed series\n        this.animations_ = this.animations_.filter(Boolean);\n        if (more && this.updateAnimationKey_ === undefined) this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));\n    }\n    /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */ calculateCenterRotate(rotation, anchor) {\n        let center;\n        const currentCenter = this.getCenterInternal();\n        if (currentCenter !== undefined) {\n            center = [\n                currentCenter[0] - anchor[0],\n                currentCenter[1] - anchor[1]\n            ];\n            (0, $1bd0a226f9a16141$export$bb628a54ab399bc9)(center, rotation - this.getRotation());\n            (0, $1bd0a226f9a16141$export$e16d8520af44a096)(center, anchor);\n        }\n        return center;\n    }\n    /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */ calculateCenterZoom(resolution, anchor) {\n        let center;\n        const currentCenter = this.getCenterInternal();\n        const currentResolution = this.getResolution();\n        if (currentCenter !== undefined && currentResolution !== undefined) {\n            const x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n            const y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n            center = [\n                x,\n                y\n            ];\n        }\n        return center;\n    }\n    /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */ getViewportSize_(rotation) {\n        const size = this.viewportSize_;\n        if (rotation) {\n            const w = size[0];\n            const h = size[1];\n            return [\n                Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),\n                Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation))\n            ];\n        }\n        return size;\n    }\n    /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\n   */ setViewportSize(size) {\n        this.viewportSize_ = Array.isArray(size) ? size.slice() : [\n            100,\n            100\n        ];\n        if (!this.getAnimating()) this.resolveConstraints(0);\n    }\n    /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */ getCenter() {\n        const center = this.getCenterInternal();\n        if (!center) return center;\n        return (0, $9c4744460e43e41b$export$698f563af1ba02a5)(center, this.getProjection());\n    }\n    /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */ getCenterInternal() {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).CENTER);\n    }\n    /**\n   * @return {Constraints} Constraints.\n   */ getConstraints() {\n        return this.constraints_;\n    }\n    /**\n   * @return {boolean} Resolution constraint is set\n   */ getConstrainResolution() {\n        return this.get(\"constrainResolution\");\n    }\n    /**\n   * @param {Array<number>} [hints] Destination array.\n   * @return {Array<number>} Hint.\n   */ getHints(hints) {\n        if (hints !== undefined) {\n            hints[0] = this.hints_[0];\n            hints[1] = this.hints_[1];\n            return hints;\n        }\n        return this.hints_.slice();\n    }\n    /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided, the size\n   * of the map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */ calculateExtent(size) {\n        const extent = this.calculateExtentInternal(size);\n        return (0, $9c4744460e43e41b$export$96bfd09e2cffb006)(extent, this.getProjection());\n    }\n    /**\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\n   * the map's last known viewport size will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */ calculateExtentInternal(size) {\n        size = size || this.getViewportSizeMinusPadding_();\n        const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ this.getCenterInternal();\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(center, \"The view center is not defined\");\n        const resolution = /** @type {!number} */ this.getResolution();\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(resolution !== undefined, \"The view resolution is not defined\");\n        const rotation = /** @type {!number} */ this.getRotation();\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(rotation !== undefined, \"The view rotation is not defined\");\n        return (0, $6da4c8ed3074c92b$export$13ba650faf8308)(center, resolution, rotation, size);\n    }\n    /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */ getMaxResolution() {\n        return this.maxResolution_;\n    }\n    /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */ getMinResolution() {\n        return this.minResolution_;\n    }\n    /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */ getMaxZoom() {\n        return /** @type {number} */ this.getZoomForResolution(this.minResolution_);\n    }\n    /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */ setMaxZoom(zoom) {\n        this.applyOptions_(this.getUpdatedOptions_({\n            maxZoom: zoom\n        }));\n    }\n    /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */ getMinZoom() {\n        return /** @type {number} */ this.getZoomForResolution(this.maxResolution_);\n    }\n    /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */ setMinZoom(zoom) {\n        this.applyOptions_(this.getUpdatedOptions_({\n            minZoom: zoom\n        }));\n    }\n    /**\n   * Set whether the view should allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */ setConstrainResolution(enabled) {\n        this.applyOptions_(this.getUpdatedOptions_({\n            constrainResolution: enabled\n        }));\n    }\n    /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */ getProjection() {\n        return this.projection_;\n    }\n    /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */ getResolution() {\n        return /** @type {number|undefined} */ this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).RESOLUTION);\n    }\n    /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */ getResolutions() {\n        return this.resolutions_;\n    }\n    /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */ getResolutionForExtent(extent, size) {\n        return this.getResolutionForExtentInternal((0, $9c4744460e43e41b$export$494be3a3a25689ca)(extent, this.getProjection()), size);\n    }\n    /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */ getResolutionForExtentInternal(extent, size) {\n        size = size || this.getViewportSizeMinusPadding_();\n        const xResolution = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent) / size[0];\n        const yResolution = (0, $6da4c8ed3074c92b$export$c08559766941f856)(extent) / size[1];\n        return Math.max(xResolution, yResolution);\n    }\n    /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Resolution for value function.\n   */ getResolutionForValueFunction(power) {\n        power = power || 2;\n        const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n        const minResolution = this.minResolution_;\n        const max = Math.log(maxResolution / minResolution) / Math.log(power);\n        return(/**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */ function(value) {\n            const resolution = maxResolution / Math.pow(power, value * max);\n            return resolution;\n        });\n    }\n    /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */ getRotation() {\n        return /** @type {number} */ this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).ROTATION);\n    }\n    /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Value for resolution function.\n   */ getValueForResolutionFunction(power) {\n        const logPower = Math.log(power || 2);\n        const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n        const minResolution = this.minResolution_;\n        const max = Math.log(maxResolution / minResolution) / logPower;\n        return(/**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */ function(resolution) {\n            const value = Math.log(maxResolution / resolution) / logPower / max;\n            return value;\n        });\n    }\n    /**\n   * Returns the size of the viewport minus padding.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n   */ getViewportSizeMinusPadding_(rotation) {\n        let size = this.getViewportSize_(rotation);\n        const padding = this.padding_;\n        if (padding) size = [\n            size[0] - padding[1] - padding[3],\n            size[1] - padding[0] - padding[2]\n        ];\n        return size;\n    }\n    /**\n   * @return {State} View state.\n   */ getState() {\n        const projection = this.getProjection();\n        const resolution = this.getResolution();\n        const rotation = this.getRotation();\n        let center = /** @type {import(\"./coordinate.js\").Coordinate} */ this.getCenterInternal();\n        const padding = this.padding_;\n        if (padding) {\n            const reducedSize = this.getViewportSizeMinusPadding_();\n            center = $70364d0195659942$var$calculateCenterOn(center, this.getViewportSize_(), [\n                reducedSize[0] / 2 + padding[3],\n                reducedSize[1] / 2 + padding[0]\n            ], resolution, rotation);\n        }\n        return {\n            center: center.slice(0),\n            projection: projection !== undefined ? projection : null,\n            resolution: resolution,\n            nextCenter: this.nextCenter_,\n            nextResolution: this.nextResolution_,\n            nextRotation: this.nextRotation_,\n            rotation: rotation,\n            zoom: this.getZoom()\n        };\n    }\n    /**\n   * @return {ViewStateLayerStateExtent} Like `FrameState`, but just `viewState` and `extent`.\n   */ getViewStateAndExtent() {\n        return {\n            viewState: this.getState(),\n            extent: this.calculateExtent()\n        };\n    }\n    /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */ getZoom() {\n        let zoom;\n        const resolution = this.getResolution();\n        if (resolution !== undefined) zoom = this.getZoomForResolution(resolution);\n        return zoom;\n    }\n    /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */ getZoomForResolution(resolution) {\n        let offset = this.minZoom_ || 0;\n        let max, zoomFactor;\n        if (this.resolutions_) {\n            const nearest = (0, $b998d41b678ed5d1$export$8a3786cc03fdb777)(this.resolutions_, resolution, 1);\n            offset = nearest;\n            max = this.resolutions_[nearest];\n            if (nearest == this.resolutions_.length - 1) zoomFactor = 2;\n            else zoomFactor = max / this.resolutions_[nearest + 1];\n        } else {\n            max = this.maxResolution_;\n            zoomFactor = this.zoomFactor_;\n        }\n        return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n    }\n    /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */ getResolutionForZoom(zoom) {\n        if (this.resolutions_) {\n            if (this.resolutions_.length <= 1) return 0;\n            const baseLevel = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(Math.floor(zoom), 0, this.resolutions_.length - 2);\n            const zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n            return this.resolutions_[baseLevel] / Math.pow(zoomFactor, (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(zoom - baseLevel, 0, 1));\n        }\n        return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);\n    }\n    /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions} [options] Options.\n   * @api\n   */ fit(geometryOrExtent, options) {\n        /** @type {import(\"./geom/SimpleGeometry.js\").default} */ let geometry;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(Array.isArray(geometryOrExtent) || typeof /** @type {?} */ geometryOrExtent.getSimplifiedGeometry === \"function\", \"Invalid extent or geometry provided as `geometry`\");\n        if (Array.isArray(geometryOrExtent)) {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(!(0, $6da4c8ed3074c92b$export$dd1bc94b04021eeb)(geometryOrExtent), \"Cannot fit empty extent provided as `geometry`\");\n            const extent = (0, $9c4744460e43e41b$export$494be3a3a25689ca)(geometryOrExtent, this.getProjection());\n            geometry = (0, $40aa8d43bbe572bf$export$c16b671815801c75)(extent);\n        } else if (geometryOrExtent.getType() === \"Circle\") {\n            const extent = (0, $9c4744460e43e41b$export$494be3a3a25689ca)(geometryOrExtent.getExtent(), this.getProjection());\n            geometry = (0, $40aa8d43bbe572bf$export$c16b671815801c75)(extent);\n            geometry.rotate(this.getRotation(), (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(extent));\n        } else {\n            const userProjection = (0, $9c4744460e43e41b$export$3973b77d5f6f2790)();\n            if (userProjection) geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ geometryOrExtent.clone().transform(userProjection, this.getProjection());\n            else geometry = geometryOrExtent;\n        }\n        this.fitInternal(geometry, options);\n    }\n    /**\n   * Calculate rotated extent\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n   */ rotatedExtentForGeometry(geometry) {\n        const rotation = this.getRotation();\n        const cosAngle = Math.cos(rotation);\n        const sinAngle = Math.sin(-rotation);\n        const coords = geometry.getFlatCoordinates();\n        const stride = geometry.getStride();\n        let minRotX = Infinity;\n        let minRotY = Infinity;\n        let maxRotX = -Infinity;\n        let maxRotY = -Infinity;\n        for(let i = 0, ii = coords.length; i < ii; i += stride){\n            const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n            const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n            minRotX = Math.min(minRotX, rotX);\n            minRotY = Math.min(minRotY, rotY);\n            maxRotX = Math.max(maxRotX, rotX);\n            maxRotY = Math.max(maxRotY, rotY);\n        }\n        return [\n            minRotX,\n            minRotY,\n            maxRotX,\n            maxRotY\n        ];\n    }\n    /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions} [options] Options.\n   */ fitInternal(geometry, options) {\n        options = options || {};\n        let size = options.size;\n        if (!size) size = this.getViewportSizeMinusPadding_();\n        const padding = options.padding !== undefined ? options.padding : [\n            0,\n            0,\n            0,\n            0\n        ];\n        const nearest = options.nearest !== undefined ? options.nearest : false;\n        let minResolution;\n        if (options.minResolution !== undefined) minResolution = options.minResolution;\n        else if (options.maxZoom !== undefined) minResolution = this.getResolutionForZoom(options.maxZoom);\n        else minResolution = 0;\n        const rotatedExtent = this.rotatedExtentForGeometry(geometry);\n        // calculate resolution\n        let resolution = this.getResolutionForExtentInternal(rotatedExtent, [\n            size[0] - padding[1] - padding[3],\n            size[1] - padding[0] - padding[2]\n        ]);\n        resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n        resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n        // calculate center\n        const rotation = this.getRotation();\n        const sinAngle = Math.sin(rotation);\n        const cosAngle = Math.cos(rotation);\n        const centerRot = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(rotatedExtent);\n        centerRot[0] += (padding[1] - padding[3]) / 2 * resolution;\n        centerRot[1] += (padding[0] - padding[2]) / 2 * resolution;\n        const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n        const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n        const center = this.getConstrainedCenter([\n            centerX,\n            centerY\n        ], resolution);\n        const callback = options.callback ? options.callback : (0, $013a1733c226ec50$export$1cd1943b3a73bbe8);\n        if (options.duration !== undefined) this.animateInternal({\n            resolution: resolution,\n            center: center,\n            duration: options.duration,\n            easing: options.easing\n        }, callback);\n        else {\n            this.targetResolution_ = resolution;\n            this.targetCenter_ = center;\n            this.applyTargetState_(false, true);\n            $70364d0195659942$var$animationCallback(callback, true);\n        }\n    }\n    /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */ centerOn(coordinate, size, position) {\n        this.centerOnInternal((0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(coordinate, this.getProjection()), size, position);\n    }\n    /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */ centerOnInternal(coordinate, size, position) {\n        this.setCenterInternal($70364d0195659942$var$calculateCenterOn(coordinate, size, position, this.getResolution(), this.getRotation()));\n    }\n    /**\n   * Calculates the shift between map and viewport center.\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {import(\"./size.js\").Size} size Size.\n   * @return {Array<number>|undefined} Center shift.\n   */ calculateCenterShift(center, resolution, rotation, size) {\n        let centerShift;\n        const padding = this.padding_;\n        if (padding && center) {\n            const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n            const shiftedCenter = $70364d0195659942$var$calculateCenterOn(center, size, [\n                reducedSize[0] / 2 + padding[3],\n                reducedSize[1] / 2 + padding[0]\n            ], resolution, rotation);\n            centerShift = [\n                center[0] - shiftedCenter[0],\n                center[1] - shiftedCenter[1]\n            ];\n        }\n        return centerShift;\n    }\n    /**\n   * @return {boolean} Is defined.\n   */ isDef() {\n        return !!this.getCenterInternal() && this.getResolution() !== undefined;\n    }\n    /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */ adjustCenter(deltaCoordinates) {\n        const center = (0, $9c4744460e43e41b$export$698f563af1ba02a5)(this.targetCenter_, this.getProjection());\n        this.setCenter([\n            center[0] + deltaCoordinates[0],\n            center[1] + deltaCoordinates[1]\n        ]);\n    }\n    /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */ adjustCenterInternal(deltaCoordinates) {\n        const center = this.targetCenter_;\n        this.setCenterInternal([\n            center[0] + deltaCoordinates[0],\n            center[1] + deltaCoordinates[1]\n        ]);\n    }\n    /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */ adjustResolution(ratio, anchor) {\n        anchor = anchor && (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(anchor, this.getProjection());\n        this.adjustResolutionInternal(ratio, anchor);\n    }\n    /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */ adjustResolutionInternal(ratio, anchor) {\n        const isMoving = this.getAnimating() || this.getInteracting();\n        const size = this.getViewportSize_(this.getRotation());\n        const newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);\n        if (anchor) this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\n        this.targetResolution_ *= ratio;\n        this.applyTargetState_();\n    }\n    /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */ adjustZoom(delta, anchor) {\n        this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\n    }\n    /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   * @api\n   */ adjustRotation(delta, anchor) {\n        if (anchor) anchor = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(anchor, this.getProjection());\n        this.adjustRotationInternal(delta, anchor);\n    }\n    /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   */ adjustRotationInternal(delta, anchor) {\n        const isMoving = this.getAnimating() || this.getInteracting();\n        const newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);\n        if (anchor) this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\n        this.targetRotation_ += delta;\n        this.applyTargetState_();\n    }\n    /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */ setCenter(center) {\n        this.setCenterInternal(center ? (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(center, this.getProjection()) : center);\n    }\n    /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */ setCenterInternal(center) {\n        this.targetCenter_ = center;\n        this.applyTargetState_();\n    }\n    /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */ setHint(hint, delta) {\n        this.hints_[hint] += delta;\n        this.changed();\n        return this.hints_[hint];\n    }\n    /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */ setResolution(resolution) {\n        this.targetResolution_ = resolution;\n        this.applyTargetState_();\n    }\n    /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */ setRotation(rotation) {\n        this.targetRotation_ = rotation;\n        this.applyTargetState_();\n    }\n    /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */ setZoom(zoom) {\n        this.setResolution(this.getResolutionForZoom(zoom));\n    }\n    /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean} [doNotCancelAnims] Do not cancel animations.\n   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\n   * @private\n   */ applyTargetState_(doNotCancelAnims, forceMoving) {\n        const isMoving = this.getAnimating() || this.getInteracting() || forceMoving;\n        // compute rotation\n        const newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);\n        const size = this.getViewportSize_(newRotation);\n        const newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);\n        const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n        if (this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).ROTATION) !== newRotation) this.set((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).ROTATION, newRotation);\n        if (this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).RESOLUTION) !== newResolution) {\n            this.set((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).RESOLUTION, newResolution);\n            this.set(\"zoom\", this.getZoom(), true);\n        }\n        if (!newCenter || !this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).CENTER) || !(0, $1bd0a226f9a16141$export$e9bab7fafb253603)(this.get((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).CENTER), newCenter)) this.set((0, $d35baefbe89be4c5$export$2e2bcd8739ae039).CENTER, newCenter);\n        if (this.getAnimating() && !doNotCancelAnims) this.cancelAnimations();\n        this.cancelAnchor_ = undefined;\n    }\n    /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number} [duration] The animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */ resolveConstraints(duration, resolutionDirection, anchor) {\n        duration = duration !== undefined ? duration : 200;\n        const direction = resolutionDirection || 0;\n        const newRotation = this.constraints_.rotation(this.targetRotation_);\n        const size = this.getViewportSize_(newRotation);\n        const newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);\n        const newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, false, this.calculateCenterShift(this.targetCenter_, newResolution, newRotation, size));\n        if (duration === 0 && !this.cancelAnchor_) {\n            this.targetResolution_ = newResolution;\n            this.targetRotation_ = newRotation;\n            this.targetCenter_ = newCenter;\n            this.applyTargetState_();\n            return;\n        }\n        anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n        this.cancelAnchor_ = undefined;\n        if (this.getResolution() !== newResolution || this.getRotation() !== newRotation || !this.getCenterInternal() || !(0, $1bd0a226f9a16141$export$e9bab7fafb253603)(this.getCenterInternal(), newCenter)) {\n            if (this.getAnimating()) this.cancelAnimations();\n            this.animateInternal({\n                rotation: newRotation,\n                center: newCenter,\n                resolution: newResolution,\n                duration: duration,\n                easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0),\n                anchor: anchor\n            });\n        }\n    }\n    /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */ beginInteraction() {\n        this.resolveConstraints(0);\n        this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING, 1);\n    }\n    /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */ endInteraction(duration, resolutionDirection, anchor) {\n        anchor = anchor && (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(anchor, this.getProjection());\n        this.endInteractionInternal(duration, resolutionDirection, anchor);\n    }\n    /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */ endInteractionInternal(duration, resolutionDirection, anchor) {\n        if (!this.getInteracting()) return;\n        this.setHint((0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING, -1);\n        this.resolveConstraints(duration, resolutionDirection, anchor);\n    }\n    /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */ getConstrainedCenter(targetCenter, targetResolution) {\n        const size = this.getViewportSize_(this.getRotation());\n        return this.constraints_.center(targetCenter, targetResolution || this.getResolution(), size);\n    }\n    /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */ getConstrainedZoom(targetZoom, direction) {\n        const targetRes = this.getResolutionForZoom(targetZoom);\n        return this.getZoomForResolution(this.getConstrainedResolution(targetRes, direction));\n    }\n    /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */ getConstrainedResolution(targetResolution, direction) {\n        direction = direction || 0;\n        const size = this.getViewportSize_(this.getRotation());\n        return this.constraints_.resolution(targetResolution, direction, size);\n    }\n}\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */ function $70364d0195659942$var$animationCallback(callback, returnValue) {\n    setTimeout(function() {\n        callback(returnValue);\n    }, 0);\n}\nfunction $70364d0195659942$export$964345001ee9ac52(options) {\n    if (options.extent !== undefined) {\n        const smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;\n        return (0, $b21a6e049949bb31$export$c2f0af2c946f6897)(options.extent, options.constrainOnlyCenter, smooth);\n    }\n    const projection = (0, $9c4744460e43e41b$export$549167224996a0fb)(options.projection, \"EPSG:3857\");\n    if (options.multiWorld !== true && projection.isGlobal()) {\n        const extent = projection.getExtent().slice();\n        extent[0] = -Infinity;\n        extent[2] = Infinity;\n        return (0, $b21a6e049949bb31$export$c2f0af2c946f6897)(extent, false, false);\n    }\n    return 0, $b21a6e049949bb31$export$f883a24d5edde77c;\n}\nfunction $70364d0195659942$export$c68d65f9148da196(options) {\n    let resolutionConstraint;\n    let maxResolution;\n    let minResolution;\n    // TODO: move these to be ol constants\n    // see https://github.com/openlayers/openlayers/issues/2076\n    const defaultMaxZoom = 28;\n    const defaultZoomFactor = 2;\n    let minZoom = options.minZoom !== undefined ? options.minZoom : $70364d0195659942$var$DEFAULT_MIN_ZOOM;\n    let maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n    const zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n    const multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;\n    const smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;\n    const showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;\n    const projection = (0, $9c4744460e43e41b$export$549167224996a0fb)(options.projection, \"EPSG:3857\");\n    const projExtent = projection.getExtent();\n    let constrainOnlyCenter = options.constrainOnlyCenter;\n    let extent = options.extent;\n    if (!multiWorld && !extent && projection.isGlobal()) {\n        constrainOnlyCenter = false;\n        extent = projExtent;\n    }\n    if (options.resolutions !== undefined) {\n        const resolutions = options.resolutions;\n        maxResolution = resolutions[minZoom];\n        minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n        if (options.constrainResolution) resolutionConstraint = (0, $bac43a1f4a628548$export$d65a517690fc4385)(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        else resolutionConstraint = (0, $bac43a1f4a628548$export$1c4e6da9b4b066fe)(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n        // calculate the default min and max resolution\n        const size = !projExtent ? 360 * (0, $03edbd434a9e6608$export$1482081eec883108).degrees / projection.getMetersPerUnit() : Math.max((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projExtent), (0, $6da4c8ed3074c92b$export$c08559766941f856)(projExtent));\n        const defaultMaxResolution = size / (0, $57cd8651d88957a0$export$6b8cb5cd370bd90c) / Math.pow(defaultZoomFactor, $70364d0195659942$var$DEFAULT_MIN_ZOOM);\n        const defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - $70364d0195659942$var$DEFAULT_MIN_ZOOM);\n        // user provided maxResolution takes precedence\n        maxResolution = options.maxResolution;\n        if (maxResolution !== undefined) minZoom = 0;\n        else maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n        // user provided minResolution takes precedence\n        minResolution = options.minResolution;\n        if (minResolution === undefined) {\n            if (options.maxZoom !== undefined) {\n                if (options.maxResolution !== undefined) minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n                else minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n            } else minResolution = defaultMinResolution;\n        }\n        // given discrete zoom levels, minResolution may be different than provided\n        maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n        minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n        if (options.constrainResolution) resolutionConstraint = (0, $bac43a1f4a628548$export$22ac0f6b219de91a)(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n        else resolutionConstraint = (0, $bac43a1f4a628548$export$1c4e6da9b4b066fe)(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n    return {\n        constraint: resolutionConstraint,\n        maxResolution: maxResolution,\n        minResolution: minResolution,\n        minZoom: minZoom,\n        zoomFactor: zoomFactor\n    };\n}\nfunction $70364d0195659942$export$4eeaa08dd550e3c0(options) {\n    const enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n    if (enableRotation) {\n        const constrainRotation = options.constrainRotation;\n        if (constrainRotation === undefined || constrainRotation === true) return (0, $d65f0a322291d127$export$17a6e6f3448b17e8)();\n        if (constrainRotation === false) return 0, $d65f0a322291d127$export$f883a24d5edde77c;\n        if (typeof constrainRotation === \"number\") return (0, $d65f0a322291d127$export$9ba78806de831083)(constrainRotation);\n        return 0, $d65f0a322291d127$export$f883a24d5edde77c;\n    }\n    return 0, $d65f0a322291d127$export$e20fbacbb41798b;\n}\nfunction $70364d0195659942$export$ee75376562060184(animation) {\n    if (animation.sourceCenter && animation.targetCenter) {\n        if (!(0, $1bd0a226f9a16141$export$e9bab7fafb253603)(animation.sourceCenter, animation.targetCenter)) return false;\n    }\n    if (animation.sourceResolution !== animation.targetResolution) return false;\n    if (animation.sourceRotation !== animation.targetRotation) return false;\n    return true;\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */ function $70364d0195659942$var$calculateCenterOn(coordinate, size, position, resolution, rotation) {\n    // calculate rotated position\n    const cosAngle = Math.cos(-rotation);\n    let sinAngle = Math.sin(-rotation);\n    let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    const centerX = rotX * cosAngle - rotY * sinAngle;\n    const centerY = rotY * cosAngle + rotX * sinAngle;\n    return [\n        centerX,\n        centerY\n    ];\n}\nvar $70364d0195659942$export$2e2bcd8739ae039 = $70364d0195659942$var$View;\n\n\n\n\n\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */ /**\n * @typedef {'sourceready'|'change:source'} LayerEventType\n */ /***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */ /**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */ /**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number | undefined} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */ /**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n * A `sourceready` event is fired when the layer's source is ready.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */ class $534f30fce11effcd$var$Layer extends (0, $57c5f0299cb9b82f$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options<SourceType>} options Layer options.\n   */ constructor(options){\n        const baseOptions = Object.assign({}, options);\n        delete baseOptions.source;\n        super(baseOptions);\n        /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {LayerOnSignature<void>}\n     */ this.un;\n        /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */ this.mapPrecomposeKey_ = null;\n        /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */ this.mapRenderKey_ = null;\n        /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */ this.sourceChangeKey_ = null;\n        /**\n     * @private\n     * @type {RendererType}\n     */ this.renderer_ = null;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.sourceReady_ = false;\n        /**\n     * @protected\n     * @type {boolean}\n     */ this.rendered = false;\n        // Overwrite default render method with a custom one\n        if (options.render) this.render = options.render;\n        if (options.map) this.setMap(options.map);\n        this.addChangeListener((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).SOURCE, this.handleSourcePropertyChange_);\n        const source = options.source ? /** @type {SourceType} */ options.source : null;\n        this.setSource(source);\n    }\n    /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */ getLayersArray(array) {\n        array = array ? array : [];\n        array.push(this);\n        return array;\n    }\n    /**\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */ getLayerStatesArray(states) {\n        states = states ? states : [];\n        states.push(this.getLayerState());\n        return states;\n    }\n    /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */ getSource() {\n        return /** @type {SourceType} */ this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).SOURCE) || null;\n    }\n    /**\n   * @return {SourceType|null} The source being rendered.\n   */ getRenderSource() {\n        return this.getSource();\n    }\n    /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */ getSourceState() {\n        const source = this.getSource();\n        return !source ? \"undefined\" : source.getState();\n    }\n    /**\n   * @private\n   */ handleSourceChange_() {\n        this.changed();\n        if (this.sourceReady_ || this.getSource().getState() !== \"ready\") return;\n        this.sourceReady_ = true;\n        this.dispatchEvent(\"sourceready\");\n    }\n    /**\n   * @private\n   */ handleSourcePropertyChange_() {\n        if (this.sourceChangeKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.sourceChangeKey_);\n            this.sourceChangeKey_ = null;\n        }\n        this.sourceReady_ = false;\n        const source = this.getSource();\n        if (source) {\n            this.sourceChangeKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(source, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleSourceChange_, this);\n            if (source.getState() === \"ready\") {\n                this.sourceReady_ = true;\n                setTimeout(()=>{\n                    this.dispatchEvent(\"sourceready\");\n                }, 0);\n            }\n        }\n        this.changed();\n    }\n    /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */ getFeatures(pixel) {\n        if (!this.renderer_) return Promise.resolve([]);\n        return this.renderer_.getFeatures(pixel);\n    }\n    /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */ getData(pixel) {\n        if (!this.renderer_ || !this.rendered) return null;\n        return this.renderer_.getData(pixel);\n    }\n    /**\n   * The layer is visible on the map view, i.e. within its min/max resolution or zoom and\n   * extent, not set to `visible: false`, and not inside a layer group that is set\n   * to `visible: false`.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {boolean} The layer is visible in the map view.\n   * @api\n   */ isVisible(view) {\n        let frameState;\n        const map = this.getMapInternal();\n        if (!view && map) view = map.getView();\n        if (view instanceof (0, $70364d0195659942$export$2e2bcd8739ae039)) frameState = {\n            viewState: view.getState(),\n            extent: view.calculateExtent()\n        };\n        else frameState = view;\n        if (!frameState.layerStatesArray && map) frameState.layerStatesArray = map.getLayerGroup().getLayerStatesArray();\n        let layerState;\n        if (frameState.layerStatesArray) layerState = frameState.layerStatesArray.find((layerState)=>layerState.layer === this);\n        else layerState = this.getLayerState();\n        const layerExtent = this.getExtent();\n        return $534f30fce11effcd$export$acb1e9cb9ce4ca56(layerState, frameState.viewState) && (!layerExtent || (0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(layerExtent, frameState.extent));\n    }\n    /**\n   * Get the attributions of the source of this layer for the given view.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {Array<string>} Attributions for this layer at the given view.\n   * @api\n   */ getAttributions(view) {\n        if (!this.isVisible(view)) return [];\n        let getAttributions;\n        const source = this.getSource();\n        if (source) getAttributions = source.getAttributions();\n        if (!getAttributions) return [];\n        const frameState = view instanceof (0, $70364d0195659942$export$2e2bcd8739ae039) ? view.getViewStateAndExtent() : view;\n        let attributions = getAttributions(frameState);\n        if (!Array.isArray(attributions)) attributions = [\n            attributions\n        ];\n        return attributions;\n    }\n    /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement|null} The rendered element.\n   */ render(frameState, target) {\n        const layerRenderer = this.getRenderer();\n        if (layerRenderer.prepareFrame(frameState)) {\n            this.rendered = true;\n            return layerRenderer.renderFrame(frameState, target);\n        }\n        return null;\n    }\n    /**\n   * Called when a layer is not visible during a map render.\n   */ unrender() {\n        this.rendered = false;\n    }\n    /**\n   * For use inside the library only.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */ setMapInternal(map) {\n        if (!map) this.unrender();\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAP, map);\n    }\n    /**\n   * For use inside the library only.\n   * @return {import(\"../Map.js\").default|null} Map.\n   */ getMapInternal() {\n        return this.get((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).MAP);\n    }\n    /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */ setMap(map) {\n        if (this.mapPrecomposeKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.mapPrecomposeKey_);\n            this.mapPrecomposeKey_ = null;\n        }\n        if (!map) this.changed();\n        if (this.mapRenderKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.mapRenderKey_);\n            this.mapRenderKey_ = null;\n        }\n        if (map) {\n            this.mapPrecomposeKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(map, (0, $f5e92a4d985a2824$export$2e2bcd8739ae039).PRECOMPOSE, function(evt) {\n                const renderEvent = /** @type {import(\"../render/Event.js\").default} */ evt;\n                const layerStatesArray = renderEvent.frameState.layerStatesArray;\n                const layerState = this.getLayerState(false);\n                (0, $35d5ec884318008e$export$a7a9523472993e97)(!layerStatesArray.some(function(arrayLayerState) {\n                    return arrayLayerState.layer === layerState.layer;\n                }), \"A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\");\n                layerStatesArray.push(layerState);\n            }, this);\n            this.mapRenderKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, map.render, map);\n            this.changed();\n        }\n    }\n    /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */ setSource(source) {\n        this.set((0, $f6d1853b3fcae320$export$2e2bcd8739ae039).SOURCE, source);\n    }\n    /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */ getRenderer() {\n        if (!this.renderer_) this.renderer_ = this.createRenderer();\n        return this.renderer_;\n    }\n    /**\n   * @return {boolean} The layer has a renderer.\n   */ hasRenderer() {\n        return !!this.renderer_;\n    }\n    /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */ createRenderer() {\n        return null;\n    }\n    /**\n   * Clean up.\n   */ disposeInternal() {\n        if (this.renderer_) {\n            this.renderer_.dispose();\n            delete this.renderer_;\n        }\n        this.setSource(null);\n        super.disposeInternal();\n    }\n}\nfunction $534f30fce11effcd$export$acb1e9cb9ce4ca56(layerState, viewState) {\n    if (!layerState.visible) return false;\n    const resolution = viewState.resolution;\n    if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) return false;\n    const zoom = viewState.zoom;\n    return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nvar $534f30fce11effcd$export$2e2bcd8739ae039 = $534f30fce11effcd$var$Layer;\n\n\n\n/**\n * @template T\n * @typedef HitMatch\n * @property {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"../layer/Layer.js\").default} layer Layer.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} distanceSq Squared distance.\n * @property {import(\"./vector.js\").FeatureCallback<T>} callback Callback.\n */ /**\n * @abstract\n */ class $b370ab32454a96fd$var$MapRenderer extends (0, $3273ed08087da3da$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"../Map.js\").default} map Map.\n   */ constructor(map){\n        super();\n        /**\n     * @private\n     * @type {import(\"../Map.js\").default}\n     */ this.map_ = map;\n    }\n    /**\n   * @abstract\n   * @param {import(\"../render/EventType.js\").default} type Event type.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */ dispatchRenderEvent(type, frameState) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @param {import(\"../Map.js\").FrameState} frameState FrameState.\n   * @protected\n   */ calculateMatrices2D(frameState) {\n        const viewState = frameState.viewState;\n        const coordinateToPixelTransform = frameState.coordinateToPixelTransform;\n        const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;\n        (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(coordinateToPixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / viewState.resolution, -1 / viewState.resolution, -viewState.rotation, -viewState.center[0], -viewState.center[1]);\n        (0, $e22e7611e69f42a9$export$bd70ea2a93c0fa4)(pixelToCoordinateTransform, coordinateToPixelTransform);\n    }\n    /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../Map.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {boolean} checkWrapped Check for wrapped geometries.\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {S} thisArg Value to use as `this` when executing `callback`.\n   * @param {function(this: U, import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\n   *     function, only layers which are visible and for which this function\n   *     returns `true` will be tested for features.  By default, all visible\n   *     layers will be tested.\n   * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.\n   * @return {T|undefined} Callback result.\n   * @template S,T,U\n   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, callback, thisArg, layerFilter, thisArg2) {\n        let result;\n        const viewState = frameState.viewState;\n        /**\n     * @param {boolean} managed Managed layer.\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../layer/Layer.js\").default} layer Layer.\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */ function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {\n            return callback.call(thisArg, feature, managed ? layer : null, geometry);\n        }\n        const projection = viewState.projection;\n        const translatedCoordinate = (0, $1bd0a226f9a16141$export$39a9ce3624977b84)(coordinate.slice(), projection);\n        const offsets = [\n            [\n                0,\n                0\n            ]\n        ];\n        if (projection.canWrapX() && checkWrapped) {\n            const projectionExtent = projection.getExtent();\n            const worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent);\n            offsets.push([\n                -worldWidth,\n                0\n            ], [\n                worldWidth,\n                0\n            ]);\n        }\n        const layerStates = frameState.layerStatesArray;\n        const numLayers = layerStates.length;\n        const matches = /** @type {Array<HitMatch<T>>} */ [];\n        const tmpCoord = [];\n        for(let i = 0; i < offsets.length; i++)for(let j = numLayers - 1; j >= 0; --j){\n            const layerState = layerStates[j];\n            const layer = layerState.layer;\n            if (layer.hasRenderer() && (0, $534f30fce11effcd$export$acb1e9cb9ce4ca56)(layerState, viewState) && layerFilter.call(thisArg2, layer)) {\n                const layerRenderer = layer.getRenderer();\n                const source = layer.getSource();\n                if (layerRenderer && source) {\n                    const coordinates = source.getWrapX() ? translatedCoordinate : coordinate;\n                    const callback = forEachFeatureAtCoordinate.bind(null, layerState.managed);\n                    tmpCoord[0] = coordinates[0] + offsets[i][0];\n                    tmpCoord[1] = coordinates[1] + offsets[i][1];\n                    result = layerRenderer.forEachFeatureAtCoordinate(tmpCoord, frameState, hitTolerance, callback, matches);\n                }\n                if (result) return result;\n            }\n        }\n        if (matches.length === 0) return undefined;\n        const order = 1 / matches.length;\n        matches.forEach((m, i)=>m.distanceSq += i * order);\n        matches.sort((a, b)=>a.distanceSq - b.distanceSq);\n        matches.some((m)=>{\n            return result = m.callback(m.feature, m.layer, m.geometry);\n        });\n        return result;\n    }\n    /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../Map.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {boolean} checkWrapped Check for wrapped geometries.\n   * @param {function(this: U, import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\n   *     function, only layers which are visible and for which this function\n   *     returns `true` will be tested for features.  By default, all visible\n   *     layers will be tested.\n   * @param {U} thisArg Value to use as `this` when executing `layerFilter`.\n   * @return {boolean} Is there a feature at the given coordinate?\n   * @template U\n   */ hasFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, layerFilter, thisArg) {\n        const hasFeature = this.forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, checkWrapped, (0, $013a1733c226ec50$export$22e23a2304399231), this, layerFilter, thisArg);\n        return hasFeature !== undefined;\n    }\n    /**\n   * @return {import(\"../Map.js\").default} Map.\n   */ getMap() {\n        return this.map_;\n    }\n    /**\n   * Render.\n   * @abstract\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   */ renderFrame(frameState) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */ flushDeclutterItems(frameState) {}\n    /**\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */ scheduleExpireIconCache(frameState) {\n        if ((0, $f351daabfe6e2d22$export$747ccdf771a87ab8).canExpireCache()) frameState.postRenderFunctions.push($b370ab32454a96fd$var$expireIconCache);\n    }\n}\n/**\n * @param {import(\"../Map.js\").default} map Map.\n * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n */ function $b370ab32454a96fd$var$expireIconCache(map, frameState) {\n    (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).expire();\n}\nvar $b370ab32454a96fd$export$2e2bcd8739ae039 = $b370ab32454a96fd$var$MapRenderer;\n\n\n\n/**\n * @module ol/render/Event\n */ \nclass $b80dddceb0c42ad4$var$RenderEvent extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./EventType.js\").default} type Type.\n   * @param {import(\"../transform.js\").Transform} [inversePixelTransform] Transform for\n   *     CSS pixels to rendered pixels.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.\n   */ constructor(type, inversePixelTransform, frameState, context){\n        super(type);\n        /**\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\n     * @type {import(\"../transform.js\").Transform|undefined}\n     * @api\n     */ this.inversePixelTransform = inversePixelTransform;\n        /**\n     * An object representing the current render frame state.\n     * @type {import(\"../Map.js\").FrameState|undefined}\n     * @api\n     */ this.frameState = frameState;\n        /**\n     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,\n     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL\n     * context.\n     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}\n     * @api\n     */ this.context = context;\n    }\n}\nvar $b80dddceb0c42ad4$export$2e2bcd8739ae039 = $b80dddceb0c42ad4$var$RenderEvent;\n\n\n\n/**\n * @module ol/css\n */ /**\n * @typedef {Object} FontParameters\n * @property {string} style Style.\n * @property {string} variant Variant.\n * @property {string} weight Weight.\n * @property {string} size Size.\n * @property {string} lineHeight LineHeight.\n * @property {string} family Family.\n * @property {Array<string>} families Families.\n */ /**\n * The CSS class for hidden feature.\n *\n * @const\n * @type {string}\n */ const $ce07df6d5d4656f1$export$981241db82723ce2 = \"ol-hidden\";\nconst $ce07df6d5d4656f1$export$99b49471b0394319 = \"ol-selectable\";\nconst $ce07df6d5d4656f1$export$1afde3d6e16a7b29 = \"ol-unselectable\";\nconst $ce07df6d5d4656f1$export$68eede0dd8c6c1da = \"ol-unsupported\";\nconst $ce07df6d5d4656f1$export$4d4f8be70b656192 = \"ol-control\";\nconst $ce07df6d5d4656f1$export$e16017ac68d14492 = \"ol-collapsed\";\n/**\n * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font\n * @type {RegExp}\n */ const $ce07df6d5d4656f1$var$fontRegEx = new RegExp([\n    \"^\\\\s*(?=(?:(?:[-a-z]+\\\\s*){0,2}(italic|oblique))?)\",\n    \"(?=(?:(?:[-a-z]+\\\\s*){0,2}(small-caps))?)\",\n    \"(?=(?:(?:[-a-z]+\\\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)\",\n    \"(?:(?:normal|\\\\1|\\\\2|\\\\3)\\\\s*){0,3}((?:xx?-)?\",\n    \"(?:small|large)|medium|smaller|larger|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx]))\",\n    \"(?:\\\\s*\\\\/\\\\s*(normal|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx])?))\",\n    \"?\\\\s*([-,\\\\\\\"\\\\'\\\\sa-z]+?)\\\\s*$\"\n].join(\"\"), \"i\");\nconst $ce07df6d5d4656f1$var$fontRegExMatchIndex = [\n    \"style\",\n    \"variant\",\n    \"weight\",\n    \"size\",\n    \"lineHeight\",\n    \"family\"\n];\nconst $ce07df6d5d4656f1$export$5abde8a6aec4a131 = function(fontSpec) {\n    const match = fontSpec.match($ce07df6d5d4656f1$var$fontRegEx);\n    if (!match) return null;\n    const style = /** @type {FontParameters} */ {\n        lineHeight: \"normal\",\n        size: \"1.2em\",\n        style: \"normal\",\n        weight: \"normal\",\n        variant: \"normal\"\n    };\n    for(let i = 0, ii = $ce07df6d5d4656f1$var$fontRegExMatchIndex.length; i < ii; ++i){\n        const value = match[i + 1];\n        if (value !== undefined) style[$ce07df6d5d4656f1$var$fontRegExMatchIndex[i]] = value;\n    }\n    style.families = style.family.split(/,\\s?/);\n    return style;\n};\n\n\n/**\n * @module ol/render/canvas\n */ \n\n\n\nfunction $075f937d7366f1a2$export$9e05d10eae75c464(width, height, canvasPool, settings) {\n    /** @type {HTMLCanvasElement|OffscreenCanvas} */ let canvas;\n    if (canvasPool && canvasPool.length) canvas = canvasPool.shift();\n    else if (0, $67c66761d21428d0$export$98fcef3dc9973292) canvas = new OffscreenCanvas(width || 300, height || 300);\n    else canvas = document.createElement(\"canvas\");\n    if (width) canvas.width = width;\n    if (height) canvas.height = height;\n    //FIXME Allow OffscreenCanvasRenderingContext2D as return type\n    return /** @type {CanvasRenderingContext2D} */ canvas.getContext(\"2d\", settings);\n}\nfunction $075f937d7366f1a2$export$e918ac6a1026a12a(context) {\n    const canvas = context.canvas;\n    canvas.width = 1;\n    canvas.height = 1;\n    context.clearRect(0, 0, 1, 1);\n}\nfunction $075f937d7366f1a2$export$e823f88e4111159a(element) {\n    let width = element.offsetWidth;\n    const style = getComputedStyle(element);\n    width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n    return width;\n}\nfunction $075f937d7366f1a2$export$fc5b8aac72846d1e(element) {\n    let height = element.offsetHeight;\n    const style = getComputedStyle(element);\n    height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n    return height;\n}\nfunction $075f937d7366f1a2$export$5542201de9311ab2(newNode, oldNode) {\n    const parent = oldNode.parentNode;\n    if (parent) parent.replaceChild(newNode, oldNode);\n}\nfunction $075f937d7366f1a2$export$1d0aa160432dfea5(node) {\n    return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n}\nfunction $075f937d7366f1a2$export$1e1c9bf5a4ffe0d1(node) {\n    while(node.lastChild)node.removeChild(node.lastChild);\n}\nfunction $075f937d7366f1a2$export$caeacfe04f52533a(node, children) {\n    const oldChildren = node.childNodes;\n    for(let i = 0;; ++i){\n        const oldChild = oldChildren[i];\n        const newChild = children[i];\n        // check if our work is done\n        if (!oldChild && !newChild) break;\n        // check if children match\n        if (oldChild === newChild) continue;\n        // check if a new child needs to be added\n        if (!oldChild) {\n            node.appendChild(newChild);\n            continue;\n        }\n        // check if an old child needs to be removed\n        if (!newChild) {\n            node.removeChild(oldChild);\n            --i;\n            continue;\n        }\n        // reorder\n        node.insertBefore(newChild, oldChild);\n    }\n}\n\n\n\nconst $d4aabc5c971073f1$export$3847dfea4f8d4dfa = \"10px sans-serif\";\nconst $d4aabc5c971073f1$export$c495d52ee3fd74b2 = \"#000\";\nconst $d4aabc5c971073f1$export$17bd0c38d6ae694e = \"round\";\nconst $d4aabc5c971073f1$export$e21b4112fdc612fc = [];\nconst $d4aabc5c971073f1$export$e06efc2409049f76 = 0;\nconst $d4aabc5c971073f1$export$365eb9648cf19bd0 = \"round\";\nconst $d4aabc5c971073f1$export$80c1c01844597b7b = 10;\nconst $d4aabc5c971073f1$export$1eb2eaecacf2031e = \"#000\";\nconst $d4aabc5c971073f1$export$94d53b95641b5766 = \"center\";\nconst $d4aabc5c971073f1$export$cf2279a1bff62eb = \"middle\";\nconst $d4aabc5c971073f1$export$40a9eeef55665a40 = [\n    0,\n    0,\n    0,\n    0\n];\nconst $d4aabc5c971073f1$export$79661f132c62010e = 1;\nconst $d4aabc5c971073f1$export$1d36981fcadac93b = new (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039)();\n/**\n * @type {CanvasRenderingContext2D}\n */ let $d4aabc5c971073f1$var$measureContext = null;\n/**\n * @type {string}\n */ let $d4aabc5c971073f1$var$measureFont;\nconst $d4aabc5c971073f1$export$7fdcec604f0b1fa7 = {};\nconst $d4aabc5c971073f1$export$a534074a28fa87ff = function() {\n    const retries = 100;\n    const size = \"32px \";\n    const referenceFonts = [\n        \"monospace\",\n        \"serif\"\n    ];\n    const len = referenceFonts.length;\n    const text = \"wmytzilWMYTZIL@#/&?$%10\";\n    let interval, referenceWidth;\n    /**\n   * @param {string} fontStyle Css font-style\n   * @param {string} fontWeight Css font-weight\n   * @param {*} fontFamily Css font-family\n   * @return {boolean} Font with style and weight is available\n   */ function isAvailable(fontStyle, fontWeight, fontFamily) {\n        let available = true;\n        for(let i = 0; i < len; ++i){\n            const referenceFont = referenceFonts[i];\n            referenceWidth = $d4aabc5c971073f1$export$4ea92329b673abd1(fontStyle + \" \" + fontWeight + \" \" + size + referenceFont, text);\n            if (fontFamily != referenceFont) {\n                const width = $d4aabc5c971073f1$export$4ea92329b673abd1(fontStyle + \" \" + fontWeight + \" \" + size + fontFamily + \",\" + referenceFont, text);\n                // If width and referenceWidth are the same, then the fallback was used\n                // instead of the font we wanted, so the font is not available.\n                available = available && width != referenceWidth;\n            }\n        }\n        if (available) return true;\n        return false;\n    }\n    function check() {\n        let done = true;\n        const fonts = $d4aabc5c971073f1$export$1d36981fcadac93b.getKeys();\n        for(let i = 0, ii = fonts.length; i < ii; ++i){\n            const font = fonts[i];\n            if ($d4aabc5c971073f1$export$1d36981fcadac93b.get(font) < retries) {\n                if (isAvailable.apply(this, font.split(\"\\n\"))) {\n                    (0, $beaefe87199bb537$export$42ffd38884aecdac)($d4aabc5c971073f1$export$7fdcec604f0b1fa7);\n                    // Make sure that loaded fonts are picked up by Safari\n                    $d4aabc5c971073f1$var$measureContext = null;\n                    $d4aabc5c971073f1$var$measureFont = undefined;\n                    $d4aabc5c971073f1$export$1d36981fcadac93b.set(font, retries);\n                } else {\n                    $d4aabc5c971073f1$export$1d36981fcadac93b.set(font, $d4aabc5c971073f1$export$1d36981fcadac93b.get(font) + 1, true);\n                    done = false;\n                }\n            }\n        }\n        if (done) {\n            clearInterval(interval);\n            interval = undefined;\n        }\n    }\n    return function(fontSpec) {\n        const font = (0, $ce07df6d5d4656f1$export$5abde8a6aec4a131)(fontSpec);\n        if (!font) return;\n        const families = font.families;\n        for(let i = 0, ii = families.length; i < ii; ++i){\n            const family = families[i];\n            const key = font.style + \"\\n\" + font.weight + \"\\n\" + family;\n            if ($d4aabc5c971073f1$export$1d36981fcadac93b.get(key) === undefined) {\n                $d4aabc5c971073f1$export$1d36981fcadac93b.set(key, retries, true);\n                if (!isAvailable(font.style, font.weight, family)) {\n                    $d4aabc5c971073f1$export$1d36981fcadac93b.set(key, 0, true);\n                    if (interval === undefined) interval = setInterval(check, 32);\n                }\n            }\n        }\n    };\n}();\nconst $d4aabc5c971073f1$export$4feaf6852ff92513 = function() {\n    /**\n   * @type {HTMLDivElement}\n   */ let measureElement;\n    return function(fontSpec) {\n        let height = $d4aabc5c971073f1$export$7fdcec604f0b1fa7[fontSpec];\n        if (height == undefined) {\n            if (0, $67c66761d21428d0$export$98fcef3dc9973292) {\n                const font = (0, $ce07df6d5d4656f1$export$5abde8a6aec4a131)(fontSpec);\n                const metrics = $d4aabc5c971073f1$var$measureText(fontSpec, \"Žg\");\n                const lineHeight = isNaN(Number(font.lineHeight)) ? 1.2 : Number(font.lineHeight);\n                height = lineHeight * (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\n            } else {\n                if (!measureElement) {\n                    measureElement = document.createElement(\"div\");\n                    measureElement.innerHTML = \"M\";\n                    measureElement.style.minHeight = \"0\";\n                    measureElement.style.maxHeight = \"none\";\n                    measureElement.style.height = \"auto\";\n                    measureElement.style.padding = \"0\";\n                    measureElement.style.border = \"none\";\n                    measureElement.style.position = \"absolute\";\n                    measureElement.style.display = \"block\";\n                    measureElement.style.left = \"-99999px\";\n                }\n                measureElement.style.font = fontSpec;\n                document.body.appendChild(measureElement);\n                height = measureElement.offsetHeight;\n                document.body.removeChild(measureElement);\n            }\n            $d4aabc5c971073f1$export$7fdcec604f0b1fa7[fontSpec] = height;\n        }\n        return height;\n    };\n}();\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {TextMetrics} Text metrics.\n */ function $d4aabc5c971073f1$var$measureText(font, text) {\n    if (!$d4aabc5c971073f1$var$measureContext) $d4aabc5c971073f1$var$measureContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(1, 1);\n    if (font != $d4aabc5c971073f1$var$measureFont) {\n        $d4aabc5c971073f1$var$measureContext.font = font;\n        $d4aabc5c971073f1$var$measureFont = $d4aabc5c971073f1$var$measureContext.font;\n    }\n    return $d4aabc5c971073f1$var$measureContext.measureText(text);\n}\nfunction $d4aabc5c971073f1$export$4ea92329b673abd1(font, text) {\n    return $d4aabc5c971073f1$var$measureText(font, text).width;\n}\nfunction $d4aabc5c971073f1$export$915c7ba51467308f(font, text, cache) {\n    if (text in cache) return cache[text];\n    const width = text.split(\"\\n\").reduce((prev, curr)=>Math.max(prev, $d4aabc5c971073f1$export$4ea92329b673abd1(font, curr)), 0);\n    cache[text] = width;\n    return width;\n}\nfunction $d4aabc5c971073f1$export$7d7c13020df1e791(baseStyle, chunks) {\n    const widths = [];\n    const heights = [];\n    const lineWidths = [];\n    let width = 0;\n    let lineWidth = 0;\n    let height = 0;\n    let lineHeight = 0;\n    for(let i = 0, ii = chunks.length; i <= ii; i += 2){\n        const text = chunks[i];\n        if (text === \"\\n\" || i === ii) {\n            width = Math.max(width, lineWidth);\n            lineWidths.push(lineWidth);\n            lineWidth = 0;\n            height += lineHeight;\n            continue;\n        }\n        const font = chunks[i + 1] || baseStyle.font;\n        const currentWidth = $d4aabc5c971073f1$export$4ea92329b673abd1(font, text);\n        widths.push(currentWidth);\n        lineWidth += currentWidth;\n        const currentHeight = $d4aabc5c971073f1$export$4feaf6852ff92513(font);\n        heights.push(currentHeight);\n        lineHeight = Math.max(lineHeight, currentHeight);\n    }\n    return {\n        width: width,\n        height: height,\n        widths: widths,\n        heights: heights,\n        lineWidths: lineWidths\n    };\n}\nfunction $d4aabc5c971073f1$export$8ac4d72be78047e6(context, rotation, offsetX, offsetY) {\n    if (rotation !== 0) {\n        context.translate(offsetX, offsetY);\n        context.rotate(rotation);\n        context.translate(-offsetX, -offsetY);\n    }\n}\nfunction $d4aabc5c971073f1$export$3cb6f3a6e49cc0ee(context, transform, opacity, labelOrImage, originX, originY, w, h, x, y, scale) {\n    context.save();\n    if (opacity !== 1) context.globalAlpha *= opacity;\n    if (transform) context.transform.apply(context, transform);\n    if (/** @type {*} */ labelOrImage.contextInstructions) {\n        // label\n        context.translate(x, y);\n        context.scale(scale[0], scale[1]);\n        $d4aabc5c971073f1$var$executeLabelInstructions(/** @type {Label} */ labelOrImage, context);\n    } else if (scale[0] < 0 || scale[1] < 0) {\n        // flipped image\n        context.translate(x, y);\n        context.scale(scale[0], scale[1]);\n        context.drawImage(/** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ labelOrImage, originX, originY, w, h, 0, 0, w, h);\n    } else // if image not flipped translate and scale can be avoided\n    context.drawImage(/** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ labelOrImage, originX, originY, w, h, x, y, w * scale[0], h * scale[1]);\n    context.restore();\n}\n/**\n * @param {Label} label Label.\n * @param {CanvasRenderingContext2D} context Context.\n */ function $d4aabc5c971073f1$var$executeLabelInstructions(label, context) {\n    const contextInstructions = label.contextInstructions;\n    for(let i = 0, ii = contextInstructions.length; i < ii; i += 2)if (Array.isArray(contextInstructions[i + 1])) context[contextInstructions[i]].apply(context, contextInstructions[i + 1]);\n    else context[contextInstructions[i]] = contextInstructions[i + 1];\n}\n\n\n\n\n\n/**\n * @classdesc\n * Canvas map renderer.\n * @api\n */ class $fa78c97693b12120$var$CompositeMapRenderer extends (0, $b370ab32454a96fd$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"../Map.js\").default} map Map.\n   */ constructor(map){\n        super(map);\n        /**\n     * @type {import(\"../events.js\").EventsKey}\n     */ this.fontChangeListenerKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)((0, $d4aabc5c971073f1$export$1d36981fcadac93b), (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE, map.redrawText.bind(map));\n        /**\n     * @private\n     * @type {HTMLDivElement}\n     */ this.element_ = document.createElement(\"div\");\n        const style = this.element_.style;\n        style.position = \"absolute\";\n        style.width = \"100%\";\n        style.height = \"100%\";\n        style.zIndex = \"0\";\n        this.element_.className = (0, $ce07df6d5d4656f1$export$1afde3d6e16a7b29) + \" ol-layers\";\n        const container = map.getViewport();\n        container.insertBefore(this.element_, container.firstChild || null);\n        /**\n     * @private\n     * @type {Array<HTMLElement>}\n     */ this.children_ = [];\n        /**\n     * @private\n     * @type {boolean}\n     */ this.renderedVisible_ = true;\n        /**\n     * @type {Array<import(\"../layer/BaseVector.js\").default>}\n     */ this.declutterLayers_ = [];\n    }\n    /**\n   * @param {import(\"../render/EventType.js\").default} type Event type.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */ dispatchRenderEvent(type, frameState) {\n        const map = this.getMap();\n        if (map.hasListener(type)) {\n            const event = new (0, $b80dddceb0c42ad4$export$2e2bcd8739ae039)(type, undefined, frameState);\n            map.dispatchEvent(event);\n        }\n    }\n    disposeInternal() {\n        (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.fontChangeListenerKey_);\n        this.element_.parentNode.removeChild(this.element_);\n        super.disposeInternal();\n    }\n    /**\n   * Render.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   */ renderFrame(frameState) {\n        if (!frameState) {\n            if (this.renderedVisible_) {\n                this.element_.style.display = \"none\";\n                this.renderedVisible_ = false;\n            }\n            return;\n        }\n        this.calculateMatrices2D(frameState);\n        this.dispatchRenderEvent((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).PRECOMPOSE, frameState);\n        const layerStatesArray = frameState.layerStatesArray.sort(function(a, b) {\n            return a.zIndex - b.zIndex;\n        });\n        const viewState = frameState.viewState;\n        this.children_.length = 0;\n        const declutterLayers = this.declutterLayers_;\n        declutterLayers.length = 0;\n        let previousElement = null;\n        for(let i = 0, ii = layerStatesArray.length; i < ii; ++i){\n            const layerState = layerStatesArray[i];\n            frameState.layerIndex = i;\n            const layer = layerState.layer;\n            const sourceState = layer.getSourceState();\n            if (!(0, $534f30fce11effcd$export$acb1e9cb9ce4ca56)(layerState, viewState) || sourceState != \"ready\" && sourceState != \"undefined\") {\n                layer.unrender();\n                continue;\n            }\n            const element = layer.render(frameState, previousElement);\n            if (!element) continue;\n            if (element !== previousElement) {\n                this.children_.push(element);\n                previousElement = element;\n            }\n            if (\"getDeclutter\" in layer) declutterLayers.push(/** @type {import(\"../layer/BaseVector.js\").default} */ layer);\n        }\n        this.flushDeclutterItems(frameState);\n        (0, $075f937d7366f1a2$export$caeacfe04f52533a)(this.element_, this.children_);\n        this.dispatchRenderEvent((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).POSTCOMPOSE, frameState);\n        if (!this.renderedVisible_) {\n            this.element_.style.display = \"\";\n            this.renderedVisible_ = true;\n        }\n        this.scheduleExpireIconCache(frameState);\n    }\n    /**\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */ flushDeclutterItems(frameState) {\n        const layers = this.declutterLayers_;\n        for(let i = layers.length - 1; i >= 0; --i)layers[i].renderDeclutter(frameState);\n        layers.length = 0;\n    }\n}\nvar $fa78c97693b12120$export$2e2bcd8739ae039 = $fa78c97693b12120$var$CompositeMapRenderer;\n\n\n\n\n/**\n * @module ol/layer/Group\n */ \n\n\n\n\n\n\n\n\n\n\nclass $0b703156bb914e6f$export$2f5ff21d758d25a7 extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\n   * @param {EventType} type The event type.\n   * @param {BaseLayer} layer The layer.\n   */ constructor(type, layer){\n        super(type);\n        /**\n     * The added or removed layer.\n     * @type {BaseLayer}\n     * @api\n     */ this.layer = layer;\n    }\n}\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:layers', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:layers', Return>} GroupOnSignature\n */ /**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<import(\"./Base.js\").default>|Collection<import(\"./Base.js\").default>} [layers] Child layers.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */ /**\n * @enum {string}\n * @private\n */ const $0b703156bb914e6f$var$Property = {\n    LAYERS: \"layers\"\n};\n/**\n * @classdesc\n * A {@link module:ol/Collection~Collection} of layers that are handled together.\n *\n * A generic `change` event is triggered when the group/Collection changes.\n *\n * @api\n */ class $0b703156bb914e6f$var$LayerGroup extends (0, $57c5f0299cb9b82f$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Layer options.\n   */ constructor(options){\n        options = options || {};\n        const baseOptions = /** @type {Options} */ Object.assign({}, options);\n        delete baseOptions.layers;\n        let layers = options.layers;\n        super(baseOptions);\n        /***\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {GroupOnSignature<void>}\n     */ this.un;\n        /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */ this.layersListenerKeys_ = [];\n        /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */ this.listenerKeys_ = {};\n        this.addChangeListener($0b703156bb914e6f$var$Property.LAYERS, this.handleLayersChanged_);\n        if (layers) {\n            if (Array.isArray(layers)) layers = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)(layers.slice(), {\n                unique: true\n            });\n            else (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof /** @type {?} */ layers.getArray === \"function\", \"Expected `layers` to be an array or a `Collection`\");\n        } else layers = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)(undefined, {\n            unique: true\n        });\n        this.setLayers(layers);\n    }\n    /**\n   * @private\n   */ handleLayerChange_() {\n        this.changed();\n    }\n    /**\n   * @private\n   */ handleLayersChanged_() {\n        this.layersListenerKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        this.layersListenerKeys_.length = 0;\n        const layers = this.getLayers();\n        this.layersListenerKeys_.push((0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layers, (0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, this.handleLayersAdd_, this), (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layers, (0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, this.handleLayersRemove_, this));\n        for(const id in this.listenerKeys_)this.listenerKeys_[id].forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        (0, $beaefe87199bb537$export$42ffd38884aecdac)(this.listenerKeys_);\n        const layersArray = layers.getArray();\n        for(let i = 0, ii = layersArray.length; i < ii; i++){\n            const layer = layersArray[i];\n            this.registerLayerListeners_(layer);\n            this.dispatchEvent(new $0b703156bb914e6f$export$2f5ff21d758d25a7(\"addlayer\", layer));\n        }\n        this.changed();\n    }\n    /**\n   * @param {BaseLayer} layer The layer.\n   */ registerLayerListeners_(layer) {\n        const listenerKeys = [\n            (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layer, (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE, this.handleLayerChange_, this),\n            (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layer, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleLayerChange_, this)\n        ];\n        if (layer instanceof $0b703156bb914e6f$var$LayerGroup) listenerKeys.push((0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layer, \"addlayer\", this.handleLayerGroupAdd_, this), (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layer, \"removelayer\", this.handleLayerGroupRemove_, this));\n        this.listenerKeys_[(0, $6c5e11070e371322$export$5e82334337e0f204)(layer)] = listenerKeys;\n    }\n    /**\n   * @param {GroupEvent} event The layer group event.\n   */ handleLayerGroupAdd_(event) {\n        this.dispatchEvent(new $0b703156bb914e6f$export$2f5ff21d758d25a7(\"addlayer\", event.layer));\n    }\n    /**\n   * @param {GroupEvent} event The layer group event.\n   */ handleLayerGroupRemove_(event) {\n        this.dispatchEvent(new $0b703156bb914e6f$export$2f5ff21d758d25a7(\"removelayer\", event.layer));\n    }\n    /**\n   * @param {import(\"../Collection.js\").CollectionEvent<import(\"./Base.js\").default>} collectionEvent CollectionEvent.\n   * @private\n   */ handleLayersAdd_(collectionEvent) {\n        const layer = collectionEvent.element;\n        this.registerLayerListeners_(layer);\n        this.dispatchEvent(new $0b703156bb914e6f$export$2f5ff21d758d25a7(\"addlayer\", layer));\n        this.changed();\n    }\n    /**\n   * @param {import(\"../Collection.js\").CollectionEvent<import(\"./Base.js\").default>} collectionEvent CollectionEvent.\n   * @private\n   */ handleLayersRemove_(collectionEvent) {\n        const layer = collectionEvent.element;\n        const key = (0, $6c5e11070e371322$export$5e82334337e0f204)(layer);\n        this.listenerKeys_[key].forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        delete this.listenerKeys_[key];\n        this.dispatchEvent(new $0b703156bb914e6f$export$2f5ff21d758d25a7(\"removelayer\", layer));\n        this.changed();\n    }\n    /**\n   * Returns the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}\n   * in this group.\n   * @return {!Collection<import(\"./Base.js\").default>} Collection of\n   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.\n   * @observable\n   * @api\n   */ getLayers() {\n        return /** @type {!Collection<import(\"./Base.js\").default>} */ this.get($0b703156bb914e6f$var$Property.LAYERS);\n    }\n    /**\n   * Set the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}\n   * in this group.\n   * @param {!Collection<import(\"./Base.js\").default>} layers Collection of\n   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.\n   * @observable\n   * @api\n   */ setLayers(layers) {\n        const collection = this.getLayers();\n        if (collection) {\n            const currentLayers = collection.getArray();\n            for(let i = 0, ii = currentLayers.length; i < ii; ++i)this.dispatchEvent(new $0b703156bb914e6f$export$2f5ff21d758d25a7(\"removelayer\", currentLayers[i]));\n        }\n        this.set($0b703156bb914e6f$var$Property.LAYERS, layers);\n    }\n    /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */ getLayersArray(array) {\n        array = array !== undefined ? array : [];\n        this.getLayers().forEach(function(layer) {\n            layer.getLayersArray(array);\n        });\n        return array;\n    }\n    /**\n   * Get the layer states list and use this groups z-index as the default\n   * for all layers in this and nested groups, if it is unset at this point.\n   * If dest is not provided and this group's z-index is undefined\n   * 0 is used a the default z-index.\n   * @param {Array<import(\"./Layer.js\").State>} [dest] Optional list\n   * of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */ getLayerStatesArray(dest) {\n        const states = dest !== undefined ? dest : [];\n        const pos = states.length;\n        this.getLayers().forEach(function(layer) {\n            layer.getLayerStatesArray(states);\n        });\n        const ownLayerState = this.getLayerState();\n        let defaultZIndex = ownLayerState.zIndex;\n        if (!dest && ownLayerState.zIndex === undefined) defaultZIndex = 0;\n        for(let i = pos, ii = states.length; i < ii; i++){\n            const layerState = states[i];\n            layerState.opacity *= ownLayerState.opacity;\n            layerState.visible = layerState.visible && ownLayerState.visible;\n            layerState.maxResolution = Math.min(layerState.maxResolution, ownLayerState.maxResolution);\n            layerState.minResolution = Math.max(layerState.minResolution, ownLayerState.minResolution);\n            layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);\n            layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);\n            if (ownLayerState.extent !== undefined) {\n                if (layerState.extent !== undefined) layerState.extent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(layerState.extent, ownLayerState.extent);\n                else layerState.extent = ownLayerState.extent;\n            }\n            if (layerState.zIndex === undefined) layerState.zIndex = defaultZIndex;\n        }\n        return states;\n    }\n    /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */ getSourceState() {\n        return \"ready\";\n    }\n}\nvar $0b703156bb914e6f$export$2e2bcd8739ae039 = $0b703156bb914e6f$var$LayerGroup;\n\n\n/**\n * @module ol/MapBrowserEvent\n */ /**\n * @module ol/MapEvent\n */ \n/**\n * @classdesc\n * Events emitted as map events are instances of this type.\n * See {@link module:ol/Map~Map} for which events trigger a map event.\n */ class $3a171922c3a0c5ed$var$MapEvent extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} type Event type.\n   * @param {import(\"./Map.js\").default} map Map.\n   * @param {?import(\"./Map.js\").FrameState} [frameState] Frame state.\n   */ constructor(type, map, frameState){\n        super(type);\n        /**\n     * The map where the event occurred.\n     * @type {import(\"./Map.js\").default}\n     * @api\n     */ this.map = map;\n        /**\n     * The frame state at the time of the event.\n     * @type {?import(\"./Map.js\").FrameState}\n     * @api\n     */ this.frameState = frameState !== undefined ? frameState : null;\n    }\n}\nvar $3a171922c3a0c5ed$export$2e2bcd8739ae039 = $3a171922c3a0c5ed$var$MapEvent;\n\n\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/Map~Map} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */ class $a1b91f073c6a6c43$var$MapBrowserEvent extends (0, $3a171922c3a0c5ed$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} type Event type.\n   * @param {import(\"./Map.js\").default} map Map.\n   * @param {EVENT} originalEvent Original event.\n   * @param {boolean} [dragging] Is the map currently being dragged?\n   * @param {import(\"./Map.js\").FrameState} [frameState] Frame state.\n   * @param {Array<PointerEvent>} [activePointers] Active pointers.\n   */ constructor(type, map, originalEvent, dragging, frameState, activePointers){\n        super(type, map, frameState);\n        /**\n     * The original browser event.\n     * @const\n     * @type {EVENT}\n     * @api\n     */ this.originalEvent = originalEvent;\n        /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     */ this.pixel_ = null;\n        /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */ this.coordinate_ = null;\n        /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */ this.dragging = dragging !== undefined ? dragging : false;\n        /**\n     * @type {Array<PointerEvent>|undefined}\n     */ this.activePointers = activePointers;\n    }\n    /**\n   * The map pixel relative to the viewport corresponding to the original event.\n   * @type {import(\"./pixel.js\").Pixel}\n   * @api\n   */ get pixel() {\n        if (!this.pixel_) this.pixel_ = this.map.getEventPixel(this.originalEvent);\n        return this.pixel_;\n    }\n    set pixel(pixel) {\n        this.pixel_ = pixel;\n    }\n    /**\n   * The coordinate corresponding to the original browser event.  This will be in the user\n   * projection if one is set.  Otherwise it will be in the view projection.\n   * @type {import(\"./coordinate.js\").Coordinate}\n   * @api\n   */ get coordinate() {\n        if (!this.coordinate_) this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n        return this.coordinate_;\n    }\n    set coordinate(coordinate) {\n        this.coordinate_ = coordinate;\n    }\n    /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @api\n   */ preventDefault() {\n        super.preventDefault();\n        if (\"preventDefault\" in this.originalEvent) /** @type {UIEvent} */ this.originalEvent.preventDefault();\n    }\n    /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @api\n   */ stopPropagation() {\n        super.stopPropagation();\n        if (\"stopPropagation\" in this.originalEvent) /** @type {UIEvent} */ this.originalEvent.stopPropagation();\n    }\n}\nvar $a1b91f073c6a6c43$export$2e2bcd8739ae039 = $a1b91f073c6a6c43$var$MapBrowserEvent;\n\n\n/**\n * @module ol/MapBrowserEventHandler\n */ \n\n/**\n * @module ol/MapBrowserEventType\n */ \nvar /**\n * Constants for event names.\n * @enum {string}\n */ $150f412a4a7fa263$export$2e2bcd8739ae039 /***\n * @typedef {'singleclick'|'click'|'dblclick'|'pointerdrag'|'pointermove'} Types\n */  = {\n    /**\n   * A true single click with no dragging and no double click. Note that this\n   * event is delayed by 250 ms to ensure that it is not a double click.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick\n   * @api\n   */ SINGLECLICK: \"singleclick\",\n    /**\n   * A click with no dragging. A double click will fire two of this.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click\n   * @api\n   */ CLICK: (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CLICK,\n    /**\n   * A true double click, with no dragging.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick\n   * @api\n   */ DBLCLICK: (0, $294047c5e65f31a3$export$2e2bcd8739ae039).DBLCLICK,\n    /**\n   * Triggered when a pointer is dragged.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag\n   * @api\n   */ POINTERDRAG: \"pointerdrag\",\n    /**\n   * Triggered when a pointer is moved. Note that on touch devices this is\n   * triggered when the map is panned, so is not the same as mousemove.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove\n   * @api\n   */ POINTERMOVE: \"pointermove\",\n    POINTERDOWN: \"pointerdown\",\n    POINTERUP: \"pointerup\",\n    POINTEROVER: \"pointerover\",\n    POINTEROUT: \"pointerout\",\n    POINTERENTER: \"pointerenter\",\n    POINTERLEAVE: \"pointerleave\",\n    POINTERCANCEL: \"pointercancel\"\n};\n\n\n/**\n * @module ol/pointer/EventType\n */ /**\n * Constants for event names.\n * @enum {string}\n */ var $d564567e31203d44$export$2e2bcd8739ae039 = {\n    POINTERMOVE: \"pointermove\",\n    POINTERDOWN: \"pointerdown\",\n    POINTERUP: \"pointerup\",\n    POINTEROVER: \"pointerover\",\n    POINTEROUT: \"pointerout\",\n    POINTERENTER: \"pointerenter\",\n    POINTERLEAVE: \"pointerleave\",\n    POINTERCANCEL: \"pointercancel\"\n};\n\n\n\n\n\nclass $6085d006f9d0efe2$var$MapBrowserEventHandler extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./Map.js\").default} map The map with the viewport to listen to events on.\n   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.\n   */ constructor(map, moveTolerance){\n        super(map);\n        /**\n     * This is the element that we will listen to the real events on.\n     * @type {import(\"./Map.js\").default}\n     * @private\n     */ this.map_ = map;\n        /**\n     * @type {ReturnType<typeof setTimeout>}\n     * @private\n     */ this.clickTimeoutId_;\n        /**\n     * Emulate dblclick and singleclick. Will be true when only one pointer is active.\n     * @type {boolean}\n     */ this.emulateClicks_ = false;\n        /**\n     * @type {boolean}\n     * @private\n     */ this.dragging_ = false;\n        /**\n     * @type {!Array<import(\"./events.js\").EventsKey>}\n     * @private\n     */ this.dragListenerKeys_ = [];\n        /**\n     * @type {number}\n     * @private\n     */ this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;\n        /**\n     * The most recent \"down\" type event (or null if none have occurred).\n     * Set on pointerdown.\n     * @type {PointerEvent|null}\n     * @private\n     */ this.down_ = null;\n        const element = this.map_.getViewport();\n        /**\n     * @type {Array<PointerEvent>}\n     * @private\n     */ this.activePointers_ = [];\n        /**\n     * @type {!Object<number, Event>}\n     * @private\n     */ this.trackedTouches_ = {};\n        this.element_ = element;\n        /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */ this.pointerdownListenerKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(element, (0, $d564567e31203d44$export$2e2bcd8739ae039).POINTERDOWN, this.handlePointerDown_, this);\n        /**\n     * @type {PointerEvent}\n     * @private\n     */ this.originalPointerMoveEvent_;\n        /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */ this.relayedListenerKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(element, (0, $d564567e31203d44$export$2e2bcd8739ae039).POINTERMOVE, this.relayMoveEvent_, this);\n        /**\n     * @private\n     */ this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this);\n        this.element_.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).TOUCHMOVE, this.boundHandleTouchMove_, (0, $67c66761d21428d0$export$f751ce96c6c4e4fc) ? {\n            passive: false\n        } : false);\n    }\n    /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */ emulateClick_(pointerEvent) {\n        let newEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).CLICK, this.map_, pointerEvent);\n        this.dispatchEvent(newEvent);\n        if (this.clickTimeoutId_ !== undefined) {\n            // double-click\n            clearTimeout(this.clickTimeoutId_);\n            this.clickTimeoutId_ = undefined;\n            newEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).DBLCLICK, this.map_, pointerEvent);\n            this.dispatchEvent(newEvent);\n        } else // click\n        this.clickTimeoutId_ = setTimeout(()=>{\n            this.clickTimeoutId_ = undefined;\n            const newEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).SINGLECLICK, this.map_, pointerEvent);\n            this.dispatchEvent(newEvent);\n        }, 250);\n    }\n    /**\n   * Keeps track on how many pointers are currently active.\n   *\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */ updateActivePointers_(pointerEvent) {\n        const event = pointerEvent;\n        const id = event.pointerId;\n        if (event.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERUP || event.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERCANCEL) {\n            delete this.trackedTouches_[id];\n            for(const pointerId in this.trackedTouches_)if (this.trackedTouches_[pointerId].target !== event.target) {\n                // Some platforms assign a new pointerId when the target changes.\n                // If this happens, delete one tracked pointer. If there is more\n                // than one tracked pointer for the old target, it will be cleared\n                // by subsequent POINTERUP events from other pointers.\n                delete this.trackedTouches_[pointerId];\n                break;\n            }\n        } else if (event.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERDOWN || event.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERMOVE) this.trackedTouches_[id] = event;\n        this.activePointers_ = Object.values(this.trackedTouches_);\n    }\n    /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */ handlePointerUp_(pointerEvent) {\n        this.updateActivePointers_(pointerEvent);\n        const newEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERUP, this.map_, pointerEvent, undefined, undefined, this.activePointers_);\n        this.dispatchEvent(newEvent);\n        // We emulate click events on left mouse button click, touch contact, and pen\n        // contact. isMouseActionButton returns true in these cases (evt.button is set\n        // to 0).\n        // See http://www.w3.org/TR/pointerevents/#button-states\n        // We only fire click, singleclick, and doubleclick if nobody has called\n        // event.preventDefault().\n        if (this.emulateClicks_ && !newEvent.defaultPrevented && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) this.emulateClick_(this.down_);\n        if (this.activePointers_.length === 0) {\n            this.dragListenerKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n            this.dragListenerKeys_.length = 0;\n            this.dragging_ = false;\n            this.down_ = null;\n        }\n    }\n    /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} If the left mouse button was pressed.\n   * @private\n   */ isMouseActionButton_(pointerEvent) {\n        return pointerEvent.button === 0;\n    }\n    /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */ handlePointerDown_(pointerEvent) {\n        this.emulateClicks_ = this.activePointers_.length === 0;\n        this.updateActivePointers_(pointerEvent);\n        const newEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERDOWN, this.map_, pointerEvent, undefined, undefined, this.activePointers_);\n        this.dispatchEvent(newEvent);\n        this.down_ = new PointerEvent(pointerEvent.type, pointerEvent);\n        Object.defineProperty(this.down_, \"target\", {\n            writable: false,\n            value: pointerEvent.target\n        });\n        if (this.dragListenerKeys_.length === 0) {\n            const doc = this.map_.getOwnerDocument();\n            this.dragListenerKeys_.push((0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(doc, (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERMOVE, this.handlePointerMove_, this), (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(doc, (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERUP, this.handlePointerUp_, this), /* Note that the listener for `pointercancel is set up on\n         * `pointerEventHandler_` and not `documentPointerEventHandler_` like\n         * the `pointerup` and `pointermove` listeners.\n         *\n         * The reason for this is the following: `TouchSource.vacuumTouches_()`\n         * issues `pointercancel` events, when there was no `touchend` for a\n         * `touchstart`. Now, let's say a first `touchstart` is registered on\n         * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\n         * But `documentPointerEventHandler_` doesn't know about the first\n         * `touchstart`. If there is no `touchend` for the `touchstart`, we can\n         * only receive a `touchcancel` from `pointerEventHandler_`, because it is\n         * only registered there.\n         */ (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this.element_, (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERCANCEL, this.handlePointerUp_, this));\n            if (this.element_.getRootNode && this.element_.getRootNode() !== doc) this.dragListenerKeys_.push((0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this.element_.getRootNode(), (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERUP, this.handlePointerUp_, this));\n        }\n    }\n    /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */ handlePointerMove_(pointerEvent) {\n        // Between pointerdown and pointerup, pointermove events are triggered.\n        // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n        // moved a significant distance.\n        if (this.isMoving_(pointerEvent)) {\n            this.updateActivePointers_(pointerEvent);\n            this.dragging_ = true;\n            const newEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERDRAG, this.map_, pointerEvent, this.dragging_, undefined, this.activePointers_);\n            this.dispatchEvent(newEvent);\n        }\n    }\n    /**\n   * Wrap and relay a pointermove event.\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */ relayMoveEvent_(pointerEvent) {\n        this.originalPointerMoveEvent_ = pointerEvent;\n        const dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n        this.dispatchEvent(new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)((0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERMOVE, this.map_, pointerEvent, dragging));\n    }\n    /**\n   * Flexible handling of a `touch-action: none` css equivalent: because calling\n   * `preventDefault()` on a `pointermove` event does not stop native page scrolling\n   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it\n   * when an interaction (currently `DragPan` handles the event.\n   * @param {TouchEvent} event Event.\n   * @private\n   */ handleTouchMove_(event) {\n        // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`\n        // may not be initialized yet when we get here on a platform without native pointer events,\n        // when elm-pep is used as pointer events polyfill.\n        const originalEvent = this.originalPointerMoveEvent_;\n        if ((!originalEvent || originalEvent.defaultPrevented) && (typeof event.cancelable !== \"boolean\" || event.cancelable === true)) event.preventDefault();\n    }\n    /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} Is moving.\n   * @private\n   */ isMoving_(pointerEvent) {\n        return this.dragging_ || Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ || Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;\n    }\n    /**\n   * Clean up.\n   */ disposeInternal() {\n        if (this.relayedListenerKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.relayedListenerKey_);\n            this.relayedListenerKey_ = null;\n        }\n        this.element_.removeEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).TOUCHMOVE, this.boundHandleTouchMove_);\n        if (this.pointerdownListenerKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.pointerdownListenerKey_);\n            this.pointerdownListenerKey_ = null;\n        }\n        this.dragListenerKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        this.dragListenerKeys_.length = 0;\n        this.element_ = null;\n        super.disposeInternal();\n    }\n}\nvar $6085d006f9d0efe2$export$2e2bcd8739ae039 = $6085d006f9d0efe2$var$MapBrowserEventHandler;\n\n\n\n\n/**\n * @module ol/MapEventType\n */ /**\n * @enum {string}\n */ var $e4ad75f913b6f7ff$export$2e2bcd8739ae039 /***\n * @typedef {'postrender'|'movestart'|'moveend'|'loadstart'|'loadend'} Types\n */  = {\n    /**\n   * Triggered after a map frame is rendered.\n   * @event module:ol/MapEvent~MapEvent#postrender\n   * @api\n   */ POSTRENDER: \"postrender\",\n    /**\n   * Triggered when the map starts moving.\n   * @event module:ol/MapEvent~MapEvent#movestart\n   * @api\n   */ MOVESTART: \"movestart\",\n    /**\n   * Triggered after the map is moved.\n   * @event module:ol/MapEvent~MapEvent#moveend\n   * @api\n   */ MOVEEND: \"moveend\",\n    /**\n   * Triggered when loading of additional map data (tiles, images, features) starts.\n   * @event module:ol/MapEvent~MapEvent#loadstart\n   * @api\n   */ LOADSTART: \"loadstart\",\n    /**\n   * Triggered when loading of additional map data has completed.\n   * @event module:ol/MapEvent~MapEvent#loadend\n   * @api\n   */ LOADEND: \"loadend\"\n};\n\n\n/**\n * @module ol/MapProperty\n */ /**\n * @enum {string}\n */ var $07fa325567004bb7$export$2e2bcd8739ae039 = {\n    LAYERGROUP: \"layergroup\",\n    SIZE: \"size\",\n    TARGET: \"target\",\n    VIEW: \"view\"\n};\n\n\n\n\n\n/**\n * @module ol/TileQueue\n */ \n/**\n * @module ol/structs/PriorityQueue\n */ \n\nconst $716c6804ea170b71$export$b4af72c40fd57063 = Infinity;\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */ class $716c6804ea170b71$var$PriorityQueue {\n    /**\n   * @param {function(T): number} priorityFunction Priority function.\n   * @param {function(T): string} keyFunction Key function.\n   */ constructor(priorityFunction, keyFunction){\n        /**\n     * @type {function(T): number}\n     * @private\n     */ this.priorityFunction_ = priorityFunction;\n        /**\n     * @type {function(T): string}\n     * @private\n     */ this.keyFunction_ = keyFunction;\n        /**\n     * @type {Array<T>}\n     * @private\n     */ this.elements_ = [];\n        /**\n     * @type {Array<number>}\n     * @private\n     */ this.priorities_ = [];\n        /**\n     * @type {!Object<string, boolean>}\n     * @private\n     */ this.queuedElements_ = {};\n    }\n    /**\n   * FIXME empty description for jsdoc\n   */ clear() {\n        this.elements_.length = 0;\n        this.priorities_.length = 0;\n        (0, $beaefe87199bb537$export$42ffd38884aecdac)(this.queuedElements_);\n    }\n    /**\n   * Remove and return the highest-priority element. O(log N).\n   * @return {T} Element.\n   */ dequeue() {\n        const elements = this.elements_;\n        const priorities = this.priorities_;\n        const element = elements[0];\n        if (elements.length == 1) {\n            elements.length = 0;\n            priorities.length = 0;\n        } else {\n            elements[0] = elements.pop();\n            priorities[0] = priorities.pop();\n            this.siftUp_(0);\n        }\n        const elementKey = this.keyFunction_(element);\n        delete this.queuedElements_[elementKey];\n        return element;\n    }\n    /**\n   * Enqueue an element. O(log N).\n   * @param {T} element Element.\n   * @return {boolean} The element was added to the queue.\n   */ enqueue(element) {\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!(this.keyFunction_(element) in this.queuedElements_), \"Tried to enqueue an `element` that was already added to the queue\");\n        const priority = this.priorityFunction_(element);\n        if (priority != $716c6804ea170b71$export$b4af72c40fd57063) {\n            this.elements_.push(element);\n            this.priorities_.push(priority);\n            this.queuedElements_[this.keyFunction_(element)] = true;\n            this.siftDown_(0, this.elements_.length - 1);\n            return true;\n        }\n        return false;\n    }\n    /**\n   * @return {number} Count.\n   */ getCount() {\n        return this.elements_.length;\n    }\n    /**\n   * Gets the index of the left child of the node at the given index.\n   * @param {number} index The index of the node to get the left child for.\n   * @return {number} The index of the left child.\n   * @private\n   */ getLeftChildIndex_(index) {\n        return index * 2 + 1;\n    }\n    /**\n   * Gets the index of the right child of the node at the given index.\n   * @param {number} index The index of the node to get the right child for.\n   * @return {number} The index of the right child.\n   * @private\n   */ getRightChildIndex_(index) {\n        return index * 2 + 2;\n    }\n    /**\n   * Gets the index of the parent of the node at the given index.\n   * @param {number} index The index of the node to get the parent for.\n   * @return {number} The index of the parent.\n   * @private\n   */ getParentIndex_(index) {\n        return index - 1 >> 1;\n    }\n    /**\n   * Make this a heap. O(N).\n   * @private\n   */ heapify_() {\n        let i;\n        for(i = (this.elements_.length >> 1) - 1; i >= 0; i--)this.siftUp_(i);\n    }\n    /**\n   * @return {boolean} Is empty.\n   */ isEmpty() {\n        return this.elements_.length === 0;\n    }\n    /**\n   * @param {string} key Key.\n   * @return {boolean} Is key queued.\n   */ isKeyQueued(key) {\n        return key in this.queuedElements_;\n    }\n    /**\n   * @param {T} element Element.\n   * @return {boolean} Is queued.\n   */ isQueued(element) {\n        return this.isKeyQueued(this.keyFunction_(element));\n    }\n    /**\n   * @param {number} index The index of the node to move down.\n   * @private\n   */ siftUp_(index) {\n        const elements = this.elements_;\n        const priorities = this.priorities_;\n        const count = elements.length;\n        const element = elements[index];\n        const priority = priorities[index];\n        const startIndex = index;\n        while(index < count >> 1){\n            const lIndex = this.getLeftChildIndex_(index);\n            const rIndex = this.getRightChildIndex_(index);\n            const smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;\n            elements[index] = elements[smallerChildIndex];\n            priorities[index] = priorities[smallerChildIndex];\n            index = smallerChildIndex;\n        }\n        elements[index] = element;\n        priorities[index] = priority;\n        this.siftDown_(startIndex, index);\n    }\n    /**\n   * @param {number} startIndex The index of the root.\n   * @param {number} index The index of the node to move up.\n   * @private\n   */ siftDown_(startIndex, index) {\n        const elements = this.elements_;\n        const priorities = this.priorities_;\n        const element = elements[index];\n        const priority = priorities[index];\n        while(index > startIndex){\n            const parentIndex = this.getParentIndex_(index);\n            if (priorities[parentIndex] > priority) {\n                elements[index] = elements[parentIndex];\n                priorities[index] = priorities[parentIndex];\n                index = parentIndex;\n            } else break;\n        }\n        elements[index] = element;\n        priorities[index] = priority;\n    }\n    /**\n   * FIXME empty description for jsdoc\n   */ reprioritize() {\n        const priorityFunction = this.priorityFunction_;\n        const elements = this.elements_;\n        const priorities = this.priorities_;\n        let index = 0;\n        const n = elements.length;\n        let element, i, priority;\n        for(i = 0; i < n; ++i){\n            element = elements[i];\n            priority = priorityFunction(element);\n            if (priority == $716c6804ea170b71$export$b4af72c40fd57063) delete this.queuedElements_[this.keyFunction_(element)];\n            else {\n                priorities[index] = priority;\n                elements[index++] = element;\n            }\n        }\n        elements.length = index;\n        priorities.length = index;\n        this.heapify_();\n    }\n}\nvar $716c6804ea170b71$export$2e2bcd8739ae039 = $716c6804ea170b71$var$PriorityQueue;\n\n\n/**\n * @module ol/TileState\n */ /**\n * @enum {number}\n */ var $b8291d9739c3c64e$export$2e2bcd8739ae039 = {\n    IDLE: 0,\n    LOADING: 1,\n    LOADED: 2,\n    /**\n   * Indicates that tile loading failed\n   * @type {number}\n   */ ERROR: 3,\n    EMPTY: 4\n};\n\n\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import(\"./coordinate.js\").Coordinate, number): number} PriorityFunction\n */ class $4c51fd53052a6bbc$var$TileQueue extends (0, $716c6804ea170b71$export$2e2bcd8739ae039) {\n    /**\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n   */ constructor(tilePriorityFunction, tileChangeCallback){\n        super(/**\n       * @param {Array} element Element.\n       * @return {number} Priority.\n       */ function(element) {\n            return tilePriorityFunction.apply(null, element);\n        }, /**\n       * @param {Array} element Element.\n       * @return {string} Key.\n       */ function(element) {\n            return /** @type {import(\"./Tile.js\").default} */ element[0].getKey();\n        });\n        /** @private */ this.boundHandleTileChange_ = this.handleTileChange.bind(this);\n        /**\n     * @private\n     * @type {function(): ?}\n     */ this.tileChangeCallback_ = tileChangeCallback;\n        /**\n     * @private\n     * @type {number}\n     */ this.tilesLoading_ = 0;\n        /**\n     * @private\n     * @type {!Object<string,boolean>}\n     */ this.tilesLoadingKeys_ = {};\n    }\n    /**\n   * @param {Array} element Element.\n   * @return {boolean} The element was added to the queue.\n   */ enqueue(element) {\n        const added = super.enqueue(element);\n        if (added) {\n            const tile = element[0];\n            tile.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.boundHandleTileChange_);\n        }\n        return added;\n    }\n    /**\n   * @return {number} Number of tiles loading.\n   */ getTilesLoading() {\n        return this.tilesLoading_;\n    }\n    /**\n   * @param {import(\"./events/Event.js\").default} event Event.\n   * @protected\n   */ handleTileChange(event) {\n        const tile = /** @type {import(\"./Tile.js\").default} */ event.target;\n        const state = tile.getState();\n        if (state === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED || state === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR || state === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY) {\n            if (state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) tile.removeEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.boundHandleTileChange_);\n            const tileKey = tile.getKey();\n            if (tileKey in this.tilesLoadingKeys_) {\n                delete this.tilesLoadingKeys_[tileKey];\n                --this.tilesLoading_;\n            }\n            this.tileChangeCallback_();\n        }\n    }\n    /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */ loadMoreTiles(maxTotalLoading, maxNewLoads) {\n        let newLoads = 0;\n        let state, tile, tileKey;\n        while(this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads && this.getCount() > 0){\n            tile = /** @type {import(\"./Tile.js\").default} */ this.dequeue()[0];\n            tileKey = tile.getKey();\n            state = tile.getState();\n            if (state === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n                this.tilesLoadingKeys_[tileKey] = true;\n                ++this.tilesLoading_;\n                ++newLoads;\n                tile.load();\n            }\n        }\n    }\n}\nvar $4c51fd53052a6bbc$export$2e2bcd8739ae039 = $4c51fd53052a6bbc$var$TileQueue;\nfunction $4c51fd53052a6bbc$export$f08ad5eceeff5d45(frameState, tile, tileSourceKey, tileCenter, tileResolution) {\n    // Filter out tiles at higher zoom levels than the current zoom level, or that\n    // are outside the visible extent.\n    if (!frameState || !(tileSourceKey in frameState.wantedTiles)) return 0, $716c6804ea170b71$export$b4af72c40fd57063;\n    if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) return 0, $716c6804ea170b71$export$b4af72c40fd57063;\n    // Prioritize the highest zoom level tiles closest to the focus.\n    // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n    // Within a zoom level, tiles are prioritized by the distance in pixels between\n    // the center of the tile and the center of the viewport.  The factor of 65536\n    // means that the prioritization should behave as desired for tiles up to\n    // 65536 * Math.log(2) = 45426 pixels from the focus.\n    const center = frameState.viewState.center;\n    const deltaX = tileCenter[0] - center[0];\n    const deltaY = tileCenter[1] - center[1];\n    return 65536 * Math.log(tileResolution) + Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;\n}\n\n\n\n\n\n\n\n\n\n/**\n * @module ol/control/defaults\n */ /**\n * @module ol/control/Attribution\n */ /**\n * @module ol/control/Control\n */ \n\n\n\n\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */ /**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * const myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */ class $b978dafe8f7d27ff$var$Control extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options Control options.\n   */ constructor(options){\n        super();\n        const element = options.element;\n        if (element && !options.target && !element.style.pointerEvents) element.style.pointerEvents = \"auto\";\n        /**\n     * @protected\n     * @type {HTMLElement}\n     */ this.element = element ? element : null;\n        /**\n     * @private\n     * @type {HTMLElement}\n     */ this.target_ = null;\n        /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */ this.map_ = null;\n        /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */ this.listenerKeys = [];\n        if (options.render) this.render = options.render;\n        if (options.target) this.setTarget(options.target);\n    }\n    /**\n   * Clean up.\n   */ disposeInternal() {\n        (0, $075f937d7366f1a2$export$1d0aa160432dfea5)(this.element);\n        super.disposeInternal();\n    }\n    /**\n   * Get the map associated with this control.\n   * @return {import(\"../Map.js\").default|null} Map.\n   * @api\n   */ getMap() {\n        return this.map_;\n    }\n    /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */ setMap(map) {\n        if (this.map_) (0, $075f937d7366f1a2$export$1d0aa160432dfea5)(this.element);\n        for(let i = 0, ii = this.listenerKeys.length; i < ii; ++i)(0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.listenerKeys[i]);\n        this.listenerKeys.length = 0;\n        this.map_ = map;\n        if (map) {\n            const target = this.target_ ? this.target_ : map.getOverlayContainerStopEvent();\n            target.appendChild(this.element);\n            if (this.render !== (0, $013a1733c226ec50$export$1cd1943b3a73bbe8)) this.listenerKeys.push((0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(map, (0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).POSTRENDER, this.render, this));\n            map.render();\n        }\n    }\n    /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */ render(mapEvent) {}\n    /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */ setTarget(target) {\n        this.target_ = typeof target === \"string\" ? document.getElementById(target) : target;\n    }\n}\nvar $b978dafe8f7d27ff$export$2e2bcd8739ae039 = $b978dafe8f7d27ff$var$Control;\n\n\n\n\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string|HTMLElement} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\n * collapsed attributions button.\n * @property {string|HTMLElement} [collapseLabel='›'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\n * expanded attributions button.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */ /**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */ class $6a26ab11104d2c24$var$Attribution extends (0, $b978dafe8f7d27ff$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Attribution options.\n   */ constructor(options){\n        options = options ? options : {};\n        super({\n            element: document.createElement(\"div\"),\n            render: options.render,\n            target: options.target\n        });\n        /**\n     * @private\n     * @type {HTMLElement}\n     */ this.ulElement_ = document.createElement(\"ul\");\n        /**\n     * @private\n     * @type {boolean}\n     */ this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.userCollapsed_ = this.collapsed_;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.overrideCollapsible_ = options.collapsible !== undefined;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n        if (!this.collapsible_) this.collapsed_ = false;\n        const className = options.className !== undefined ? options.className : \"ol-attribution\";\n        const tipLabel = options.tipLabel !== undefined ? options.tipLabel : \"Attributions\";\n        const expandClassName = options.expandClassName !== undefined ? options.expandClassName : className + \"-expand\";\n        const collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : \"›\";\n        const collapseClassName = options.collapseClassName !== undefined ? options.collapseClassName : className + \"-collapse\";\n        if (typeof collapseLabel === \"string\") {\n            /**\n       * @private\n       * @type {HTMLElement}\n       */ this.collapseLabel_ = document.createElement(\"span\");\n            this.collapseLabel_.textContent = collapseLabel;\n            this.collapseLabel_.className = collapseClassName;\n        } else this.collapseLabel_ = collapseLabel;\n        const label = options.label !== undefined ? options.label : \"i\";\n        if (typeof label === \"string\") {\n            /**\n       * @private\n       * @type {HTMLElement}\n       */ this.label_ = document.createElement(\"span\");\n            this.label_.textContent = label;\n            this.label_.className = expandClassName;\n        } else this.label_ = label;\n        const activeLabel = this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n        /**\n     * @private\n     * @type {HTMLElement}\n     */ this.toggleButton_ = document.createElement(\"button\");\n        this.toggleButton_.setAttribute(\"type\", \"button\");\n        this.toggleButton_.setAttribute(\"aria-expanded\", String(!this.collapsed_));\n        this.toggleButton_.title = tipLabel;\n        this.toggleButton_.appendChild(activeLabel);\n        this.toggleButton_.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CLICK, this.handleClick_.bind(this), false);\n        const cssClasses = className + \" \" + (0, $ce07df6d5d4656f1$export$1afde3d6e16a7b29) + \" \" + (0, $ce07df6d5d4656f1$export$4d4f8be70b656192) + (this.collapsed_ && this.collapsible_ ? \" \" + (0, $ce07df6d5d4656f1$export$e16017ac68d14492) : \"\") + (this.collapsible_ ? \"\" : \" ol-uncollapsible\");\n        const element = this.element;\n        element.className = cssClasses;\n        element.appendChild(this.toggleButton_);\n        element.appendChild(this.ulElement_);\n        /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */ this.renderedAttributions_ = [];\n        /**\n     * @private\n     * @type {boolean}\n     */ this.renderedVisible_ = true;\n    }\n    /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */ collectSourceAttributions_(frameState) {\n        const visibleAttributions = Array.from(new Set(this.getMap().getAllLayers().flatMap((layer)=>layer.getAttributions(frameState))));\n        const collapsible = !this.getMap().getAllLayers().some((layer)=>layer.getSource() && layer.getSource().getAttributionsCollapsible() === false);\n        if (!this.overrideCollapsible_) this.setCollapsible(collapsible);\n        return visibleAttributions;\n    }\n    /**\n   * @private\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   */ updateElement_(frameState) {\n        if (!frameState) {\n            if (this.renderedVisible_) {\n                this.element.style.display = \"none\";\n                this.renderedVisible_ = false;\n            }\n            return;\n        }\n        const attributions = this.collectSourceAttributions_(frameState);\n        const visible = attributions.length > 0;\n        if (this.renderedVisible_ != visible) {\n            this.element.style.display = visible ? \"\" : \"none\";\n            this.renderedVisible_ = visible;\n        }\n        if ((0, $b998d41b678ed5d1$export$e9bab7fafb253603)(attributions, this.renderedAttributions_)) return;\n        (0, $075f937d7366f1a2$export$1e1c9bf5a4ffe0d1)(this.ulElement_);\n        // append the attributions\n        for(let i = 0, ii = attributions.length; i < ii; ++i){\n            const element = document.createElement(\"li\");\n            element.innerHTML = attributions[i];\n            this.ulElement_.appendChild(element);\n        }\n        this.renderedAttributions_ = attributions;\n    }\n    /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */ handleClick_(event) {\n        event.preventDefault();\n        this.handleToggle_();\n        this.userCollapsed_ = this.collapsed_;\n    }\n    /**\n   * @private\n   */ handleToggle_() {\n        this.element.classList.toggle((0, $ce07df6d5d4656f1$export$e16017ac68d14492));\n        if (this.collapsed_) (0, $075f937d7366f1a2$export$5542201de9311ab2)(this.collapseLabel_, this.label_);\n        else (0, $075f937d7366f1a2$export$5542201de9311ab2)(this.label_, this.collapseLabel_);\n        this.collapsed_ = !this.collapsed_;\n        this.toggleButton_.setAttribute(\"aria-expanded\", String(!this.collapsed_));\n    }\n    /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */ getCollapsible() {\n        return this.collapsible_;\n    }\n    /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */ setCollapsible(collapsible) {\n        if (this.collapsible_ === collapsible) return;\n        this.collapsible_ = collapsible;\n        this.element.classList.toggle(\"ol-uncollapsible\");\n        if (this.userCollapsed_) this.handleToggle_();\n    }\n    /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */ setCollapsed(collapsed) {\n        this.userCollapsed_ = collapsed;\n        if (!this.collapsible_ || this.collapsed_ === collapsed) return;\n        this.handleToggle_();\n    }\n    /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */ getCollapsed() {\n        return this.collapsed_;\n    }\n    /**\n   * Update the attribution element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */ render(mapEvent) {\n        this.updateElement_(mapEvent.frameState);\n    }\n}\nvar $6a26ab11104d2c24$export$2e2bcd8739ae039 = $6a26ab11104d2c24$var$Attribution;\n\n\n\n/**\n * @module ol/control/Rotate\n */ \n\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-rotate'] CSS class name.\n * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.\n * @property {string} [compassClassName='ol-compass'] CSS class name for the compass.\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {boolean} [autoHide=true] Hide the control when rotation is 0.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control should\n * be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {function():void} [resetNorth] Function called when the control is clicked.\n * This will override the default `resetNorth`.\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\n * rendered outside of the map's viewport.\n */ /**\n * @classdesc\n * A button control to reset rotation to 0.\n * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css\n * selector is added to the button when the rotation is 0.\n *\n * @api\n */ class $a305cff1f91b3b86$var$Rotate extends (0, $b978dafe8f7d27ff$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Rotate options.\n   */ constructor(options){\n        options = options ? options : {};\n        super({\n            element: document.createElement(\"div\"),\n            render: options.render,\n            target: options.target\n        });\n        const className = options.className !== undefined ? options.className : \"ol-rotate\";\n        const label = options.label !== undefined ? options.label : \"⇧\";\n        const compassClassName = options.compassClassName !== undefined ? options.compassClassName : \"ol-compass\";\n        /**\n     * @type {HTMLElement}\n     * @private\n     */ this.label_ = null;\n        if (typeof label === \"string\") {\n            this.label_ = document.createElement(\"span\");\n            this.label_.className = compassClassName;\n            this.label_.textContent = label;\n        } else {\n            this.label_ = label;\n            this.label_.classList.add(compassClassName);\n        }\n        const tipLabel = options.tipLabel ? options.tipLabel : \"Reset rotation\";\n        const button = document.createElement(\"button\");\n        button.className = className + \"-reset\";\n        button.setAttribute(\"type\", \"button\");\n        button.title = tipLabel;\n        button.appendChild(this.label_);\n        button.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CLICK, this.handleClick_.bind(this), false);\n        const cssClasses = className + \" \" + (0, $ce07df6d5d4656f1$export$1afde3d6e16a7b29) + \" \" + (0, $ce07df6d5d4656f1$export$4d4f8be70b656192);\n        const element = this.element;\n        element.className = cssClasses;\n        element.appendChild(button);\n        this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;\n        /**\n     * @type {number}\n     * @private\n     */ this.duration_ = options.duration !== undefined ? options.duration : 250;\n        /**\n     * @type {boolean}\n     * @private\n     */ this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.rotation_ = undefined;\n        if (this.autoHide_) this.element.classList.add((0, $ce07df6d5d4656f1$export$981241db82723ce2));\n    }\n    /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */ handleClick_(event) {\n        event.preventDefault();\n        if (this.callResetNorth_ !== undefined) this.callResetNorth_();\n        else this.resetNorth_();\n    }\n    /**\n   * @private\n   */ resetNorth_() {\n        const map = this.getMap();\n        const view = map.getView();\n        if (!view) // the map does not have a view, so we can't act\n        // upon it\n        return;\n        const rotation = view.getRotation();\n        if (rotation !== undefined) {\n            if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) view.animate({\n                rotation: 0,\n                duration: this.duration_,\n                easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0)\n            });\n            else view.setRotation(0);\n        }\n    }\n    /**\n   * Update the rotate control element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */ render(mapEvent) {\n        const frameState = mapEvent.frameState;\n        if (!frameState) return;\n        const rotation = frameState.viewState.rotation;\n        if (rotation != this.rotation_) {\n            const transform = \"rotate(\" + rotation + \"rad)\";\n            if (this.autoHide_) {\n                const contains = this.element.classList.contains((0, $ce07df6d5d4656f1$export$981241db82723ce2));\n                if (!contains && rotation === 0) this.element.classList.add((0, $ce07df6d5d4656f1$export$981241db82723ce2));\n                else if (contains && rotation !== 0) this.element.classList.remove((0, $ce07df6d5d4656f1$export$981241db82723ce2));\n            }\n            this.label_.style.transform = transform;\n        }\n        this.rotation_ = rotation;\n    }\n}\nvar $a305cff1f91b3b86$export$2e2bcd8739ae039 = $a305cff1f91b3b86$var$Rotate;\n\n\n/**\n * @module ol/control/Zoom\n */ \n\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {string} [className='ol-zoom'] CSS class name.\n * @property {string} [zoomInClassName=className + '-in'] CSS class name for the zoom-in button.\n * @property {string} [zoomOutClassName=className + '-out'] CSS class name for the zoom-out button.\n * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in\n * button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|HTMLElement} [zoomOutLabel='–'] Text label to use for the zoom-out button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.\n * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.\n * @property {number} [delta=1] The zoom delta applied on each click.\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\n * rendered outside of the map's viewport.\n */ /**\n * @classdesc\n * A control with 2 buttons, one for zoom in and one for zoom out.\n * This control is one of the default controls of a map. To style this control\n * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.\n *\n * @api\n */ class $4901e3e27e30416a$var$Zoom extends (0, $b978dafe8f7d27ff$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Zoom options.\n   */ constructor(options){\n        options = options ? options : {};\n        super({\n            element: document.createElement(\"div\"),\n            target: options.target\n        });\n        const className = options.className !== undefined ? options.className : \"ol-zoom\";\n        const delta = options.delta !== undefined ? options.delta : 1;\n        const zoomInClassName = options.zoomInClassName !== undefined ? options.zoomInClassName : className + \"-in\";\n        const zoomOutClassName = options.zoomOutClassName !== undefined ? options.zoomOutClassName : className + \"-out\";\n        const zoomInLabel = options.zoomInLabel !== undefined ? options.zoomInLabel : \"+\";\n        const zoomOutLabel = options.zoomOutLabel !== undefined ? options.zoomOutLabel : \"–\";\n        const zoomInTipLabel = options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : \"Zoom in\";\n        const zoomOutTipLabel = options.zoomOutTipLabel !== undefined ? options.zoomOutTipLabel : \"Zoom out\";\n        const inElement = document.createElement(\"button\");\n        inElement.className = zoomInClassName;\n        inElement.setAttribute(\"type\", \"button\");\n        inElement.title = zoomInTipLabel;\n        inElement.appendChild(typeof zoomInLabel === \"string\" ? document.createTextNode(zoomInLabel) : zoomInLabel);\n        inElement.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CLICK, this.handleClick_.bind(this, delta), false);\n        const outElement = document.createElement(\"button\");\n        outElement.className = zoomOutClassName;\n        outElement.setAttribute(\"type\", \"button\");\n        outElement.title = zoomOutTipLabel;\n        outElement.appendChild(typeof zoomOutLabel === \"string\" ? document.createTextNode(zoomOutLabel) : zoomOutLabel);\n        outElement.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CLICK, this.handleClick_.bind(this, -delta), false);\n        const cssClasses = className + \" \" + (0, $ce07df6d5d4656f1$export$1afde3d6e16a7b29) + \" \" + (0, $ce07df6d5d4656f1$export$4d4f8be70b656192);\n        const element = this.element;\n        element.className = cssClasses;\n        element.appendChild(inElement);\n        element.appendChild(outElement);\n        /**\n     * @type {number}\n     * @private\n     */ this.duration_ = options.duration !== undefined ? options.duration : 250;\n    }\n    /**\n   * @param {number} delta Zoom delta.\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */ handleClick_(delta, event) {\n        event.preventDefault();\n        this.zoomByDelta_(delta);\n    }\n    /**\n   * @param {number} delta Zoom delta.\n   * @private\n   */ zoomByDelta_(delta) {\n        const map = this.getMap();\n        const view = map.getView();\n        if (!view) // the map does not have a view, so we can't act\n        // upon it\n        return;\n        const currentZoom = view.getZoom();\n        if (currentZoom !== undefined) {\n            const newZoom = view.getConstrainedZoom(currentZoom + delta);\n            if (this.duration_ > 0) {\n                if (view.getAnimating()) view.cancelAnimations();\n                view.animate({\n                    zoom: newZoom,\n                    duration: this.duration_,\n                    easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0)\n                });\n            } else view.setZoom(newZoom);\n        }\n    }\n}\nvar $4901e3e27e30416a$export$2e2bcd8739ae039 = $4901e3e27e30416a$var$Zoom;\n\n\nfunction $af7495b2f822d5e9$export$ebe90cb607ad99e(options) {\n    options = options ? options : {};\n    /** @type {Collection<import(\"./Control.js\").default>} */ const controls = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)();\n    const zoomControl = options.zoom !== undefined ? options.zoom : true;\n    if (zoomControl) controls.push(new (0, $4901e3e27e30416a$export$2e2bcd8739ae039)(options.zoomOptions));\n    const rotateControl = options.rotate !== undefined ? options.rotate : true;\n    if (rotateControl) controls.push(new (0, $a305cff1f91b3b86$export$2e2bcd8739ae039)(options.rotateOptions));\n    const attributionControl = options.attribution !== undefined ? options.attribution : true;\n    if (attributionControl) controls.push(new (0, $6a26ab11104d2c24$export$2e2bcd8739ae039)(options.attributionOptions));\n    return controls;\n}\n\n\n/**\n * @module ol/interaction/defaults\n */ \n/**\n * @module ol/interaction/DoubleClickZoom\n */ /**\n * @module ol/interaction/Interaction\n */ \n/**\n * @module ol/interaction/Property\n */ /**\n * @enum {string}\n */ var $2c9e42723ccf2bfb$export$2e2bcd8739ae039 = {\n    ACTIVE: \"active\"\n};\n\n\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active', Return>} InteractionOnSignature\n */ /**\n * Object literal with config options for interactions.\n * @typedef {Object} InteractionOptions\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} handleEvent\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. If the function returns a falsy value, propagation of\n * the event to other interactions in the map's interactions chain will be\n * prevented (this includes functions with no explicit return). The interactions\n * are traversed in reverse order of the interactions collection of the map.\n */ /**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\n * by a keyboard event not a button element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n * @api\n */ class $39210df8527e63e5$var$Interaction extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\n   * @param {InteractionOptions} [options] Options.\n   */ constructor(options){\n        super();\n        /***\n     * @type {InteractionOnSignature<import(\"../events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {InteractionOnSignature<import(\"../events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {InteractionOnSignature<void>}\n     */ this.un;\n        if (options && options.handleEvent) this.handleEvent = options.handleEvent;\n        /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */ this.map_ = null;\n        this.setActive(true);\n    }\n    /**\n   * Return whether the interaction is currently active.\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\n   * @observable\n   * @api\n   */ getActive() {\n        return /** @type {boolean} */ this.get((0, $2c9e42723ccf2bfb$export$2e2bcd8739ae039).ACTIVE);\n    }\n    /**\n   * Get the map associated with this interaction.\n   * @return {import(\"../Map.js\").default|null} Map.\n   * @api\n   */ getMap() {\n        return this.map_;\n    }\n    /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event}.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */ handleEvent(mapBrowserEvent) {\n        return true;\n    }\n    /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */ setActive(active) {\n        this.set((0, $2c9e42723ccf2bfb$export$2e2bcd8739ae039).ACTIVE, active);\n    }\n    /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */ setMap(map) {\n        this.map_ = map;\n    }\n}\nfunction $39210df8527e63e5$export$4c486572e961a974(view, delta, duration) {\n    const currentCenter = view.getCenterInternal();\n    if (currentCenter) {\n        const center = [\n            currentCenter[0] + delta[0],\n            currentCenter[1] + delta[1]\n        ];\n        view.animateInternal({\n            duration: duration !== undefined ? duration : 250,\n            easing: (0, $c7ccf7e681a9b333$export$45db2fc2f15997e7),\n            center: view.getConstrainedCenter(center)\n        });\n    }\n}\nfunction $39210df8527e63e5$export$ace321ff2a8016ef(view, delta, anchor, duration) {\n    const currentZoom = view.getZoom();\n    if (currentZoom === undefined) return;\n    const newZoom = view.getConstrainedZoom(currentZoom + delta);\n    const newResolution = view.getResolutionForZoom(newZoom);\n    if (view.getAnimating()) view.cancelAnimations();\n    view.animate({\n        resolution: newResolution,\n        anchor: anchor,\n        duration: duration !== undefined ? duration : 250,\n        easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0)\n    });\n}\nvar $39210df8527e63e5$export$2e2bcd8739ae039 = $39210df8527e63e5$var$Interaction;\n\n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {number} [delta=1] The zoom delta applied on each double click.\n */ /**\n * @classdesc\n * Allows the user to zoom by double-clicking on the map.\n * @api\n */ class $b50403621294a654$var$DoubleClickZoom extends (0, $39210df8527e63e5$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        super();\n        options = options ? options : {};\n        /**\n     * @private\n     * @type {number}\n     */ this.delta_ = options.delta ? options.delta : 1;\n        /**\n     * @private\n     * @type {number}\n     */ this.duration_ = options.duration !== undefined ? options.duration : 250;\n    }\n    /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a\n   * doubleclick) and eventually zooms the map.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */ handleEvent(mapBrowserEvent) {\n        let stopEvent = false;\n        if (mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).DBLCLICK) {\n            const browserEvent = /** @type {MouseEvent} */ mapBrowserEvent.originalEvent;\n            const map = mapBrowserEvent.map;\n            const anchor = mapBrowserEvent.coordinate;\n            const delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;\n            const view = map.getView();\n            (0, $39210df8527e63e5$export$ace321ff2a8016ef)(view, delta, anchor, this.duration_);\n            browserEvent.preventDefault();\n            stopEvent = true;\n        }\n        return !stopEvent;\n    }\n}\nvar $b50403621294a654$export$2e2bcd8739ae039 = $b50403621294a654$var$DoubleClickZoom;\n\n\n/**\n * @module ol/interaction/DragPan\n */ /**\n * @module ol/interaction/Pointer\n */ \n\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */ /**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */ class $cf1eb502962d87a8$var$PointerInteraction extends (0, $39210df8527e63e5$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        options = options ? options : {};\n        super(/** @type {import(\"./Interaction.js\").InteractionOptions} */ options);\n        if (options.handleDownEvent) this.handleDownEvent = options.handleDownEvent;\n        if (options.handleDragEvent) this.handleDragEvent = options.handleDragEvent;\n        if (options.handleMoveEvent) this.handleMoveEvent = options.handleMoveEvent;\n        if (options.handleUpEvent) this.handleUpEvent = options.handleUpEvent;\n        if (options.stopDown) this.stopDown = options.stopDown;\n        /**\n     * @type {boolean}\n     * @protected\n     */ this.handlingDownUpSequence = false;\n        /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */ this.targetPointers = [];\n    }\n    /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */ getPointerCount() {\n        return this.targetPointers.length;\n    }\n    /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */ handleDownEvent(mapBrowserEvent) {\n        return false;\n    }\n    /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */ handleDragEvent(mapBrowserEvent) {}\n    /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */ handleEvent(mapBrowserEvent) {\n        if (!mapBrowserEvent.originalEvent) return true;\n        let stopEvent = false;\n        this.updateTrackedPointers_(mapBrowserEvent);\n        if (this.handlingDownUpSequence) {\n            if (mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERDRAG) {\n                this.handleDragEvent(mapBrowserEvent);\n                // prevent page scrolling during dragging\n                mapBrowserEvent.originalEvent.preventDefault();\n            } else if (mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERUP) {\n                const handledUp = this.handleUpEvent(mapBrowserEvent);\n                this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n            }\n        } else {\n            if (mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERDOWN) {\n                const handled = this.handleDownEvent(mapBrowserEvent);\n                this.handlingDownUpSequence = handled;\n                stopEvent = this.stopDown(handled);\n            } else if (mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).POINTERMOVE) this.handleMoveEvent(mapBrowserEvent);\n        }\n        return !stopEvent;\n    }\n    /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */ handleMoveEvent(mapBrowserEvent) {}\n    /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */ handleUpEvent(mapBrowserEvent) {\n        return false;\n    }\n    /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */ stopDown(handled) {\n        return handled;\n    }\n    /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */ updateTrackedPointers_(mapBrowserEvent) {\n        if (mapBrowserEvent.activePointers) this.targetPointers = mapBrowserEvent.activePointers;\n    }\n}\nfunction $cf1eb502962d87a8$export$e2a20c553f6c85ce(pointerEvents) {\n    const length = pointerEvents.length;\n    let clientX = 0;\n    let clientY = 0;\n    for(let i = 0; i < length; i++){\n        clientX += pointerEvents[i].clientX;\n        clientY += pointerEvents[i].clientY;\n    }\n    return {\n        clientX: clientX / length,\n        clientY: clientY / length\n    };\n}\nvar $cf1eb502962d87a8$export$2e2bcd8739ae039 = $cf1eb502962d87a8$var$PointerInteraction;\n\n\n\n/**\n * @module ol/events/condition\n */ \n\n\n\nfunction $edf87b50170125f7$export$84bf76cd7afc7469(var_args) {\n    const conditions = arguments;\n    /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} All conditions passed.\n   */ return function(event) {\n        let pass = true;\n        for(let i = 0, ii = conditions.length; i < ii; ++i){\n            pass = pass && conditions[i](event);\n            if (!pass) break;\n        }\n        return pass;\n    };\n}\nconst $edf87b50170125f7$export$573409992e89967e = function(mapBrowserEvent) {\n    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;\n    return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\nconst $edf87b50170125f7$export$4e5f01653f9f1f82 = function(mapBrowserEvent) {\n    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;\n    return originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\nconst $edf87b50170125f7$export$d7ddd398f22d79ef = function(event) {\n    const targetElement = event.map.getTargetElement();\n    const activeElement = event.map.getOwnerDocument().activeElement;\n    return targetElement.contains(activeElement);\n};\nconst $edf87b50170125f7$export$ae2cdf064e3b0c55 = function(event) {\n    return event.map.getTargetElement().hasAttribute(\"tabindex\") ? $edf87b50170125f7$export$d7ddd398f22d79ef(event) : true;\n};\nconst $edf87b50170125f7$export$ba9e5d519bc326ca = (0, $013a1733c226ec50$export$22e23a2304399231);\nconst $edf87b50170125f7$export$64ef1bee2b9504c1 = function(mapBrowserEvent) {\n    return mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).CLICK;\n};\nconst $edf87b50170125f7$export$1238ad6b5e7fff70 = function(mapBrowserEvent) {\n    const originalEvent = /** @type {MouseEvent} */ mapBrowserEvent.originalEvent;\n    return originalEvent.button == 0 && !((0, $67c66761d21428d0$export$39dfd62a25e0fe93) && (0, $67c66761d21428d0$export$76c0a3b101d93136) && originalEvent.ctrlKey);\n};\nconst $edf87b50170125f7$export$b3e22bcfd64c1022 = (0, $013a1733c226ec50$export$8f11cee4bdc7e668);\nconst $edf87b50170125f7$export$71eac0963f2c2f01 = function(mapBrowserEvent) {\n    return mapBrowserEvent.type == \"pointermove\";\n};\nconst $edf87b50170125f7$export$194df8bad091b401 = function(mapBrowserEvent) {\n    return mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).SINGLECLICK;\n};\nconst $edf87b50170125f7$export$c59d944dd10b3dc7 = function(mapBrowserEvent) {\n    return mapBrowserEvent.type == (0, $150f412a4a7fa263$export$2e2bcd8739ae039).DBLCLICK;\n};\nconst $edf87b50170125f7$export$fdc892d0d8fe3bfb = function(mapBrowserEvent) {\n    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;\n    return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\nconst $edf87b50170125f7$export$f3100d8d6292d638 = function(mapBrowserEvent) {\n    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;\n    return !originalEvent.altKey && ((0, $67c66761d21428d0$export$76c0a3b101d93136) ? originalEvent.metaKey : originalEvent.ctrlKey) && !originalEvent.shiftKey;\n};\nconst $edf87b50170125f7$export$32603ad571dd22b5 = function(mapBrowserEvent) {\n    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;\n    return (0, $67c66761d21428d0$export$76c0a3b101d93136) ? originalEvent.metaKey : originalEvent.ctrlKey;\n};\nconst $edf87b50170125f7$export$5d31fe68a477cfbb = function(mapBrowserEvent) {\n    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;\n    return !originalEvent.altKey && !(originalEvent.metaKey || originalEvent.ctrlKey) && originalEvent.shiftKey;\n};\nconst $edf87b50170125f7$export$e5570ca80cd8fd54 = function(mapBrowserEvent) {\n    const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ mapBrowserEvent.originalEvent;\n    const tagName = /** @type {Element} */ originalEvent.target.tagName;\n    return tagName !== \"INPUT\" && tagName !== \"SELECT\" && tagName !== \"TEXTAREA\" && // `isContentEditable` is only available on `HTMLElement`, but it may also be a\n    // different type like `SVGElement`.\n    // @ts-ignore\n    !originalEvent.target.isContentEditable;\n};\nconst $edf87b50170125f7$export$abb7acbfa76bf3c4 = function(mapBrowserEvent) {\n    const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ mapBrowserEvent.originalEvent;\n    (0, $35d5ec884318008e$export$a7a9523472993e97)(pointerEvent !== undefined, \"mapBrowserEvent must originate from a pointer event\");\n    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvent.pointerType == \"mouse\";\n};\nconst $edf87b50170125f7$export$e74de664a571d084 = function(mapBrowserEvent) {\n    const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ mapBrowserEvent.originalEvent;\n    (0, $35d5ec884318008e$export$a7a9523472993e97)(pointerEvt !== undefined, \"mapBrowserEvent must originate from a pointer event\");\n    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvt.pointerType === \"touch\";\n};\nconst $edf87b50170125f7$export$cd1707283a23f059 = function(mapBrowserEvent) {\n    const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ mapBrowserEvent.originalEvent;\n    (0, $35d5ec884318008e$export$a7a9523472993e97)(pointerEvt !== undefined, \"mapBrowserEvent must originate from a pointer event\");\n    // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n    return pointerEvt.pointerType === \"pen\";\n};\nconst $edf87b50170125f7$export$189f0d593022b199 = function(mapBrowserEvent) {\n    const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ mapBrowserEvent.originalEvent;\n    (0, $35d5ec884318008e$export$a7a9523472993e97)(pointerEvent !== undefined, \"mapBrowserEvent must originate from a pointer event\");\n    return pointerEvent.isPrimary && pointerEvent.button === 0;\n};\n\n\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */ /**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */ class $c11585da26a016db$var$DragPan extends (0, $cf1eb502962d87a8$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        super({\n            stopDown: (0, $013a1733c226ec50$export$8f11cee4bdc7e668)\n        });\n        options = options ? options : {};\n        /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */ this.kinetic_ = options.kinetic;\n        /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */ this.lastCentroid = null;\n        /**\n     * @type {number}\n     */ this.lastPointersCount_;\n        /**\n     * @type {boolean}\n     */ this.panning_ = false;\n        const condition = options.condition ? options.condition : (0, $edf87b50170125f7$export$84bf76cd7afc7469)((0, $edf87b50170125f7$export$fdc892d0d8fe3bfb), (0, $edf87b50170125f7$export$189f0d593022b199));\n        /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */ this.condition_ = options.onFocusOnly ? (0, $edf87b50170125f7$export$84bf76cd7afc7469)((0, $edf87b50170125f7$export$ae2cdf064e3b0c55), condition) : condition;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.noKinetic_ = false;\n    }\n    /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */ handleDragEvent(mapBrowserEvent) {\n        const map = mapBrowserEvent.map;\n        if (!this.panning_) {\n            this.panning_ = true;\n            map.getView().beginInteraction();\n        }\n        const targetPointers = this.targetPointers;\n        const centroid = map.getEventPixel((0, $cf1eb502962d87a8$export$e2a20c553f6c85ce)(targetPointers));\n        if (targetPointers.length == this.lastPointersCount_) {\n            if (this.kinetic_) this.kinetic_.update(centroid[0], centroid[1]);\n            if (this.lastCentroid) {\n                const delta = [\n                    this.lastCentroid[0] - centroid[0],\n                    centroid[1] - this.lastCentroid[1]\n                ];\n                const map = mapBrowserEvent.map;\n                const view = map.getView();\n                (0, $1bd0a226f9a16141$export$dcdf75081b88279d)(delta, view.getResolution());\n                (0, $1bd0a226f9a16141$export$bb628a54ab399bc9)(delta, view.getRotation());\n                view.adjustCenterInternal(delta);\n            }\n        } else if (this.kinetic_) // reset so we don't overestimate the kinetic energy after\n        // after one finger down, tiny drag, second finger down\n        this.kinetic_.begin();\n        this.lastCentroid = centroid;\n        this.lastPointersCount_ = targetPointers.length;\n        mapBrowserEvent.originalEvent.preventDefault();\n    }\n    /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */ handleUpEvent(mapBrowserEvent) {\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        if (this.targetPointers.length === 0) {\n            if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n                const distance = this.kinetic_.getDistance();\n                const angle = this.kinetic_.getAngle();\n                const center = view.getCenterInternal();\n                const centerpx = map.getPixelFromCoordinateInternal(center);\n                const dest = map.getCoordinateFromPixelInternal([\n                    centerpx[0] - distance * Math.cos(angle),\n                    centerpx[1] - distance * Math.sin(angle)\n                ]);\n                view.animateInternal({\n                    center: view.getConstrainedCenter(dest),\n                    duration: 500,\n                    easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0)\n                });\n            }\n            if (this.panning_) {\n                this.panning_ = false;\n                view.endInteraction();\n            }\n            return false;\n        }\n        if (this.kinetic_) // reset so we don't overestimate the kinetic energy after\n        // after one finger up, tiny drag, second finger up\n        this.kinetic_.begin();\n        this.lastCentroid = null;\n        return true;\n    }\n    /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */ handleDownEvent(mapBrowserEvent) {\n        if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n            const map = mapBrowserEvent.map;\n            const view = map.getView();\n            this.lastCentroid = null;\n            // stop any current animation\n            if (view.getAnimating()) view.cancelAnimations();\n            if (this.kinetic_) this.kinetic_.begin();\n            // No kinetic as soon as more than one pointer on the screen is\n            // detected. This is to prevent nasty pans after pinch.\n            this.noKinetic_ = this.targetPointers.length > 1;\n            return true;\n        }\n        return false;\n    }\n}\nvar $c11585da26a016db$export$2e2bcd8739ae039 = $c11585da26a016db$var$DragPan;\n\n\n/**\n * @module ol/interaction/DragRotate\n */ \n\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */ /**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */ class $197c7092261b2aa0$var$DragRotate extends (0, $cf1eb502962d87a8$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        options = options ? options : {};\n        super({\n            stopDown: (0, $013a1733c226ec50$export$8f11cee4bdc7e668)\n        });\n        /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */ this.condition_ = options.condition ? options.condition : (0, $edf87b50170125f7$export$4e5f01653f9f1f82);\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.lastAngle_ = undefined;\n        /**\n     * @private\n     * @type {number}\n     */ this.duration_ = options.duration !== undefined ? options.duration : 250;\n    }\n    /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */ handleDragEvent(mapBrowserEvent) {\n        if (!(0, $edf87b50170125f7$export$abb7acbfa76bf3c4)(mapBrowserEvent)) return;\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        if (view.getConstraints().rotation === (0, $d65f0a322291d127$export$e20fbacbb41798b)) return;\n        const size = map.getSize();\n        const offset = mapBrowserEvent.pixel;\n        const theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n        if (this.lastAngle_ !== undefined) {\n            const delta = theta - this.lastAngle_;\n            view.adjustRotationInternal(-delta);\n        }\n        this.lastAngle_ = theta;\n    }\n    /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */ handleUpEvent(mapBrowserEvent) {\n        if (!(0, $edf87b50170125f7$export$abb7acbfa76bf3c4)(mapBrowserEvent)) return true;\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        view.endInteraction(this.duration_);\n        return false;\n    }\n    /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */ handleDownEvent(mapBrowserEvent) {\n        if (!(0, $edf87b50170125f7$export$abb7acbfa76bf3c4)(mapBrowserEvent)) return false;\n        if ((0, $edf87b50170125f7$export$1238ad6b5e7fff70)(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n            const map = mapBrowserEvent.map;\n            map.getView().beginInteraction();\n            this.lastAngle_ = undefined;\n            return true;\n        }\n        return false;\n    }\n}\nvar $197c7092261b2aa0$export$2e2bcd8739ae039 = $197c7092261b2aa0$var$DragRotate;\n\n\n/**\n * @module ol/interaction/DragZoom\n */ /**\n * @module ol/interaction/DragBox\n */ // FIXME draw drag box\n\n\n/**\n * @module ol/render/Box\n */ \n\nclass $c47adf75308683a6$var$RenderBox extends (0, $3273ed08087da3da$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} className CSS class name.\n   */ constructor(className){\n        super();\n        /**\n     * @type {import(\"../geom/Polygon.js\").default}\n     * @private\n     */ this.geometry_ = null;\n        /**\n     * @type {HTMLDivElement}\n     * @private\n     */ this.element_ = document.createElement(\"div\");\n        this.element_.style.position = \"absolute\";\n        this.element_.style.pointerEvents = \"auto\";\n        this.element_.className = \"ol-box \" + className;\n        /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */ this.map_ = null;\n        /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */ this.startPixel_ = null;\n        /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */ this.endPixel_ = null;\n    }\n    /**\n   * Clean up.\n   */ disposeInternal() {\n        this.setMap(null);\n    }\n    /**\n   * @private\n   */ render_() {\n        const startPixel = this.startPixel_;\n        const endPixel = this.endPixel_;\n        const px = \"px\";\n        const style = this.element_.style;\n        style.left = Math.min(startPixel[0], endPixel[0]) + px;\n        style.top = Math.min(startPixel[1], endPixel[1]) + px;\n        style.width = Math.abs(endPixel[0] - startPixel[0]) + px;\n        style.height = Math.abs(endPixel[1] - startPixel[1]) + px;\n    }\n    /**\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */ setMap(map) {\n        if (this.map_) {\n            this.map_.getOverlayContainer().removeChild(this.element_);\n            const style = this.element_.style;\n            style.left = \"inherit\";\n            style.top = \"inherit\";\n            style.width = \"inherit\";\n            style.height = \"inherit\";\n        }\n        this.map_ = map;\n        if (this.map_) this.map_.getOverlayContainer().appendChild(this.element_);\n    }\n    /**\n   * @param {import(\"../pixel.js\").Pixel} startPixel Start pixel.\n   * @param {import(\"../pixel.js\").Pixel} endPixel End pixel.\n   */ setPixels(startPixel, endPixel) {\n        this.startPixel_ = startPixel;\n        this.endPixel_ = endPixel;\n        this.createOrUpdateGeometry();\n        this.render_();\n    }\n    /**\n   * Creates or updates the cached geometry.\n   */ createOrUpdateGeometry() {\n        const startPixel = this.startPixel_;\n        const endPixel = this.endPixel_;\n        const pixels = [\n            startPixel,\n            [\n                startPixel[0],\n                endPixel[1]\n            ],\n            endPixel,\n            [\n                endPixel[0],\n                startPixel[1]\n            ]\n        ];\n        const coordinates = pixels.map(this.map_.getCoordinateFromPixelInternal, this.map_);\n        // close the polygon\n        coordinates[4] = coordinates[0].slice();\n        if (!this.geometry_) this.geometry_ = new (0, $40aa8d43bbe572bf$export$2e2bcd8739ae039)([\n            coordinates\n        ]);\n        else this.geometry_.setCoordinates([\n            coordinates\n        ]);\n    }\n    /**\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   */ getGeometry() {\n        return this.geometry_;\n    }\n}\nvar $c47adf75308683a6$export$2e2bcd8739ae039 = $c47adf75308683a6$var$RenderBox;\n\n\n\n/**\n * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,\n * true should be returned.\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default, import(\"../pixel.js\").Pixel, import(\"../pixel.js\").Pixel):boolean} EndCondition\n */ /**\n * @typedef {Object} Options\n * @property {string} [className='ol-dragbox'] CSS class name for styling the box.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link ol/events/condition~mouseActionButton}.\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default\n * `boxEndCondition` function.\n * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.\n * Default is `true` if the area of the box is bigger than the `minArea` option.\n * @property {function(this:DragBox, import(\"../MapBrowserEvent.js\").default):void} [onBoxEnd] Code to execute just\n * before `boxend` is fired.\n */ /**\n * @enum {string}\n */ const $e05f414bc3918235$var$DragBoxEventType = {\n    /**\n   * Triggered upon drag box start.\n   * @event DragBoxEvent#boxstart\n   * @api\n   */ BOXSTART: \"boxstart\",\n    /**\n   * Triggered on drag when box is active.\n   * @event DragBoxEvent#boxdrag\n   * @api\n   */ BOXDRAG: \"boxdrag\",\n    /**\n   * Triggered upon drag box end.\n   * @event DragBoxEvent#boxend\n   * @api\n   */ BOXEND: \"boxend\",\n    /**\n   * Triggered upon drag box canceled.\n   * @event DragBoxEvent#boxcancel\n   * @api\n   */ BOXCANCEL: \"boxcancel\"\n};\nclass $e05f414bc3918235$export$7053c33c051365ea extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} type The event type.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Originating event.\n   */ constructor(type, coordinate, mapBrowserEvent){\n        super(type);\n        /**\n     * The coordinate of the drag event.\n     * @const\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @api\n     */ this.coordinate = coordinate;\n        /**\n     * @const\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */ this.mapBrowserEvent = mapBrowserEvent;\n    }\n}\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature\n */ /**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the shift or other key is held down. This is used, for example,\n * for zooming to a specific area of the map\n * (see {@link module:ol/interaction/DragZoom~DragZoom} and\n * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).\n *\n * @fires DragBoxEvent\n * @api\n */ class $e05f414bc3918235$var$DragBox extends (0, $cf1eb502962d87a8$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        super();\n        /***\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {DragBoxOnSignature<void>}\n     */ this.un;\n        options = options ? options : {};\n        /**\n     * @type {import(\"../render/Box.js\").default}\n     * @private\n     */ this.box_ = new (0, $c47adf75308683a6$export$2e2bcd8739ae039)(options.className || \"ol-dragbox\");\n        /**\n     * @type {number}\n     * @private\n     */ this.minArea_ = options.minArea !== undefined ? options.minArea : 64;\n        if (options.onBoxEnd) this.onBoxEnd = options.onBoxEnd;\n        /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */ this.startPixel_ = null;\n        /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */ this.condition_ = options.condition ? options.condition : (0, $edf87b50170125f7$export$1238ad6b5e7fff70);\n        /**\n     * @private\n     * @type {EndCondition}\n     */ this.boxEndCondition_ = options.boxEndCondition ? options.boxEndCondition : this.defaultBoxEndCondition;\n    }\n    /**\n   * The default condition for determining whether the boxend event\n   * should fire.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent The originating MapBrowserEvent\n   *     leading to the box end.\n   * @param {import(\"../pixel.js\").Pixel} startPixel The starting pixel of the box.\n   * @param {import(\"../pixel.js\").Pixel} endPixel The end pixel of the box.\n   * @return {boolean} Whether or not the boxend condition should be fired.\n   */ defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {\n        const width = endPixel[0] - startPixel[0];\n        const height = endPixel[1] - startPixel[1];\n        return width * width + height * height >= this.minArea_;\n    }\n    /**\n   * Returns geometry of last drawn box.\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   * @api\n   */ getGeometry() {\n        return this.box_.getGeometry();\n    }\n    /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */ handleDragEvent(mapBrowserEvent) {\n        this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);\n        this.dispatchEvent(new $e05f414bc3918235$export$7053c33c051365ea($e05f414bc3918235$var$DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));\n    }\n    /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */ handleUpEvent(mapBrowserEvent) {\n        this.box_.setMap(null);\n        const completeBox = this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel);\n        if (completeBox) this.onBoxEnd(mapBrowserEvent);\n        this.dispatchEvent(new $e05f414bc3918235$export$7053c33c051365ea(completeBox ? $e05f414bc3918235$var$DragBoxEventType.BOXEND : $e05f414bc3918235$var$DragBoxEventType.BOXCANCEL, mapBrowserEvent.coordinate, mapBrowserEvent));\n        return false;\n    }\n    /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */ handleDownEvent(mapBrowserEvent) {\n        if (this.condition_(mapBrowserEvent)) {\n            this.startPixel_ = mapBrowserEvent.pixel;\n            this.box_.setMap(mapBrowserEvent.map);\n            this.box_.setPixels(this.startPixel_, this.startPixel_);\n            this.dispatchEvent(new $e05f414bc3918235$export$7053c33c051365ea($e05f414bc3918235$var$DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));\n            return true;\n        }\n        return false;\n    }\n    /**\n   * Function to execute just before `onboxend` is fired\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   */ onBoxEnd(event) {}\n}\nvar $e05f414bc3918235$export$2e2bcd8739ae039 = $e05f414bc3918235$var$DragBox;\n\n\n\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-dragzoom'] CSS class name for styling the\n * box.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.shiftKeyOnly}.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {boolean} [out=false] Use interaction for zooming out.\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default\n * `boxEndCondition` function.\n */ /**\n * @classdesc\n * Allows the user to zoom the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when a key, shift by default, is held down.\n *\n * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or\n * your custom one configured with `className`.\n * @api\n */ class $afc7f51010a5b660$var$DragZoom extends (0, $e05f414bc3918235$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        options = options ? options : {};\n        const condition = options.condition ? options.condition : (0, $edf87b50170125f7$export$5d31fe68a477cfbb);\n        super({\n            condition: condition,\n            className: options.className || \"ol-dragzoom\",\n            minArea: options.minArea\n        });\n        /**\n     * @private\n     * @type {number}\n     */ this.duration_ = options.duration !== undefined ? options.duration : 200;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.out_ = options.out !== undefined ? options.out : false;\n    }\n    /**\n   * Function to execute just before `onboxend` is fired\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   */ onBoxEnd(event) {\n        const map = this.getMap();\n        const view = /** @type {!import(\"../View.js\").default} */ map.getView();\n        let geometry = this.getGeometry();\n        if (this.out_) {\n            const rotatedExtent = view.rotatedExtentForGeometry(geometry);\n            const resolution = view.getResolutionForExtentInternal(rotatedExtent);\n            const factor = view.getResolution() / resolution;\n            geometry = geometry.clone();\n            geometry.scale(factor * factor);\n        }\n        view.fitInternal(geometry, {\n            duration: this.duration_,\n            easing: (0, $c7ccf7e681a9b333$export$57636bb43b1ccbb0)\n        });\n    }\n}\nvar $afc7f51010a5b660$export$2e2bcd8739ae039 = $afc7f51010a5b660$var$DragZoom;\n\n\n/**\n * @module ol/interaction/KeyboardPan\n */ \n\n/**\n * @module ol/events/Key\n */ /**\n * @enum {string}\n * @const\n */ var $368e06a3031941b5$export$2e2bcd8739ae039 = {\n    LEFT: \"ArrowLeft\",\n    UP: \"ArrowUp\",\n    RIGHT: \"ArrowRight\",\n    DOWN: \"ArrowDown\"\n};\n\n\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.noModifierKeys} and\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */ /**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */ class $178bb1517d626802$var$KeyboardPan extends (0, $39210df8527e63e5$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        super();\n        options = options || {};\n        /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */ this.defaultCondition_ = function(mapBrowserEvent) {\n            return (0, $edf87b50170125f7$export$fdc892d0d8fe3bfb)(mapBrowserEvent) && (0, $edf87b50170125f7$export$e5570ca80cd8fd54)(mapBrowserEvent);\n        };\n        /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */ this.condition_ = options.condition !== undefined ? options.condition : this.defaultCondition_;\n        /**\n     * @private\n     * @type {number}\n     */ this.duration_ = options.duration !== undefined ? options.duration : 100;\n        /**\n     * @private\n     * @type {number}\n     */ this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;\n    }\n    /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n   * pressed).\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */ handleEvent(mapBrowserEvent) {\n        let stopEvent = false;\n        if (mapBrowserEvent.type == (0, $294047c5e65f31a3$export$2e2bcd8739ae039).KEYDOWN) {\n            const keyEvent = /** @type {KeyboardEvent} */ mapBrowserEvent.originalEvent;\n            const key = keyEvent.key;\n            if (this.condition_(mapBrowserEvent) && (key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).DOWN || key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).LEFT || key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).RIGHT || key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).UP)) {\n                const map = mapBrowserEvent.map;\n                const view = map.getView();\n                const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n                let deltaX = 0, deltaY = 0;\n                if (key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).DOWN) deltaY = -mapUnitsDelta;\n                else if (key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).LEFT) deltaX = -mapUnitsDelta;\n                else if (key == (0, $368e06a3031941b5$export$2e2bcd8739ae039).RIGHT) deltaX = mapUnitsDelta;\n                else deltaY = mapUnitsDelta;\n                const delta = [\n                    deltaX,\n                    deltaY\n                ];\n                (0, $1bd0a226f9a16141$export$bb628a54ab399bc9)(delta, view.getRotation());\n                (0, $39210df8527e63e5$export$4c486572e961a974)(view, delta, this.duration_);\n                keyEvent.preventDefault();\n                stopEvent = true;\n            }\n        }\n        return !stopEvent;\n    }\n}\nvar $178bb1517d626802$export$2e2bcd8739ae039 = $178bb1517d626802$var$KeyboardPan;\n\n\n/**\n * @module ol/interaction/KeyboardZoom\n */ \n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. The default condition is\n * that {@link module:ol/events/condition.targetNotEditable} is fulfilled and that\n * the platform modifier key isn't pressed\n * (!{@link module:ol/events/condition.platformModifierKey}).\n * @property {number} [delta=1] The zoom level delta on each key press.\n */ /**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */ class $2237fabfa170eefc$var$KeyboardZoom extends (0, $39210df8527e63e5$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        super();\n        options = options ? options : {};\n        /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */ this.condition_ = options.condition ? options.condition : function(mapBrowserEvent) {\n            return !(0, $edf87b50170125f7$export$32603ad571dd22b5)(mapBrowserEvent) && (0, $edf87b50170125f7$export$e5570ca80cd8fd54)(mapBrowserEvent);\n        };\n        /**\n     * @private\n     * @type {number}\n     */ this.delta_ = options.delta ? options.delta : 1;\n        /**\n     * @private\n     * @type {number}\n     */ this.duration_ = options.duration !== undefined ? options.duration : 100;\n    }\n    /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */ handleEvent(mapBrowserEvent) {\n        let stopEvent = false;\n        if (mapBrowserEvent.type == (0, $294047c5e65f31a3$export$2e2bcd8739ae039).KEYDOWN || mapBrowserEvent.type == (0, $294047c5e65f31a3$export$2e2bcd8739ae039).KEYPRESS) {\n            const keyEvent = /** @type {KeyboardEvent} */ mapBrowserEvent.originalEvent;\n            const key = keyEvent.key;\n            if (this.condition_(mapBrowserEvent) && (key === \"+\" || key === \"-\")) {\n                const map = mapBrowserEvent.map;\n                const delta = key === \"+\" ? this.delta_ : -this.delta_;\n                const view = map.getView();\n                (0, $39210df8527e63e5$export$ace321ff2a8016ef)(view, delta, undefined, this.duration_);\n                keyEvent.preventDefault();\n                stopEvent = true;\n            }\n        }\n        return !stopEvent;\n    }\n}\nvar $2237fabfa170eefc$export$2e2bcd8739ae039 = $2237fabfa170eefc$var$KeyboardZoom;\n\n\n/**\n * @module ol/Kinetic\n */ /**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @api\n */ class $9a54ea8d5f7a49ee$var$Kinetic {\n    /**\n   * @param {number} decay Rate of decay (must be negative).\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n   * @param {number} delay Delay to consider to calculate the kinetic\n   *     initial values (milliseconds).\n   */ constructor(decay, minVelocity, delay){\n        /**\n     * @private\n     * @type {number}\n     */ this.decay_ = decay;\n        /**\n     * @private\n     * @type {number}\n     */ this.minVelocity_ = minVelocity;\n        /**\n     * @private\n     * @type {number}\n     */ this.delay_ = delay;\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.points_ = [];\n        /**\n     * @private\n     * @type {number}\n     */ this.angle_ = 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.initialVelocity_ = 0;\n    }\n    /**\n   * FIXME empty description for jsdoc\n   */ begin() {\n        this.points_.length = 0;\n        this.angle_ = 0;\n        this.initialVelocity_ = 0;\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   */ update(x, y) {\n        this.points_.push(x, y, Date.now());\n    }\n    /**\n   * @return {boolean} Whether we should do kinetic animation.\n   */ end() {\n        if (this.points_.length < 6) // at least 2 points are required (i.e. there must be at least 6 elements\n        // in the array)\n        return false;\n        const delay = Date.now() - this.delay_;\n        const lastIndex = this.points_.length - 3;\n        if (this.points_[lastIndex + 2] < delay) // the last tracked point is too old, which means that the user stopped\n        // panning before releasing the map\n        return false;\n        // get the first point which still falls into the delay time\n        let firstIndex = lastIndex - 3;\n        while(firstIndex > 0 && this.points_[firstIndex + 2] > delay)firstIndex -= 3;\n        const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];\n        // we don't want a duration of 0 (divide by zero)\n        // we also make sure the user panned for a duration of at least one frame\n        // (1/60s) to compute sane displacement values\n        if (duration < 1000 / 60) return false;\n        const dx = this.points_[lastIndex] - this.points_[firstIndex];\n        const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n        this.angle_ = Math.atan2(dy, dx);\n        this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n        return this.initialVelocity_ > this.minVelocity_;\n    }\n    /**\n   * @return {number} Total distance travelled (pixels).\n   */ getDistance() {\n        return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n    }\n    /**\n   * @return {number} Angle of the kinetic panning animation (radians).\n   */ getAngle() {\n        return this.angle_;\n    }\n}\nvar $9a54ea8d5f7a49ee$export$2e2bcd8739ae039 = $9a54ea8d5f7a49ee$var$Kinetic;\n\n\n/**\n * @module ol/interaction/MouseWheelZoom\n */ \n\n\n\n\n/**\n * @typedef {'trackpad' | 'wheel'} Mode\n */ /**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.always}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {number} [maxDelta=1] Maximum mouse wheel delta.\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.\n * @property {boolean} [useAnchor=true] Enable zooming using the mouse's\n * location as the anchor. When set to `false`, zooming in and out will zoom to\n * the center of the screen instead of zooming on the mouse's location.\n * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom\n * event will always animate to the closest zoom level after an interaction;\n * false means intermediary zoom levels are allowed.\n */ /**\n * @classdesc\n * Allows the user to zoom the map by scrolling the mouse wheel.\n * @api\n */ class $aaa378764710d71e$var$MouseWheelZoom extends (0, $39210df8527e63e5$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        options = options ? options : {};\n        super(/** @type {import(\"./Interaction.js\").InteractionOptions} */ options);\n        /**\n     * @private\n     * @type {number}\n     */ this.totalDelta_ = 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.lastDelta_ = 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;\n        /**\n     * @private\n     * @type {number}\n     */ this.duration_ = options.duration !== undefined ? options.duration : 250;\n        /**\n     * @private\n     * @type {number}\n     */ this.timeout_ = options.timeout !== undefined ? options.timeout : 80;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.useAnchor_ = options.useAnchor !== undefined ? options.useAnchor : true;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.constrainResolution_ = options.constrainResolution !== undefined ? options.constrainResolution : false;\n        const condition = options.condition ? options.condition : (0, $edf87b50170125f7$export$ba9e5d519bc326ca);\n        /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */ this.condition_ = options.onFocusOnly ? (0, $edf87b50170125f7$export$84bf76cd7afc7469)((0, $edf87b50170125f7$export$ae2cdf064e3b0c55), condition) : condition;\n        /**\n     * @private\n     * @type {?import(\"../coordinate.js\").Coordinate}\n     */ this.lastAnchor_ = null;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.startTime_ = undefined;\n        /**\n     * @private\n     * @type {ReturnType<typeof setTimeout>}\n     */ this.timeoutId_;\n        /**\n     * @private\n     * @type {Mode|undefined}\n     */ this.mode_ = undefined;\n        /**\n     * Trackpad events separated by this delay will be considered separate\n     * interactions.\n     * @private\n     * @type {number}\n     */ this.trackpadEventGap_ = 400;\n        /**\n     * @private\n     * @type {ReturnType<typeof setTimeout>}\n     */ this.trackpadTimeoutId_;\n        /**\n     * The number of delta values per zoom level\n     * @private\n     * @type {number}\n     */ this.deltaPerZoom_ = 300;\n    }\n    /**\n   * @private\n   */ endInteraction_() {\n        this.trackpadTimeoutId_ = undefined;\n        const map = this.getMap();\n        if (!map) return;\n        const view = map.getView();\n        view.endInteraction(undefined, this.lastDelta_ ? this.lastDelta_ > 0 ? 1 : -1 : 0, this.lastAnchor_);\n    }\n    /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually\n   * zooms the map.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */ handleEvent(mapBrowserEvent) {\n        if (!this.condition_(mapBrowserEvent)) return true;\n        const type = mapBrowserEvent.type;\n        if (type !== (0, $294047c5e65f31a3$export$2e2bcd8739ae039).WHEEL) return true;\n        const map = mapBrowserEvent.map;\n        const wheelEvent = /** @type {WheelEvent} */ mapBrowserEvent.originalEvent;\n        wheelEvent.preventDefault();\n        if (this.useAnchor_) this.lastAnchor_ = mapBrowserEvent.coordinate;\n        // Delta normalisation inspired by\n        // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js\n        let delta;\n        if (mapBrowserEvent.type == (0, $294047c5e65f31a3$export$2e2bcd8739ae039).WHEEL) {\n            delta = wheelEvent.deltaY;\n            if ((0, $67c66761d21428d0$export$8442bdfd18b7b8a6) && wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) delta /= (0, $67c66761d21428d0$export$6b83a0446fc26f94);\n            if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) delta *= 40;\n        }\n        if (delta === 0) return false;\n        this.lastDelta_ = delta;\n        const now = Date.now();\n        if (this.startTime_ === undefined) this.startTime_ = now;\n        if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) this.mode_ = Math.abs(delta) < 4 ? \"trackpad\" : \"wheel\";\n        const view = map.getView();\n        if (this.mode_ === \"trackpad\" && !(view.getConstrainResolution() || this.constrainResolution_)) {\n            if (this.trackpadTimeoutId_) clearTimeout(this.trackpadTimeoutId_);\n            else {\n                if (view.getAnimating()) view.cancelAnimations();\n                view.beginInteraction();\n            }\n            this.trackpadTimeoutId_ = setTimeout(this.endInteraction_.bind(this), this.timeout_);\n            view.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_);\n            this.startTime_ = now;\n            return false;\n        }\n        this.totalDelta_ += delta;\n        const timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);\n        clearTimeout(this.timeoutId_);\n        this.timeoutId_ = setTimeout(this.handleWheelZoom_.bind(this, map), timeLeft);\n        return false;\n    }\n    /**\n   * @private\n   * @param {import(\"../Map.js\").default} map Map.\n   */ handleWheelZoom_(map) {\n        const view = map.getView();\n        if (view.getAnimating()) view.cancelAnimations();\n        let delta = -(0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(this.totalDelta_, -this.maxDelta_ * this.deltaPerZoom_, this.maxDelta_ * this.deltaPerZoom_) / this.deltaPerZoom_;\n        if (view.getConstrainResolution() || this.constrainResolution_) // view has a zoom constraint, zoom by 1\n        delta = delta ? delta > 0 ? 1 : -1 : 0;\n        (0, $39210df8527e63e5$export$ace321ff2a8016ef)(view, delta, this.lastAnchor_, this.duration_);\n        this.mode_ = undefined;\n        this.totalDelta_ = 0;\n        this.lastAnchor_ = null;\n        this.startTime_ = undefined;\n        this.timeoutId_ = undefined;\n    }\n    /**\n   * Enable or disable using the mouse's location as an anchor when zooming\n   * @param {boolean} useAnchor true to zoom to the mouse's location, false\n   * to zoom to the center of the map\n   * @api\n   */ setMouseAnchor(useAnchor) {\n        this.useAnchor_ = useAnchor;\n        if (!useAnchor) this.lastAnchor_ = null;\n    }\n}\nvar $aaa378764710d71e$export$2e2bcd8739ae039 = $aaa378764710d71e$var$MouseWheelZoom;\n\n\n/**\n * @module ol/interaction/PinchRotate\n */ \n\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */ /**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */ class $9727451f2459496c$var$PinchRotate extends (0, $cf1eb502962d87a8$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        options = options ? options : {};\n        const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ options;\n        if (!pointerOptions.stopDown) pointerOptions.stopDown = (0, $013a1733c226ec50$export$8f11cee4bdc7e668);\n        super(pointerOptions);\n        /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */ this.anchor_ = null;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.lastAngle_ = undefined;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.rotating_ = false;\n        /**\n     * @private\n     * @type {number}\n     */ this.rotationDelta_ = 0.0;\n        /**\n     * @private\n     * @type {number}\n     */ this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n        /**\n     * @private\n     * @type {number}\n     */ this.duration_ = options.duration !== undefined ? options.duration : 250;\n    }\n    /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */ handleDragEvent(mapBrowserEvent) {\n        let rotationDelta = 0.0;\n        const touch0 = this.targetPointers[0];\n        const touch1 = this.targetPointers[1];\n        // angle between touches\n        const angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n        if (this.lastAngle_ !== undefined) {\n            const delta = angle - this.lastAngle_;\n            this.rotationDelta_ += delta;\n            if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) this.rotating_ = true;\n            rotationDelta = delta;\n        }\n        this.lastAngle_ = angle;\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        if (view.getConstraints().rotation === (0, $d65f0a322291d127$export$e20fbacbb41798b)) return;\n        // rotate anchor point.\n        // FIXME: should be the intersection point between the lines:\n        //     touch0,touch1 and previousTouch0,previousTouch1\n        this.anchor_ = map.getCoordinateFromPixelInternal(map.getEventPixel((0, $cf1eb502962d87a8$export$e2a20c553f6c85ce)(this.targetPointers)));\n        // rotate\n        if (this.rotating_) {\n            map.render();\n            view.adjustRotationInternal(rotationDelta, this.anchor_);\n        }\n    }\n    /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */ handleUpEvent(mapBrowserEvent) {\n        if (this.targetPointers.length < 2) {\n            const map = mapBrowserEvent.map;\n            const view = map.getView();\n            view.endInteraction(this.duration_);\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */ handleDownEvent(mapBrowserEvent) {\n        if (this.targetPointers.length >= 2) {\n            const map = mapBrowserEvent.map;\n            this.anchor_ = null;\n            this.lastAngle_ = undefined;\n            this.rotating_ = false;\n            this.rotationDelta_ = 0.0;\n            if (!this.handlingDownUpSequence) map.getView().beginInteraction();\n            return true;\n        }\n        return false;\n    }\n}\nvar $9727451f2459496c$export$2e2bcd8739ae039 = $9727451f2459496c$var$PinchRotate;\n\n\n/**\n * @module ol/interaction/PinchZoom\n */ \n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n */ /**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */ class $79c946b60b88d4a6$var$PinchZoom extends (0, $cf1eb502962d87a8$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        options = options ? options : {};\n        const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ options;\n        if (!pointerOptions.stopDown) pointerOptions.stopDown = (0, $013a1733c226ec50$export$8f11cee4bdc7e668);\n        super(pointerOptions);\n        /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */ this.anchor_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.duration_ = options.duration !== undefined ? options.duration : 400;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.lastDistance_ = undefined;\n        /**\n     * @private\n     * @type {number}\n     */ this.lastScaleDelta_ = 1;\n    }\n    /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */ handleDragEvent(mapBrowserEvent) {\n        let scaleDelta = 1.0;\n        const touch0 = this.targetPointers[0];\n        const touch1 = this.targetPointers[1];\n        const dx = touch0.clientX - touch1.clientX;\n        const dy = touch0.clientY - touch1.clientY;\n        // distance between touches\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        if (this.lastDistance_ !== undefined) scaleDelta = this.lastDistance_ / distance;\n        this.lastDistance_ = distance;\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        if (scaleDelta != 1.0) this.lastScaleDelta_ = scaleDelta;\n        // scale anchor point.\n        this.anchor_ = map.getCoordinateFromPixelInternal(map.getEventPixel((0, $cf1eb502962d87a8$export$e2a20c553f6c85ce)(this.targetPointers)));\n        // scale, bypass the resolution constraint\n        map.render();\n        view.adjustResolutionInternal(scaleDelta, this.anchor_);\n    }\n    /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */ handleUpEvent(mapBrowserEvent) {\n        if (this.targetPointers.length < 2) {\n            const map = mapBrowserEvent.map;\n            const view = map.getView();\n            const direction = this.lastScaleDelta_ > 1 ? 1 : -1;\n            view.endInteraction(this.duration_, direction);\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */ handleDownEvent(mapBrowserEvent) {\n        if (this.targetPointers.length >= 2) {\n            const map = mapBrowserEvent.map;\n            this.anchor_ = null;\n            this.lastDistance_ = undefined;\n            this.lastScaleDelta_ = 1;\n            if (!this.handlingDownUpSequence) map.getView().beginInteraction();\n            return true;\n        }\n        return false;\n    }\n}\nvar $79c946b60b88d4a6$export$2e2bcd8739ae039 = $79c946b60b88d4a6$var$PinchZoom;\n\n\nfunction $e3fbd36d629ecc04$export$ebe90cb607ad99e(options) {\n    options = options ? options : {};\n    /** @type {Collection<import(\"./Interaction.js\").default>} */ const interactions = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)();\n    const kinetic = new (0, $9a54ea8d5f7a49ee$export$2e2bcd8739ae039)(-0.005, 0.05, 100);\n    const altShiftDragRotate = options.altShiftDragRotate !== undefined ? options.altShiftDragRotate : true;\n    if (altShiftDragRotate) interactions.push(new (0, $197c7092261b2aa0$export$2e2bcd8739ae039)());\n    const doubleClickZoom = options.doubleClickZoom !== undefined ? options.doubleClickZoom : true;\n    if (doubleClickZoom) interactions.push(new (0, $b50403621294a654$export$2e2bcd8739ae039)({\n        delta: options.zoomDelta,\n        duration: options.zoomDuration\n    }));\n    const dragPan = options.dragPan !== undefined ? options.dragPan : true;\n    if (dragPan) interactions.push(new (0, $c11585da26a016db$export$2e2bcd8739ae039)({\n        onFocusOnly: options.onFocusOnly,\n        kinetic: kinetic\n    }));\n    const pinchRotate = options.pinchRotate !== undefined ? options.pinchRotate : true;\n    if (pinchRotate) interactions.push(new (0, $9727451f2459496c$export$2e2bcd8739ae039)());\n    const pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;\n    if (pinchZoom) interactions.push(new (0, $79c946b60b88d4a6$export$2e2bcd8739ae039)({\n        duration: options.zoomDuration\n    }));\n    const keyboard = options.keyboard !== undefined ? options.keyboard : true;\n    if (keyboard) {\n        interactions.push(new (0, $178bb1517d626802$export$2e2bcd8739ae039)());\n        interactions.push(new (0, $2237fabfa170eefc$export$2e2bcd8739ae039)({\n            delta: options.zoomDelta,\n            duration: options.zoomDuration\n        }));\n    }\n    const mouseWheelZoom = options.mouseWheelZoom !== undefined ? options.mouseWheelZoom : true;\n    if (mouseWheelZoom) interactions.push(new (0, $aaa378764710d71e$export$2e2bcd8739ae039)({\n        onFocusOnly: options.onFocusOnly,\n        duration: options.zoomDuration\n    }));\n    const shiftDragZoom = options.shiftDragZoom !== undefined ? options.shiftDragZoom : true;\n    if (shiftDragZoom) interactions.push(new (0, $afc7f51010a5b660$export$2e2bcd8739ae039)({\n        duration: options.zoomDuration\n    }));\n    return interactions;\n}\n\n\n\n\n\n/**\n * @module ol/size\n */ /**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */ /**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The buffered size.\n */ function $cc435a5409103773$export$ab1029bcae9ddb4a(size, num, dest) {\n    if (dest === undefined) dest = [\n        0,\n        0\n    ];\n    dest[0] = size[0] + 2 * num;\n    dest[1] = size[1] + 2 * num;\n    return dest;\n}\nfunction $cc435a5409103773$export$622c471beb1693c7(size) {\n    return size[0] > 0 && size[1] > 0;\n}\nfunction $cc435a5409103773$export$dcdf75081b88279d(size, ratio, dest) {\n    if (dest === undefined) dest = [\n        0,\n        0\n    ];\n    dest[0] = size[0] * ratio + 0.5 | 0;\n    dest[1] = size[1] * ratio + 0.5 | 0;\n    return dest;\n}\nfunction $cc435a5409103773$export$a71a825ff42fb8e1(size, dest) {\n    if (Array.isArray(size)) return size;\n    if (dest === undefined) dest = [\n        size,\n        size\n    ];\n    else {\n        dest[0] = size;\n        dest[1] = size;\n    }\n    return dest;\n}\n\n\n\n\n\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent (in view projection coordinates).\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */ /**\n * @typedef {function(Map, ?FrameState): any} PostRenderFunction\n */ /**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */ /**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */ /**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */ /***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} MapEventHandler\n */ /**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control/defaults.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction/defaults.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * **Note:** CSS `transform` support for the target element is limited to `scale`.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */ /**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */ function $41aa29ae0c4b607a$var$removeLayerMapProperty(layer) {\n    if (layer instanceof (0, $534f30fce11effcd$export$2e2bcd8739ae039)) {\n        layer.setMapInternal(null);\n        return;\n    }\n    if (layer instanceof (0, $0b703156bb914e6f$export$2e2bcd8739ae039)) layer.getLayers().forEach($41aa29ae0c4b607a$var$removeLayerMapProperty);\n}\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {Map} map Map.\n */ function $41aa29ae0c4b607a$var$setLayerMapProperty(layer, map) {\n    if (layer instanceof (0, $534f30fce11effcd$export$2e2bcd8739ae039)) {\n        layer.setMapInternal(map);\n        return;\n    }\n    if (layer instanceof (0, $0b703156bb914e6f$export$2e2bcd8739ae039)) {\n        const layers = layer.getLayers().getArray();\n        for(let i = 0, ii = layers.length; i < ii; ++i)$41aa29ae0c4b607a$var$setLayerMapProperty(layers[i], map);\n    }\n}\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map.js';\n *     import View from 'ol/View.js';\n *     import TileLayer from 'ol/layer/Tile.js';\n *     import OSM from 'ol/source/OSM.js';\n *\n *     const map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1,\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM(),\n *         }),\n *       ],\n *       target: 'map',\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */ class $41aa29ae0c4b607a$var$Map extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\n   * @param {MapOptions} [options] Map options.\n   */ constructor(options){\n        super();\n        options = options || {};\n        /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {MapEventHandler<void>}\n     */ this.un;\n        const optionsInternal = $41aa29ae0c4b607a$var$createOptionsInternal(options);\n        /**\n     * @private\n     * @type {boolean|undefined}\n     */ this.renderComplete_;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.loaded_ = true;\n        /** @private */ this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\n        /**\n     * @type {number}\n     * @private\n     */ this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n        /**\n     * @private\n     * @type {number}\n     */ this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : (0, $67c66761d21428d0$export$6b83a0446fc26f94);\n        /**\n     * @private\n     * @type {ReturnType<typeof setTimeout>}\n     */ this.postRenderTimeoutHandle_;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.animationDelayKey_;\n        /**\n     * @private\n     */ this.animationDelay_ = this.animationDelay_.bind(this);\n        /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */ this.coordinateToPixelTransform_ = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */ this.pixelToCoordinateTransform_ = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\n     * @private\n     * @type {number}\n     */ this.frameIndex_ = 0;\n        /**\n     * @private\n     * @type {?FrameState}\n     */ this.frameState_ = null;\n        /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */ this.previousExtent_ = null;\n        /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */ this.viewPropertyListenerKey_ = null;\n        /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */ this.viewChangeListenerKey_ = null;\n        /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */ this.layerGroupPropertyListenerKeys_ = null;\n        /**\n     * @private\n     * @type {!HTMLElement}\n     */ this.viewport_ = document.createElement(\"div\");\n        this.viewport_.className = \"ol-viewport\" + (\"ontouchstart\" in window ? \" ol-touch\" : \"\");\n        this.viewport_.style.position = \"relative\";\n        this.viewport_.style.overflow = \"hidden\";\n        this.viewport_.style.width = \"100%\";\n        this.viewport_.style.height = \"100%\";\n        /**\n     * @private\n     * @type {!HTMLElement}\n     */ this.overlayContainer_ = document.createElement(\"div\");\n        this.overlayContainer_.style.position = \"absolute\";\n        this.overlayContainer_.style.zIndex = \"0\";\n        this.overlayContainer_.style.width = \"100%\";\n        this.overlayContainer_.style.height = \"100%\";\n        this.overlayContainer_.style.pointerEvents = \"none\";\n        this.overlayContainer_.className = \"ol-overlaycontainer\";\n        this.viewport_.appendChild(this.overlayContainer_);\n        /**\n     * @private\n     * @type {!HTMLElement}\n     */ this.overlayContainerStopEvent_ = document.createElement(\"div\");\n        this.overlayContainerStopEvent_.style.position = \"absolute\";\n        this.overlayContainerStopEvent_.style.zIndex = \"0\";\n        this.overlayContainerStopEvent_.style.width = \"100%\";\n        this.overlayContainerStopEvent_.style.height = \"100%\";\n        this.overlayContainerStopEvent_.style.pointerEvents = \"none\";\n        this.overlayContainerStopEvent_.className = \"ol-overlaycontainer-stopevent\";\n        this.viewport_.appendChild(this.overlayContainerStopEvent_);\n        /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */ this.mapBrowserEventHandler_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.moveTolerance_ = options.moveTolerance;\n        /**\n     * @private\n     * @type {HTMLElement|Document}\n     */ this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n        /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */ this.targetChangeHandlerKeys_ = null;\n        /**\n     * @private\n     * @type {HTMLElement|null}\n     */ this.targetElement_ = null;\n        /**\n     * @type {ResizeObserver}\n     */ this.resizeObserver_ = new ResizeObserver(()=>this.updateSize());\n        /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */ this.controls = optionsInternal.controls || (0, $af7495b2f822d5e9$export$ebe90cb607ad99e)();\n        /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */ this.interactions = optionsInternal.interactions || (0, $e3fbd36d629ecc04$export$ebe90cb607ad99e)({\n            onFocusOnly: true\n        });\n        /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */ this.overlays_ = optionsInternal.overlays;\n        /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */ this.overlayIdIndex_ = {};\n        /**\n     * @type {import(\"./renderer/Map.js\").default|null}\n     * @private\n     */ this.renderer_ = null;\n        /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */ this.postRenderFunctions_ = [];\n        /**\n     * @private\n     * @type {TileQueue}\n     */ this.tileQueue_ = new (0, $4c51fd53052a6bbc$export$2e2bcd8739ae039)(this.getTilePriority.bind(this), this.handleTileChange_.bind(this));\n        this.addChangeListener((0, $07fa325567004bb7$export$2e2bcd8739ae039).LAYERGROUP, this.handleLayerGroupChanged_);\n        this.addChangeListener((0, $07fa325567004bb7$export$2e2bcd8739ae039).VIEW, this.handleViewChanged_);\n        this.addChangeListener((0, $07fa325567004bb7$export$2e2bcd8739ae039).SIZE, this.handleSizeChanged_);\n        this.addChangeListener((0, $07fa325567004bb7$export$2e2bcd8739ae039).TARGET, this.handleTargetChanged_);\n        // setProperties will trigger the rendering of the map if the map\n        // is \"defined\" already.\n        this.setProperties(optionsInternal.values);\n        const map = this;\n        if (options.view && !(options.view instanceof (0, $70364d0195659942$export$2e2bcd8739ae039))) options.view.then(function(viewOptions) {\n            map.setView(new (0, $70364d0195659942$export$2e2bcd8739ae039)(viewOptions));\n        });\n        this.controls.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent\n       */ (event)=>{\n            event.element.setMap(this);\n        });\n        this.controls.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent.\n       */ (event)=>{\n            event.element.setMap(null);\n        });\n        this.interactions.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n       */ (event)=>{\n            event.element.setMap(this);\n        });\n        this.interactions.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n       */ (event)=>{\n            event.element.setMap(null);\n        });\n        this.overlays_.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n       */ (event)=>{\n            this.addOverlayInternal_(event.element);\n        });\n        this.overlays_.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n       */ (event)=>{\n            const id = event.element.getId();\n            if (id !== undefined) delete this.overlayIdIndex_[id.toString()];\n            event.element.setMap(null);\n        });\n        this.controls.forEach(/**\n       * @param {import(\"./control/Control.js\").default} control Control.\n       */ (control)=>{\n            control.setMap(this);\n        });\n        this.interactions.forEach(/**\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n       */ (interaction)=>{\n            interaction.setMap(this);\n        });\n        this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n    }\n    /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */ addControl(control) {\n        this.getControls().push(control);\n    }\n    /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteractions()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */ addInteraction(interaction) {\n        this.getInteractions().push(interaction);\n    }\n    /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */ addLayer(layer) {\n        const layers = this.getLayerGroup().getLayers();\n        layers.push(layer);\n    }\n    /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n   * @private\n   */ handleLayerAdd_(event) {\n        $41aa29ae0c4b607a$var$setLayerMapProperty(event.layer, this);\n    }\n    /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */ addOverlay(overlay) {\n        this.getOverlays().push(overlay);\n    }\n    /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */ addOverlayInternal_(overlay) {\n        const id = overlay.getId();\n        if (id !== undefined) this.overlayIdIndex_[id.toString()] = overlay;\n        overlay.setMap(this);\n    }\n    /**\n   *\n   * Clean up.\n   */ disposeInternal() {\n        this.controls.clear();\n        this.interactions.clear();\n        this.overlays_.clear();\n        this.resizeObserver_.disconnect();\n        this.setTarget(null);\n        super.disposeInternal();\n    }\n    /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature~Feature feature} or\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template T\n   * @api\n   */ forEachFeatureAtPixel(pixel, callback, options) {\n        if (!this.frameState_ || !this.renderer_) return;\n        const coordinate = this.getCoordinateFromPixelInternal(pixel);\n        options = options !== undefined ? options : {};\n        const hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n        const layerFilter = options.layerFilter !== undefined ? options.layerFilter : (0, $013a1733c226ec50$export$22e23a2304399231);\n        const checkWrapped = options.checkWrapped !== false;\n        return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n    }\n    /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */ getFeaturesAtPixel(pixel, options) {\n        const features = [];\n        this.forEachFeatureAtPixel(pixel, function(feature) {\n            features.push(feature);\n        }, options);\n        return features;\n    }\n    /**\n   * Get all layers from all layer groups.\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n   * @api\n   */ getAllLayers() {\n        const layers = [];\n        function addLayersFrom(layerGroup) {\n            layerGroup.forEach(function(layer) {\n                if (layer instanceof (0, $0b703156bb914e6f$export$2e2bcd8739ae039)) addLayersFrom(layer.getLayers());\n                else layers.push(layer);\n            });\n        }\n        addLayersFrom(this.getLayers());\n        return layers;\n    }\n    /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through the `layerFilter` option.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */ hasFeatureAtPixel(pixel, options) {\n        if (!this.frameState_ || !this.renderer_) return false;\n        const coordinate = this.getCoordinateFromPixelInternal(pixel);\n        options = options !== undefined ? options : {};\n        const layerFilter = options.layerFilter !== undefined ? options.layerFilter : (0, $013a1733c226ec50$export$22e23a2304399231);\n        const hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n        const checkWrapped = options.checkWrapped !== false;\n        return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n    }\n    /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */ getEventCoordinate(event) {\n        return this.getCoordinateFromPixel(this.getEventPixel(event));\n    }\n    /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */ getEventCoordinateInternal(event) {\n        return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n    }\n    /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent|{clientX: number, clientY: number}} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */ getEventPixel(event) {\n        const viewport = this.viewport_;\n        const viewportPosition = viewport.getBoundingClientRect();\n        const viewportSize = this.getSize();\n        const scaleX = viewportPosition.width / viewportSize[0];\n        const scaleY = viewportPosition.height / viewportSize[1];\n        const eventPosition = //FIXME Are we really calling this with a TouchEvent anywhere?\n        \"changedTouches\" in event ? /** @type {TouchEvent} */ event.changedTouches[0] : /** @type {MouseEvent} */ event;\n        return [\n            (eventPosition.clientX - viewportPosition.left) / scaleX,\n            (eventPosition.clientY - viewportPosition.top) / scaleY\n        ];\n    }\n    /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */ getTarget() {\n        return /** @type {HTMLElement|string|undefined} */ this.get((0, $07fa325567004bb7$export$2e2bcd8739ae039).TARGET);\n    }\n    /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */ getTargetElement() {\n        return this.targetElement_;\n    }\n    /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */ getCoordinateFromPixel(pixel) {\n        return (0, $9c4744460e43e41b$export$698f563af1ba02a5)(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n    }\n    /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */ getCoordinateFromPixelInternal(pixel) {\n        const frameState = this.frameState_;\n        if (!frameState) return null;\n        return (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.pixelToCoordinateTransform, pixel.slice());\n    }\n    /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */ getControls() {\n        return this.controls;\n    }\n    /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */ getOverlays() {\n        return this.overlays_;\n    }\n    /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */ getOverlayById(id) {\n        const overlay = this.overlayIdIndex_[id.toString()];\n        return overlay !== undefined ? overlay : null;\n    }\n    /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */ getInteractions() {\n        return this.interactions;\n    }\n    /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */ getLayerGroup() {\n        return /** @type {LayerGroup} */ this.get((0, $07fa325567004bb7$export$2e2bcd8739ae039).LAYERGROUP);\n    }\n    /**\n   * Clear any existing layers and add layers to the map.\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n   * @api\n   */ setLayers(layers) {\n        const group = this.getLayerGroup();\n        if (layers instanceof (0, $931ffc4e747c14db$export$2e2bcd8739ae039)) {\n            group.setLayers(layers);\n            return;\n        }\n        const collection = group.getLayers();\n        collection.clear();\n        collection.extend(layers);\n    }\n    /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */ getLayers() {\n        const layers = this.getLayerGroup().getLayers();\n        return layers;\n    }\n    /**\n   * @return {boolean} Layers have sources that are still loading.\n   */ getLoadingOrNotReady() {\n        const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n        for(let i = 0, ii = layerStatesArray.length; i < ii; ++i){\n            const state = layerStatesArray[i];\n            if (!state.visible) continue;\n            const renderer = state.layer.getRenderer();\n            if (renderer && !renderer.ready) return true;\n            const source = state.layer.getSource();\n            if (source && source.loading) return true;\n        }\n        return false;\n    }\n    /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */ getPixelFromCoordinate(coordinate) {\n        const viewCoordinate = (0, $9c4744460e43e41b$export$d4b8ec0b96db1ee2)(coordinate, this.getView().getProjection());\n        return this.getPixelFromCoordinateInternal(viewCoordinate);\n    }\n    /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */ getPixelFromCoordinateInternal(coordinate) {\n        const frameState = this.frameState_;\n        if (!frameState) return null;\n        return (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n    }\n    /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\n   */ getRenderer() {\n        return this.renderer_;\n    }\n    /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */ getSize() {\n        return /** @type {import(\"./size.js\").Size|undefined} */ this.get((0, $07fa325567004bb7$export$2e2bcd8739ae039).SIZE);\n    }\n    /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */ getView() {\n        return /** @type {View} */ this.get((0, $07fa325567004bb7$export$2e2bcd8739ae039).VIEW);\n    }\n    /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */ getViewport() {\n        return this.viewport_;\n    }\n    /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */ getOverlayContainer() {\n        return this.overlayContainer_;\n    }\n    /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */ getOverlayContainerStopEvent() {\n        return this.overlayContainerStopEvent_;\n    }\n    /**\n   * @return {!Document} The document where the map is displayed.\n   */ getOwnerDocument() {\n        const targetElement = this.getTargetElement();\n        return targetElement ? targetElement.ownerDocument : document;\n    }\n    /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */ getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n        return (0, $4c51fd53052a6bbc$export$f08ad5eceeff5d45)(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);\n    }\n    /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string} [type] Type.\n   */ handleBrowserEvent(browserEvent, type) {\n        type = type || browserEvent.type;\n        const mapBrowserEvent = new (0, $a1b91f073c6a6c43$export$2e2bcd8739ae039)(type, this, browserEvent);\n        this.handleMapBrowserEvent(mapBrowserEvent);\n    }\n    /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */ handleMapBrowserEvent(mapBrowserEvent) {\n        if (!this.frameState_) // With no view defined, we cannot translate pixels into geographical\n        // coordinates so interactions cannot be used.\n        return;\n        const originalEvent = /** @type {PointerEvent} */ mapBrowserEvent.originalEvent;\n        const eventType = originalEvent.type;\n        if (eventType === (0, $d564567e31203d44$export$2e2bcd8739ae039).POINTERDOWN || eventType === (0, $294047c5e65f31a3$export$2e2bcd8739ae039).WHEEL || eventType === (0, $294047c5e65f31a3$export$2e2bcd8739ae039).KEYDOWN) {\n            const doc = this.getOwnerDocument();\n            const rootNode = this.viewport_.getRootNode ? this.viewport_.getRootNode() : doc;\n            const target = /** @type {Node} */ originalEvent.target;\n            if (// Abort if the target is a child of the container for elements whose events are not meant\n            // to be handled by map interactions.\n            this.overlayContainerStopEvent_.contains(target) || // Abort if the event target is a child of the container that is no longer in the page.\n            // It's possible for the target to no longer be in the page if it has been removed in an\n            // event listener, this might happen in a Control that recreates it's content based on\n            // user interaction either manually or via a render in something like https://reactjs.org/\n            !(rootNode === doc ? doc.documentElement : rootNode).contains(target)) return;\n        }\n        mapBrowserEvent.frameState = this.frameState_;\n        if (this.dispatchEvent(mapBrowserEvent) !== false) {\n            const interactionsArray = this.getInteractions().getArray().slice();\n            for(let i = interactionsArray.length - 1; i >= 0; i--){\n                const interaction = interactionsArray[i];\n                if (interaction.getMap() !== this || !interaction.getActive() || !this.getTargetElement()) continue;\n                const cont = interaction.handleEvent(mapBrowserEvent);\n                if (!cont || mapBrowserEvent.propagationStopped) break;\n            }\n        }\n    }\n    /**\n   * @protected\n   */ handlePostRender() {\n        const frameState = this.frameState_;\n        // Manage the tile queue\n        // Image loads are expensive and a limited resource, so try to use them\n        // efficiently:\n        // * When the view is static we allow a large number of parallel tile loads\n        //   to complete the frame as quickly as possible.\n        // * When animating or interacting, image loads can cause janks, so we reduce\n        //   the maximum number of loads per frame and limit the number of parallel\n        //   tile loads to remain reactive to view changes and to reduce the chance of\n        //   loading tiles that will quickly disappear from view.\n        const tileQueue = this.tileQueue_;\n        if (!tileQueue.isEmpty()) {\n            let maxTotalLoading = this.maxTilesLoading_;\n            let maxNewLoads = maxTotalLoading;\n            if (frameState) {\n                const hints = frameState.viewHints;\n                if (hints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING] || hints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING]) {\n                    const lowOnFrameBudget = Date.now() - frameState.time > 8;\n                    maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n                    maxNewLoads = lowOnFrameBudget ? 0 : 2;\n                }\n            }\n            if (tileQueue.getTilesLoading() < maxTotalLoading) {\n                tileQueue.reprioritize(); // FIXME only call if view has changed\n                tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n            }\n        }\n        if (frameState && this.renderer_ && !frameState.animate) {\n            if (this.renderComplete_ === true) {\n                if (this.hasListener((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).RENDERCOMPLETE)) this.renderer_.dispatchRenderEvent((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).RENDERCOMPLETE, frameState);\n                if (this.loaded_ === false) {\n                    this.loaded_ = true;\n                    this.dispatchEvent(new (0, $3a171922c3a0c5ed$export$2e2bcd8739ae039)((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).LOADEND, this, frameState));\n                }\n            } else if (this.loaded_ === true) {\n                this.loaded_ = false;\n                this.dispatchEvent(new (0, $3a171922c3a0c5ed$export$2e2bcd8739ae039)((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).LOADSTART, this, frameState));\n            }\n        }\n        const postRenderFunctions = this.postRenderFunctions_;\n        for(let i = 0, ii = postRenderFunctions.length; i < ii; ++i)postRenderFunctions[i](this, frameState);\n        postRenderFunctions.length = 0;\n    }\n    /**\n   * @private\n   */ handleSizeChanged_() {\n        if (this.getView() && !this.getView().getAnimating()) this.getView().resolveConstraints(0);\n        this.render();\n    }\n    /**\n   * @private\n   */ handleTargetChanged_() {\n        if (this.mapBrowserEventHandler_) {\n            for(let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i)(0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.targetChangeHandlerKeys_[i]);\n            this.targetChangeHandlerKeys_ = null;\n            this.viewport_.removeEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CONTEXTMENU, this.boundHandleBrowserEvent_);\n            this.viewport_.removeEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).WHEEL, this.boundHandleBrowserEvent_);\n            this.mapBrowserEventHandler_.dispose();\n            this.mapBrowserEventHandler_ = null;\n            (0, $075f937d7366f1a2$export$1d0aa160432dfea5)(this.viewport_);\n        }\n        if (this.targetElement_) {\n            this.resizeObserver_.unobserve(this.targetElement_);\n            const rootNode = this.targetElement_.getRootNode();\n            if (rootNode instanceof ShadowRoot) this.resizeObserver_.unobserve(rootNode.host);\n            this.setSize(undefined);\n        }\n        // target may be undefined, null, a string or an Element.\n        // If it's a string we convert it to an Element before proceeding.\n        // If it's not now an Element we remove the viewport from the DOM.\n        // If it's an Element we append the viewport element to it.\n        const target = this.getTarget();\n        const targetElement = typeof target === \"string\" ? document.getElementById(target) : target;\n        this.targetElement_ = targetElement;\n        if (!targetElement) {\n            if (this.renderer_) {\n                clearTimeout(this.postRenderTimeoutHandle_);\n                this.postRenderTimeoutHandle_ = undefined;\n                this.postRenderFunctions_.length = 0;\n                this.renderer_.dispose();\n                this.renderer_ = null;\n            }\n            if (this.animationDelayKey_) {\n                cancelAnimationFrame(this.animationDelayKey_);\n                this.animationDelayKey_ = undefined;\n            }\n        } else {\n            targetElement.appendChild(this.viewport_);\n            if (!this.renderer_) this.renderer_ = new (0, $fa78c97693b12120$export$2e2bcd8739ae039)(this);\n            this.mapBrowserEventHandler_ = new (0, $6085d006f9d0efe2$export$2e2bcd8739ae039)(this, this.moveTolerance_);\n            for(const key in 0, $150f412a4a7fa263$export$2e2bcd8739ae039)this.mapBrowserEventHandler_.addEventListener((0, $150f412a4a7fa263$export$2e2bcd8739ae039)[key], this.handleMapBrowserEvent.bind(this));\n            this.viewport_.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CONTEXTMENU, this.boundHandleBrowserEvent_, false);\n            this.viewport_.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).WHEEL, this.boundHandleBrowserEvent_, (0, $67c66761d21428d0$export$f751ce96c6c4e4fc) ? {\n                passive: false\n            } : false);\n            const keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;\n            this.targetChangeHandlerKeys_ = [\n                (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(keyboardEventTarget, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).KEYDOWN, this.handleBrowserEvent, this),\n                (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(keyboardEventTarget, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).KEYPRESS, this.handleBrowserEvent, this)\n            ];\n            const rootNode = targetElement.getRootNode();\n            if (rootNode instanceof ShadowRoot) this.resizeObserver_.observe(rootNode.host);\n            this.resizeObserver_.observe(targetElement);\n        }\n        this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n    }\n    /**\n   * @private\n   */ handleTileChange_() {\n        this.render();\n    }\n    /**\n   * @private\n   */ handleViewPropertyChanged_() {\n        this.render();\n    }\n    /**\n   * @private\n   */ handleViewChanged_() {\n        if (this.viewPropertyListenerKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.viewPropertyListenerKey_);\n            this.viewPropertyListenerKey_ = null;\n        }\n        if (this.viewChangeListenerKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.viewChangeListenerKey_);\n            this.viewChangeListenerKey_ = null;\n        }\n        const view = this.getView();\n        if (view) {\n            this.updateViewportSize_();\n            this.viewPropertyListenerKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(view, (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n            this.viewChangeListenerKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(view, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleViewPropertyChanged_, this);\n            view.resolveConstraints(0);\n        }\n        this.render();\n    }\n    /**\n   * @private\n   */ handleLayerGroupChanged_() {\n        if (this.layerGroupPropertyListenerKeys_) {\n            this.layerGroupPropertyListenerKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n            this.layerGroupPropertyListenerKeys_ = null;\n        }\n        const layerGroup = this.getLayerGroup();\n        if (layerGroup) {\n            this.handleLayerAdd_(new (0, $0b703156bb914e6f$export$2f5ff21d758d25a7)(\"addlayer\", layerGroup));\n            this.layerGroupPropertyListenerKeys_ = [\n                (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layerGroup, (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE, this.render, this),\n                (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layerGroup, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.render, this),\n                (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layerGroup, \"addlayer\", this.handleLayerAdd_, this),\n                (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(layerGroup, \"removelayer\", this.handleLayerRemove_, this)\n            ];\n        }\n        this.render();\n    }\n    /**\n   * @return {boolean} Is rendered.\n   */ isRendered() {\n        return !!this.frameState_;\n    }\n    /**\n   * @private\n   */ animationDelay_() {\n        this.animationDelayKey_ = undefined;\n        this.renderFrame_(Date.now());\n    }\n    /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */ renderSync() {\n        if (this.animationDelayKey_) cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelay_();\n    }\n    /**\n   * Redraws all text after new fonts have loaded\n   */ redrawText() {\n        const layerStates = this.getLayerGroup().getLayerStatesArray();\n        for(let i = 0, ii = layerStates.length; i < ii; ++i){\n            const layer = layerStates[i].layer;\n            if (layer.hasRenderer()) layer.getRenderer().handleFontsChanged();\n        }\n    }\n    /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */ render() {\n        if (this.renderer_ && this.animationDelayKey_ === undefined) this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n    /**\n   * This method is meant to be called in a layer's `prerender` listener. It causes all collected\n   * declutter items to be decluttered and rendered on the map immediately. This is useful for\n   * layers that need to appear entirely above the decluttered items of layers lower in the layer\n   * stack.\n   * @api\n   */ flushDeclutterItems() {\n        const frameState = this.frameState_;\n        if (!frameState) return;\n        this.renderer_.flushDeclutterItems(frameState);\n    }\n    /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */ removeControl(control) {\n        return this.getControls().remove(control);\n    }\n    /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */ removeInteraction(interaction) {\n        return this.getInteractions().remove(interaction);\n    }\n    /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */ removeLayer(layer) {\n        const layers = this.getLayerGroup().getLayers();\n        return layers.remove(layer);\n    }\n    /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n   * @private\n   */ handleLayerRemove_(event) {\n        $41aa29ae0c4b607a$var$removeLayerMapProperty(event.layer);\n    }\n    /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */ removeOverlay(overlay) {\n        return this.getOverlays().remove(overlay);\n    }\n    /**\n   * @param {number} time Time.\n   * @private\n   */ renderFrame_(time) {\n        const size = this.getSize();\n        const view = this.getView();\n        const previousFrameState = this.frameState_;\n        /** @type {?FrameState} */ let frameState = null;\n        if (size !== undefined && (0, $cc435a5409103773$export$622c471beb1693c7)(size) && view && view.isDef()) {\n            const viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n            const viewState = view.getState();\n            frameState = {\n                animate: false,\n                coordinateToPixelTransform: this.coordinateToPixelTransform_,\n                declutterTree: null,\n                extent: (0, $6da4c8ed3074c92b$export$13ba650faf8308)(viewState.center, viewState.resolution, viewState.rotation, size),\n                index: this.frameIndex_++,\n                layerIndex: 0,\n                layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n                pixelRatio: this.pixelRatio_,\n                pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n                postRenderFunctions: [],\n                size: size,\n                tileQueue: this.tileQueue_,\n                time: time,\n                usedTiles: {},\n                viewState: viewState,\n                viewHints: viewHints,\n                wantedTiles: {},\n                mapId: (0, $6c5e11070e371322$export$5e82334337e0f204)(this),\n                renderTargets: {}\n            };\n            if (viewState.nextCenter && viewState.nextResolution) {\n                const rotation = isNaN(viewState.nextRotation) ? viewState.rotation : viewState.nextRotation;\n                frameState.nextExtent = (0, $6da4c8ed3074c92b$export$13ba650faf8308)(viewState.nextCenter, viewState.nextResolution, rotation, size);\n            }\n        }\n        this.frameState_ = frameState;\n        this.renderer_.renderFrame(frameState);\n        if (frameState) {\n            if (frameState.animate) this.render();\n            Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n            if (previousFrameState) {\n                const moveStart = !this.previousExtent_ || !(0, $6da4c8ed3074c92b$export$dd1bc94b04021eeb)(this.previousExtent_) && !(0, $6da4c8ed3074c92b$export$e9bab7fafb253603)(frameState.extent, this.previousExtent_);\n                if (moveStart) {\n                    this.dispatchEvent(new (0, $3a171922c3a0c5ed$export$2e2bcd8739ae039)((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).MOVESTART, this, previousFrameState));\n                    this.previousExtent_ = (0, $6da4c8ed3074c92b$export$3e2152b047719fa1)(this.previousExtent_);\n                }\n            }\n            const idle = this.previousExtent_ && !frameState.viewHints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING] && !frameState.viewHints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING] && !(0, $6da4c8ed3074c92b$export$e9bab7fafb253603)(frameState.extent, this.previousExtent_);\n            if (idle) {\n                this.dispatchEvent(new (0, $3a171922c3a0c5ed$export$2e2bcd8739ae039)((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).MOVEEND, this, frameState));\n                (0, $6da4c8ed3074c92b$export$9cd59f9826255e47)(frameState.extent, this.previousExtent_);\n            }\n        }\n        this.dispatchEvent(new (0, $3a171922c3a0c5ed$export$2e2bcd8739ae039)((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).POSTRENDER, this, frameState));\n        this.renderComplete_ = this.hasListener((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).LOADSTART) || this.hasListener((0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).LOADEND) || this.hasListener((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).RENDERCOMPLETE) ? !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady() : undefined;\n        if (!this.postRenderTimeoutHandle_) this.postRenderTimeoutHandle_ = setTimeout(()=>{\n            this.postRenderTimeoutHandle_ = undefined;\n            this.handlePostRender();\n        }, 0);\n    }\n    /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */ setLayerGroup(layerGroup) {\n        const oldLayerGroup = this.getLayerGroup();\n        if (oldLayerGroup) this.handleLayerRemove_(new (0, $0b703156bb914e6f$export$2f5ff21d758d25a7)(\"removelayer\", oldLayerGroup));\n        this.set((0, $07fa325567004bb7$export$2e2bcd8739ae039).LAYERGROUP, layerGroup);\n    }\n    /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */ setSize(size) {\n        this.set((0, $07fa325567004bb7$export$2e2bcd8739ae039).SIZE, size);\n    }\n    /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string} [target] The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */ setTarget(target) {\n        this.set((0, $07fa325567004bb7$export$2e2bcd8739ae039).TARGET, target);\n    }\n    /**\n   * Set the view for this map.\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\n   * alternative allows view properties to be resolved by sources or other components that load\n   * view-related metadata.\n   * @observable\n   * @api\n   */ setView(view) {\n        if (!view || view instanceof (0, $70364d0195659942$export$2e2bcd8739ae039)) {\n            this.set((0, $07fa325567004bb7$export$2e2bcd8739ae039).VIEW, view);\n            return;\n        }\n        this.set((0, $07fa325567004bb7$export$2e2bcd8739ae039).VIEW, new (0, $70364d0195659942$export$2e2bcd8739ae039)());\n        const map = this;\n        view.then(function(viewOptions) {\n            map.setView(new (0, $70364d0195659942$export$2e2bcd8739ae039)(viewOptions));\n        });\n    }\n    /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */ updateSize() {\n        const targetElement = this.getTargetElement();\n        let size = undefined;\n        if (targetElement) {\n            const computedStyle = getComputedStyle(targetElement);\n            const width = targetElement.offsetWidth - parseFloat(computedStyle[\"borderLeftWidth\"]) - parseFloat(computedStyle[\"paddingLeft\"]) - parseFloat(computedStyle[\"paddingRight\"]) - parseFloat(computedStyle[\"borderRightWidth\"]);\n            const height = targetElement.offsetHeight - parseFloat(computedStyle[\"borderTopWidth\"]) - parseFloat(computedStyle[\"paddingTop\"]) - parseFloat(computedStyle[\"paddingBottom\"]) - parseFloat(computedStyle[\"borderBottomWidth\"]);\n            if (!isNaN(width) && !isNaN(height)) {\n                size = [\n                    width,\n                    height\n                ];\n                if (!(0, $cc435a5409103773$export$622c471beb1693c7)(size) && !!(targetElement.offsetWidth || targetElement.offsetHeight || targetElement.getClientRects().length)) (0, $8c65b0699f3f3f8e$export$c106dd0671a0fc2d)(\"No map visible because the map container's width or height are 0.\");\n            }\n        }\n        const oldSize = this.getSize();\n        if (size && (!oldSize || !(0, $b998d41b678ed5d1$export$e9bab7fafb253603)(size, oldSize))) {\n            this.setSize(size);\n            this.updateViewportSize_();\n        }\n    }\n    /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */ updateViewportSize_() {\n        const view = this.getView();\n        if (view) {\n            let size = undefined;\n            const computedStyle = getComputedStyle(this.viewport_);\n            if (computedStyle.width && computedStyle.height) size = [\n                parseInt(computedStyle.width, 10),\n                parseInt(computedStyle.height, 10)\n            ];\n            view.setViewportSize(size);\n        }\n    }\n}\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */ function $41aa29ae0c4b607a$var$createOptionsInternal(options) {\n    /**\n   * @type {HTMLElement|Document}\n   */ let keyboardEventTarget = null;\n    if (options.keyboardEventTarget !== undefined) keyboardEventTarget = typeof options.keyboardEventTarget === \"string\" ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;\n    /**\n   * @type {Object<string, *>}\n   */ const values = {};\n    const layerGroup = options.layers && typeof /** @type {?} */ options.layers.getLayers === \"function\" ? /** @type {LayerGroup} */ options.layers : new (0, $0b703156bb914e6f$export$2e2bcd8739ae039)({\n        layers: /** @type {Collection<import(\"./layer/Base.js\").default>|Array<import(\"./layer/Base.js\").default>} */ options.layers\n    });\n    values[(0, $07fa325567004bb7$export$2e2bcd8739ae039).LAYERGROUP] = layerGroup;\n    values[(0, $07fa325567004bb7$export$2e2bcd8739ae039).TARGET] = options.target;\n    values[(0, $07fa325567004bb7$export$2e2bcd8739ae039).VIEW] = options.view instanceof (0, $70364d0195659942$export$2e2bcd8739ae039) ? options.view : new (0, $70364d0195659942$export$2e2bcd8739ae039)();\n    /** @type {Collection<import(\"./control/Control.js\").default>} */ let controls;\n    if (options.controls !== undefined) {\n        if (Array.isArray(options.controls)) controls = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)(options.controls.slice());\n        else {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof /** @type {?} */ options.controls.getArray === \"function\", \"Expected `controls` to be an array or an `ol/Collection.js`\");\n            controls = options.controls;\n        }\n    }\n    /** @type {Collection<import(\"./interaction/Interaction\").default>} */ let interactions;\n    if (options.interactions !== undefined) {\n        if (Array.isArray(options.interactions)) interactions = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)(options.interactions.slice());\n        else {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof /** @type {?} */ options.interactions.getArray === \"function\", \"Expected `interactions` to be an array or an `ol/Collection.js`\");\n            interactions = options.interactions;\n        }\n    }\n    /** @type {Collection<import(\"./Overlay.js\").default>} */ let overlays;\n    if (options.overlays !== undefined) {\n        if (Array.isArray(options.overlays)) overlays = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)(options.overlays.slice());\n        else {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof /** @type {?} */ options.overlays.getArray === \"function\", \"Expected `overlays` to be an array or an `ol/Collection.js`\");\n            overlays = options.overlays;\n        }\n    } else overlays = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)();\n    return {\n        controls: controls,\n        interactions: interactions,\n        keyboardEventTarget: keyboardEventTarget,\n        overlays: overlays,\n        values: values\n    };\n}\nvar $41aa29ae0c4b607a$export$2e2bcd8739ae039 = $41aa29ae0c4b607a$var$Map;\n\n\n\n/**\n * @module ol/layer/Tile\n */ /**\n * @module ol/layer/BaseTile\n */ \n/**\n * @module ol/layer/TileProperty\n */ /**\n * @enum {string}\n */ var $e4c61536de922b84$export$2e2bcd8739ae039 = {\n    PRELOAD: \"preload\",\n    USE_INTERIM_TILES_ON_ERROR: \"useInterimTilesOnError\"\n};\n\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *   import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\n */ /**\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {TileSourceType} [source] Source for this layer.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */ /**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<TileSourceType, RendererType>}\n * @api\n */ class $93be2de6a052f587$var$BaseTileLayer extends (0, $534f30fce11effcd$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options<TileSourceType>} [options] Tile layer options.\n   */ constructor(options){\n        options = options ? options : {};\n        const baseOptions = Object.assign({}, options);\n        delete baseOptions.preload;\n        delete baseOptions.useInterimTilesOnError;\n        super(baseOptions);\n        /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {BaseTileLayerOnSignature<void>}\n     */ this.un;\n        this.setPreload(options.preload !== undefined ? options.preload : 0);\n        this.setUseInterimTilesOnError(options.useInterimTilesOnError !== undefined ? options.useInterimTilesOnError : true);\n    }\n    /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */ getPreload() {\n        return /** @type {number} */ this.get((0, $e4c61536de922b84$export$2e2bcd8739ae039).PRELOAD);\n    }\n    /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */ setPreload(preload) {\n        this.set((0, $e4c61536de922b84$export$2e2bcd8739ae039).PRELOAD, preload);\n    }\n    /**\n   * Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */ getUseInterimTilesOnError() {\n        return /** @type {boolean} */ this.get((0, $e4c61536de922b84$export$2e2bcd8739ae039).USE_INTERIM_TILES_ON_ERROR);\n    }\n    /**\n   * Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */ setUseInterimTilesOnError(useInterimTilesOnError) {\n        this.set((0, $e4c61536de922b84$export$2e2bcd8739ae039).USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n    }\n    /**\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   */ getData(pixel) {\n        return super.getData(pixel);\n    }\n}\nvar $93be2de6a052f587$export$2e2bcd8739ae039 = $93be2de6a052f587$var$BaseTileLayer;\n\n\n/**\n * @module ol/renderer/canvas/TileLayer\n */ /**\n * @module ol/renderer/canvas/Layer\n */ /**\n * @module ol/renderer/Layer\n */ \n/**\n * @module ol/ImageState\n */ /**\n * @enum {number}\n */ var $7eb75c96a6b6f2c6$export$2e2bcd8739ae039 = {\n    IDLE: 0,\n    LOADING: 1,\n    LOADED: 2,\n    ERROR: 3,\n    EMPTY: 4\n};\n\n\n\n\n/**\n * @template {import(\"../layer/Layer.js\").default} LayerType\n */ class $cb18cdefd702a327$var$LayerRenderer extends (0, $1f093ab5083c8a1f$export$2e2bcd8739ae039) {\n    /**\n   * @param {LayerType} layer Layer.\n   */ constructor(layer){\n        super();\n        /**\n     * The renderer is initialized and ready to render.\n     * @type {boolean}\n     */ this.ready = true;\n        /** @private */ this.boundHandleImageChange_ = this.handleImageChange_.bind(this);\n        /**\n     * @protected\n     * @type {LayerType}\n     */ this.layer_ = layer;\n        /**\n     * @type {import(\"../render/canvas/ExecutorGroup\").default}\n     */ this.declutterExecutorGroup = null;\n    }\n    /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */ getFeatures(pixel) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */ getData(pixel) {\n        return null;\n    }\n    /**\n   * Determine whether render should be called.\n   * @abstract\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */ prepareFrame(frameState) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Render the layer.\n   * @abstract\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement|null} target Target that may be used to render content to.\n   * @return {HTMLElement|null} The rendered element.\n   */ renderFrame(frameState, target) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import(\"../Tile.js\").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */ loadedTileCallback(tiles, zoom, tile) {\n        if (!tiles[zoom]) tiles[zoom] = {};\n        tiles[zoom][tile.tileCoord.toString()] = tile;\n        return undefined;\n    }\n    /**\n   * Create a function that adds loaded tiles to the tile lookup.\n   * @param {import(\"../source/Tile.js\").default} source Tile source.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection of the tiles.\n   * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @return {function(number, import(\"../TileRange.js\").default):boolean} A function that can be\n   *     called with a zoom level and a tile range to add loaded tiles to the lookup.\n   * @protected\n   */ createLoadedTileFinder(source, projection, tiles) {\n        return(/**\n       * @param {number} zoom Zoom level.\n       * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n       * @return {boolean} The tile range is fully loaded.\n       */ (zoom, tileRange)=>{\n            const callback = this.loadedTileCallback.bind(this, tiles, zoom);\n            return source.forEachLoadedTile(projection, zoom, tileRange, callback);\n        });\n    }\n    /**\n   * @abstract\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"./Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n        return undefined;\n    }\n    /**\n   * @return {LayerType} Layer.\n   */ getLayer() {\n        return this.layer_;\n    }\n    /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @abstract\n   */ handleFontsChanged() {}\n    /**\n   * Handle changes in image state.\n   * @param {import(\"../events/Event.js\").default} event Image change event.\n   * @private\n   */ handleImageChange_(event) {\n        const image = /** @type {import(\"../Image.js\").default} */ event.target;\n        if (image.getState() === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED || image.getState() === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR) this.renderIfReadyAndVisible();\n    }\n    /**\n   * Load the image if not already loaded, and register the image change\n   * listener if needed.\n   * @param {import(\"../Image.js\").default} image Image.\n   * @return {boolean} `true` if the image is already loaded, `false` otherwise.\n   * @protected\n   */ loadImage(image) {\n        let imageState = image.getState();\n        if (imageState != (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED && imageState != (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR) image.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.boundHandleImageChange_);\n        if (imageState == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE) {\n            image.load();\n            imageState = image.getState();\n        }\n        return imageState == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED;\n    }\n    /**\n   * @protected\n   */ renderIfReadyAndVisible() {\n        const layer = this.getLayer();\n        if (layer && layer.getVisible() && layer.getSourceState() === \"ready\") layer.changed();\n    }\n    /**\n   * Clean up.\n   */ disposeInternal() {\n        delete this.layer_;\n        super.disposeInternal();\n    }\n}\nvar $cb18cdefd702a327$export$2e2bcd8739ae039 = $cb18cdefd702a327$var$LayerRenderer;\n\n\n\n\n\n\n\n\n\nconst $42152f52b26b6ca7$export$a166f0857c555517 = [];\n/**\n * @type {CanvasRenderingContext2D}\n */ let $42152f52b26b6ca7$var$pixelContext = null;\nfunction $42152f52b26b6ca7$var$createPixelContext() {\n    $42152f52b26b6ca7$var$pixelContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(1, 1, undefined, {\n        willReadFrequently: true\n    });\n}\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */ class $42152f52b26b6ca7$var$CanvasLayerRenderer extends (0, $cb18cdefd702a327$export$2e2bcd8739ae039) {\n    /**\n   * @param {LayerType} layer Layer.\n   */ constructor(layer){\n        super(layer);\n        /**\n     * @protected\n     * @type {HTMLElement}\n     */ this.container = null;\n        /**\n     * @protected\n     * @type {number}\n     */ this.renderedResolution;\n        /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */ this.tempTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */ this.pixelTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */ this.inversePixelTransform = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\n     * @type {CanvasRenderingContext2D}\n     */ this.context = null;\n        /**\n     * @type {boolean}\n     */ this.containerReused = false;\n        /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */ this.pixelContext_ = null;\n        /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */ this.frameState = null;\n    }\n    /**\n   * @param {import('../../DataTile.js').ImageLike} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */ getImageData(image, col, row) {\n        if (!$42152f52b26b6ca7$var$pixelContext) $42152f52b26b6ca7$var$createPixelContext();\n        $42152f52b26b6ca7$var$pixelContext.clearRect(0, 0, 1, 1);\n        let data;\n        try {\n            $42152f52b26b6ca7$var$pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n            data = $42152f52b26b6ca7$var$pixelContext.getImageData(0, 0, 1, 1).data;\n        } catch (err) {\n            $42152f52b26b6ca7$var$pixelContext = null;\n            return null;\n        }\n        return data;\n    }\n    /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */ getBackground(frameState) {\n        const layer = this.getLayer();\n        let background = layer.getBackground();\n        if (typeof background === \"function\") background = background(frameState.viewState.resolution);\n        return background || undefined;\n    }\n    /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */ useContainer(target, transform, backgroundColor) {\n        const layerClassName = this.getLayer().getClassName();\n        let container, context;\n        if (target && target.className === layerClassName && (!backgroundColor || target && target.style.backgroundColor && (0, $b998d41b678ed5d1$export$e9bab7fafb253603)((0, $322346e1ff7894ca$export$75093a47a9fa838d)(target.style.backgroundColor), (0, $322346e1ff7894ca$export$75093a47a9fa838d)(backgroundColor)))) {\n            const canvas = target.firstElementChild;\n            if (canvas instanceof HTMLCanvasElement) context = canvas.getContext(\"2d\");\n        }\n        if (context && context.canvas.style.transform === transform) {\n            // Container of the previous layer renderer can be used.\n            this.container = target;\n            this.context = context;\n            this.containerReused = true;\n        } else if (this.containerReused) {\n            // Previously reused container cannot be used any more.\n            this.container = null;\n            this.context = null;\n            this.containerReused = false;\n        } else if (this.container) this.container.style.backgroundColor = null;\n        if (!this.container) {\n            container = document.createElement(\"div\");\n            container.className = layerClassName;\n            let style = container.style;\n            style.position = \"absolute\";\n            style.width = \"100%\";\n            style.height = \"100%\";\n            context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)();\n            const canvas = context.canvas;\n            container.appendChild(canvas);\n            style = canvas.style;\n            style.position = \"absolute\";\n            style.left = \"0\";\n            style.transformOrigin = \"top left\";\n            this.container = container;\n            this.context = context;\n        }\n        if (!this.containerReused && backgroundColor && !this.container.style.backgroundColor) this.container.style.backgroundColor = backgroundColor;\n    }\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */ clipUnrotated(context, frameState, extent) {\n        const topLeft = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(extent);\n        const topRight = (0, $6da4c8ed3074c92b$export$b84fa077c8b05295)(extent);\n        const bottomRight = (0, $6da4c8ed3074c92b$export$e77c1cf70445e168)(extent);\n        const bottomLeft = (0, $6da4c8ed3074c92b$export$8d09f5e2e1bf560d)(extent);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, topLeft);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, topRight);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, bottomRight);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.coordinateToPixelTransform, bottomLeft);\n        const inverted = this.inversePixelTransform;\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(inverted, topLeft);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(inverted, topRight);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(inverted, bottomRight);\n        (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(inverted, bottomLeft);\n        context.save();\n        context.beginPath();\n        context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n        context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n        context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n        context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n        context.clip();\n    }\n    /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */ dispatchRenderEvent_(type, context, frameState) {\n        const layer = this.getLayer();\n        if (layer.hasListener(type)) {\n            const event = new (0, $b80dddceb0c42ad4$export$2e2bcd8739ae039)(type, this.inversePixelTransform, frameState, context);\n            layer.dispatchEvent(event);\n        }\n    }\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */ preRender(context, frameState) {\n        this.frameState = frameState;\n        this.dispatchRenderEvent_((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).PRERENDER, context, frameState);\n    }\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */ postRender(context, frameState) {\n        this.dispatchRenderEvent_((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).POSTRENDER, context, frameState);\n    }\n    /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */ getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX) {\n        const dx1 = width / 2;\n        const dy1 = height / 2;\n        const sx = pixelRatio / resolution;\n        const sy = -sx;\n        const dx2 = -center[0] + offsetX;\n        const dy2 = -center[1];\n        return (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n    }\n    /**\n   * Clean up.\n   */ disposeInternal() {\n        delete this.frameState;\n        super.disposeInternal();\n    }\n}\nvar $42152f52b26b6ca7$export$2e2bcd8739ae039 = $42152f52b26b6ca7$var$CanvasLayerRenderer;\n\n\n/**\n * @module ol/ImageTile\n */ /**\n * @module ol/Tile\n */ \n\n\n\n\n/**\n * A function that takes an {@link module:ol/Tile~Tile} for the tile and a\n * `{string}` for the url as arguments. The default is\n * ```js\n * source.setTileLoadFunction(function(tile, src) {\n *   tile.getImage().src = src;\n * });\n * ```\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\n * error handling:\n *\n * ```js\n * import TileState from 'ol/TileState.js';\n *\n * source.setTileLoadFunction(function(tile, src) {\n *   const xhr = new XMLHttpRequest();\n *   xhr.responseType = 'blob';\n *   xhr.addEventListener('loadend', function (evt) {\n *     const data = this.response;\n *     if (data !== undefined) {\n *       tile.getImage().src = URL.createObjectURL(data);\n *     } else {\n *       tile.setState(TileState.ERROR);\n *     }\n *   });\n *   xhr.addEventListener('error', function () {\n *     tile.setState(TileState.ERROR);\n *   });\n *   xhr.open('GET', src);\n *   xhr.send();\n * });\n * ```\n *\n * @typedef {function(Tile, string): void} LoadFunction\n * @api\n */ /**\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\n * @api\n */ /**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @api\n */ /**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n */ class $0f235d2d04095c6e$var$Tile extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {Options} [options] Tile options.\n   */ constructor(tileCoord, state, options){\n        super();\n        options = options ? options : {};\n        /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */ this.tileCoord = tileCoord;\n        /**\n     * @protected\n     * @type {import(\"./TileState.js\").default}\n     */ this.state = state;\n        /**\n     * An \"interim\" tile for this tile. The interim tile may be used while this\n     * one is loading, for \"smooth\" transitions when changing params/dimensions\n     * on the source.\n     * @type {Tile}\n     */ this.interimTile = null;\n        /**\n     * A key assigned to the tile. This is used by the tile source to determine\n     * if this tile can effectively be used, or if a new tile should be created\n     * and this one be used as an interim tile for this new tile.\n     * @type {string}\n     */ this.key = \"\";\n        /**\n     * The duration for the opacity transition.\n     * @type {number}\n     */ this.transition_ = options.transition === undefined ? 250 : options.transition;\n        /**\n     * Lookup of start times for rendering transitions.  If the start time is\n     * equal to -1, the transition is complete.\n     * @type {Object<string, number>}\n     */ this.transitionStarts_ = {};\n        /**\n     * @type {boolean}\n     */ this.interpolate = !!options.interpolate;\n    }\n    /**\n   * @protected\n   */ changed() {\n        this.dispatchEvent((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE);\n    }\n    /**\n   * Called by the tile cache when the tile is removed from the cache due to expiry\n   */ release() {\n        if (this.state === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) // to remove the `change` listener on this tile in `ol/TileQueue#handleTileChange`\n        this.setState((0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY);\n    }\n    /**\n   * @return {string} Key.\n   */ getKey() {\n        return this.key + \"/\" + this.tileCoord;\n    }\n    /**\n   * Get the interim tile most suitable for rendering using the chain of interim\n   * tiles. This corresponds to the  most recent tile that has been loaded, if no\n   * such tile exists, the original tile is returned.\n   * @return {!Tile} Best tile for rendering.\n   */ getInterimTile() {\n        if (!this.interimTile) //empty chain\n        return this;\n        let tile = this.interimTile;\n        // find the first loaded tile and return it. Since the chain is sorted in\n        // decreasing order of creation time, there is no need to search the remainder\n        // of the list (all those tiles correspond to older requests and will be\n        // cleaned up by refreshInterimChain)\n        do {\n            if (tile.getState() == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) {\n                // Show tile immediately instead of fading it in after loading, because\n                // the interim tile is in place already\n                this.transition_ = 0;\n                return tile;\n            }\n            tile = tile.interimTile;\n        }while (tile);\n        // we can not find a better tile\n        return this;\n    }\n    /**\n   * Goes through the chain of interim tiles and discards sections of the chain\n   * that are no longer relevant.\n   */ refreshInterimChain() {\n        if (!this.interimTile) return;\n        let tile = this.interimTile;\n        /**\n     * @type {Tile}\n     */ let prev = this;\n        do {\n            if (tile.getState() == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) {\n                //we have a loaded tile, we can discard the rest of the list\n                //we would could abort any LOADING tile request\n                //older than this tile (i.e. any LOADING tile following this entry in the chain)\n                tile.interimTile = null;\n                break;\n            } else if (tile.getState() == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING) //keep this LOADING tile any loaded tiles later in the chain are\n            //older than this tile, so we're still interested in the request\n            prev = tile;\n            else if (tile.getState() == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) //the head of the list is the most current tile, we don't need\n            //to start any other requests for this chain\n            prev.interimTile = tile.interimTile;\n            else prev = tile;\n            tile = prev.interimTile;\n        }while (tile);\n    }\n    /**\n   * Get the tile coordinate for this tile.\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\n   * @api\n   */ getTileCoord() {\n        return this.tileCoord;\n    }\n    /**\n   * @return {import(\"./TileState.js\").default} State.\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\n   * the tile queue and will block other requests.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @api\n   */ setState(state) {\n        if (this.state !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR && this.state > state) throw new Error(\"Tile load sequence violation\");\n        this.state = state;\n        this.changed();\n    }\n    /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @abstract\n   * @api\n   */ load() {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Get the alpha value for rendering.\n   * @param {string} id An id for the renderer.\n   * @param {number} time The render frame time.\n   * @return {number} A number between 0 and 1.\n   */ getAlpha(id, time) {\n        if (!this.transition_) return 1;\n        let start = this.transitionStarts_[id];\n        if (!start) {\n            start = time;\n            this.transitionStarts_[id] = start;\n        } else if (start === -1) return 1;\n        const delta = time - start + 1000 / 60; // avoid rendering at 0\n        if (delta >= this.transition_) return 1;\n        return (0, $c7ccf7e681a9b333$export$929e5a82286172a6)(delta / this.transition_);\n    }\n    /**\n   * Determine if a tile is in an alpha transition.  A tile is considered in\n   * transition if tile.getAlpha() has not yet been called or has been called\n   * and returned 1.\n   * @param {string} id An id for the renderer.\n   * @return {boolean} The tile is in transition.\n   */ inTransition(id) {\n        if (!this.transition_) return false;\n        return this.transitionStarts_[id] !== -1;\n    }\n    /**\n   * Mark a transition as complete.\n   * @param {string} id An id for the renderer.\n   */ endTransition(id) {\n        if (this.transition_) this.transitionStarts_[id] = -1;\n    }\n}\nvar $0f235d2d04095c6e$export$2e2bcd8739ae039 = $0f235d2d04095c6e$var$Tile;\n\n\n\n\n/**\n * @module ol/Image\n */ \n\n\n\n\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(import(\"./Image.js\").default, string): void} LoadFunction\n * @api\n */ /**\n * @typedef {Object} ImageObject\n * @property {import(\"./extent.js\").Extent} [extent] Extent, if different from the requested one.\n * @property {import(\"./resolution.js\").ResolutionLike} [resolution] Resolution, if different from the requested one.\n * When x and y resolution are different, use the array type (`[xResolution, yResolution]`).\n * @property {number} [pixelRatio] Pixel ratio, if different from the requested one.\n * @property {import('./DataTile.js').ImageLike} image Image.\n */ /**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * For images that cover any extent and resolution (static images), the loader function should not accept\n * any arguments. The function returns an {@link import(\"./DataTile.js\").ImageLike image}, an\n * {@link import(\"./Image.js\").ImageObject image object}, or a promise for the same.\n * For loaders that generate images, the promise should not resolve until the image is loaded.\n * If the returned image does not match the extent, resolution or pixel ratio passed to the loader,\n * it has to return an {@link import(\"./Image.js\").ImageObject image object} with the `image` and the\n * correct `extent`, `resolution` and `pixelRatio`.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} Loader\n * @api\n */ /**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * The function returns a promise for an  {@link import(\"./Image.js\").ImageObject image object}.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} ImageObjectPromiseLoader\n */ class $b54439be79d4619a$var$ImageWrapper extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|Array<number>|undefined} resolution Resolution. If provided as array, x and y\n   * resolution will be assumed.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"./ImageState.js\").default|import(\"./Image.js\").Loader} stateOrLoader State.\n   */ constructor(extent, resolution, pixelRatio, stateOrLoader){\n        super();\n        /**\n     * @protected\n     * @type {import(\"./extent.js\").Extent}\n     */ this.extent = extent;\n        /**\n     * @private\n     * @type {number}\n     */ this.pixelRatio_ = pixelRatio;\n        /**\n     * @protected\n     * @type {number|Array<number>|undefined}\n     */ this.resolution = resolution;\n        /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */ this.state = typeof stateOrLoader === \"function\" ? (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE : stateOrLoader;\n        /**\n     * @private\n     * @type {import('./DataTile.js').ImageLike|null}\n     */ this.image_ = null;\n        /**\n     * @protected\n     * @type {import(\"./Image.js\").Loader}\n     */ this.loader = typeof stateOrLoader === \"function\" ? stateOrLoader : null;\n    }\n    /**\n   * @protected\n   */ changed() {\n        this.dispatchEvent((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE);\n    }\n    /**\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */ getExtent() {\n        return this.extent;\n    }\n    /**\n   * @return {import('./DataTile.js').ImageLike} Image.\n   */ getImage() {\n        return this.image_;\n    }\n    /**\n   * @return {number} PixelRatio.\n   */ getPixelRatio() {\n        return this.pixelRatio_;\n    }\n    /**\n   * @return {number|Array<number>} Resolution.\n   */ getResolution() {\n        return /** @type {number} */ this.resolution;\n    }\n    /**\n   * @return {import(\"./ImageState.js\").default} State.\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Load not yet loaded URI.\n   */ load() {\n        if (this.state == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE) {\n            if (this.loader) {\n                this.state = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADING;\n                this.changed();\n                const resolution = this.getResolution();\n                const requestResolution = Array.isArray(resolution) ? resolution[0] : resolution;\n                (0, $013a1733c226ec50$export$4dbaaf6c79705e6c)(()=>this.loader(this.getExtent(), requestResolution, this.getPixelRatio())).then((image)=>{\n                    if (\"image\" in image) this.image_ = image.image;\n                    if (\"extent\" in image) this.extent = image.extent;\n                    if (\"resolution\" in image) this.resolution = image.resolution;\n                    if (\"pixelRatio\" in image) this.pixelRatio_ = image.pixelRatio;\n                    if (image instanceof HTMLImageElement || image instanceof ImageBitmap || image instanceof HTMLCanvasElement || image instanceof HTMLVideoElement) this.image_ = image;\n                    this.state = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED;\n                }).catch((error)=>{\n                    this.state = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR;\n                    console.error(error); // eslint-disable-line no-console\n                }).finally(()=>this.changed());\n            }\n        }\n    }\n    /**\n   * @param {import('./DataTile.js').ImageLike} image The image.\n   */ setImage(image) {\n        this.image_ = image;\n    }\n    /**\n   * @param {number|Array<number>} resolution Resolution.\n   */ setResolution(resolution) {\n        this.resolution = resolution;\n    }\n}\nfunction $b54439be79d4619a$export$bc96ecc7c2a50764(image, loadHandler, errorHandler) {\n    const img = /** @type {HTMLImageElement} */ image;\n    let listening = true;\n    let decoding = false;\n    let loaded = false;\n    const listenerKeys = [\n        (0, $d5bf8abd656a3cdc$export$8d2a95bc11b44725)(img, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).LOAD, function() {\n            loaded = true;\n            if (!decoding) loadHandler();\n        })\n    ];\n    if (img.src && (0, $67c66761d21428d0$export$716f8695eedb9bad)) {\n        decoding = true;\n        img.decode().then(function() {\n            if (listening) loadHandler();\n        }).catch(function(error) {\n            if (listening) {\n                if (loaded) loadHandler();\n                else errorHandler();\n            }\n        });\n    } else listenerKeys.push((0, $d5bf8abd656a3cdc$export$8d2a95bc11b44725)(img, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).ERROR, errorHandler));\n    return function unlisten() {\n        listening = false;\n        listenerKeys.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n    };\n}\nfunction $b54439be79d4619a$export$11e63f7b0f3d9900(image, src) {\n    return new Promise((resolve, reject)=>{\n        function handleLoad() {\n            unlisten();\n            resolve(image);\n        }\n        function handleError() {\n            unlisten();\n            reject(new Error(\"Image load error\"));\n        }\n        function unlisten() {\n            image.removeEventListener(\"load\", handleLoad);\n            image.removeEventListener(\"error\", handleError);\n        }\n        image.addEventListener(\"load\", handleLoad);\n        image.addEventListener(\"error\", handleError);\n        if (src) image.src = src;\n    });\n}\nfunction $b54439be79d4619a$export$a9e5af241c1bd389(image, src) {\n    if (src) image.src = src;\n    return (0, $67c66761d21428d0$export$716f8695eedb9bad) ? new Promise((resolve, reject)=>image.decode().then(()=>resolve(image), reject)) : $b54439be79d4619a$export$11e63f7b0f3d9900(image);\n}\nfunction $b54439be79d4619a$export$2f872c0f2117be69(image, src) {\n    if (src) image.src = src;\n    return (0, $67c66761d21428d0$export$716f8695eedb9bad) && (0, $67c66761d21428d0$export$7478563940788376) ? image.decode().then(()=>createImageBitmap(image)) : $b54439be79d4619a$export$a9e5af241c1bd389(image);\n}\nvar $b54439be79d4619a$export$2e2bcd8739ae039 = $b54439be79d4619a$var$ImageWrapper;\n\n\nclass $cd3bc8d185522361$var$ImageTile extends (0, $0f235d2d04095c6e$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\n   */ constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, options){\n        super(tileCoord, state, options);\n        /**\n     * @private\n     * @type {?string}\n     */ this.crossOrigin_ = crossOrigin;\n        /**\n     * Image URI\n     *\n     * @private\n     * @type {string}\n     */ this.src_ = src;\n        this.key = src;\n        /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */ this.image_ = new Image();\n        if (crossOrigin !== null) this.image_.crossOrigin = crossOrigin;\n        /**\n     * @private\n     * @type {?function():void}\n     */ this.unlisten_ = null;\n        /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */ this.tileLoadFunction_ = tileLoadFunction;\n    }\n    /**\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */ getImage() {\n        return this.image_;\n    }\n    /**\n   * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).\n   * @param {HTMLCanvasElement|HTMLImageElement} element Element.\n   */ setImage(element) {\n        this.image_ = element;\n        this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n        this.unlistenImage_();\n        this.changed();\n    }\n    /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */ handleImageError_() {\n        this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR;\n        this.unlistenImage_();\n        this.image_ = $cd3bc8d185522361$var$getBlankImage();\n        this.changed();\n    }\n    /**\n   * Tracks successful image load.\n   *\n   * @private\n   */ handleImageLoad_() {\n        const image = /** @type {HTMLImageElement} */ this.image_;\n        if (image.naturalWidth && image.naturalHeight) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n        else this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n        this.unlistenImage_();\n        this.changed();\n    }\n    /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   *\n   * To retry loading tiles on failed requests, use a custom `tileLoadFunction`\n   * that checks for error status codes and reloads only when the status code is\n   * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been\n   * made already:\n   *\n   * ```js\n   * const retryCodes = [408, 429, 500, 502, 503, 504];\n   * const retries = {};\n   * source.setTileLoadFunction((tile, src) => {\n   *   const image = tile.getImage();\n   *   fetch(src)\n   *     .then((response) => {\n   *       if (retryCodes.includes(response.status)) {\n   *         retries[src] = (retries[src] || 0) + 1;\n   *         if (retries[src] <= 3) {\n   *           setTimeout(() => tile.load(), retries[src] * 1000);\n   *         }\n   *         return Promise.reject();\n   *       }\n   *       return response.blob();\n   *     })\n   *     .then((blob) => {\n   *       const imageUrl = URL.createObjectURL(blob);\n   *       image.src = imageUrl;\n   *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);\n   *     })\n   *     .catch(() => tile.setState(3)); // error\n   * });\n   * ```\n   *\n   * @api\n   */ load() {\n        if (this.state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) {\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE;\n            this.image_ = new Image();\n            if (this.crossOrigin_ !== null) this.image_.crossOrigin = this.crossOrigin_;\n        }\n        if (this.state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) {\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING;\n            this.changed();\n            this.tileLoadFunction_(this, this.src_);\n            this.unlisten_ = (0, $b54439be79d4619a$export$bc96ecc7c2a50764)(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n        }\n    }\n    /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */ unlistenImage_() {\n        if (this.unlisten_) {\n            this.unlisten_();\n            this.unlisten_ = null;\n        }\n    }\n}\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */ function $cd3bc8d185522361$var$getBlankImage() {\n    const ctx = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(1, 1);\n    ctx.fillStyle = \"rgba(0,0,0,0)\";\n    ctx.fillRect(0, 0, 1, 1);\n    return ctx.canvas;\n}\nvar $cd3bc8d185522361$export$2e2bcd8739ae039 = $cd3bc8d185522361$var$ImageTile;\n\n\n/**\n * @module ol/reproj/Tile\n */ /**\n * @module ol/reproj/common\n */ /**\n * Default maximum allowed threshold  (in pixels) for reprojection\n * triangulation.\n * @type {number}\n */ const $8ea51dd7be3ba5e2$export$3ecb4bcfa5aae855 = 0.5;\n\n\n\n\n\n/**\n * @module ol/reproj/Triangulation\n */ \n\n\n/**\n * Single triangle; consists of 3 source points and 3 target points.\n * @typedef {Object} Triangle\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source Source.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target Target.\n */ /**\n * Maximum number of subdivision steps during raster reprojection triangulation.\n * Prevents high memory usage and large number of proj4 calls (for certain\n * transformations and areas). At most `2*(2^this)` triangles are created for\n * each triangulated extent (tile/image).\n * @type {number}\n */ const $6be53f6edfbf1854$var$MAX_SUBDIVISION = 10;\n/**\n * Maximum allowed size of triangle relative to world width. When transforming\n * corners of world extent between certain projections, the resulting\n * triangulation seems to have zero error and no subdivision is performed. If\n * the triangle width is more than this (relative to world width; 0-1),\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\n * @type {number}\n */ const $6be53f6edfbf1854$var$MAX_TRIANGLE_WIDTH = 0.25;\n/**\n * @classdesc\n * Class containing triangulation of the given target extent.\n * Used for determining source data and the reprojection itself.\n */ class $6be53f6edfbf1854$var$Triangulation {\n    /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\n   * @param {number} errorThreshold Acceptable error (in source units).\n   * @param {?number} destinationResolution The (optional) resolution of the destination.\n   */ constructor(sourceProj, targetProj, targetExtent, maxSourceExtent, errorThreshold, destinationResolution){\n        /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */ this.sourceProj_ = sourceProj;\n        /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */ this.targetProj_ = targetProj;\n        /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */ let transformInvCache = {};\n        const transformInv = (0, $9c4744460e43e41b$export$fce0c6cfca85ed96)(this.targetProj_, this.sourceProj_);\n        /**\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\n     * @private\n     */ this.transformInv_ = function(c) {\n            const key = c[0] + \"/\" + c[1];\n            if (!transformInvCache[key]) transformInvCache[key] = transformInv(c);\n            return transformInvCache[key];\n        };\n        /**\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */ this.maxSourceExtent_ = maxSourceExtent;\n        /**\n     * @type {number}\n     * @private\n     */ this.errorThresholdSquared_ = errorThreshold * errorThreshold;\n        /**\n     * @type {Array<Triangle>}\n     * @private\n     */ this.triangles_ = [];\n        /**\n     * Indicates that the triangulation crosses edge of the source projection.\n     * @type {boolean}\n     * @private\n     */ this.wrapsXInSource_ = false;\n        /**\n     * @type {boolean}\n     * @private\n     */ this.canWrapXInSource_ = this.sourceProj_.canWrapX() && !!maxSourceExtent && !!this.sourceProj_.getExtent() && (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(maxSourceExtent) >= (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(this.sourceProj_.getExtent());\n        /**\n     * @type {?number}\n     * @private\n     */ this.sourceWorldWidth_ = this.sourceProj_.getExtent() ? (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(this.sourceProj_.getExtent()) : null;\n        /**\n     * @type {?number}\n     * @private\n     */ this.targetWorldWidth_ = this.targetProj_.getExtent() ? (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(this.targetProj_.getExtent()) : null;\n        const destinationTopLeft = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(targetExtent);\n        const destinationTopRight = (0, $6da4c8ed3074c92b$export$b84fa077c8b05295)(targetExtent);\n        const destinationBottomRight = (0, $6da4c8ed3074c92b$export$e77c1cf70445e168)(targetExtent);\n        const destinationBottomLeft = (0, $6da4c8ed3074c92b$export$8d09f5e2e1bf560d)(targetExtent);\n        const sourceTopLeft = this.transformInv_(destinationTopLeft);\n        const sourceTopRight = this.transformInv_(destinationTopRight);\n        const sourceBottomRight = this.transformInv_(destinationBottomRight);\n        const sourceBottomLeft = this.transformInv_(destinationBottomLeft);\n        /*\n     * The maxSubdivision controls how many splittings of the target area can\n     * be done. The idea here is to do a linear mapping of the target areas\n     * but the actual overall reprojection (can be) extremely non-linear. The\n     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\n     * tile size. However this function is also called to remap canvas rendered\n     * layers which can be much larger. This calculation increases the maxSubdivision\n     * value by the right factor so that each 256x256 pixel area has\n     * MAX_SUBDIVISION divisions.\n     */ const maxSubdivision = $6be53f6edfbf1854$var$MAX_SUBDIVISION + (destinationResolution ? Math.max(0, Math.ceil(Math.log2((0, $6da4c8ed3074c92b$export$520c40045967cb15)(targetExtent) / (destinationResolution * destinationResolution * 65536)))) : 0);\n        this.addQuad_(destinationTopLeft, destinationTopRight, destinationBottomRight, destinationBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, sourceBottomLeft, maxSubdivision);\n        if (this.wrapsXInSource_) {\n            let leftBound = Infinity;\n            this.triangles_.forEach(function(triangle, i, arr) {\n                leftBound = Math.min(leftBound, triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]);\n            });\n            // Shift triangles to be as close to `leftBound` as possible\n            // (if the distance is more than `worldWidth / 2` it can be closer.\n            this.triangles_.forEach((triangle)=>{\n                if (Math.max(triangle.source[0][0], triangle.source[1][0], triangle.source[2][0]) - leftBound > this.sourceWorldWidth_ / 2) {\n                    const newTriangle = [\n                        [\n                            triangle.source[0][0],\n                            triangle.source[0][1]\n                        ],\n                        [\n                            triangle.source[1][0],\n                            triangle.source[1][1]\n                        ],\n                        [\n                            triangle.source[2][0],\n                            triangle.source[2][1]\n                        ]\n                    ];\n                    if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) newTriangle[0][0] -= this.sourceWorldWidth_;\n                    if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) newTriangle[1][0] -= this.sourceWorldWidth_;\n                    if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) newTriangle[2][0] -= this.sourceWorldWidth_;\n                    // Rarely (if the extent contains both the dateline and prime meridian)\n                    // the shift can in turn break some triangles.\n                    // Detect this here and don't shift in such cases.\n                    const minX = Math.min(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n                    const maxX = Math.max(newTriangle[0][0], newTriangle[1][0], newTriangle[2][0]);\n                    if (maxX - minX < this.sourceWorldWidth_ / 2) triangle.source = newTriangle;\n                }\n            });\n        }\n        transformInvCache = {};\n    }\n    /**\n   * Adds triangle to the triangulation.\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @private\n   */ addTriangle_(a, b, c, aSrc, bSrc, cSrc) {\n        this.triangles_.push({\n            source: [\n                aSrc,\n                bSrc,\n                cSrc\n            ],\n            target: [\n                a,\n                b,\n                c\n            ]\n        });\n    }\n    /**\n   * Adds quad (points in clock-wise order) to the triangulation\n   * (and reprojects the vertices) if valid.\n   * Performs quad subdivision if needed to increase precision.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\n   * @private\n   */ addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\n        const sourceQuadExtent = (0, $6da4c8ed3074c92b$export$8aceca7c77505534)([\n            aSrc,\n            bSrc,\n            cSrc,\n            dSrc\n        ]);\n        const sourceCoverageX = this.sourceWorldWidth_ ? (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceQuadExtent) / this.sourceWorldWidth_ : null;\n        const sourceWorldWidth = /** @type {number} */ this.sourceWorldWidth_;\n        // when the quad is wrapped in the source projection\n        // it covers most of the projection extent, but not fully\n        const wrapsX = this.sourceProj_.canWrapX() && sourceCoverageX > 0.5 && sourceCoverageX < 1;\n        let needsSubdivision = false;\n        if (maxSubdivision > 0) {\n            if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\n                const targetQuadExtent = (0, $6da4c8ed3074c92b$export$8aceca7c77505534)([\n                    a,\n                    b,\n                    c,\n                    d\n                ]);\n                const targetCoverageX = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(targetQuadExtent) / this.targetWorldWidth_;\n                needsSubdivision = targetCoverageX > $6be53f6edfbf1854$var$MAX_TRIANGLE_WIDTH || needsSubdivision;\n            }\n            if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) needsSubdivision = sourceCoverageX > $6be53f6edfbf1854$var$MAX_TRIANGLE_WIDTH || needsSubdivision;\n        }\n        if (!needsSubdivision && this.maxSourceExtent_) {\n            if (isFinite(sourceQuadExtent[0]) && isFinite(sourceQuadExtent[1]) && isFinite(sourceQuadExtent[2]) && isFinite(sourceQuadExtent[3])) {\n                if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(sourceQuadExtent, this.maxSourceExtent_)) // whole quad outside source projection extent -> ignore\n                return;\n            }\n        }\n        let isNotFinite = 0;\n        if (!needsSubdivision) {\n            if (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) || !isFinite(bSrc[0]) || !isFinite(bSrc[1]) || !isFinite(cSrc[0]) || !isFinite(cSrc[1]) || !isFinite(dSrc[0]) || !isFinite(dSrc[1])) {\n                if (maxSubdivision > 0) needsSubdivision = true;\n                else {\n                    // It might be the case that only 1 of the points is infinite. In this case\n                    // we can draw a single triangle with the other three points\n                    isNotFinite = (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) + (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) + (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) + (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\n                    if (isNotFinite != 1 && isNotFinite != 2 && isNotFinite != 4 && isNotFinite != 8) return;\n                }\n            }\n        }\n        if (maxSubdivision > 0) {\n            if (!needsSubdivision) {\n                const center = [\n                    (a[0] + c[0]) / 2,\n                    (a[1] + c[1]) / 2\n                ];\n                const centerSrc = this.transformInv_(center);\n                let dx;\n                if (wrapsX) {\n                    const centerSrcEstimX = ((0, $6b000a049d919fe5$export$ba467bec01d66def)(aSrc[0], sourceWorldWidth) + (0, $6b000a049d919fe5$export$ba467bec01d66def)(cSrc[0], sourceWorldWidth)) / 2;\n                    dx = centerSrcEstimX - (0, $6b000a049d919fe5$export$ba467bec01d66def)(centerSrc[0], sourceWorldWidth);\n                } else dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\n                const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\n                const centerSrcErrorSquared = dx * dx + dy * dy;\n                needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\n            }\n            if (needsSubdivision) {\n                if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\n                    // split horizontally (top & bottom)\n                    const bc = [\n                        (b[0] + c[0]) / 2,\n                        (b[1] + c[1]) / 2\n                    ];\n                    const bcSrc = this.transformInv_(bc);\n                    const da = [\n                        (d[0] + a[0]) / 2,\n                        (d[1] + a[1]) / 2\n                    ];\n                    const daSrc = this.transformInv_(da);\n                    this.addQuad_(a, b, bc, da, aSrc, bSrc, bcSrc, daSrc, maxSubdivision - 1);\n                    this.addQuad_(da, bc, c, d, daSrc, bcSrc, cSrc, dSrc, maxSubdivision - 1);\n                } else {\n                    // split vertically (left & right)\n                    const ab = [\n                        (a[0] + b[0]) / 2,\n                        (a[1] + b[1]) / 2\n                    ];\n                    const abSrc = this.transformInv_(ab);\n                    const cd = [\n                        (c[0] + d[0]) / 2,\n                        (c[1] + d[1]) / 2\n                    ];\n                    const cdSrc = this.transformInv_(cd);\n                    this.addQuad_(a, ab, cd, d, aSrc, abSrc, cdSrc, dSrc, maxSubdivision - 1);\n                    this.addQuad_(ab, b, c, cd, abSrc, bSrc, cSrc, cdSrc, maxSubdivision - 1);\n                }\n                return;\n            }\n        }\n        if (wrapsX) {\n            if (!this.canWrapXInSource_) return;\n            this.wrapsXInSource_ = true;\n        }\n        // Exactly zero or one of *Src is not finite\n        // The triangles must have the diagonal line as the first side\n        // This is to allow easy code in reproj.s to make it straight for broken\n        // browsers that can't handle diagonal clipping\n        if ((isNotFinite & 0xb) == 0) this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\n        if ((isNotFinite & 0xe) == 0) this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\n        if (isNotFinite) {\n            // Try the other two triangles\n            if ((isNotFinite & 0xd) == 0) this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\n            if ((isNotFinite & 0x7) == 0) this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\n        }\n    }\n    /**\n   * Calculates extent of the `source` coordinates from all the triangles.\n   *\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\n   */ calculateSourceExtent() {\n        const extent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        this.triangles_.forEach(function(triangle, i, arr) {\n            const src = triangle.source;\n            (0, $6da4c8ed3074c92b$export$1f820e3920fa5715)(extent, src[0]);\n            (0, $6da4c8ed3074c92b$export$1f820e3920fa5715)(extent, src[1]);\n            (0, $6da4c8ed3074c92b$export$1f820e3920fa5715)(extent, src[2]);\n        });\n        return extent;\n    }\n    /**\n   * @return {Array<Triangle>} Array of the calculated triangles.\n   */ getTriangles() {\n        return this.triangles_;\n    }\n}\nvar $6be53f6edfbf1854$export$2e2bcd8739ae039 = $6be53f6edfbf1854$var$Triangulation;\n\n\n/**\n * @module ol/reproj\n */ \n\n\n\nlet $2b0a118af78fb031$var$brokenDiagonalRendering_;\nconst $2b0a118af78fb031$export$a166f0857c555517 = [];\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */ function $2b0a118af78fb031$var$drawTestTriangle(ctx, u1, v1, u2, v2) {\n    ctx.beginPath();\n    ctx.moveTo(0, 0);\n    ctx.lineTo(u1, v1);\n    ctx.lineTo(u2, v2);\n    ctx.closePath();\n    ctx.save();\n    ctx.clip();\n    ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n    ctx.restore();\n}\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */ function $2b0a118af78fb031$var$verifyBrokenDiagonalRendering(data, offset) {\n    // the values ought to be close to the rgba(210, 0, 0, 0.75)\n    return Math.abs(data[offset * 4] - 210) > 2 || Math.abs(data[offset * 4 + 3] - 191.25) > 2;\n}\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */ function $2b0a118af78fb031$var$isBrokenDiagonalRendering() {\n    if ($2b0a118af78fb031$var$brokenDiagonalRendering_ === undefined) {\n        const ctx = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(6, 6, $2b0a118af78fb031$export$a166f0857c555517);\n        ctx.globalCompositeOperation = \"lighter\";\n        ctx.fillStyle = \"rgba(210, 0, 0, 0.75)\";\n        $2b0a118af78fb031$var$drawTestTriangle(ctx, 4, 5, 4, 0);\n        $2b0a118af78fb031$var$drawTestTriangle(ctx, 4, 5, 0, 5);\n        const data = ctx.getImageData(0, 0, 3, 3).data;\n        $2b0a118af78fb031$var$brokenDiagonalRendering_ = $2b0a118af78fb031$var$verifyBrokenDiagonalRendering(data, 0) || $2b0a118af78fb031$var$verifyBrokenDiagonalRendering(data, 4) || $2b0a118af78fb031$var$verifyBrokenDiagonalRendering(data, 8);\n        (0, $075f937d7366f1a2$export$e918ac6a1026a12a)(ctx);\n        $2b0a118af78fb031$export$a166f0857c555517.push(ctx.canvas);\n    }\n    return $2b0a118af78fb031$var$brokenDiagonalRendering_;\n}\nfunction $2b0a118af78fb031$export$5fbb958059b7e71f(sourceProj, targetProj, targetCenter, targetResolution) {\n    const sourceCenter = (0, $9c4744460e43e41b$export$51186ad6e864892a)(targetCenter, targetProj, sourceProj);\n    // calculate the ideal resolution of the source data\n    let sourceResolution = (0, $9c4744460e43e41b$export$2d8f7b4eec383d44)(targetProj, targetResolution, targetCenter);\n    const targetMetersPerUnit = targetProj.getMetersPerUnit();\n    if (targetMetersPerUnit !== undefined) sourceResolution *= targetMetersPerUnit;\n    const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n    if (sourceMetersPerUnit !== undefined) sourceResolution /= sourceMetersPerUnit;\n    // Based on the projection properties, the point resolution at the specified\n    // coordinates may be slightly different. We need to reverse-compensate this\n    // in order to achieve optimal results.\n    const sourceExtent = sourceProj.getExtent();\n    if (!sourceExtent || (0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(sourceExtent, sourceCenter)) {\n        const compensationFactor = (0, $9c4744460e43e41b$export$2d8f7b4eec383d44)(sourceProj, sourceResolution, sourceCenter) / sourceResolution;\n        if (isFinite(compensationFactor) && compensationFactor > 0) sourceResolution /= compensationFactor;\n    }\n    return sourceResolution;\n}\nfunction $2b0a118af78fb031$export$16d356211d01f1cc(sourceProj, targetProj, targetExtent, targetResolution) {\n    const targetCenter = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(targetExtent);\n    let sourceResolution = $2b0a118af78fb031$export$5fbb958059b7e71f(sourceProj, targetProj, targetCenter, targetResolution);\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) (0, $6da4c8ed3074c92b$export$f9ed8a3d123a08e2)(targetExtent, function(corner) {\n        sourceResolution = $2b0a118af78fb031$export$5fbb958059b7e71f(sourceProj, targetProj, corner, targetResolution);\n        return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n    return sourceResolution;\n}\nfunction $2b0a118af78fb031$export$b3890eb0ae9dca99(width, height, pixelRatio, sourceResolution, sourceExtent, targetResolution, targetExtent, triangulation, sources, gutter, renderEdges, interpolate) {\n    const context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(Math.round(pixelRatio * width), Math.round(pixelRatio * height), $2b0a118af78fb031$export$a166f0857c555517);\n    if (!interpolate) context.imageSmoothingEnabled = false;\n    if (sources.length === 0) return context.canvas;\n    context.scale(pixelRatio, pixelRatio);\n    function pixelRound(value) {\n        return Math.round(value * pixelRatio) / pixelRatio;\n    }\n    context.globalCompositeOperation = \"lighter\";\n    const sourceDataExtent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n    sources.forEach(function(src, i, arr) {\n        (0, $6da4c8ed3074c92b$export$8b58be045bf06082)(sourceDataExtent, src.extent);\n    });\n    const canvasWidthInUnits = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(sourceDataExtent);\n    const canvasHeightInUnits = (0, $6da4c8ed3074c92b$export$c08559766941f856)(sourceDataExtent);\n    const stitchContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(Math.round(pixelRatio * canvasWidthInUnits / sourceResolution), Math.round(pixelRatio * canvasHeightInUnits / sourceResolution), $2b0a118af78fb031$export$a166f0857c555517);\n    if (!interpolate) stitchContext.imageSmoothingEnabled = false;\n    const stitchScale = pixelRatio / sourceResolution;\n    sources.forEach(function(src, i, arr) {\n        const xPos = src.extent[0] - sourceDataExtent[0];\n        const yPos = -(src.extent[3] - sourceDataExtent[3]);\n        const srcWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(src.extent);\n        const srcHeight = (0, $6da4c8ed3074c92b$export$c08559766941f856)(src.extent);\n        // This test should never fail -- but it does. Need to find a fix the upstream condition\n        if (src.image.width > 0 && src.image.height > 0) stitchContext.drawImage(src.image, gutter, gutter, src.image.width - 2 * gutter, src.image.height - 2 * gutter, xPos * stitchScale, yPos * stitchScale, srcWidth * stitchScale, srcHeight * stitchScale);\n    });\n    const targetTopLeft = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(targetExtent);\n    triangulation.getTriangles().forEach(function(triangle, i, arr) {\n        /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */ const source = triangle.source;\n        const target = triangle.target;\n        let x0 = source[0][0], y0 = source[0][1];\n        let x1 = source[1][0], y1 = source[1][1];\n        let x2 = source[2][0], y2 = source[2][1];\n        // Make sure that everything is on pixel boundaries\n        const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n        const v0 = pixelRound(-(target[0][1] - targetTopLeft[1]) / targetResolution);\n        const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n        const v1 = pixelRound(-(target[1][1] - targetTopLeft[1]) / targetResolution);\n        const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n        const v2 = pixelRound(-(target[2][1] - targetTopLeft[1]) / targetResolution);\n        // Shift all the source points to improve numerical stability\n        // of all the subsequent calculations. The [x0, y0] is used here.\n        // This is also used to simplify the linear system.\n        const sourceNumericalShiftX = x0;\n        const sourceNumericalShiftY = y0;\n        x0 = 0;\n        y0 = 0;\n        x1 -= sourceNumericalShiftX;\n        y1 -= sourceNumericalShiftY;\n        x2 -= sourceNumericalShiftX;\n        y2 -= sourceNumericalShiftY;\n        const augmentedMatrix = [\n            [\n                x1,\n                y1,\n                0,\n                0,\n                u1 - u0\n            ],\n            [\n                x2,\n                y2,\n                0,\n                0,\n                u2 - u0\n            ],\n            [\n                0,\n                0,\n                x1,\n                y1,\n                v1 - v0\n            ],\n            [\n                0,\n                0,\n                x2,\n                y2,\n                v2 - v0\n            ]\n        ];\n        const affineCoefs = (0, $6b000a049d919fe5$export$8240f01c446270e6)(augmentedMatrix);\n        if (!affineCoefs) return;\n        context.save();\n        context.beginPath();\n        if ($2b0a118af78fb031$var$isBrokenDiagonalRendering() || !interpolate) {\n            // Make sure that all lines are horizontal or vertical\n            context.moveTo(u1, v1);\n            // This is the diagonal line. Do it in 4 steps\n            const steps = 4;\n            const ud = u0 - u1;\n            const vd = v0 - v1;\n            for(let step = 0; step < steps; step++){\n                // Go horizontally\n                context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound(step * vd / (steps - 1)));\n                // Go vertically\n                if (step != steps - 1) context.lineTo(u1 + pixelRound((step + 1) * ud / steps), v1 + pixelRound((step + 1) * vd / (steps - 1)));\n            }\n            // We are almost at u0r, v0r\n            context.lineTo(u2, v2);\n        } else {\n            context.moveTo(u1, v1);\n            context.lineTo(u0, v0);\n            context.lineTo(u2, v2);\n        }\n        context.clip();\n        context.transform(affineCoefs[0], affineCoefs[2], affineCoefs[1], affineCoefs[3], u0, v0);\n        context.translate(sourceDataExtent[0] - sourceNumericalShiftX, sourceDataExtent[3] - sourceNumericalShiftY);\n        context.scale(sourceResolution / pixelRatio, -sourceResolution / pixelRatio);\n        context.drawImage(stitchContext.canvas, 0, 0);\n        context.restore();\n    });\n    (0, $075f937d7366f1a2$export$e918ac6a1026a12a)(stitchContext);\n    $2b0a118af78fb031$export$a166f0857c555517.push(stitchContext.canvas);\n    if (renderEdges) {\n        context.save();\n        context.globalCompositeOperation = \"source-over\";\n        context.strokeStyle = \"black\";\n        context.lineWidth = 1;\n        triangulation.getTriangles().forEach(function(triangle, i, arr) {\n            const target = triangle.target;\n            const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n            const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n            const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n            const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n            const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n            const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n            context.beginPath();\n            context.moveTo(u1, v1);\n            context.lineTo(u0, v0);\n            context.lineTo(u2, v2);\n            context.closePath();\n            context.stroke();\n        });\n        context.restore();\n    }\n    return context.canvas;\n}\n\n\n\n\n\n\n/**\n * @typedef {function(number, number, number, number) : (import(\"../ImageTile.js\").default)} FunctionType\n */ /**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link module:ol/source/TileImage~TileImage}.\n *\n */ class $398e350e33050c07$var$ReprojTile extends (0, $0f235d2d04095c6e$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} gutter Gutter of the source tiles.\n   * @param {FunctionType} getTileFunction\n   *     Function returning source tiles (z, x, y, pixelRatio).\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\n   * @param {boolean} [renderEdges] Render reprojection edges.\n   * @param {boolean} [interpolate] Use linear interpolation when resampling.\n   */ constructor(sourceProj, sourceTileGrid, targetProj, targetTileGrid, tileCoord, wrappedTileCoord, pixelRatio, gutter, getTileFunction, errorThreshold, renderEdges, interpolate){\n        super(tileCoord, (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE, {\n            interpolate: !!interpolate\n        });\n        /**\n     * @private\n     * @type {boolean}\n     */ this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\n        /**\n     * @private\n     * @type {number}\n     */ this.pixelRatio_ = pixelRatio;\n        /**\n     * @private\n     * @type {number}\n     */ this.gutter_ = gutter;\n        /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */ this.canvas_ = null;\n        /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */ this.sourceTileGrid_ = sourceTileGrid;\n        /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */ this.targetTileGrid_ = targetTileGrid;\n        /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */ this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n        /**\n     * @private\n     * @type {!Array<import(\"../ImageTile.js\").default>}\n     */ this.sourceTiles_ = [];\n        /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */ this.sourcesListenerKeys_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.sourceZ_ = 0;\n        const targetExtent = targetTileGrid.getTileCoordExtent(this.wrappedTileCoord_);\n        const maxTargetExtent = this.targetTileGrid_.getExtent();\n        let maxSourceExtent = this.sourceTileGrid_.getExtent();\n        const limitedTargetExtent = maxTargetExtent ? (0, $6da4c8ed3074c92b$export$72209efa88586d42)(targetExtent, maxTargetExtent) : targetExtent;\n        if ((0, $6da4c8ed3074c92b$export$520c40045967cb15)(limitedTargetExtent) === 0) {\n            // Tile is completely outside range -> EMPTY\n            // TODO: is it actually correct that the source even creates the tile ?\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n            return;\n        }\n        const sourceProjExtent = sourceProj.getExtent();\n        if (sourceProjExtent) {\n            if (!maxSourceExtent) maxSourceExtent = sourceProjExtent;\n            else maxSourceExtent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(maxSourceExtent, sourceProjExtent);\n        }\n        const targetResolution = targetTileGrid.getResolution(this.wrappedTileCoord_[0]);\n        const sourceResolution = (0, $2b0a118af78fb031$export$16d356211d01f1cc)(sourceProj, targetProj, limitedTargetExtent, targetResolution);\n        if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n            // invalid sourceResolution -> EMPTY\n            // probably edges of the projections when no extent is defined\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n            return;\n        }\n        const errorThresholdInPixels = errorThreshold !== undefined ? errorThreshold : (0, $8ea51dd7be3ba5e2$export$3ecb4bcfa5aae855);\n        /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */ this.triangulation_ = new (0, $6be53f6edfbf1854$export$2e2bcd8739ae039)(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);\n        if (this.triangulation_.getTriangles().length === 0) {\n            // no valid triangles -> EMPTY\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n            return;\n        }\n        this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n        let sourceExtent = this.triangulation_.calculateSourceExtent();\n        if (maxSourceExtent) {\n            if (sourceProj.canWrapX()) {\n                sourceExtent[1] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(sourceExtent[1], maxSourceExtent[1], maxSourceExtent[3]);\n                sourceExtent[3] = (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(sourceExtent[3], maxSourceExtent[1], maxSourceExtent[3]);\n            } else sourceExtent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(sourceExtent, maxSourceExtent);\n        }\n        if (!(0, $6da4c8ed3074c92b$export$520c40045967cb15)(sourceExtent)) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n        else {\n            const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(sourceExtent, this.sourceZ_);\n            for(let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++)for(let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++){\n                const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n                if (tile) this.sourceTiles_.push(tile);\n            }\n            if (this.sourceTiles_.length === 0) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY;\n        }\n    }\n    /**\n   * Get the HTML Canvas element for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */ getImage() {\n        return this.canvas_;\n    }\n    /**\n   * @private\n   */ reproject_() {\n        const sources = [];\n        this.sourceTiles_.forEach((tile)=>{\n            if (tile && tile.getState() == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) sources.push({\n                extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),\n                image: tile.getImage()\n            });\n        });\n        this.sourceTiles_.length = 0;\n        if (sources.length === 0) this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR;\n        else {\n            const z = this.wrappedTileCoord_[0];\n            const size = this.targetTileGrid_.getTileSize(z);\n            const width = typeof size === \"number\" ? size : size[0];\n            const height = typeof size === \"number\" ? size : size[1];\n            const targetResolution = this.targetTileGrid_.getResolution(z);\n            const sourceResolution = this.sourceTileGrid_.getResolution(this.sourceZ_);\n            const targetExtent = this.targetTileGrid_.getTileCoordExtent(this.wrappedTileCoord_);\n            this.canvas_ = (0, $2b0a118af78fb031$export$b3890eb0ae9dca99)(width, height, this.pixelRatio_, sourceResolution, this.sourceTileGrid_.getExtent(), targetResolution, targetExtent, this.triangulation_, sources, this.gutter_, this.renderEdges_, this.interpolate);\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n        }\n        this.changed();\n    }\n    /**\n   * Load not yet loaded URI.\n   */ load() {\n        if (this.state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) {\n            this.state = (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING;\n            this.changed();\n            let leftToLoad = 0;\n            this.sourcesListenerKeys_ = [];\n            this.sourceTiles_.forEach((tile)=>{\n                const state = tile.getState();\n                if (state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE || state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING) {\n                    leftToLoad++;\n                    const sourceListenKey = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(tile, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, function(e) {\n                        const state = tile.getState();\n                        if (state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED || state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR || state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY) {\n                            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(sourceListenKey);\n                            leftToLoad--;\n                            if (leftToLoad === 0) {\n                                this.unlistenSources_();\n                                this.reproject_();\n                            }\n                        }\n                    }, this);\n                    this.sourcesListenerKeys_.push(sourceListenKey);\n                }\n            });\n            if (leftToLoad === 0) setTimeout(this.reproject_.bind(this), 0);\n            else this.sourceTiles_.forEach(function(tile, i, arr) {\n                const state = tile.getState();\n                if (state == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) tile.load();\n            });\n        }\n    }\n    /**\n   * @private\n   */ unlistenSources_() {\n        this.sourcesListenerKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        this.sourcesListenerKeys_ = null;\n    }\n    /**\n   * Remove from the cache due to expiry\n   */ release() {\n        if (this.canvas_) {\n            (0, $075f937d7366f1a2$export$e918ac6a1026a12a)(this.canvas_.getContext(\"2d\"));\n            (0, $2b0a118af78fb031$export$a166f0857c555517).push(this.canvas_);\n            this.canvas_ = null;\n        }\n        super.release();\n    }\n}\nvar $398e350e33050c07$export$2e2bcd8739ae039 = $398e350e33050c07$var$ReprojTile;\n\n\n/**\n * @module ol/TileRange\n */ /**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */ class $550e524b0d1b61d4$var$TileRange {\n    /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */ constructor(minX, maxX, minY, maxY){\n        /**\n     * @type {number}\n     */ this.minX = minX;\n        /**\n     * @type {number}\n     */ this.maxX = maxX;\n        /**\n     * @type {number}\n     */ this.minY = minY;\n        /**\n     * @type {number}\n     */ this.maxY = maxY;\n    }\n    /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */ contains(tileCoord) {\n        return this.containsXY(tileCoord[1], tileCoord[2]);\n    }\n    /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */ containsTileRange(tileRange) {\n        return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n    }\n    /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */ containsXY(x, y) {\n        return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n    }\n    /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */ equals(tileRange) {\n        return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n    }\n    /**\n   * @param {TileRange} tileRange Tile range.\n   */ extend(tileRange) {\n        if (tileRange.minX < this.minX) this.minX = tileRange.minX;\n        if (tileRange.maxX > this.maxX) this.maxX = tileRange.maxX;\n        if (tileRange.minY < this.minY) this.minY = tileRange.minY;\n        if (tileRange.maxY > this.maxY) this.maxY = tileRange.maxY;\n    }\n    /**\n   * @return {number} Height.\n   */ getHeight() {\n        return this.maxY - this.minY + 1;\n    }\n    /**\n   * @return {import(\"./size.js\").Size} Size.\n   */ getSize() {\n        return [\n            this.getWidth(),\n            this.getHeight()\n        ];\n    }\n    /**\n   * @return {number} Width.\n   */ getWidth() {\n        return this.maxX - this.minX + 1;\n    }\n    /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */ intersects(tileRange) {\n        return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;\n    }\n}\nfunction $550e524b0d1b61d4$export$958e3e1a02eac4b6(minX, maxX, minY, maxY, tileRange) {\n    if (tileRange !== undefined) {\n        tileRange.minX = minX;\n        tileRange.maxX = maxX;\n        tileRange.minY = minY;\n        tileRange.maxY = maxY;\n        return tileRange;\n    }\n    return new $550e524b0d1b61d4$var$TileRange(minX, maxX, minY, maxY);\n}\nvar $550e524b0d1b61d4$export$2e2bcd8739ae039 = $550e524b0d1b61d4$var$TileRange;\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n * @template {import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\n * @extends {CanvasLayerRenderer<LayerType>}\n */ class $02fffef185f4339b$var$CanvasTileLayerRenderer extends (0, $42152f52b26b6ca7$export$2e2bcd8739ae039) {\n    /**\n   * @param {LayerType} tileLayer Tile layer.\n   */ constructor(tileLayer){\n        super(tileLayer);\n        /**\n     * Rendered extent has changed since the previous `renderFrame()` call\n     * @type {boolean}\n     */ this.extentChanged = true;\n        /**\n     * @private\n     * @type {?import(\"../../extent.js\").Extent}\n     */ this.renderedExtent_ = null;\n        /**\n     * @protected\n     * @type {number}\n     */ this.renderedPixelRatio;\n        /**\n     * @protected\n     * @type {import(\"../../proj/Projection.js\").default}\n     */ this.renderedProjection = null;\n        /**\n     * @protected\n     * @type {number}\n     */ this.renderedRevision;\n        /**\n     * @protected\n     * @type {!Array<import(\"../../Tile.js\").default>}\n     */ this.renderedTiles = [];\n        /**\n     * @private\n     * @type {boolean}\n     */ this.newTiles_ = false;\n        /**\n     * @protected\n     * @type {import(\"../../extent.js\").Extent}\n     */ this.tmpExtent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        /**\n     * @private\n     * @type {import(\"../../TileRange.js\").default}\n     */ this.tmpTileRange_ = new (0, $550e524b0d1b61d4$export$2e2bcd8739ae039)(0, 0, 0, 0);\n    }\n    /**\n   * @protected\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */ isDrawableTile(tile) {\n        const tileLayer = this.getLayer();\n        const tileState = tile.getState();\n        const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n        return tileState == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED || tileState == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY || tileState == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR && !useInterimTilesOnError;\n    }\n    /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */ getTile(z, x, y, frameState) {\n        const pixelRatio = frameState.pixelRatio;\n        const projection = frameState.viewState.projection;\n        const tileLayer = this.getLayer();\n        const tileSource = tileLayer.getSource();\n        let tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n        if (tile.getState() == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR) {\n            if (tileLayer.getUseInterimTilesOnError() && tileLayer.getPreload() > 0) // Preloaded tiles for lower resolutions might have finished loading.\n            this.newTiles_ = true;\n        }\n        if (!this.isDrawableTile(tile)) tile = tile.getInterimTile();\n        return tile;\n    }\n    /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */ getData(pixel) {\n        const frameState = this.frameState;\n        if (!frameState) return null;\n        const layer = this.getLayer();\n        const coordinate = (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(frameState.pixelToCoordinateTransform, pixel.slice());\n        const layerExtent = layer.getExtent();\n        if (layerExtent) {\n            if (!(0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(layerExtent, coordinate)) return null;\n        }\n        const pixelRatio = frameState.pixelRatio;\n        const projection = frameState.viewState.projection;\n        const viewState = frameState.viewState;\n        const source = layer.getRenderSource();\n        const tileGrid = source.getTileGridForProjection(viewState.projection);\n        const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\n        for(let z = tileGrid.getZForResolution(viewState.resolution); z >= tileGrid.getMinZoom(); --z){\n            const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n            const tile = source.getTile(z, tileCoord[1], tileCoord[2], pixelRatio, projection);\n            if (!(tile instanceof (0, $cd3bc8d185522361$export$2e2bcd8739ae039) || tile instanceof (0, $398e350e33050c07$export$2e2bcd8739ae039)) || tile instanceof (0, $398e350e33050c07$export$2e2bcd8739ae039) && tile.getState() === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY) return null;\n            if (tile.getState() !== (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) continue;\n            const tileOrigin = tileGrid.getOrigin(z);\n            const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(tileGrid.getTileSize(z));\n            const tileResolution = tileGrid.getResolution(z);\n            const col = Math.floor(tilePixelRatio * ((coordinate[0] - tileOrigin[0]) / tileResolution - tileCoord[1] * tileSize[0]));\n            const row = Math.floor(tilePixelRatio * ((tileOrigin[1] - coordinate[1]) / tileResolution - tileCoord[2] * tileSize[1]));\n            const gutter = Math.round(tilePixelRatio * source.getGutterForProjection(viewState.projection));\n            return this.getImageData(tile.getImage(), col + gutter, row + gutter);\n        }\n        return null;\n    }\n    /**\n   * @param {Object<number, Object<string, import(\"../../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */ loadedTileCallback(tiles, zoom, tile) {\n        if (this.isDrawableTile(tile)) return super.loadedTileCallback(tiles, zoom, tile);\n        return false;\n    }\n    /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */ prepareFrame(frameState) {\n        return !!this.getLayer().getSource();\n    }\n    /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */ renderFrame(frameState, target) {\n        const layerState = frameState.layerStatesArray[frameState.layerIndex];\n        const viewState = frameState.viewState;\n        const projection = viewState.projection;\n        const viewResolution = viewState.resolution;\n        const viewCenter = viewState.center;\n        const rotation = viewState.rotation;\n        const pixelRatio = frameState.pixelRatio;\n        const tileLayer = this.getLayer();\n        const tileSource = tileLayer.getSource();\n        const sourceRevision = tileSource.getRevision();\n        const tileGrid = tileSource.getTileGridForProjection(projection);\n        const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n        const tileResolution = tileGrid.getResolution(z);\n        let extent = frameState.extent;\n        const resolution = frameState.viewState.resolution;\n        const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n        // desired dimensions of the canvas in pixels\n        const width = Math.round((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent) / resolution * pixelRatio);\n        const height = Math.round((0, $6da4c8ed3074c92b$export$c08559766941f856)(extent) / resolution * pixelRatio);\n        const layerExtent = layerState.extent && (0, $9c4744460e43e41b$export$494be3a3a25689ca)(layerState.extent, projection);\n        if (layerExtent) extent = (0, $6da4c8ed3074c92b$export$72209efa88586d42)(extent, (0, $9c4744460e43e41b$export$494be3a3a25689ca)(layerState.extent, projection));\n        const dx = tileResolution * width / 2 / tilePixelRatio;\n        const dy = tileResolution * height / 2 / tilePixelRatio;\n        const canvasExtent = [\n            viewCenter[0] - dx,\n            viewCenter[1] - dy,\n            viewCenter[0] + dx,\n            viewCenter[1] + dy\n        ];\n        const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n        /**\n     * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\n     */ const tilesToDrawByZ = {};\n        tilesToDrawByZ[z] = {};\n        const findLoadedTiles = this.createLoadedTileFinder(tileSource, projection, tilesToDrawByZ);\n        const tmpExtent = this.tmpExtent;\n        const tmpTileRange = this.tmpTileRange_;\n        this.newTiles_ = false;\n        const viewport = rotation ? (0, $6da4c8ed3074c92b$export$4b7a6fb4002cd6ac)(viewState.center, resolution, rotation, frameState.size) : undefined;\n        for(let x = tileRange.minX; x <= tileRange.maxX; ++x)for(let y = tileRange.minY; y <= tileRange.maxY; ++y){\n            if (rotation && !tileGrid.tileCoordIntersectsViewport([\n                z,\n                x,\n                y\n            ], viewport)) continue;\n            const tile = this.getTile(z, x, y, frameState);\n            if (this.isDrawableTile(tile)) {\n                const uid = (0, $6c5e11070e371322$export$5e82334337e0f204)(this);\n                if (tile.getState() == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED) {\n                    tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n                    let inTransition = tile.inTransition(uid);\n                    if (inTransition && layerState.opacity !== 1) {\n                        // Skipping transition when layer is not fully opaque avoids visual artifacts.\n                        tile.endTransition(uid);\n                        inTransition = false;\n                    }\n                    if (!this.newTiles_ && (inTransition || !this.renderedTiles.includes(tile))) this.newTiles_ = true;\n                }\n                if (tile.getAlpha(uid, frameState.time) === 1) continue;\n            }\n            const childTileRange = tileGrid.getTileCoordChildTileRange(tile.tileCoord, tmpTileRange, tmpExtent);\n            let covered = false;\n            if (childTileRange) covered = findLoadedTiles(z + 1, childTileRange);\n            if (!covered) tileGrid.forEachTileCoordParentTileRange(tile.tileCoord, findLoadedTiles, tmpTileRange, tmpExtent);\n        }\n        const canvasScale = tileResolution / viewResolution * pixelRatio / tilePixelRatio;\n        // set forward and inverse pixel transforms\n        (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(this.pixelTransform, frameState.size[0] / 2, frameState.size[1] / 2, 1 / pixelRatio, 1 / pixelRatio, rotation, -width / 2, -height / 2);\n        const canvasTransform = (0, $e22e7611e69f42a9$export$f84e8e69fd4488a5)(this.pixelTransform);\n        this.useContainer(target, canvasTransform, this.getBackground(frameState));\n        const context = this.context;\n        const canvas = context.canvas;\n        (0, $e22e7611e69f42a9$export$bd70ea2a93c0fa4)(this.inversePixelTransform, this.pixelTransform);\n        // set scale transform for calculating tile positions on the canvas\n        (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(this.tempTransform, width / 2, height / 2, canvasScale, canvasScale, 0, -width / 2, -height / 2);\n        if (canvas.width != width || canvas.height != height) {\n            canvas.width = width;\n            canvas.height = height;\n        } else if (!this.containerReused) context.clearRect(0, 0, width, height);\n        if (layerExtent) this.clipUnrotated(context, frameState, layerExtent);\n        if (!tileSource.getInterpolate()) context.imageSmoothingEnabled = false;\n        this.preRender(context, frameState);\n        this.renderedTiles.length = 0;\n        /** @type {Array<number>} */ let zs = Object.keys(tilesToDrawByZ).map(Number);\n        zs.sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n        let clips, clipZs, currentClip;\n        if (layerState.opacity === 1 && (!this.containerReused || tileSource.getOpaque(frameState.viewState.projection))) zs = zs.reverse();\n        else {\n            clips = [];\n            clipZs = [];\n        }\n        for(let i = zs.length - 1; i >= 0; --i){\n            const currentZ = zs[i];\n            const currentTilePixelSize = tileSource.getTilePixelSize(currentZ, pixelRatio, projection);\n            const currentResolution = tileGrid.getResolution(currentZ);\n            const currentScale = currentResolution / tileResolution;\n            const dx = currentTilePixelSize[0] * currentScale * canvasScale;\n            const dy = currentTilePixelSize[1] * currentScale * canvasScale;\n            const originTileCoord = tileGrid.getTileCoordForCoordAndZ((0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(canvasExtent), currentZ);\n            const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n            const origin = (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(this.tempTransform, [\n                tilePixelRatio * (originTileExtent[0] - canvasExtent[0]) / tileResolution,\n                tilePixelRatio * (canvasExtent[3] - originTileExtent[3]) / tileResolution\n            ]);\n            const tileGutter = tilePixelRatio * tileSource.getGutterForProjection(projection);\n            const tilesToDraw = tilesToDrawByZ[currentZ];\n            for(const tileCoordKey in tilesToDraw){\n                const tile = /** @type {import(\"../../ImageTile.js\").default} */ tilesToDraw[tileCoordKey];\n                const tileCoord = tile.tileCoord;\n                // Calculate integer positions and sizes so that tiles align\n                const xIndex = originTileCoord[1] - tileCoord[1];\n                const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\n                const yIndex = originTileCoord[2] - tileCoord[2];\n                const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\n                const x = Math.round(origin[0] - xIndex * dx);\n                const y = Math.round(origin[1] - yIndex * dy);\n                const w = nextX - x;\n                const h = nextY - y;\n                const transition = z === currentZ;\n                const inTransition = transition && tile.getAlpha((0, $6c5e11070e371322$export$5e82334337e0f204)(this), frameState.time) !== 1;\n                let contextSaved = false;\n                if (!inTransition) {\n                    if (clips) {\n                        // Clip mask for regions in this tile that already filled by a higher z tile\n                        currentClip = [\n                            x,\n                            y,\n                            x + w,\n                            y,\n                            x + w,\n                            y + h,\n                            x,\n                            y + h\n                        ];\n                        for(let i = 0, ii = clips.length; i < ii; ++i)if (z !== currentZ && currentZ < clipZs[i]) {\n                            const clip = clips[i];\n                            if ((0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)([\n                                x,\n                                y,\n                                x + w,\n                                y + h\n                            ], [\n                                clip[0],\n                                clip[3],\n                                clip[4],\n                                clip[7]\n                            ])) {\n                                if (!contextSaved) {\n                                    context.save();\n                                    contextSaved = true;\n                                }\n                                context.beginPath();\n                                // counter-clockwise (outer ring) for current tile\n                                context.moveTo(currentClip[0], currentClip[1]);\n                                context.lineTo(currentClip[2], currentClip[3]);\n                                context.lineTo(currentClip[4], currentClip[5]);\n                                context.lineTo(currentClip[6], currentClip[7]);\n                                // clockwise (inner ring) for higher z tile\n                                context.moveTo(clip[6], clip[7]);\n                                context.lineTo(clip[4], clip[5]);\n                                context.lineTo(clip[2], clip[3]);\n                                context.lineTo(clip[0], clip[1]);\n                                context.clip();\n                            }\n                        }\n                        clips.push(currentClip);\n                        clipZs.push(currentZ);\n                    } else context.clearRect(x, y, w, h);\n                }\n                this.drawTileImage(tile, frameState, x, y, w, h, tileGutter, transition);\n                if (clips && !inTransition) {\n                    if (contextSaved) context.restore();\n                    this.renderedTiles.unshift(tile);\n                } else this.renderedTiles.push(tile);\n                this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n            }\n        }\n        this.renderedRevision = sourceRevision;\n        this.renderedResolution = tileResolution;\n        this.extentChanged = !this.renderedExtent_ || !(0, $6da4c8ed3074c92b$export$e9bab7fafb253603)(this.renderedExtent_, canvasExtent);\n        this.renderedExtent_ = canvasExtent;\n        this.renderedPixelRatio = pixelRatio;\n        this.renderedProjection = projection;\n        this.manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, z, tileLayer.getPreload());\n        this.scheduleExpireCache(frameState, tileSource);\n        this.postRender(context, frameState);\n        if (layerState.extent) context.restore();\n        context.imageSmoothingEnabled = true;\n        if (canvasTransform !== canvas.style.transform) canvas.style.transform = canvasTransform;\n        return this.container;\n    }\n    /**\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   */ drawTileImage(tile, frameState, x, y, w, h, gutter, transition) {\n        const image = this.getTileImage(tile);\n        if (!image) return;\n        const uid = (0, $6c5e11070e371322$export$5e82334337e0f204)(this);\n        const layerState = frameState.layerStatesArray[frameState.layerIndex];\n        const alpha = layerState.opacity * (transition ? tile.getAlpha(uid, frameState.time) : 1);\n        const alphaChanged = alpha !== this.context.globalAlpha;\n        if (alphaChanged) {\n            this.context.save();\n            this.context.globalAlpha = alpha;\n        }\n        this.context.drawImage(image, gutter, gutter, image.width - 2 * gutter, image.height - 2 * gutter, x, y, w, h);\n        if (alphaChanged) this.context.restore();\n        if (alpha !== layerState.opacity) frameState.animate = true;\n        else if (transition) tile.endTransition(uid);\n    }\n    /**\n   * @return {HTMLCanvasElement} Image\n   */ getImage() {\n        const context = this.context;\n        return context ? context.canvas : null;\n    }\n    /**\n   * Get the image from a tile.\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @protected\n   */ getTileImage(tile) {\n        return tile.getImage();\n    }\n    /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @protected\n   */ scheduleExpireCache(frameState, tileSource) {\n        if (tileSource.canExpireCache()) {\n            /**\n       * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n       * @param {import(\"../../Map.js\").default} map Map.\n       * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n       */ const postRenderFunction = (function(tileSource, map, frameState) {\n                const tileSourceKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(tileSource);\n                if (tileSourceKey in frameState.usedTiles) tileSource.expireCache(frameState.viewState.projection, frameState.usedTiles[tileSourceKey]);\n            }).bind(null, tileSource);\n            frameState.postRenderFunctions.push(/** @type {import(\"../../Map.js\").PostRenderFunction} */ postRenderFunction);\n        }\n    }\n    /**\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import('../../Tile.js').default} tile Tile.\n   * @protected\n   */ updateUsedTiles(usedTiles, tileSource, tile) {\n        // FIXME should we use tilesToDrawByZ instead?\n        const tileSourceKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(tileSource);\n        if (!(tileSourceKey in usedTiles)) usedTiles[tileSourceKey] = {};\n        usedTiles[tileSourceKey][tile.getKey()] = true;\n    }\n    /**\n   * Manage tile pyramid.\n   * This function performs a number of functions related to the tiles at the\n   * current zoom and lower zoom levels:\n   * - registers idle tiles in frameState.wantedTiles so that they are not\n   *   discarded by the tile queue\n   * - enqueues missing tiles\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {number} currentZ Current Z.\n   * @param {number} preload Load low resolution tiles up to `preload` levels.\n   * @param {function(import(\"../../Tile.js\").default):void} [tileCallback] Tile callback.\n   * @protected\n   */ manageTilePyramid(frameState, tileSource, tileGrid, pixelRatio, projection, extent, currentZ, preload, tileCallback) {\n        const tileSourceKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(tileSource);\n        if (!(tileSourceKey in frameState.wantedTiles)) frameState.wantedTiles[tileSourceKey] = {};\n        const wantedTiles = frameState.wantedTiles[tileSourceKey];\n        const tileQueue = frameState.tileQueue;\n        const minZoom = tileGrid.getMinZoom();\n        const rotation = frameState.viewState.rotation;\n        const viewport = rotation ? (0, $6da4c8ed3074c92b$export$4b7a6fb4002cd6ac)(frameState.viewState.center, frameState.viewState.resolution, rotation, frameState.size) : undefined;\n        let tileCount = 0;\n        let tile, tileRange, tileResolution, x, y, z;\n        for(z = minZoom; z <= currentZ; ++z){\n            tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\n            tileResolution = tileGrid.getResolution(z);\n            for(x = tileRange.minX; x <= tileRange.maxX; ++x)for(y = tileRange.minY; y <= tileRange.maxY; ++y){\n                if (rotation && !tileGrid.tileCoordIntersectsViewport([\n                    z,\n                    x,\n                    y\n                ], viewport)) continue;\n                if (currentZ - z <= preload) {\n                    ++tileCount;\n                    tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n                    if (tile.getState() == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) {\n                        wantedTiles[tile.getKey()] = true;\n                        if (!tileQueue.isKeyQueued(tile.getKey())) tileQueue.enqueue([\n                            tile,\n                            tileSourceKey,\n                            tileGrid.getTileCoordCenter(tile.tileCoord),\n                            tileResolution\n                        ]);\n                    }\n                    if (tileCallback !== undefined) tileCallback(tile);\n                } else tileSource.useTile(z, x, y, projection);\n            }\n        }\n        tileSource.updateCacheSize(tileCount, projection);\n    }\n}\nvar $02fffef185f4339b$export$2e2bcd8739ae039 = $02fffef185f4339b$var$CanvasTileLayerRenderer;\n\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\n * @api\n */ class $32e67a4d3559554a$var$TileLayer extends (0, $93be2de6a052f587$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [options] Tile layer options.\n   */ constructor(options){\n        super(options);\n    }\n    createRenderer() {\n        return new (0, $02fffef185f4339b$export$2e2bcd8739ae039)(this);\n    }\n}\nvar $32e67a4d3559554a$export$2e2bcd8739ae039 = $32e67a4d3559554a$var$TileLayer;\n\n\n/**\n * @module ol/Overlay\n */ \n\n\n\n\n\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */ /**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */ /**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */ /**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */ /**\n * @enum {string}\n * @protected\n */ const $c80d3ed2a84f41ed$var$Property = {\n    ELEMENT: \"element\",\n    MAP: \"map\",\n    OFFSET: \"offset\",\n    POSITION: \"position\",\n    POSITIONING: \"positioning\"\n};\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */ /***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */ /**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay.js';\n *\n *     // ...\n *     const popup = new Overlay({\n *       element: document.getElementById('popup'),\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */ class $c80d3ed2a84f41ed$var$Overlay extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options Overlay options.\n   */ constructor(options){\n        super();\n        /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {OverlayOnSignature<void>}\n     */ this.un;\n        /**\n     * @protected\n     * @type {Options}\n     */ this.options = options;\n        /**\n     * @protected\n     * @type {number|string|undefined}\n     */ this.id = options.id;\n        /**\n     * @protected\n     * @type {boolean}\n     */ this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n        /**\n     * @protected\n     * @type {boolean}\n     */ this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n        /**\n     * @protected\n     * @type {HTMLElement}\n     */ this.element = document.createElement(\"div\");\n        this.element.className = options.className !== undefined ? options.className : \"ol-overlay-container \" + (0, $ce07df6d5d4656f1$export$99b49471b0394319);\n        this.element.style.position = \"absolute\";\n        this.element.style.pointerEvents = \"auto\";\n        /**\n     * @protected\n     * @type {PanIntoViewOptions|undefined}\n     */ this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;\n        /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */ this.rendered = {\n            transform_: \"\",\n            visible: true\n        };\n        /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */ this.mapPostrenderListenerKey = null;\n        this.addChangeListener($c80d3ed2a84f41ed$var$Property.ELEMENT, this.handleElementChanged);\n        this.addChangeListener($c80d3ed2a84f41ed$var$Property.MAP, this.handleMapChanged);\n        this.addChangeListener($c80d3ed2a84f41ed$var$Property.OFFSET, this.handleOffsetChanged);\n        this.addChangeListener($c80d3ed2a84f41ed$var$Property.POSITION, this.handlePositionChanged);\n        this.addChangeListener($c80d3ed2a84f41ed$var$Property.POSITIONING, this.handlePositioningChanged);\n        if (options.element !== undefined) this.setElement(options.element);\n        this.setOffset(options.offset !== undefined ? options.offset : [\n            0,\n            0\n        ]);\n        this.setPositioning(options.positioning || \"top-left\");\n        if (options.position !== undefined) this.setPosition(options.position);\n    }\n    /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */ getElement() {\n        return /** @type {HTMLElement|undefined} */ this.get($c80d3ed2a84f41ed$var$Property.ELEMENT);\n    }\n    /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */ getId() {\n        return this.id;\n    }\n    /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./Map.js\").default|null} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */ getMap() {\n        return /** @type {import(\"./Map.js\").default|null} */ this.get($c80d3ed2a84f41ed$var$Property.MAP) || null;\n    }\n    /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */ getOffset() {\n        return /** @type {Array<number>} */ this.get($c80d3ed2a84f41ed$var$Property.OFFSET);\n    }\n    /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */ getPosition() {\n        return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ this.get($c80d3ed2a84f41ed$var$Property.POSITION);\n    }\n    /**\n   * Get the current positioning of this overlay.\n   * @return {Positioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */ getPositioning() {\n        return /** @type {Positioning} */ this.get($c80d3ed2a84f41ed$var$Property.POSITIONING);\n    }\n    /**\n   * @protected\n   */ handleElementChanged() {\n        (0, $075f937d7366f1a2$export$1e1c9bf5a4ffe0d1)(this.element);\n        const element = this.getElement();\n        if (element) this.element.appendChild(element);\n    }\n    /**\n   * @protected\n   */ handleMapChanged() {\n        if (this.mapPostrenderListenerKey) {\n            (0, $075f937d7366f1a2$export$1d0aa160432dfea5)(this.element);\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.mapPostrenderListenerKey);\n            this.mapPostrenderListenerKey = null;\n        }\n        const map = this.getMap();\n        if (map) {\n            this.mapPostrenderListenerKey = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(map, (0, $e4ad75f913b6f7ff$export$2e2bcd8739ae039).POSTRENDER, this.render, this);\n            this.updatePixelPosition();\n            const container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n            if (this.insertFirst) container.insertBefore(this.element, container.childNodes[0] || null);\n            else container.appendChild(this.element);\n            this.performAutoPan();\n        }\n    }\n    /**\n   * @protected\n   */ render() {\n        this.updatePixelPosition();\n    }\n    /**\n   * @protected\n   */ handleOffsetChanged() {\n        this.updatePixelPosition();\n    }\n    /**\n   * @protected\n   */ handlePositionChanged() {\n        this.updatePixelPosition();\n        this.performAutoPan();\n    }\n    /**\n   * @protected\n   */ handlePositioningChanged() {\n        this.updatePixelPosition();\n    }\n    /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */ setElement(element) {\n        this.set($c80d3ed2a84f41ed$var$Property.ELEMENT, element);\n    }\n    /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./Map.js\").default|null} map The map that the\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\n   * @observable\n   * @api\n   */ setMap(map) {\n        this.set($c80d3ed2a84f41ed$var$Property.MAP, map);\n    }\n    /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */ setOffset(offset) {\n        this.set($c80d3ed2a84f41ed$var$Property.OFFSET, offset);\n    }\n    /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */ setPosition(position) {\n        this.set($c80d3ed2a84f41ed$var$Property.POSITION, position);\n    }\n    /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */ performAutoPan() {\n        if (this.autoPan) this.panIntoView(this.autoPan);\n    }\n    /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action\n   * @api\n   */ panIntoView(panIntoViewOptions) {\n        const map = this.getMap();\n        if (!map || !map.getTargetElement() || !this.get($c80d3ed2a84f41ed$var$Property.POSITION)) return;\n        const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n        const element = this.getElement();\n        const overlayRect = this.getRect(element, [\n            (0, $075f937d7366f1a2$export$e823f88e4111159a)(element),\n            (0, $075f937d7366f1a2$export$fc5b8aac72846d1e)(element)\n        ]);\n        panIntoViewOptions = panIntoViewOptions || {};\n        const myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n        if (!(0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(mapRect, overlayRect)) {\n            // the overlay is not completely inside the viewport, so pan the map\n            const offsetLeft = overlayRect[0] - mapRect[0];\n            const offsetRight = mapRect[2] - overlayRect[2];\n            const offsetTop = overlayRect[1] - mapRect[1];\n            const offsetBottom = mapRect[3] - overlayRect[3];\n            const delta = [\n                0,\n                0\n            ];\n            if (offsetLeft < 0) // move map to the left\n            delta[0] = offsetLeft - myMargin;\n            else if (offsetRight < 0) // move map to the right\n            delta[0] = Math.abs(offsetRight) + myMargin;\n            if (offsetTop < 0) // move map up\n            delta[1] = offsetTop - myMargin;\n            else if (offsetBottom < 0) // move map down\n            delta[1] = Math.abs(offsetBottom) + myMargin;\n            if (delta[0] !== 0 || delta[1] !== 0) {\n                const center = /** @type {import(\"./coordinate.js\").Coordinate} */ map.getView().getCenterInternal();\n                const centerPx = map.getPixelFromCoordinateInternal(center);\n                if (!centerPx) return;\n                const newCenterPx = [\n                    centerPx[0] + delta[0],\n                    centerPx[1] + delta[1]\n                ];\n                const panOptions = panIntoViewOptions.animation || {};\n                map.getView().animateInternal({\n                    center: map.getCoordinateFromPixelInternal(newCenterPx),\n                    duration: panOptions.duration,\n                    easing: panOptions.easing\n                });\n            }\n        }\n    }\n    /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */ getRect(element, size) {\n        const box = element.getBoundingClientRect();\n        const offsetX = box.left + window.pageXOffset;\n        const offsetY = box.top + window.pageYOffset;\n        return [\n            offsetX,\n            offsetY,\n            offsetX + size[0],\n            offsetY + size[1]\n        ];\n    }\n    /**\n   * Set the positioning for this overlay.\n   * @param {Positioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */ setPositioning(positioning) {\n        this.set($c80d3ed2a84f41ed$var$Property.POSITIONING, positioning);\n    }\n    /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */ setVisible(visible) {\n        if (this.rendered.visible !== visible) {\n            this.element.style.display = visible ? \"\" : \"none\";\n            this.rendered.visible = visible;\n        }\n    }\n    /**\n   * Update pixel position.\n   * @protected\n   */ updatePixelPosition() {\n        const map = this.getMap();\n        const position = this.getPosition();\n        if (!map || !map.isRendered() || !position) {\n            this.setVisible(false);\n            return;\n        }\n        const pixel = map.getPixelFromCoordinate(position);\n        const mapSize = map.getSize();\n        this.updateRenderedPosition(pixel, mapSize);\n    }\n    /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */ updateRenderedPosition(pixel, mapSize) {\n        const style = this.element.style;\n        const offset = this.getOffset();\n        const positioning = this.getPositioning();\n        this.setVisible(true);\n        const x = Math.round(pixel[0] + offset[0]) + \"px\";\n        const y = Math.round(pixel[1] + offset[1]) + \"px\";\n        let posX = \"0%\";\n        let posY = \"0%\";\n        if (positioning == \"bottom-right\" || positioning == \"center-right\" || positioning == \"top-right\") posX = \"-100%\";\n        else if (positioning == \"bottom-center\" || positioning == \"center-center\" || positioning == \"top-center\") posX = \"-50%\";\n        if (positioning == \"bottom-left\" || positioning == \"bottom-center\" || positioning == \"bottom-right\") posY = \"-100%\";\n        else if (positioning == \"center-left\" || positioning == \"center-center\" || positioning == \"center-right\") posY = \"-50%\";\n        const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;\n        if (this.rendered.transform_ != transform) {\n            this.rendered.transform_ = transform;\n            style.transform = transform;\n        }\n    }\n    /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */ getOptions() {\n        return this.options;\n    }\n}\nvar $c80d3ed2a84f41ed$export$2e2bcd8739ae039 = $c80d3ed2a84f41ed$var$Overlay;\n\n\n/**\n * @module ol/source/WMTS\n */ /**\n * @module ol/source/TileImage\n */ \n\n\n/**\n * @module ol/TileCache\n */ /**\n * @module ol/structs/LRUCache\n */ \n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */ /**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */ class $859b1614288c6316$var$LRUCache {\n    /**\n   * @param {number} [highWaterMark] High water mark.\n   */ constructor(highWaterMark){\n        /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */ this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n        /**\n     * @private\n     * @type {number}\n     */ this.count_ = 0;\n        /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */ this.entries_ = {};\n        /**\n     * @private\n     * @type {?Entry}\n     */ this.oldest_ = null;\n        /**\n     * @private\n     * @type {?Entry}\n     */ this.newest_ = null;\n    }\n    /**\n   * @return {boolean} Can expire cache.\n   */ canExpireCache() {\n        return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n    }\n    /**\n   * Expire the cache.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */ expireCache(keep) {\n        while(this.canExpireCache())this.pop();\n    }\n    /**\n   * FIXME empty description for jsdoc\n   */ clear() {\n        this.count_ = 0;\n        this.entries_ = {};\n        this.oldest_ = null;\n        this.newest_ = null;\n    }\n    /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */ containsKey(key) {\n        return this.entries_.hasOwnProperty(key);\n    }\n    /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */ forEach(f) {\n        let entry = this.oldest_;\n        while(entry){\n            f(entry.value_, entry.key_, this);\n            entry = entry.newer;\n        }\n    }\n    /**\n   * @param {string} key Key.\n   * @param {*} [options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */ get(key, options) {\n        const entry = this.entries_[key];\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(entry !== undefined, \"Tried to get a value for a key that does not exist in the cache\");\n        if (entry === this.newest_) return entry.value_;\n        if (entry === this.oldest_) {\n            this.oldest_ = /** @type {Entry} */ this.oldest_.newer;\n            this.oldest_.older = null;\n        } else {\n            entry.newer.older = entry.older;\n            entry.older.newer = entry.newer;\n        }\n        entry.newer = null;\n        entry.older = this.newest_;\n        this.newest_.newer = entry;\n        this.newest_ = entry;\n        return entry.value_;\n    }\n    /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */ remove(key) {\n        const entry = this.entries_[key];\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(entry !== undefined, \"Tried to get a value for a key that does not exist in the cache\");\n        if (entry === this.newest_) {\n            this.newest_ = /** @type {Entry} */ entry.older;\n            if (this.newest_) this.newest_.newer = null;\n        } else if (entry === this.oldest_) {\n            this.oldest_ = /** @type {Entry} */ entry.newer;\n            if (this.oldest_) this.oldest_.older = null;\n        } else {\n            entry.newer.older = entry.older;\n            entry.older.newer = entry.newer;\n        }\n        delete this.entries_[key];\n        --this.count_;\n        return entry.value_;\n    }\n    /**\n   * @return {number} Count.\n   */ getCount() {\n        return this.count_;\n    }\n    /**\n   * @return {Array<string>} Keys.\n   */ getKeys() {\n        const keys = new Array(this.count_);\n        let i = 0;\n        let entry;\n        for(entry = this.newest_; entry; entry = entry.older)keys[i++] = entry.key_;\n        return keys;\n    }\n    /**\n   * @return {Array<T>} Values.\n   */ getValues() {\n        const values = new Array(this.count_);\n        let i = 0;\n        let entry;\n        for(entry = this.newest_; entry; entry = entry.older)values[i++] = entry.value_;\n        return values;\n    }\n    /**\n   * @return {T} Last value.\n   */ peekLast() {\n        return this.oldest_.value_;\n    }\n    /**\n   * @return {string} Last key.\n   */ peekLastKey() {\n        return this.oldest_.key_;\n    }\n    /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */ peekFirstKey() {\n        return this.newest_.key_;\n    }\n    /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T} Value.\n   */ peek(key) {\n        if (!this.containsKey(key)) return undefined;\n        return this.entries_[key].value_;\n    }\n    /**\n   * @return {T} value Value.\n   */ pop() {\n        const entry = this.oldest_;\n        delete this.entries_[entry.key_];\n        if (entry.newer) entry.newer.older = null;\n        this.oldest_ = /** @type {Entry} */ entry.newer;\n        if (!this.oldest_) this.newest_ = null;\n        --this.count_;\n        return entry.value_;\n    }\n    /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */ replace(key, value) {\n        this.get(key); // update `newest_`\n        this.entries_[key].value_ = value;\n    }\n    /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */ set(key, value) {\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!(key in this.entries_), \"Tried to set a value for a key that is used already\");\n        const entry = {\n            key_: key,\n            newer: null,\n            older: this.newest_,\n            value_: value\n        };\n        if (!this.newest_) this.oldest_ = entry;\n        else this.newest_.newer = entry;\n        this.newest_ = entry;\n        this.entries_[key] = entry;\n        ++this.count_;\n    }\n    /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */ setSize(size) {\n        this.highWaterMark = size;\n    }\n}\nvar $859b1614288c6316$export$2e2bcd8739ae039 = $859b1614288c6316$var$LRUCache;\n\n\n/**\n * @module ol/tilecoord\n */ /**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */ /**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */ function $bf2a04496fadabc6$export$958e3e1a02eac4b6(z, x, y, tileCoord) {\n    if (tileCoord !== undefined) {\n        tileCoord[0] = z;\n        tileCoord[1] = x;\n        tileCoord[2] = y;\n        return tileCoord;\n    }\n    return [\n        z,\n        x,\n        y\n    ];\n}\nfunction $bf2a04496fadabc6$export$92d0df0f1d25c63c(z, x, y) {\n    return z + \"/\" + x + \"/\" + y;\n}\nfunction $bf2a04496fadabc6$export$a47fb462a08de82f(tileCoord) {\n    return $bf2a04496fadabc6$export$92d0df0f1d25c63c(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\nfunction $bf2a04496fadabc6$export$7f760414a8e3d2b5(tileKey) {\n    const [z, x, y] = tileKey.substring(tileKey.lastIndexOf(\"/\") + 1, tileKey.length).split(\",\").map(Number);\n    return $bf2a04496fadabc6$export$92d0df0f1d25c63c(z, x, y);\n}\nfunction $bf2a04496fadabc6$export$a807b7874eb66454(key) {\n    return key.split(\"/\").map(Number);\n}\nfunction $bf2a04496fadabc6$export$d6af199866bfb566(tileCoord) {\n    return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\nfunction $bf2a04496fadabc6$export$60bedf8e3e3c3dbe(tileCoord, tileGrid) {\n    const z = tileCoord[0];\n    const x = tileCoord[1];\n    const y = tileCoord[2];\n    if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) return false;\n    const tileRange = tileGrid.getFullTileRange(z);\n    if (!tileRange) return true;\n    return tileRange.containsXY(x, y);\n}\n\n\nclass $a12e09565a34db59$var$TileCache extends (0, $859b1614288c6316$export$2e2bcd8739ae039) {\n    clear() {\n        while(this.getCount() > 0)this.pop().release();\n        super.clear();\n    }\n    /**\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */ expireCache(usedTiles) {\n        while(this.canExpireCache()){\n            const tile = this.peekLast();\n            if (tile.getKey() in usedTiles) break;\n            else this.pop().release();\n        }\n    }\n    /**\n   * Prune all tiles from the cache that don't have the same z as the newest tile.\n   */ pruneExceptNewestZ() {\n        if (this.getCount() === 0) return;\n        const key = this.peekFirstKey();\n        const tileCoord = (0, $bf2a04496fadabc6$export$a807b7874eb66454)(key);\n        const z = tileCoord[0];\n        this.forEach((tile)=>{\n            if (tile.tileCoord[0] !== z) {\n                this.remove((0, $bf2a04496fadabc6$export$a47fb462a08de82f)(tile.tileCoord));\n                tile.release();\n            }\n        });\n    }\n}\nvar $a12e09565a34db59$export$2e2bcd8739ae039 = $a12e09565a34db59$var$TileCache;\n\n\n\n/**\n * @module ol/source/UrlTile\n */ /**\n * @module ol/source/TileEventType\n */ /**\n * @enum {string}\n */ var $7e3d7a0f8b272861$export$2e2bcd8739ae039 /**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */  = {\n    /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */ TILELOADSTART: \"tileloadstart\",\n    /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */ TILELOADEND: \"tileloadend\",\n    /**\n   * Triggered if tile loading results in an error. Note that this is not the\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\n   * for details.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */ TILELOADERROR: \"tileloaderror\"\n};\n\n\n/**\n * @module ol/source/Tile\n */ \n/**\n * @module ol/source/Source\n */ \n\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */ /**\n * A function that takes a {@link import(\"../View.js\").ViewStateLayerStateExtent} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../View.js\").ViewStateLayerStateExtent): (string|Array<string>)} Attribution\n */ /**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */ /**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */ /**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */ class $ed6dc99f268f3882$var$Source extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options Source options.\n   */ constructor(options){\n        super();\n        /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */ this.projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.projection);\n        /**\n     * @private\n     * @type {?Attribution}\n     */ this.attributions_ = $ed6dc99f268f3882$var$adaptAttributions(options.attributions);\n        /**\n     * @private\n     * @type {boolean}\n     */ this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ? options.attributionsCollapsible : true;\n        /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */ this.loading = false;\n        /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */ this.state_ = options.state !== undefined ? options.state : \"ready\";\n        /**\n     * @private\n     * @type {boolean}\n     */ this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.interpolate_ = !!options.interpolate;\n        /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */ this.viewResolver = null;\n        /**\n     * @protected\n     * @type {function(Error):void}\n     */ this.viewRejector = null;\n        const self = this;\n        /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */ this.viewPromise_ = new Promise(function(resolve, reject) {\n            self.viewResolver = resolve;\n            self.viewRejector = reject;\n        });\n    }\n    /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */ getAttributions() {\n        return this.attributions_;\n    }\n    /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */ getAttributionsCollapsible() {\n        return this.attributionsCollapsible_;\n    }\n    /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\n   * @api\n   */ getProjection() {\n        return this.projection;\n    }\n    /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   */ getResolutions(projection) {\n        return null;\n    }\n    /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */ getView() {\n        return this.viewPromise_;\n    }\n    /**\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n   * @return {import(\"./Source.js\").State} State.\n   * @api\n   */ getState() {\n        return this.state_;\n    }\n    /**\n   * @return {boolean|undefined} Wrap X.\n   */ getWrapX() {\n        return this.wrapX_;\n    }\n    /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */ getInterpolate() {\n        return this.interpolate_;\n    }\n    /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */ refresh() {\n        this.changed();\n    }\n    /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */ setAttributions(attributions) {\n        this.attributions_ = $ed6dc99f268f3882$var$adaptAttributions(attributions);\n        this.changed();\n    }\n    /**\n   * Set the state of the source.\n   * @param {import(\"./Source.js\").State} state State.\n   */ setState(state) {\n        this.state_ = state;\n        this.changed();\n    }\n}\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */ function $ed6dc99f268f3882$var$adaptAttributions(attributionLike) {\n    if (!attributionLike) return null;\n    if (Array.isArray(attributionLike)) return function(frameState) {\n        return attributionLike;\n    };\n    if (typeof attributionLike === \"function\") return attributionLike;\n    return function(frameState) {\n        return [\n            attributionLike\n        ];\n    };\n}\nvar $ed6dc99f268f3882$export$2e2bcd8739ae039 = $ed6dc99f268f3882$var$Source;\n\n\n\n\n\n\n\n\n/**\n * @module ol/tilegrid\n */ /**\n * @module ol/tilegrid/TileGrid\n */ \n\n\n\n\n\n\n\n\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */ const $bb602a307ef98bb5$var$tmpTileCoord = [\n    0,\n    0,\n    0\n];\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */ const $bb602a307ef98bb5$var$DECIMALS = 5;\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */ /**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */ class $bb602a307ef98bb5$var$TileGrid {\n    /**\n   * @param {Options} options Tile grid options.\n   */ constructor(options){\n        /**\n     * @protected\n     * @type {number}\n     */ this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n        /**\n     * @private\n     * @type {!Array<number>}\n     */ this.resolutions_ = options.resolutions;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)((0, $b998d41b678ed5d1$export$efa610630f9e181)(this.resolutions_, function(a, b) {\n            return b - a;\n        }, true), \"`resolutions` must be sorted in descending order\");\n        // check if we've got a consistent zoom factor and origin\n        let zoomFactor;\n        if (!options.origins) for(let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i){\n            if (!zoomFactor) zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n            else if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n                zoomFactor = undefined;\n                break;\n            }\n        }\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.zoomFactor_ = zoomFactor;\n        /**\n     * @protected\n     * @type {number}\n     */ this.maxZoom = this.resolutions_.length - 1;\n        /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */ this.origin_ = options.origin !== undefined ? options.origin : null;\n        /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */ this.origins_ = null;\n        if (options.origins !== undefined) {\n            this.origins_ = options.origins;\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(this.origins_.length == this.resolutions_.length, \"Number of `origins` and `resolutions` must be equal\");\n        }\n        const extent = options.extent;\n        if (extent !== undefined && !this.origin_ && !this.origins_) this.origin_ = (0, $6da4c8ed3074c92b$export$cb1538b07e6964ff)(extent);\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, \"Either `origin` or `origins` must be configured, never both\");\n        /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */ this.tileSizes_ = null;\n        if (options.tileSizes !== undefined) {\n            this.tileSizes_ = options.tileSizes;\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(this.tileSizes_.length == this.resolutions_.length, \"Number of `tileSizes` and `resolutions` must be equal\");\n        }\n        /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */ this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? (0, $57cd8651d88957a0$export$6b8cb5cd370bd90c) : null;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, \"Either `tileSize` or `tileSizes` must be configured, never both\");\n        /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.extent_ = extent !== undefined ? extent : null;\n        /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */ this.fullTileRanges_ = null;\n        /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */ this.tmpSize_ = [\n            0,\n            0\n        ];\n        /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */ this.tmpExtent_ = [\n            0,\n            0,\n            0,\n            0\n        ];\n        if (options.sizes !== undefined) this.fullTileRanges_ = options.sizes.map(function(size, z) {\n            const tileRange = new (0, $550e524b0d1b61d4$export$2e2bcd8739ae039)(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n            if (extent) {\n                const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n                tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n                tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n                tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n                tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n            }\n            return tileRange;\n        }, this);\n        else if (extent) this.calculateTileRanges_(extent);\n    }\n    /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */ forEachTileCoord(extent, zoom, callback) {\n        const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n        for(let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i)for(let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j)callback([\n            zoom,\n            i,\n            j\n        ]);\n    }\n    /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */ forEachTileCoordParentTileRange(tileCoord, callback, tempTileRange, tempExtent) {\n        let tileRange, x, y;\n        let tileCoordExtent = null;\n        let z = tileCoord[0] - 1;\n        if (this.zoomFactor_ === 2) {\n            x = tileCoord[1];\n            y = tileCoord[2];\n        } else tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\n        while(z >= this.minZoom){\n            if (this.zoomFactor_ === 2) {\n                x = Math.floor(x / 2);\n                y = Math.floor(y / 2);\n                tileRange = (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(x, x, y, y, tempTileRange);\n            } else tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n            if (callback(z, tileRange)) return true;\n            --z;\n        }\n        return false;\n    }\n    /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */ getExtent() {\n        return this.extent_;\n    }\n    /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */ getMaxZoom() {\n        return this.maxZoom;\n    }\n    /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */ getMinZoom() {\n        return this.minZoom;\n    }\n    /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */ getOrigin(z) {\n        if (this.origin_) return this.origin_;\n        return this.origins_[z];\n    }\n    /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */ getResolution(z) {\n        return this.resolutions_[z];\n    }\n    /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */ getResolutions() {\n        return this.resolutions_;\n    }\n    /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */ getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\n        if (tileCoord[0] < this.maxZoom) {\n            if (this.zoomFactor_ === 2) {\n                const minX = tileCoord[1] * 2;\n                const minY = tileCoord[2] * 2;\n                return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(minX, minX + 1, minY, minY + 1, tempTileRange);\n            }\n            const tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent || this.tmpExtent_);\n            return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, tempTileRange);\n        }\n        return null;\n    }\n    /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */ getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\n        if (z > this.maxZoom || z < this.minZoom) return null;\n        const tileCoordZ = tileCoord[0];\n        const tileCoordX = tileCoord[1];\n        const tileCoordY = tileCoord[2];\n        if (z === tileCoordZ) return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(tileCoordX, tileCoordY, tileCoordX, tileCoordY, tempTileRange);\n        if (this.zoomFactor_) {\n            const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n            const minX = Math.floor(tileCoordX * factor);\n            const minY = Math.floor(tileCoordY * factor);\n            if (z < tileCoordZ) return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(minX, minX, minY, minY, tempTileRange);\n            const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n            const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n            return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(minX, maxX, minY, maxY, tempTileRange);\n        }\n        const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n        return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n    }\n    /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */ getTileRangeForExtentAndZ(extent, z, tempTileRange) {\n        this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, $bb602a307ef98bb5$var$tmpTileCoord);\n        const minX = $bb602a307ef98bb5$var$tmpTileCoord[1];\n        const minY = $bb602a307ef98bb5$var$tmpTileCoord[2];\n        this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, $bb602a307ef98bb5$var$tmpTileCoord);\n        const maxX = $bb602a307ef98bb5$var$tmpTileCoord[1];\n        const maxY = $bb602a307ef98bb5$var$tmpTileCoord[2];\n        return (0, $550e524b0d1b61d4$export$958e3e1a02eac4b6)(minX, maxX, minY, maxY, tempTileRange);\n    }\n    /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */ getTileCoordCenter(tileCoord) {\n        const origin = this.getOrigin(tileCoord[0]);\n        const resolution = this.getResolution(tileCoord[0]);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.getTileSize(tileCoord[0]), this.tmpSize_);\n        return [\n            origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n            origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution\n        ];\n    }\n    /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */ getTileCoordExtent(tileCoord, tempExtent) {\n        const origin = this.getOrigin(tileCoord[0]);\n        const resolution = this.getResolution(tileCoord[0]);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.getTileSize(tileCoord[0]), this.tmpSize_);\n        const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n        const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n        const maxX = minX + tileSize[0] * resolution;\n        const maxY = minY + tileSize[1] * resolution;\n        return (0, $6da4c8ed3074c92b$export$958e3e1a02eac4b6)(minX, minY, maxX, maxY, tempExtent);\n    }\n    /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */ getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n        return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n    }\n    /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */ getTileCoordForXYAndResolution_(x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n        const z = this.getZForResolution(resolution);\n        const scale = resolution / this.getResolution(z);\n        const origin = this.getOrigin(z);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.getTileSize(z), this.tmpSize_);\n        let tileCoordX = scale * (x - origin[0]) / resolution / tileSize[0];\n        let tileCoordY = scale * (origin[1] - y) / resolution / tileSize[1];\n        if (reverseIntersectionPolicy) {\n            tileCoordX = (0, $6b000a049d919fe5$export$803ce6b71a0a94b2)(tileCoordX, $bb602a307ef98bb5$var$DECIMALS) - 1;\n            tileCoordY = (0, $6b000a049d919fe5$export$803ce6b71a0a94b2)(tileCoordY, $bb602a307ef98bb5$var$DECIMALS) - 1;\n        } else {\n            tileCoordX = (0, $6b000a049d919fe5$export$a3fe094919f356fd)(tileCoordX, $bb602a307ef98bb5$var$DECIMALS);\n            tileCoordY = (0, $6b000a049d919fe5$export$a3fe094919f356fd)(tileCoordY, $bb602a307ef98bb5$var$DECIMALS);\n        }\n        return (0, $bf2a04496fadabc6$export$958e3e1a02eac4b6)(z, tileCoordX, tileCoordY, opt_tileCoord);\n    }\n    /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */ getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n        const origin = this.getOrigin(z);\n        const resolution = this.getResolution(z);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.getTileSize(z), this.tmpSize_);\n        let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n        let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n        if (reverseIntersectionPolicy) {\n            tileCoordX = (0, $6b000a049d919fe5$export$803ce6b71a0a94b2)(tileCoordX, $bb602a307ef98bb5$var$DECIMALS) - 1;\n            tileCoordY = (0, $6b000a049d919fe5$export$803ce6b71a0a94b2)(tileCoordY, $bb602a307ef98bb5$var$DECIMALS) - 1;\n        } else {\n            tileCoordX = (0, $6b000a049d919fe5$export$a3fe094919f356fd)(tileCoordX, $bb602a307ef98bb5$var$DECIMALS);\n            tileCoordY = (0, $6b000a049d919fe5$export$a3fe094919f356fd)(tileCoordY, $bb602a307ef98bb5$var$DECIMALS);\n        }\n        return (0, $bf2a04496fadabc6$export$958e3e1a02eac4b6)(z, tileCoordX, tileCoordY, opt_tileCoord);\n    }\n    /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Zoom level.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */ getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n        return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n    }\n    /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */ getTileCoordResolution(tileCoord) {\n        return this.resolutions_[tileCoord[0]];\n    }\n    /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */ getTileSize(z) {\n        if (this.tileSize_) return this.tileSize_;\n        return this.tileSizes_[z];\n    }\n    /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n   */ getFullTileRange(z) {\n        if (!this.fullTileRanges_) return this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, z) : null;\n        return this.fullTileRanges_[z];\n    }\n    /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */ getZForResolution(resolution, opt_direction) {\n        const z = (0, $b998d41b678ed5d1$export$8a3786cc03fdb777)(this.resolutions_, resolution, opt_direction || 0);\n        return (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(z, this.minZoom, this.maxZoom);\n    }\n    /**\n   * The tile with the provided tile coordinate intersects the given viewport.\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\n   */ tileCoordIntersectsViewport(tileCoord, viewport) {\n        return (0, $acee589e5b390c5c$export$830a0dafbb2ef1c5)(viewport, 0, viewport.length, 2, this.getTileCoordExtent(tileCoord));\n    }\n    /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */ calculateTileRanges_(extent) {\n        const length = this.resolutions_.length;\n        const fullTileRanges = new Array(length);\n        for(let z = this.minZoom; z < length; ++z)fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n        this.fullTileRanges_ = fullTileRanges;\n    }\n}\nvar $bb602a307ef98bb5$export$2e2bcd8739ae039 = $bb602a307ef98bb5$var$TileGrid;\n\n\n\n\n\n\nfunction $5779655d81caea04$export$1f4812384df8a9c5(projection) {\n    let tileGrid = projection.getDefaultTileGrid();\n    if (!tileGrid) {\n        tileGrid = $5779655d81caea04$export$a251b12f5601c16f(projection);\n        projection.setDefaultTileGrid(tileGrid);\n    }\n    return tileGrid;\n}\nfunction $5779655d81caea04$export$39a9ce3624977b84(tileGrid, tileCoord, projection) {\n    const z = tileCoord[0];\n    const center = tileGrid.getTileCoordCenter(tileCoord);\n    const projectionExtent = $5779655d81caea04$export$7b5b6ef8fd55fac4(projection);\n    if (!(0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(projectionExtent, center)) {\n        const worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent);\n        const worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n        center[0] += worldWidth * worldsAway;\n        return tileGrid.getTileCoordForCoordAndZ(center, z);\n    }\n    return tileCoord;\n}\nfunction $5779655d81caea04$export$ce88871416242df8(extent, maxZoom, tileSize, corner) {\n    corner = corner !== undefined ? corner : \"top-left\";\n    const resolutions = $5779655d81caea04$var$resolutionsFromExtent(extent, maxZoom, tileSize);\n    return new (0, $bb602a307ef98bb5$export$2e2bcd8739ae039)({\n        extent: extent,\n        origin: (0, $6da4c8ed3074c92b$export$a1cfd206661d0801)(extent, corner),\n        resolutions: resolutions,\n        tileSize: tileSize\n    });\n}\nfunction $5779655d81caea04$export$38500bbeccc864ff(options) {\n    const xyzOptions = options || {};\n    const extent = xyzOptions.extent || (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(\"EPSG:3857\").getExtent();\n    const gridOptions = {\n        extent: extent,\n        minZoom: xyzOptions.minZoom,\n        tileSize: xyzOptions.tileSize,\n        resolutions: $5779655d81caea04$var$resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)\n    };\n    return new (0, $bb602a307ef98bb5$export$2e2bcd8739ae039)(gridOptions);\n}\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */ function $5779655d81caea04$var$resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n    maxZoom = maxZoom !== undefined ? maxZoom : (0, $57cd8651d88957a0$export$e98a216cdcc847dc);\n    tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(tileSize !== undefined ? tileSize : (0, $57cd8651d88957a0$export$6b8cb5cd370bd90c));\n    const height = (0, $6da4c8ed3074c92b$export$c08559766941f856)(extent);\n    const width = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent);\n    maxResolution = maxResolution > 0 ? maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);\n    const length = maxZoom + 1;\n    const resolutions = new Array(length);\n    for(let z = 0; z < length; ++z)resolutions[z] = maxResolution / Math.pow(2, z);\n    return resolutions;\n}\nfunction $5779655d81caea04$export$a251b12f5601c16f(projection, maxZoom, tileSize, corner) {\n    const extent = $5779655d81caea04$export$7b5b6ef8fd55fac4(projection);\n    return $5779655d81caea04$export$ce88871416242df8(extent, maxZoom, tileSize, corner);\n}\nfunction $5779655d81caea04$export$7b5b6ef8fd55fac4(projection) {\n    projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(projection);\n    let extent = projection.getExtent();\n    if (!extent) {\n        const half = 180 * (0, $03edbd434a9e6608$export$1482081eec883108).degrees / projection.getMetersPerUnit();\n        extent = (0, $6da4c8ed3074c92b$export$958e3e1a02eac4b6)(-half, -half, half, half);\n    }\n    return extent;\n}\n\n\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */ /**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] CacheSize.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */ /**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */ class $988a11d09320f6a8$var$TileSource extends (0, $ed6dc99f268f3882$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options SourceTile source options.\n   */ constructor(options){\n        super({\n            attributions: options.attributions,\n            attributionsCollapsible: options.attributionsCollapsible,\n            projection: options.projection,\n            state: options.state,\n            wrapX: options.wrapX,\n            interpolate: options.interpolate\n        });\n        /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {TileSourceOnSignature<void>}\n     */ this.un;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n        /**\n     * @private\n     * @type {number}\n     */ this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n        /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     */ this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n        const tileSize = [\n            256,\n            256\n        ];\n        if (this.tileGrid) (0, $cc435a5409103773$export$a71a825ff42fb8e1)(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\n        /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */ this.tileCache = new (0, $a12e09565a34db59$export$2e2bcd8739ae039)(options.cacheSize || 0);\n        /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */ this.tmpSize = [\n            0,\n            0\n        ];\n        /**\n     * @private\n     * @type {string}\n     */ this.key_ = options.key || \"\";\n        /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */ this.tileOptions = {\n            transition: options.transition,\n            interpolate: options.interpolate\n        };\n        /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */ this.zDirection = options.zDirection ? options.zDirection : 0;\n    }\n    /**\n   * @return {boolean} Can expire cache.\n   */ canExpireCache() {\n        return this.tileCache.canExpireCache();\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */ expireCache(projection, usedTiles) {\n        const tileCache = this.getTileCacheForProjection(projection);\n        if (tileCache) tileCache.expireCache(usedTiles);\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */ forEachLoadedTile(projection, z, tileRange, callback) {\n        const tileCache = this.getTileCacheForProjection(projection);\n        if (!tileCache) return false;\n        let covered = true;\n        let tile, tileCoordKey, loaded;\n        for(let x = tileRange.minX; x <= tileRange.maxX; ++x)for(let y = tileRange.minY; y <= tileRange.maxY; ++y){\n            tileCoordKey = (0, $bf2a04496fadabc6$export$92d0df0f1d25c63c)(z, x, y);\n            loaded = false;\n            if (tileCache.containsKey(tileCoordKey)) {\n                tile = /** @type {!import(\"../Tile.js\").default} */ tileCache.get(tileCoordKey);\n                loaded = tile.getState() === (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED;\n                if (loaded) loaded = callback(tile) !== false;\n            }\n            if (!loaded) covered = false;\n        }\n        return covered;\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */ getGutterForProjection(projection) {\n        return 0;\n    }\n    /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */ getKey() {\n        return this.key_;\n    }\n    /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */ setKey(key) {\n        if (this.key_ !== key) {\n            this.key_ = key;\n            this.changed();\n        }\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */ getOpaque(projection) {\n        return this.opaque_;\n    }\n    /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   */ getResolutions(projection) {\n        const tileGrid = projection ? this.getTileGridForProjection(projection) : this.tileGrid;\n        if (!tileGrid) return null;\n        return tileGrid.getResolutions();\n    }\n    /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */ getTile(z, x, y, pixelRatio, projection) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n   * @api\n   */ getTileGrid() {\n        return this.tileGrid;\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */ getTileGridForProjection(projection) {\n        if (!this.tileGrid) return (0, $5779655d81caea04$export$1f4812384df8a9c5)(projection);\n        return this.tileGrid;\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */ getTileCacheForProjection(projection) {\n        const sourceProjection = this.getProjection();\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(sourceProjection === null || (0, $9c4744460e43e41b$export$fe091d73a555748b)(sourceProjection, projection), \"A VectorTile source can only be rendered if it has a projection compatible with the view projection.\");\n        return this.tileCache;\n    }\n    /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */ getTilePixelRatio(pixelRatio) {\n        return this.tilePixelRatio_;\n    }\n    /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */ getTilePixelSize(z, pixelRatio, projection) {\n        const tileGrid = this.getTileGridForProjection(projection);\n        const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n        const tileSize = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(tileGrid.getTileSize(z), this.tmpSize);\n        if (tilePixelRatio == 1) return tileSize;\n        return (0, $cc435a5409103773$export$dcdf75081b88279d)(tileSize, tilePixelRatio, this.tmpSize);\n    }\n    /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */ getTileCoordForTileUrlFunction(tileCoord, projection) {\n        projection = projection !== undefined ? projection : this.getProjection();\n        const tileGrid = this.getTileGridForProjection(projection);\n        if (this.getWrapX() && projection.isGlobal()) tileCoord = (0, $5779655d81caea04$export$39a9ce3624977b84)(tileGrid, tileCoord, projection);\n        return (0, $bf2a04496fadabc6$export$60bedf8e3e3c3dbe)(tileCoord, tileGrid) ? tileCoord : null;\n    }\n    /**\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n   * @api\n   */ clear() {\n        this.tileCache.clear();\n    }\n    refresh() {\n        this.clear();\n        super.refresh();\n    }\n    /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */ updateCacheSize(tileCount, projection) {\n        const tileCache = this.getTileCacheForProjection(projection);\n        if (tileCount > tileCache.highWaterMark) tileCache.highWaterMark = tileCount;\n    }\n    /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */ useTile(z, x, y, projection) {}\n}\nclass $988a11d09320f6a8$export$c571855c51e6c4b6 extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */ constructor(type, tile){\n        super(type);\n        /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */ this.tile = tile;\n    }\n}\nvar $988a11d09320f6a8$export$2e2bcd8739ae039 = $988a11d09320f6a8$var$TileSource;\n\n\n\n/**\n * @module ol/tileurlfunction\n */ \n\n\nfunction $91dd08a0f5859882$export$f0ecb46e90798741(template, tileGrid) {\n    const zRegEx = /\\{z\\}/g;\n    const xRegEx = /\\{x\\}/g;\n    const yRegEx = /\\{y\\}/g;\n    const dashYRegEx = /\\{-y\\}/g;\n    return(/**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */ function(tileCoord, pixelRatio, projection) {\n        if (!tileCoord) return undefined;\n        return template.replace(zRegEx, tileCoord[0].toString()).replace(xRegEx, tileCoord[1].toString()).replace(yRegEx, tileCoord[2].toString()).replace(dashYRegEx, function() {\n            const z = tileCoord[0];\n            const range = tileGrid.getFullTileRange(z);\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(range, \"The {-y} placeholder requires a tile grid with extent\");\n            const y = range.getHeight() - tileCoord[2] - 1;\n            return y.toString();\n        });\n    });\n}\nfunction $91dd08a0f5859882$export$436f44dbcc31fea3(templates, tileGrid) {\n    const len = templates.length;\n    const tileUrlFunctions = new Array(len);\n    for(let i = 0; i < len; ++i)tileUrlFunctions[i] = $91dd08a0f5859882$export$f0ecb46e90798741(templates[i], tileGrid);\n    return $91dd08a0f5859882$export$4229b1d9af69b3be(tileUrlFunctions);\n}\nfunction $91dd08a0f5859882$export$4229b1d9af69b3be(tileUrlFunctions) {\n    if (tileUrlFunctions.length === 1) return tileUrlFunctions[0];\n    return(/**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */ function(tileCoord, pixelRatio, projection) {\n        if (!tileCoord) return undefined;\n        const h = (0, $bf2a04496fadabc6$export$d6af199866bfb566)(tileCoord);\n        const index = (0, $6b000a049d919fe5$export$ba467bec01d66def)(h, tileUrlFunctions.length);\n        return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n    });\n}\nfunction $91dd08a0f5859882$export$fab585f002f634a1(tileCoord, pixelRatio, projection) {\n    return undefined;\n}\nfunction $91dd08a0f5859882$export$2a1fa079bfd73dde(url) {\n    const urls = [];\n    let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n    if (match) {\n        // char range\n        const startCharCode = match[1].charCodeAt(0);\n        const stopCharCode = match[2].charCodeAt(0);\n        let charCode;\n        for(charCode = startCharCode; charCode <= stopCharCode; ++charCode)urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n        return urls;\n    }\n    match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n    if (match) {\n        // number range\n        const stop = parseInt(match[2], 10);\n        for(let i = parseInt(match[1], 10); i <= stop; i++)urls.push(url.replace(match[0], i.toString()));\n        return urls;\n    }\n    urls.push(url);\n    return urls;\n}\n\n\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Cache size.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */ /**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */ class $e6408236331c2614$var$UrlTile extends (0, $988a11d09320f6a8$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options Image tile options.\n   */ constructor(options){\n        super({\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            opaque: options.opaque,\n            projection: options.projection,\n            state: options.state,\n            tileGrid: options.tileGrid,\n            tilePixelRatio: options.tilePixelRatio,\n            wrapX: options.wrapX,\n            transition: options.transition,\n            interpolate: options.interpolate,\n            key: options.key,\n            attributionsCollapsible: options.attributionsCollapsible,\n            zDirection: options.zDirection\n        });\n        /**\n     * @private\n     * @type {boolean}\n     */ this.generateTileUrlFunction_ = this.tileUrlFunction === $e6408236331c2614$var$UrlTile.prototype.tileUrlFunction;\n        /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */ this.tileLoadFunction = options.tileLoadFunction;\n        if (options.tileUrlFunction) this.tileUrlFunction = options.tileUrlFunction;\n        /**\n     * @protected\n     * @type {!Array<string>|null}\n     */ this.urls = null;\n        if (options.urls) this.setUrls(options.urls);\n        else if (options.url) this.setUrl(options.url);\n        /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */ this.tileLoadingKeys_ = {};\n    }\n    /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */ getTileLoadFunction() {\n        return this.tileLoadFunction;\n    }\n    /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */ getTileUrlFunction() {\n        return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction ? this.tileUrlFunction.bind(this) : this.tileUrlFunction;\n    }\n    /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */ getUrls() {\n        return this.urls;\n    }\n    /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */ handleTileChange(event) {\n        const tile = /** @type {import(\"../Tile.js\").default} */ event.target;\n        const uid = (0, $6c5e11070e371322$export$5e82334337e0f204)(tile);\n        const tileState = tile.getState();\n        let type;\n        if (tileState == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADING) {\n            this.tileLoadingKeys_[uid] = true;\n            type = (0, $7e3d7a0f8b272861$export$2e2bcd8739ae039).TILELOADSTART;\n        } else if (uid in this.tileLoadingKeys_) {\n            delete this.tileLoadingKeys_[uid];\n            type = tileState == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).ERROR ? (0, $7e3d7a0f8b272861$export$2e2bcd8739ae039).TILELOADERROR : tileState == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).LOADED ? (0, $7e3d7a0f8b272861$export$2e2bcd8739ae039).TILELOADEND : undefined;\n        }\n        if (type != undefined) this.dispatchEvent(new (0, $988a11d09320f6a8$export$c571855c51e6c4b6)(type, tile));\n    }\n    /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */ setTileLoadFunction(tileLoadFunction) {\n        this.tileCache.clear();\n        this.tileLoadFunction = tileLoadFunction;\n        this.changed();\n    }\n    /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */ setTileUrlFunction(tileUrlFunction, key) {\n        this.tileUrlFunction = tileUrlFunction;\n        this.tileCache.pruneExceptNewestZ();\n        if (typeof key !== \"undefined\") this.setKey(key);\n        else this.changed();\n    }\n    /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */ setUrl(url) {\n        const urls = (0, $91dd08a0f5859882$export$2a1fa079bfd73dde)(url);\n        this.urls = urls;\n        this.setUrls(urls);\n    }\n    /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */ setUrls(urls) {\n        this.urls = urls;\n        const key = urls.join(\"\\n\");\n        if (this.generateTileUrlFunction_) this.setTileUrlFunction((0, $91dd08a0f5859882$export$436f44dbcc31fea3)(urls, this.tileGrid), key);\n        else this.setKey(key);\n    }\n    /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */ tileUrlFunction(tileCoord, pixelRatio, projection) {\n        return undefined;\n    }\n    /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */ useTile(z, x, y) {\n        const tileCoordKey = (0, $bf2a04496fadabc6$export$92d0df0f1d25c63c)(z, x, y);\n        if (this.tileCache.containsKey(tileCoordKey)) this.tileCache.get(tileCoordKey);\n    }\n}\nvar $e6408236331c2614$export$2e2bcd8739ae039 = $e6408236331c2614$var$UrlTile;\n\n\n\n\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */ /**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */ class $51d055913ca55b5e$var$TileImage extends (0, $e6408236331c2614$export$2e2bcd8739ae039) {\n    /**\n   * @param {!Options} options Image tile options.\n   */ constructor(options){\n        super({\n            attributions: options.attributions,\n            cacheSize: options.cacheSize,\n            opaque: options.opaque,\n            projection: options.projection,\n            state: options.state,\n            tileGrid: options.tileGrid,\n            tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : $51d055913ca55b5e$var$defaultTileLoadFunction,\n            tilePixelRatio: options.tilePixelRatio,\n            tileUrlFunction: options.tileUrlFunction,\n            url: options.url,\n            urls: options.urls,\n            wrapX: options.wrapX,\n            transition: options.transition,\n            interpolate: options.interpolate !== undefined ? options.interpolate : true,\n            key: options.key,\n            attributionsCollapsible: options.attributionsCollapsible,\n            zDirection: options.zDirection\n        });\n        /**\n     * @protected\n     * @type {?string}\n     */ this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n        /**\n     * @protected\n     * @type {typeof ImageTile}\n     */ this.tileClass = options.tileClass !== undefined ? options.tileClass : (0, $cd3bc8d185522361$export$2e2bcd8739ae039);\n        /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */ this.tileCacheForProjection = {};\n        /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */ this.tileGridForProjection = {};\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.renderReprojectionEdges_ = false;\n    }\n    /**\n   * @return {boolean} Can expire cache.\n   */ canExpireCache() {\n        if (this.tileCache.canExpireCache()) return true;\n        for(const key in this.tileCacheForProjection){\n            if (this.tileCacheForProjection[key].canExpireCache()) return true;\n        }\n        return false;\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */ expireCache(projection, usedTiles) {\n        const usedTileCache = this.getTileCacheForProjection(projection);\n        this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n        for(const id in this.tileCacheForProjection){\n            const tileCache = this.tileCacheForProjection[id];\n            tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n        }\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */ getGutterForProjection(projection) {\n        if (this.getProjection() && projection && !(0, $9c4744460e43e41b$export$fe091d73a555748b)(this.getProjection(), projection)) return 0;\n        return this.getGutter();\n    }\n    /**\n   * @return {number} Gutter.\n   */ getGutter() {\n        return 0;\n    }\n    /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */ getKey() {\n        let key = super.getKey();\n        if (!this.getInterpolate()) key += \":disable-interpolation\";\n        return key;\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */ getOpaque(projection) {\n        if (this.getProjection() && projection && !(0, $9c4744460e43e41b$export$fe091d73a555748b)(this.getProjection(), projection)) return false;\n        return super.getOpaque(projection);\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */ getTileGridForProjection(projection) {\n        const thisProj = this.getProjection();\n        if (this.tileGrid && (!thisProj || (0, $9c4744460e43e41b$export$fe091d73a555748b)(thisProj, projection))) return this.tileGrid;\n        const projKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(projection);\n        if (!(projKey in this.tileGridForProjection)) this.tileGridForProjection[projKey] = (0, $5779655d81caea04$export$1f4812384df8a9c5)(projection);\n        return this.tileGridForProjection[projKey];\n    }\n    /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */ getTileCacheForProjection(projection) {\n        const thisProj = this.getProjection();\n        if (!thisProj || (0, $9c4744460e43e41b$export$fe091d73a555748b)(thisProj, projection)) return this.tileCache;\n        const projKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(projection);\n        if (!(projKey in this.tileCacheForProjection)) this.tileCacheForProjection[projKey] = new (0, $a12e09565a34db59$export$2e2bcd8739ae039)(this.tileCache.highWaterMark);\n        return this.tileCacheForProjection[projKey];\n    }\n    /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */ createTile_(z, x, y, pixelRatio, projection, key) {\n        const tileCoord = [\n            z,\n            x,\n            y\n        ];\n        const urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        const tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n        const tile = new this.tileClass(tileCoord, tileUrl !== undefined ? (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE : (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).EMPTY, tileUrl !== undefined ? tileUrl : \"\", this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n        tile.key = key;\n        tile.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleTileChange.bind(this));\n        return tile;\n    }\n    /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   */ getTile(z, x, y, pixelRatio, projection) {\n        const sourceProjection = this.getProjection();\n        if (!sourceProjection || !projection || (0, $9c4744460e43e41b$export$fe091d73a555748b)(sourceProjection, projection)) return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n        const cache = this.getTileCacheForProjection(projection);\n        const tileCoord = [\n            z,\n            x,\n            y\n        ];\n        let tile;\n        const tileCoordKey = (0, $bf2a04496fadabc6$export$a47fb462a08de82f)(tileCoord);\n        if (cache.containsKey(tileCoordKey)) tile = cache.get(tileCoordKey);\n        const key = this.getKey();\n        if (tile && tile.key == key) return tile;\n        const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        const targetTileGrid = this.getTileGridForProjection(projection);\n        const wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        const newTile = new (0, $398e350e33050c07$export$2e2bcd8739ae039)(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), (z, x, y, pixelRatio)=>this.getTileInternal(z, x, y, pixelRatio, sourceProjection), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.getInterpolate());\n        newTile.key = key;\n        if (tile) {\n            newTile.interimTile = tile;\n            newTile.refreshInterimChain();\n            cache.replace(tileCoordKey, newTile);\n        } else cache.set(tileCoordKey, newTile);\n        return newTile;\n    }\n    /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */ getTileInternal(z, x, y, pixelRatio, projection) {\n        let tile = null;\n        const tileCoordKey = (0, $bf2a04496fadabc6$export$92d0df0f1d25c63c)(z, x, y);\n        const key = this.getKey();\n        if (!this.tileCache.containsKey(tileCoordKey)) {\n            tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n            this.tileCache.set(tileCoordKey, tile);\n        } else {\n            tile = this.tileCache.get(tileCoordKey);\n            if (tile.key != key) {\n                // The source's params changed. If the tile has an interim tile and if we\n                // can use it then we use it. Otherwise we create a new tile.  In both\n                // cases we attempt to assign an interim tile to the new tile.\n                const interimTile = tile;\n                tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n                //make the new tile the head of the list,\n                if (interimTile.getState() == (0, $b8291d9739c3c64e$export$2e2bcd8739ae039).IDLE) //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n                tile.interimTile = interimTile.interimTile;\n                else tile.interimTile = interimTile;\n                tile.refreshInterimChain();\n                this.tileCache.replace(tileCoordKey, tile);\n            }\n        }\n        return tile;\n    }\n    /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */ setRenderReprojectionEdges(render) {\n        if (this.renderReprojectionEdges_ == render) return;\n        this.renderReprojectionEdges_ = render;\n        for(const id in this.tileCacheForProjection)this.tileCacheForProjection[id].clear();\n        this.changed();\n    }\n    /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */ setTileGridForProjection(projection, tilegrid) {\n        const proj = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(projection);\n        if (proj) {\n            const projKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(proj);\n            if (!(projKey in this.tileGridForProjection)) this.tileGridForProjection[projKey] = tilegrid;\n        }\n    }\n    clear() {\n        super.clear();\n        for(const id in this.tileCacheForProjection)this.tileCacheForProjection[id].clear();\n    }\n}\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */ function $51d055913ca55b5e$var$defaultTileLoadFunction(imageTile, src) {\n    /** @type {HTMLImageElement|HTMLVideoElement} */ imageTile.getImage().src = src;\n}\nvar $51d055913ca55b5e$export$2e2bcd8739ae039 = $51d055913ca55b5e$var$TileImage;\n\n\n/**\n * @module ol/uri\n */ /**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */ function $60db182c0252e220$export$c202e3cb8db99a95(uri, params) {\n    const keyParams = [];\n    // Skip any null or undefined parameter values\n    Object.keys(params).forEach(function(k) {\n        if (params[k] !== null && params[k] !== undefined) keyParams.push(k + \"=\" + encodeURIComponent(params[k]));\n    });\n    const qs = keyParams.join(\"&\");\n    // remove any trailing ? or &\n    uri = uri.replace(/[?&]$/, \"\");\n    // append ? or & depending on whether uri has existing parameters\n    uri += uri.includes(\"?\") ? \"&\" : \"?\";\n    return uri + qs;\n}\n\n\n\n/**\n * @module ol/tilegrid/WMTS\n */ \n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */ /**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */ class $17e2c305e5143e39$var$WMTSTileGrid extends (0, $bb602a307ef98bb5$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options WMTS options.\n   */ constructor(options){\n        super({\n            extent: options.extent,\n            origin: options.origin,\n            origins: options.origins,\n            resolutions: options.resolutions,\n            tileSize: options.tileSize,\n            tileSizes: options.tileSizes,\n            sizes: options.sizes\n        });\n        /**\n     * @private\n     * @type {!Array<string>}\n     */ this.matrixIds_ = options.matrixIds;\n    }\n    /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */ getMatrixId(z) {\n        return this.matrixIds_[z];\n    }\n    /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */ getMatrixIds() {\n        return this.matrixIds_;\n    }\n}\nvar $17e2c305e5143e39$export$2e2bcd8739ae039 = $17e2c305e5143e39$var$WMTSTileGrid;\nfunction $17e2c305e5143e39$export$435b228518a973ff(matrixSet, extent, matrixLimits) {\n    /** @type {!Array<number>} */ const resolutions = [];\n    /** @type {!Array<string>} */ const matrixIds = [];\n    /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */ const origins = [];\n    /** @type {!Array<number|import(\"../size.js\").Size>} */ const tileSizes = [];\n    /** @type {!Array<import(\"../size.js\").Size>} */ const sizes = [];\n    matrixLimits = matrixLimits !== undefined ? matrixLimits : [];\n    const supportedCRSPropName = \"SupportedCRS\";\n    const matrixIdsPropName = \"TileMatrix\";\n    const identifierPropName = \"Identifier\";\n    const scaleDenominatorPropName = \"ScaleDenominator\";\n    const topLeftCornerPropName = \"TopLeftCorner\";\n    const tileWidthPropName = \"TileWidth\";\n    const tileHeightPropName = \"TileHeight\";\n    const code = matrixSet[supportedCRSPropName];\n    const projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(code);\n    const metersPerUnit = projection.getMetersPerUnit();\n    // swap origin x and y coordinates if axis orientation is lat/long\n    const switchOriginXY = projection.getAxisOrientation().substr(0, 2) == \"ne\";\n    matrixSet[matrixIdsPropName].sort(function(a, b) {\n        return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n    });\n    matrixSet[matrixIdsPropName].forEach(function(elt) {\n        let matrixAvailable;\n        // use of matrixLimits to filter TileMatrices from GetCapabilities\n        // TileMatrixSet from unavailable matrix levels.\n        if (matrixLimits.length > 0) matrixAvailable = matrixLimits.find(function(elt_ml) {\n            if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) return true;\n            // Fallback for tileMatrix identifiers that don't get prefixed\n            // by their tileMatrixSet identifiers.\n            if (!elt[identifierPropName].includes(\":\")) return matrixSet[identifierPropName] + \":\" + elt[identifierPropName] === elt_ml[matrixIdsPropName];\n            return false;\n        });\n        else matrixAvailable = true;\n        if (matrixAvailable) {\n            matrixIds.push(elt[identifierPropName]);\n            const resolution = elt[scaleDenominatorPropName] * 0.28e-3 / metersPerUnit;\n            const tileWidth = elt[tileWidthPropName];\n            const tileHeight = elt[tileHeightPropName];\n            if (switchOriginXY) origins.push([\n                elt[topLeftCornerPropName][1],\n                elt[topLeftCornerPropName][0]\n            ]);\n            else origins.push(elt[topLeftCornerPropName]);\n            resolutions.push(resolution);\n            tileSizes.push(tileWidth == tileHeight ? tileWidth : [\n                tileWidth,\n                tileHeight\n            ]);\n            sizes.push([\n                elt[\"MatrixWidth\"],\n                elt[\"MatrixHeight\"]\n            ]);\n        }\n    });\n    return new $17e2c305e5143e39$var$WMTSTileGrid({\n        extent: extent,\n        origins: origins,\n        resolutions: resolutions,\n        matrixIds: matrixIds,\n        tileSizes: tileSizes,\n        sizes: sizes\n    });\n}\n\n\n\n\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */ /**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */ /**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */ class $03da246cb7c9d812$var$WMTS extends (0, $51d055913ca55b5e$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options WMTS options.\n   */ constructor(options){\n        // TODO: add support for TileMatrixLimits\n        const requestEncoding = options.requestEncoding !== undefined ? options.requestEncoding : \"KVP\";\n        // FIXME: should we create a default tileGrid?\n        // we could issue a getCapabilities xhr to retrieve missing configuration\n        const tileGrid = options.tileGrid;\n        let urls = options.urls;\n        if (urls === undefined && options.url !== undefined) urls = (0, $91dd08a0f5859882$export$2a1fa079bfd73dde)(options.url);\n        super({\n            attributions: options.attributions,\n            attributionsCollapsible: options.attributionsCollapsible,\n            cacheSize: options.cacheSize,\n            crossOrigin: options.crossOrigin,\n            interpolate: options.interpolate,\n            projection: options.projection,\n            reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n            tileClass: options.tileClass,\n            tileGrid: tileGrid,\n            tileLoadFunction: options.tileLoadFunction,\n            tilePixelRatio: options.tilePixelRatio,\n            urls: urls,\n            wrapX: options.wrapX !== undefined ? options.wrapX : false,\n            transition: options.transition,\n            zDirection: options.zDirection\n        });\n        /**\n     * @private\n     * @type {string}\n     */ this.version_ = options.version !== undefined ? options.version : \"1.0.0\";\n        /**\n     * @private\n     * @type {string}\n     */ this.format_ = options.format !== undefined ? options.format : \"image/jpeg\";\n        /**\n     * @private\n     * @type {!Object}\n     */ this.dimensions_ = options.dimensions !== undefined ? options.dimensions : {};\n        /**\n     * @private\n     * @type {string}\n     */ this.layer_ = options.layer;\n        /**\n     * @private\n     * @type {string}\n     */ this.matrixSet_ = options.matrixSet;\n        /**\n     * @private\n     * @type {string}\n     */ this.style_ = options.style;\n        // FIXME: should we guess this requestEncoding from options.url(s)\n        //        structure? that would mean KVP only if a template is not provided.\n        /**\n     * @private\n     * @type {RequestEncoding}\n     */ this.requestEncoding_ = requestEncoding;\n        this.setKey(this.getKeyForDimensions_());\n        if (urls && urls.length > 0) this.tileUrlFunction = (0, $91dd08a0f5859882$export$4229b1d9af69b3be)(urls.map(this.createFromWMTSTemplate.bind(this)));\n    }\n    /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */ setUrls(urls) {\n        this.urls = urls;\n        const key = urls.join(\"\\n\");\n        this.setTileUrlFunction((0, $91dd08a0f5859882$export$4229b1d9af69b3be)(urls.map(this.createFromWMTSTemplate.bind(this))), key);\n    }\n    /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */ getDimensions() {\n        return this.dimensions_;\n    }\n    /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */ getFormat() {\n        return this.format_;\n    }\n    /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */ getLayer() {\n        return this.layer_;\n    }\n    /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */ getMatrixSet() {\n        return this.matrixSet_;\n    }\n    /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */ getRequestEncoding() {\n        return this.requestEncoding_;\n    }\n    /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */ getStyle() {\n        return this.style_;\n    }\n    /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */ getVersion() {\n        return this.version_;\n    }\n    /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */ getKeyForDimensions_() {\n        const res = this.urls ? this.urls.slice(0) : [];\n        for(const key in this.dimensions_)res.push(key + \"-\" + this.dimensions_[key]);\n        return res.join(\"/\");\n    }\n    /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */ updateDimensions(dimensions) {\n        Object.assign(this.dimensions_, dimensions);\n        this.setKey(this.getKeyForDimensions_());\n    }\n    /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */ createFromWMTSTemplate(template) {\n        const requestEncoding = this.requestEncoding_;\n        // context property names are lower case to allow for a case insensitive\n        // replacement as some services use different naming conventions\n        const context = {\n            \"layer\": this.layer_,\n            \"style\": this.style_,\n            \"tilematrixset\": this.matrixSet_\n        };\n        if (requestEncoding == \"KVP\") Object.assign(context, {\n            \"Service\": \"WMTS\",\n            \"Request\": \"GetTile\",\n            \"Version\": this.version_,\n            \"Format\": this.format_\n        });\n        // TODO: we may want to create our own appendParams function so that params\n        // order conforms to wmts spec guidance, and so that we can avoid to escape\n        // special template params\n        template = requestEncoding == \"KVP\" ? (0, $60db182c0252e220$export$c202e3cb8db99a95)(template, context) : template.replace(/\\{(\\w+?)\\}/g, function(m, p) {\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n        });\n        const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ this.tileGrid;\n        const dimensions = this.dimensions_;\n        return(/**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */ function(tileCoord, pixelRatio, projection) {\n            if (!tileCoord) return undefined;\n            const localContext = {\n                \"TileMatrix\": tileGrid.getMatrixId(tileCoord[0]),\n                \"TileCol\": tileCoord[1],\n                \"TileRow\": tileCoord[2]\n            };\n            Object.assign(localContext, dimensions);\n            let url = template;\n            if (requestEncoding == \"KVP\") url = (0, $60db182c0252e220$export$c202e3cb8db99a95)(url, localContext);\n            else url = url.replace(/\\{(\\w+?)\\}/g, function(m, p) {\n                return localContext[p];\n            });\n            return url;\n        });\n    }\n}\nvar $03da246cb7c9d812$export$2e2bcd8739ae039 = $03da246cb7c9d812$var$WMTS;\nfunction $03da246cb7c9d812$export$6a2b1d2e791d254c(wmtsCap, config) {\n    const layers = wmtsCap[\"Contents\"][\"Layer\"];\n    const l = layers.find(function(elt) {\n        return elt[\"Identifier\"] == config[\"layer\"];\n    });\n    if (!l) return null;\n    const tileMatrixSets = wmtsCap[\"Contents\"][\"TileMatrixSet\"];\n    let idx;\n    if (l[\"TileMatrixSetLink\"].length > 1) {\n        if (\"projection\" in config) idx = l[\"TileMatrixSetLink\"].findIndex(function(elt) {\n            const tileMatrixSet = tileMatrixSets.find(function(el) {\n                return el[\"Identifier\"] == elt[\"TileMatrixSet\"];\n            });\n            const supportedCRS = tileMatrixSet[\"SupportedCRS\"];\n            const proj1 = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(supportedCRS);\n            const proj2 = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(config[\"projection\"]);\n            if (proj1 && proj2) return (0, $9c4744460e43e41b$export$fe091d73a555748b)(proj1, proj2);\n            return supportedCRS == config[\"projection\"];\n        });\n        else idx = l[\"TileMatrixSetLink\"].findIndex(function(elt) {\n            return elt[\"TileMatrixSet\"] == config[\"matrixSet\"];\n        });\n    } else idx = 0;\n    if (idx < 0) idx = 0;\n    const matrixSet = /** @type {string} */ l[\"TileMatrixSetLink\"][idx][\"TileMatrixSet\"];\n    const matrixLimits = /** @type {Array<Object>} */ l[\"TileMatrixSetLink\"][idx][\"TileMatrixSetLimits\"];\n    let format = /** @type {string} */ l[\"Format\"][0];\n    if (\"format\" in config) format = config[\"format\"];\n    idx = l[\"Style\"].findIndex(function(elt) {\n        if (\"style\" in config) return elt[\"Title\"] == config[\"style\"];\n        return elt[\"isDefault\"];\n    });\n    if (idx < 0) idx = 0;\n    const style = /** @type {string} */ l[\"Style\"][idx][\"Identifier\"];\n    const dimensions = {};\n    if (\"Dimension\" in l) l[\"Dimension\"].forEach(function(elt, index, array) {\n        const key = elt[\"Identifier\"];\n        let value = elt[\"Default\"];\n        if (value === undefined) value = elt[\"Value\"][0];\n        dimensions[key] = value;\n    });\n    const matrixSets = wmtsCap[\"Contents\"][\"TileMatrixSet\"];\n    const matrixSetObj = matrixSets.find(function(elt) {\n        return elt[\"Identifier\"] == matrixSet;\n    });\n    let projection;\n    const code = matrixSetObj[\"SupportedCRS\"];\n    if (code) projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(code);\n    if (\"projection\" in config) {\n        const projConfig = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(config[\"projection\"]);\n        if (projConfig) {\n            if (!projection || (0, $9c4744460e43e41b$export$fe091d73a555748b)(projConfig, projection)) projection = projConfig;\n        }\n    }\n    let wrapX = false;\n    const switchXY = projection.getAxisOrientation().substr(0, 2) == \"ne\";\n    let matrix = matrixSetObj.TileMatrix[0];\n    // create default matrixLimit\n    let selectedMatrixLimit = {\n        MinTileCol: 0,\n        MinTileRow: 0,\n        // subtract one to end up at tile top left\n        MaxTileCol: matrix.MatrixWidth - 1,\n        MaxTileRow: matrix.MatrixHeight - 1\n    };\n    //in case of matrix limits, use matrix limits to calculate extent\n    if (matrixLimits) {\n        selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n        const m = matrixSetObj.TileMatrix.find((tileMatrixValue)=>tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix || matrixSetObj.Identifier + \":\" + tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix);\n        if (m) matrix = m;\n    }\n    const resolution = matrix.ScaleDenominator * 0.00028 / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n    const origin = switchXY ? [\n        matrix.TopLeftCorner[1],\n        matrix.TopLeftCorner[0]\n    ] : matrix.TopLeftCorner;\n    const tileSpanX = matrix.TileWidth * resolution;\n    const tileSpanY = matrix.TileHeight * resolution;\n    let matrixSetExtent = matrixSetObj[\"BoundingBox\"];\n    if (matrixSetExtent && switchXY) matrixSetExtent = [\n        matrixSetExtent[1],\n        matrixSetExtent[0],\n        matrixSetExtent[3],\n        matrixSetExtent[2]\n    ];\n    let extent = [\n        origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n        // add one to get proper bottom/right coordinate\n        origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\n        origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\n        origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow\n    ];\n    if (matrixSetExtent !== undefined && !(0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(matrixSetExtent, extent)) {\n        const wgs84BoundingBox = l[\"WGS84BoundingBox\"];\n        const wgs84ProjectionExtent = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(\"EPSG:4326\").getExtent();\n        extent = matrixSetExtent;\n        if (wgs84BoundingBox) wrapX = wgs84BoundingBox[0] === wgs84ProjectionExtent[0] && wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n        else {\n            const wgs84MatrixSetExtent = (0, $9c4744460e43e41b$export$751c68e0e0efff79)(matrixSetExtent, matrixSetObj[\"SupportedCRS\"], \"EPSG:4326\");\n            // Ignore slight deviation from the correct x limits\n            wrapX = wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] && wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n        }\n    }\n    const tileGrid = (0, $17e2c305e5143e39$export$435b228518a973ff)(matrixSetObj, extent, matrixLimits);\n    /** @type {!Array<string>} */ const urls = [];\n    let requestEncoding = config[\"requestEncoding\"];\n    requestEncoding = requestEncoding !== undefined ? requestEncoding : \"\";\n    if (\"OperationsMetadata\" in wmtsCap && \"GetTile\" in wmtsCap[\"OperationsMetadata\"]) {\n        const gets = wmtsCap[\"OperationsMetadata\"][\"GetTile\"][\"DCP\"][\"HTTP\"][\"Get\"];\n        for(let i = 0, ii = gets.length; i < ii; ++i){\n            if (gets[i][\"Constraint\"]) {\n                const constraint = gets[i][\"Constraint\"].find(function(element) {\n                    return element[\"name\"] == \"GetEncoding\";\n                });\n                const encodings = constraint[\"AllowedValues\"][\"Value\"];\n                if (requestEncoding === \"\") // requestEncoding not provided, use the first encoding from the list\n                requestEncoding = encodings[0];\n                if (requestEncoding === \"KVP\") {\n                    if (encodings.includes(\"KVP\")) urls.push(/** @type {string} */ gets[i][\"href\"]);\n                } else break;\n            } else if (gets[i][\"href\"]) {\n                requestEncoding = \"KVP\";\n                urls.push(/** @type {string} */ gets[i][\"href\"]);\n            }\n        }\n    }\n    if (urls.length === 0) {\n        requestEncoding = \"REST\";\n        l[\"ResourceURL\"].forEach(function(element) {\n            if (element[\"resourceType\"] === \"tile\") {\n                format = element[\"format\"];\n                urls.push(/** @type {string} */ element[\"template\"]);\n            }\n        });\n    }\n    return {\n        urls: urls,\n        layer: config[\"layer\"],\n        matrixSet: matrixSet,\n        format: format,\n        projection: projection,\n        requestEncoding: requestEncoding,\n        tileGrid: tileGrid,\n        style: style,\n        dimensions: dimensions,\n        wrapX: wrapX,\n        crossOrigin: config[\"crossOrigin\"]\n    };\n}\n\n\n\n\n\n/**\n * @module ol/source/Vector\n */ \n\n\n\n\n/**\n * @module ol/structs/RBush\n */ var $176ca75ee9f69668$exports = {};\n!function(t, i) {\n    $176ca75ee9f69668$exports = i();\n}($176ca75ee9f69668$exports, function() {\n    \"use strict\";\n    function t(t, r, e, a, h) {\n        !function t(n, r, e, a, h) {\n            for(; a > e;){\n                if (a - e > 600) {\n                    var o = a - e + 1, s = r - e + 1, l = Math.log(o), f = .5 * Math.exp(2 * l / 3), u = .5 * Math.sqrt(l * f * (o - f) / o) * (s - o / 2 < 0 ? -1 : 1), m = Math.max(e, Math.floor(r - s * f / o + u)), c = Math.min(a, Math.floor(r + (o - s) * f / o + u));\n                    t(n, r, m, c, h);\n                }\n                var p = n[r], d = e, x = a;\n                for(i(n, e, r), h(n[a], p) > 0 && i(n, e, a); d < x;){\n                    for(i(n, d, x), d++, x--; h(n[d], p) < 0;)d++;\n                    for(; h(n[x], p) > 0;)x--;\n                }\n                0 === h(n[e], p) ? i(n, e, x) : i(n, ++x, a), x <= r && (e = x + 1), r <= x && (a = x - 1);\n            }\n        }(t, r, e || 0, a || t.length - 1, h || n);\n    }\n    function i(t, i, n) {\n        var r = t[i];\n        t[i] = t[n], t[n] = r;\n    }\n    function n(t, i) {\n        return t < i ? -1 : t > i ? 1 : 0;\n    }\n    var r = function(t) {\n        void 0 === t && (t = 9), this._maxEntries = Math.max(4, t), this._minEntries = Math.max(2, Math.ceil(.4 * this._maxEntries)), this.clear();\n    };\n    function e(t, i, n) {\n        if (!n) return i.indexOf(t);\n        for(var r = 0; r < i.length; r++)if (n(t, i[r])) return r;\n        return -1;\n    }\n    function a(t, i) {\n        h(t, 0, t.children.length, i, t);\n    }\n    function h(t, i, n, r, e) {\n        e || (e = p(null)), e.minX = 1 / 0, e.minY = 1 / 0, e.maxX = -1 / 0, e.maxY = -1 / 0;\n        for(var a = i; a < n; a++){\n            var h = t.children[a];\n            o(e, t.leaf ? r(h) : h);\n        }\n        return e;\n    }\n    function o(t, i) {\n        return t.minX = Math.min(t.minX, i.minX), t.minY = Math.min(t.minY, i.minY), t.maxX = Math.max(t.maxX, i.maxX), t.maxY = Math.max(t.maxY, i.maxY), t;\n    }\n    function s(t, i) {\n        return t.minX - i.minX;\n    }\n    function l(t, i) {\n        return t.minY - i.minY;\n    }\n    function f(t) {\n        return (t.maxX - t.minX) * (t.maxY - t.minY);\n    }\n    function u(t) {\n        return t.maxX - t.minX + (t.maxY - t.minY);\n    }\n    function m(t, i) {\n        return t.minX <= i.minX && t.minY <= i.minY && i.maxX <= t.maxX && i.maxY <= t.maxY;\n    }\n    function c(t, i) {\n        return i.minX <= t.maxX && i.minY <= t.maxY && i.maxX >= t.minX && i.maxY >= t.minY;\n    }\n    function p(t) {\n        return {\n            children: t,\n            height: 1,\n            leaf: !0,\n            minX: 1 / 0,\n            minY: 1 / 0,\n            maxX: -1 / 0,\n            maxY: -1 / 0\n        };\n    }\n    function d(i, n, r, e, a) {\n        for(var h = [\n            n,\n            r\n        ]; h.length;)if (!((r = h.pop()) - (n = h.pop()) <= e)) {\n            var o = n + Math.ceil((r - n) / e / 2) * e;\n            t(i, o, n, r, a), h.push(n, o, o, r);\n        }\n    }\n    return r.prototype.all = function() {\n        return this._all(this.data, []);\n    }, r.prototype.search = function(t) {\n        var i = this.data, n = [];\n        if (!c(t, i)) return n;\n        for(var r = this.toBBox, e = []; i;){\n            for(var a = 0; a < i.children.length; a++){\n                var h = i.children[a], o = i.leaf ? r(h) : h;\n                c(t, o) && (i.leaf ? n.push(h) : m(t, o) ? this._all(h, n) : e.push(h));\n            }\n            i = e.pop();\n        }\n        return n;\n    }, r.prototype.collides = function(t) {\n        var i = this.data;\n        if (!c(t, i)) return !1;\n        for(var n = []; i;){\n            for(var r = 0; r < i.children.length; r++){\n                var e = i.children[r], a = i.leaf ? this.toBBox(e) : e;\n                if (c(t, a)) {\n                    if (i.leaf || m(t, a)) return !0;\n                    n.push(e);\n                }\n            }\n            i = n.pop();\n        }\n        return !1;\n    }, r.prototype.load = function(t) {\n        if (!t || !t.length) return this;\n        if (t.length < this._minEntries) {\n            for(var i = 0; i < t.length; i++)this.insert(t[i]);\n            return this;\n        }\n        var n = this._build(t.slice(), 0, t.length - 1, 0);\n        if (this.data.children.length) {\n            if (this.data.height === n.height) this._splitRoot(this.data, n);\n            else {\n                if (this.data.height < n.height) {\n                    var r = this.data;\n                    this.data = n, n = r;\n                }\n                this._insert(n, this.data.height - n.height - 1, !0);\n            }\n        } else this.data = n;\n        return this;\n    }, r.prototype.insert = function(t) {\n        return t && this._insert(t, this.data.height - 1), this;\n    }, r.prototype.clear = function() {\n        return this.data = p([]), this;\n    }, r.prototype.remove = function(t, i) {\n        if (!t) return this;\n        for(var n, r, a, h = this.data, o = this.toBBox(t), s = [], l = []; h || s.length;){\n            if (h || (h = s.pop(), r = s[s.length - 1], n = l.pop(), a = !0), h.leaf) {\n                var f = e(t, h.children, i);\n                if (-1 !== f) return h.children.splice(f, 1), s.push(h), this._condense(s), this;\n            }\n            a || h.leaf || !m(h, o) ? r ? (n++, h = r.children[n], a = !1) : h = null : (s.push(h), l.push(n), n = 0, r = h, h = h.children[0]);\n        }\n        return this;\n    }, r.prototype.toBBox = function(t) {\n        return t;\n    }, r.prototype.compareMinX = function(t, i) {\n        return t.minX - i.minX;\n    }, r.prototype.compareMinY = function(t, i) {\n        return t.minY - i.minY;\n    }, r.prototype.toJSON = function() {\n        return this.data;\n    }, r.prototype.fromJSON = function(t) {\n        return this.data = t, this;\n    }, r.prototype._all = function(t, i) {\n        for(var n = []; t;)t.leaf ? i.push.apply(i, t.children) : n.push.apply(n, t.children), t = n.pop();\n        return i;\n    }, r.prototype._build = function(t, i, n, r) {\n        var e, h = n - i + 1, o = this._maxEntries;\n        if (h <= o) return a(e = p(t.slice(i, n + 1)), this.toBBox), e;\n        r || (r = Math.ceil(Math.log(h) / Math.log(o)), o = Math.ceil(h / Math.pow(o, r - 1))), (e = p([])).leaf = !1, e.height = r;\n        var s = Math.ceil(h / o), l = s * Math.ceil(Math.sqrt(o));\n        d(t, i, n, l, this.compareMinX);\n        for(var f = i; f <= n; f += l){\n            var u = Math.min(f + l - 1, n);\n            d(t, f, u, s, this.compareMinY);\n            for(var m = f; m <= u; m += s){\n                var c = Math.min(m + s - 1, u);\n                e.children.push(this._build(t, m, c, r - 1));\n            }\n        }\n        return a(e, this.toBBox), e;\n    }, r.prototype._chooseSubtree = function(t, i, n, r) {\n        for(; r.push(i), !i.leaf && r.length - 1 !== n;){\n            for(var e = 1 / 0, a = 1 / 0, h = void 0, o = 0; o < i.children.length; o++){\n                var s = i.children[o], l = f(s), u = (m = t, c = s, (Math.max(c.maxX, m.maxX) - Math.min(c.minX, m.minX)) * (Math.max(c.maxY, m.maxY) - Math.min(c.minY, m.minY)) - l);\n                u < a ? (a = u, e = l < e ? l : e, h = s) : u === a && l < e && (e = l, h = s);\n            }\n            i = h || i.children[0];\n        }\n        var m, c;\n        return i;\n    }, r.prototype._insert = function(t, i, n) {\n        var r = n ? t : this.toBBox(t), e = [], a = this._chooseSubtree(r, this.data, i, e);\n        for(a.children.push(t), o(a, r); i >= 0 && e[i].children.length > this._maxEntries;)this._split(e, i), i--;\n        this._adjustParentBBoxes(r, e, i);\n    }, r.prototype._split = function(t, i) {\n        var n = t[i], r = n.children.length, e = this._minEntries;\n        this._chooseSplitAxis(n, e, r);\n        var h = this._chooseSplitIndex(n, e, r), o = p(n.children.splice(h, n.children.length - h));\n        o.height = n.height, o.leaf = n.leaf, a(n, this.toBBox), a(o, this.toBBox), i ? t[i - 1].children.push(o) : this._splitRoot(n, o);\n    }, r.prototype._splitRoot = function(t, i) {\n        this.data = p([\n            t,\n            i\n        ]), this.data.height = t.height + 1, this.data.leaf = !1, a(this.data, this.toBBox);\n    }, r.prototype._chooseSplitIndex = function(t, i, n) {\n        for(var r, e, a, o, s, l, u, m = 1 / 0, c = 1 / 0, p = i; p <= n - i; p++){\n            var d = h(t, 0, p, this.toBBox), x = h(t, p, n, this.toBBox), v = (e = d, a = x, o = void 0, s = void 0, l = void 0, u = void 0, o = Math.max(e.minX, a.minX), s = Math.max(e.minY, a.minY), l = Math.min(e.maxX, a.maxX), u = Math.min(e.maxY, a.maxY), Math.max(0, l - o) * Math.max(0, u - s)), M = f(d) + f(x);\n            v < m ? (m = v, r = p, c = M < c ? M : c) : v === m && M < c && (c = M, r = p);\n        }\n        return r || n - i;\n    }, r.prototype._chooseSplitAxis = function(t, i, n) {\n        var r = t.leaf ? this.compareMinX : s, e = t.leaf ? this.compareMinY : l;\n        this._allDistMargin(t, i, n, r) < this._allDistMargin(t, i, n, e) && t.children.sort(r);\n    }, r.prototype._allDistMargin = function(t, i, n, r) {\n        t.children.sort(r);\n        for(var e = this.toBBox, a = h(t, 0, i, e), s = h(t, n - i, n, e), l = u(a) + u(s), f = i; f < n - i; f++){\n            var m = t.children[f];\n            o(a, t.leaf ? e(m) : m), l += u(a);\n        }\n        for(var c = n - i - 1; c >= i; c--){\n            var p = t.children[c];\n            o(s, t.leaf ? e(p) : p), l += u(s);\n        }\n        return l;\n    }, r.prototype._adjustParentBBoxes = function(t, i, n) {\n        for(var r = n; r >= 0; r--)o(i[r], t);\n    }, r.prototype._condense = function(t) {\n        for(var i = t.length - 1, n = void 0; i >= 0; i--)0 === t[i].children.length ? i > 0 ? (n = t[i - 1].children).splice(n.indexOf(t[i]), 1) : this.clear() : a(t[i], this.toBBox);\n    }, r;\n});\n\n\n\n\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */ /**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */ class $34c742891733e7a4$var$RBush {\n    /**\n   * @param {number} [maxEntries] Max entries.\n   */ constructor(maxEntries){\n        /**\n     * @private\n     */ this.rbush_ = new (0, (/*@__PURE__*/$parcel$interopDefault($176ca75ee9f69668$exports)))(maxEntries);\n        /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */ this.items_ = {};\n    }\n    /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */ insert(extent, value) {\n        /** @type {Entry} */ const item = {\n            minX: extent[0],\n            minY: extent[1],\n            maxX: extent[2],\n            maxY: extent[3],\n            value: value\n        };\n        this.rbush_.insert(item);\n        this.items_[(0, $6c5e11070e371322$export$5e82334337e0f204)(value)] = item;\n    }\n    /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */ load(extents, values) {\n        const items = new Array(values.length);\n        for(let i = 0, l = values.length; i < l; i++){\n            const extent = extents[i];\n            const value = values[i];\n            /** @type {Entry} */ const item = {\n                minX: extent[0],\n                minY: extent[1],\n                maxX: extent[2],\n                maxY: extent[3],\n                value: value\n            };\n            items[i] = item;\n            this.items_[(0, $6c5e11070e371322$export$5e82334337e0f204)(value)] = item;\n        }\n        this.rbush_.load(items);\n    }\n    /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */ remove(value) {\n        const uid = (0, $6c5e11070e371322$export$5e82334337e0f204)(value);\n        // get the object in which the value was wrapped when adding to the\n        // internal rbush. then use that object to do the removal.\n        const item = this.items_[uid];\n        delete this.items_[uid];\n        return this.rbush_.remove(item) !== null;\n    }\n    /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */ update(extent, value) {\n        const item = this.items_[(0, $6c5e11070e371322$export$5e82334337e0f204)(value)];\n        const bbox = [\n            item.minX,\n            item.minY,\n            item.maxX,\n            item.maxY\n        ];\n        if (!(0, $6da4c8ed3074c92b$export$e9bab7fafb253603)(bbox, extent)) {\n            this.remove(value);\n            this.insert(extent, value);\n        }\n    }\n    /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */ getAll() {\n        const items = this.rbush_.all();\n        return items.map(function(item) {\n            return item.value;\n        });\n    }\n    /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */ getInExtent(extent) {\n        /** @type {Entry} */ const bbox = {\n            minX: extent[0],\n            minY: extent[1],\n            maxX: extent[2],\n            maxY: extent[3]\n        };\n        const items = this.rbush_.search(bbox);\n        return items.map(function(item) {\n            return item.value;\n        });\n    }\n    /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */ forEach(callback) {\n        return this.forEach_(this.getAll(), callback);\n    }\n    /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */ forEachInExtent(extent, callback) {\n        return this.forEach_(this.getInExtent(extent), callback);\n    }\n    /**\n   * @param {Array<T>} values Values.\n   * @param {function(T): *} callback Callback.\n   * @private\n   * @return {*} Callback return value.\n   */ forEach_(values, callback) {\n        let result;\n        for(let i = 0, l = values.length; i < l; i++){\n            result = callback(values[i]);\n            if (result) return result;\n        }\n        return result;\n    }\n    /**\n   * @return {boolean} Is empty.\n   */ isEmpty() {\n        return (0, $beaefe87199bb537$export$dd1bc94b04021eeb)(this.items_);\n    }\n    /**\n   * Remove all values from the RBush.\n   */ clear() {\n        this.rbush_.clear();\n        this.items_ = {};\n    }\n    /**\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */ getExtent(extent) {\n        const data = this.rbush_.toJSON();\n        return (0, $6da4c8ed3074c92b$export$958e3e1a02eac4b6)(data.minX, data.minY, data.maxX, data.maxY, extent);\n    }\n    /**\n   * @param {RBush} rbush R-Tree.\n   */ concat(rbush) {\n        this.rbush_.load(rbush.rbush_.all());\n        for(const i in rbush.items_)this.items_[i] = rbush.items_[i];\n    }\n}\nvar $34c742891733e7a4$export$2e2bcd8739ae039 = $34c742891733e7a4$var$RBush;\n\n\n\n/**\n * @module ol/source/VectorEventType\n */ /**\n * @enum {string}\n */ var $ccc4e6f11f11978f$export$2e2bcd8739ae039 /**\n * @typedef {'addfeature'|'changefeature'|'clear'|'removefeature'|'featuresloadstart'|'featuresloadend'|'featuresloaderror'} VectorSourceEventTypes\n */  = {\n    /**\n   * Triggered when a feature is added to the source.\n   * @event module:ol/source/Vector.VectorSourceEvent#addfeature\n   * @api\n   */ ADDFEATURE: \"addfeature\",\n    /**\n   * Triggered when a feature is updated.\n   * @event module:ol/source/Vector.VectorSourceEvent#changefeature\n   * @api\n   */ CHANGEFEATURE: \"changefeature\",\n    /**\n   * Triggered when the clear method is called on the source.\n   * @event module:ol/source/Vector.VectorSourceEvent#clear\n   * @api\n   */ CLEAR: \"clear\",\n    /**\n   * Triggered when a feature is removed from the source.\n   * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.\n   * @event module:ol/source/Vector.VectorSourceEvent#removefeature\n   * @api\n   */ REMOVEFEATURE: \"removefeature\",\n    /**\n   * Triggered when features starts loading.\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart\n   * @api\n   */ FEATURESLOADSTART: \"featuresloadstart\",\n    /**\n   * Triggered when features finishes loading.\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend\n   * @api\n   */ FEATURESLOADEND: \"featuresloadend\",\n    /**\n   * Triggered if feature loading results in an error.\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror\n   * @api\n   */ FEATURESLOADERROR: \"featuresloaderror\"\n};\n\n\n\n/**\n * @module ol/loadingstrategy\n */ \nfunction $eb51d0a16123ee90$export$84bf76cd7afc7469(extent, resolution) {\n    return [\n        [\n            -Infinity,\n            -Infinity,\n            Infinity,\n            Infinity\n        ]\n    ];\n}\nfunction $eb51d0a16123ee90$export$bf67010aacbe66fa(extent, resolution) {\n    return [\n        extent\n    ];\n}\nfunction $eb51d0a16123ee90$export$3c17558da18e4d75(tileGrid) {\n    return(/**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj.js\").Projection} projection Projection.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */ function(extent, resolution, projection) {\n        const z = tileGrid.getZForResolution((0, $9c4744460e43e41b$export$bd1cd3b88140b906)(resolution, projection));\n        const tileRange = tileGrid.getTileRangeForExtentAndZ((0, $9c4744460e43e41b$export$494be3a3a25689ca)(extent, projection), z);\n        /** @type {Array<import(\"./extent.js\").Extent>} */ const extents = [];\n        /** @type {import(\"./tilecoord.js\").TileCoord} */ const tileCoord = [\n            z,\n            0,\n            0\n        ];\n        for(tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1])for(tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2])extents.push((0, $9c4744460e43e41b$export$96bfd09e2cffb006)(tileGrid.getTileCoordExtent(tileCoord), projection));\n        return extents;\n    });\n}\n\n\n\n\n\n\n\n\n/**\n * @module ol/featureloader\n */ \n/**\n *\n * @type {boolean}\n * @private\n */ let $588823c001569193$var$withCredentials = false;\nfunction $588823c001569193$export$441d7b57adab24d0(url, format, extent, resolution, projection, success, failure) {\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", typeof url === \"function\" ? url(extent, resolution, projection) : url, true);\n    if (format.getType() == \"arraybuffer\") xhr.responseType = \"arraybuffer\";\n    xhr.withCredentials = $588823c001569193$var$withCredentials;\n    /**\n   * @param {Event} event Event.\n   * @private\n   */ xhr.onload = function(event) {\n        // status will be 0 for file:// urls\n        if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n            const type = format.getType();\n            /** @type {Document|Node|Object|string|undefined} */ let source;\n            if (type == \"json\" || type == \"text\") source = xhr.responseText;\n            else if (type == \"xml\") {\n                source = xhr.responseXML;\n                if (!source) source = new DOMParser().parseFromString(xhr.responseText, \"application/xml\");\n            } else if (type == \"arraybuffer\") source = /** @type {ArrayBuffer} */ xhr.response;\n            if (source) success(/** @type {Array<import(\"./Feature.js\").default>} */ format.readFeatures(source, {\n                extent: extent,\n                featureProjection: projection\n            }), format.readProjection(source));\n            else failure();\n        } else failure();\n    };\n    /**\n   * @private\n   */ xhr.onerror = failure;\n    xhr.send();\n}\nfunction $588823c001569193$export$14cc81df70b6707e(url, format) {\n    /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\n   * @param {function(Array<import(\"./Feature.js\").default>): void} [success] Success\n   *      Function called when loading succeeded.\n   * @param {function(): void} [failure] Failure\n   *      Function called when loading failed.\n   */ return function(extent, resolution, projection, success, failure) {\n        const source = /** @type {import(\"./source/Vector\").default} */ this;\n        $588823c001569193$export$441d7b57adab24d0(url, format, extent, resolution, projection, /**\n       * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n       * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n       * projection.\n       */ function(features, dataProjection) {\n            source.addFeatures(features);\n            if (success !== undefined) success(features);\n        }, /* FIXME handle error */ failure ? failure : (0, $013a1733c226ec50$export$1cd1943b3a73bbe8));\n    };\n}\nfunction $588823c001569193$export$36fa6977a6d0d8fe(xhrWithCredentials) {\n    $588823c001569193$var$withCredentials = xhrWithCredentials;\n}\n\n\nclass $84888e4daf3fdf44$export$d402fd02dc2b661c extends (0, $aeedce20e9577100$export$2e2bcd8739ae039) {\n    /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default<Geometry>} [feature] Feature.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} [features] Features.\n   */ constructor(type, feature, features){\n        super(type);\n        /**\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\n     * @type {import(\"../Feature.js\").default<Geometry>|undefined}\n     * @api\n     */ this.feature = feature;\n        /**\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\n     * @type {Array<import(\"../Feature.js\").default<Geometry>>|undefined}\n     * @api\n     */ this.features = features;\n    }\n}\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\n */ /**\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default<Geometry>>|Collection<import(\"../Feature.js\").default<Geometry>>} [features]\n * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\n * will only fire if the `success` and `failure` callbacks are used.\n *\n * Example:\n *\n * ```js\n * import Vector from 'ol/source/Vector.js';\n * import GeoJSON from 'ol/format/GeoJSON.js';\n * import {bbox} from 'ol/loadingstrategy.js';\n *\n * const vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection, success, failure) {\n *      const proj = projection.getCode();\n *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      const xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      const onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *        failure();\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);\n *          vectorSource.addFeatures(features);\n *          success(features);\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox,\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy.all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection~Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */ /**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n */ class $84888e4daf3fdf44$var$VectorSource extends (0, $ed6dc99f268f3882$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options<Geometry>} [options] Vector source options.\n   */ constructor(options){\n        options = options || {};\n        super({\n            attributions: options.attributions,\n            interpolate: true,\n            projection: undefined,\n            state: \"ready\",\n            wrapX: options.wrapX !== undefined ? options.wrapX : true\n        });\n        /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {VectorSourceOnSignature<void>}\n     */ this.un;\n        /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */ this.loader_ = (0, $013a1733c226ec50$export$1cd1943b3a73bbe8);\n        /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */ this.format_ = options.format;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n        /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */ this.url_ = options.url;\n        if (options.loader !== undefined) this.loader_ = options.loader;\n        else if (this.url_ !== undefined) {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(this.format_, \"`format` must be set when `url` is set\");\n            // create a XHR feature loader for \"url\" and \"format\"\n            this.loader_ = (0, $588823c001569193$export$14cc81df70b6707e)(this.url_, /** @type {import(\"../format/Feature.js\").default} */ this.format_);\n        }\n        /**\n     * @private\n     * @type {LoadingStrategy}\n     */ this.strategy_ = options.strategy !== undefined ? options.strategy : (0, $eb51d0a16123ee90$export$84bf76cd7afc7469);\n        const useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n        /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\n     */ this.featuresRtree_ = useSpatialIndex ? new (0, $34c742891733e7a4$export$2e2bcd8739ae039)() : null;\n        /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */ this.loadedExtentsRtree_ = new (0, $34c742891733e7a4$export$2e2bcd8739ae039)();\n        /**\n     * @type {number}\n     * @private\n     */ this.loadingExtentsCount_ = 0;\n        /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */ this.nullGeometryFeatures_ = {};\n        /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */ this.idIndex_ = {};\n        /**\n     * A lookup of features by uid (using getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */ this.uidIndex_ = {};\n        /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */ this.featureChangeKeys_ = {};\n        /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default<Geometry>>|null}\n     */ this.featuresCollection_ = null;\n        /** @type {Collection<import(\"../Feature.js\").default<Geometry>>} */ let collection;\n        /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */ let features;\n        if (Array.isArray(options.features)) features = options.features;\n        else if (options.features) {\n            collection = options.features;\n            features = collection.getArray();\n        }\n        if (!useSpatialIndex && collection === undefined) collection = new (0, $931ffc4e747c14db$export$2e2bcd8739ae039)(features);\n        if (features !== undefined) this.addFeaturesInternal(features);\n        if (collection !== undefined) this.bindFeaturesCollection_(collection);\n    }\n    /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,\n   * meaning that if a feature with a duplicate id is added in the collection, it will\n   * be removed from it right away.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\n   * @api\n   */ addFeature(feature) {\n        this.addFeatureInternal(feature);\n        this.changed();\n    }\n    /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */ addFeatureInternal(feature) {\n        const featureKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n        if (!this.addToIndex_(featureKey, feature)) {\n            if (this.featuresCollection_) this.featuresCollection_.remove(feature);\n            return;\n        }\n        this.setupChangeEvents_(featureKey, feature);\n        const geometry = feature.getGeometry();\n        if (geometry) {\n            const extent = geometry.getExtent();\n            if (this.featuresRtree_) this.featuresRtree_.insert(extent, feature);\n        } else this.nullGeometryFeatures_[featureKey] = feature;\n        this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).ADDFEATURE, feature));\n    }\n    /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @private\n   */ setupChangeEvents_(featureKey, feature) {\n        this.featureChangeKeys_[featureKey] = [\n            (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(feature, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleFeatureChange_, this),\n            (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(feature, (0, $e881b5dca21eb5d4$export$2e2bcd8739ae039).PROPERTYCHANGE, this.handleFeatureChange_, this)\n        ];\n    }\n    /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */ addToIndex_(featureKey, feature) {\n        let valid = true;\n        const id = feature.getId();\n        if (id !== undefined) {\n            if (!(id.toString() in this.idIndex_)) this.idIndex_[id.toString()] = feature;\n            else valid = false;\n        }\n        if (valid) {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(!(featureKey in this.uidIndex_), \"The passed `feature` was already added to the source\");\n            this.uidIndex_[featureKey] = feature;\n        }\n        return valid;\n    }\n    /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\n   * @api\n   */ addFeatures(features) {\n        this.addFeaturesInternal(features);\n        this.changed();\n    }\n    /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\n   * @protected\n   */ addFeaturesInternal(features) {\n        const extents = [];\n        const newFeatures = [];\n        const geometryFeatures = [];\n        for(let i = 0, length = features.length; i < length; i++){\n            const feature = features[i];\n            const featureKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n            if (this.addToIndex_(featureKey, feature)) newFeatures.push(feature);\n        }\n        for(let i = 0, length = newFeatures.length; i < length; i++){\n            const feature = newFeatures[i];\n            const featureKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n            this.setupChangeEvents_(featureKey, feature);\n            const geometry = feature.getGeometry();\n            if (geometry) {\n                const extent = geometry.getExtent();\n                extents.push(extent);\n                geometryFeatures.push(feature);\n            } else this.nullGeometryFeatures_[featureKey] = feature;\n        }\n        if (this.featuresRtree_) this.featuresRtree_.load(extents, geometryFeatures);\n        if (this.hasListener((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).ADDFEATURE)) for(let i = 0, length = newFeatures.length; i < length; i++)this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).ADDFEATURE, newFeatures[i]));\n    }\n    /**\n   * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\n   * @private\n   */ bindFeaturesCollection_(collection) {\n        let modifyingCollection = false;\n        this.addEventListener((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).ADDFEATURE, /**\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\n       */ function(evt) {\n            if (!modifyingCollection) {\n                modifyingCollection = true;\n                collection.push(evt.feature);\n                modifyingCollection = false;\n            }\n        });\n        this.addEventListener((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).REMOVEFEATURE, /**\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\n       */ function(evt) {\n            if (!modifyingCollection) {\n                modifyingCollection = true;\n                collection.remove(evt.feature);\n                modifyingCollection = false;\n            }\n        });\n        collection.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).ADD, /**\n       * @param {import(\"../Collection.js\").CollectionEvent<import(\"../Feature.js\").default<Geometry>>} evt The collection event\n       */ (evt)=>{\n            if (!modifyingCollection) {\n                modifyingCollection = true;\n                this.addFeature(evt.element);\n                modifyingCollection = false;\n            }\n        });\n        collection.addEventListener((0, $161dd067fe2d672c$export$2e2bcd8739ae039).REMOVE, /**\n       * @param {import(\"../Collection.js\").CollectionEvent<import(\"../Feature.js\").default<Geometry>>} evt The collection event\n       */ (evt)=>{\n            if (!modifyingCollection) {\n                modifyingCollection = true;\n                this.removeFeature(evt.element);\n                modifyingCollection = false;\n            }\n        });\n        this.featuresCollection_ = collection;\n    }\n    /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.\n   * @api\n   */ clear(fast) {\n        if (fast) {\n            for(const featureId in this.featureChangeKeys_){\n                const keys = this.featureChangeKeys_[featureId];\n                keys.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n            }\n            if (!this.featuresCollection_) {\n                this.featureChangeKeys_ = {};\n                this.idIndex_ = {};\n                this.uidIndex_ = {};\n            }\n        } else if (this.featuresRtree_) {\n            const removeAndIgnoreReturn = (feature)=>{\n                this.removeFeatureInternal(feature);\n            };\n            this.featuresRtree_.forEach(removeAndIgnoreReturn);\n            for(const id in this.nullGeometryFeatures_)this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n        if (this.featuresCollection_) this.featuresCollection_.clear();\n        if (this.featuresRtree_) this.featuresRtree_.clear();\n        this.nullGeometryFeatures_ = {};\n        const clearEvent = new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).CLEAR);\n        this.dispatchEvent(clearEvent);\n        this.changed();\n    }\n    /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */ forEachFeature(callback) {\n        if (this.featuresRtree_) return this.featuresRtree_.forEach(callback);\n        if (this.featuresCollection_) this.featuresCollection_.forEach(callback);\n    }\n    /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */ forEachFeatureAtCoordinateDirect(coordinate, callback) {\n        const extent = [\n            coordinate[0],\n            coordinate[1],\n            coordinate[0],\n            coordinate[1]\n        ];\n        return this.forEachFeatureInExtent(extent, function(feature) {\n            const geometry = feature.getGeometry();\n            if (geometry.intersectsCoordinate(coordinate)) return callback(feature);\n            return undefined;\n        });\n    }\n    /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */ forEachFeatureInExtent(extent, callback) {\n        if (this.featuresRtree_) return this.featuresRtree_.forEachInExtent(extent, callback);\n        if (this.featuresCollection_) this.featuresCollection_.forEach(callback);\n    }\n    /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */ forEachFeatureIntersectingExtent(extent, callback) {\n        return this.forEachFeatureInExtent(extent, /**\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n       * @return {T|undefined} The return value from the last call to the callback.\n       */ function(feature) {\n            const geometry = feature.getGeometry();\n            if (geometry.intersectsExtent(extent)) {\n                const result = callback(feature);\n                if (result) return result;\n            }\n        });\n    }\n    /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection~Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default<Geometry>>|null} The collection of features.\n   * @api\n   */ getFeaturesCollection() {\n        return this.featuresCollection_;\n    }\n    /**\n   * Get a snapshot of the features currently on the source in random order. The returned array\n   * is a copy, the features are references to the features in the source.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */ getFeatures() {\n        let features;\n        if (this.featuresCollection_) features = this.featuresCollection_.getArray().slice(0);\n        else if (this.featuresRtree_) {\n            features = this.featuresRtree_.getAll();\n            if (!(0, $beaefe87199bb537$export$dd1bc94b04021eeb)(this.nullGeometryFeatures_)) (0, $b998d41b678ed5d1$export$8b58be045bf06082)(features, Object.values(this.nullGeometryFeatures_));\n        }\n        return /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */ features;\n    }\n    /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */ getFeaturesAtCoordinate(coordinate) {\n        const features = [];\n        this.forEachFeatureAtCoordinateDirect(coordinate, function(feature) {\n            features.push(feature);\n        });\n        return features;\n    }\n    /**\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * When `useSpatialIndex` is set to false, this method will return all\n   * features.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Include features\n   * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */ getFeaturesInExtent(extent, projection) {\n        if (this.featuresRtree_) {\n            const multiWorld = projection && projection.canWrapX() && this.getWrapX();\n            if (!multiWorld) return this.featuresRtree_.getInExtent(extent);\n            const extents = (0, $6da4c8ed3074c92b$export$9031237f01de0947)(extent, projection);\n            return [].concat(...extents.map((anExtent)=>this.featuresRtree_.getInExtent(anExtent)));\n        }\n        if (this.featuresCollection_) return this.featuresCollection_.getArray().slice(0);\n        return [];\n    }\n    /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>):boolean} [filter] Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\n   * @api\n   */ getClosestFeatureToCoordinate(coordinate, filter) {\n        // Find the closest feature using branch and bound.  We start searching an\n        // infinite extent, and find the distance from the first feature found.  This\n        // becomes the closest feature.  We then compute a smaller extent which any\n        // closer feature must intersect.  We continue searching with this smaller\n        // extent, trying to find a closer feature.  Every time we find a closer\n        // feature, we update the extent being searched so that any even closer\n        // feature must intersect it.  We continue until we run out of features.\n        const x = coordinate[0];\n        const y = coordinate[1];\n        let closestFeature = null;\n        const closestPoint = [\n            NaN,\n            NaN\n        ];\n        let minSquaredDistance = Infinity;\n        const extent = [\n            -Infinity,\n            -Infinity,\n            Infinity,\n            Infinity\n        ];\n        filter = filter ? filter : (0, $013a1733c226ec50$export$22e23a2304399231);\n        this.featuresRtree_.forEachInExtent(extent, /**\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n       */ function(feature) {\n            if (filter(feature)) {\n                const geometry = feature.getGeometry();\n                const previousMinSquaredDistance = minSquaredDistance;\n                minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n                if (minSquaredDistance < previousMinSquaredDistance) {\n                    closestFeature = feature;\n                    // This is sneaky.  Reduce the extent that it is currently being\n                    // searched while the R-Tree traversal using this same extent object\n                    // is still in progress.  This is safe because the new extent is\n                    // strictly contained by the old extent.\n                    const minDistance = Math.sqrt(minSquaredDistance);\n                    extent[0] = x - minDistance;\n                    extent[1] = y - minDistance;\n                    extent[2] = x + minDistance;\n                    extent[3] = y + minDistance;\n                }\n            }\n        });\n        return closestFeature;\n    }\n    /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} [extent] Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */ getExtent(extent) {\n        return this.featuresRtree_.getExtent(extent);\n    }\n    /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\n   * @api\n   */ getFeatureById(id) {\n        const feature = this.idIndex_[id.toString()];\n        return feature !== undefined ? feature : null;\n    }\n    /**\n   * Get a feature by its internal unique identifier (using `getUid`).\n   *\n   * @param {string} uid Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\n   */ getFeatureByUid(uid) {\n        const feature = this.uidIndex_[uid];\n        return feature !== undefined ? feature : null;\n    }\n    /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */ getFormat() {\n        return this.format_;\n    }\n    /**\n   * @return {boolean} The source can have overlapping geometries.\n   */ getOverlaps() {\n        return this.overlaps_;\n    }\n    /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */ getUrl() {\n        return this.url_;\n    }\n    /**\n   * @param {Event} event Event.\n   * @private\n   */ handleFeatureChange_(event) {\n        const feature = /** @type {import(\"../Feature.js\").default<Geometry>} */ event.target;\n        const featureKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n        const geometry = feature.getGeometry();\n        if (!geometry) {\n            if (!(featureKey in this.nullGeometryFeatures_)) {\n                if (this.featuresRtree_) this.featuresRtree_.remove(feature);\n                this.nullGeometryFeatures_[featureKey] = feature;\n            }\n        } else {\n            const extent = geometry.getExtent();\n            if (featureKey in this.nullGeometryFeatures_) {\n                delete this.nullGeometryFeatures_[featureKey];\n                if (this.featuresRtree_) this.featuresRtree_.insert(extent, feature);\n            } else if (this.featuresRtree_) this.featuresRtree_.update(extent, feature);\n        }\n        const id = feature.getId();\n        if (id !== undefined) {\n            const sid = id.toString();\n            if (this.idIndex_[sid] !== feature) {\n                this.removeFromIdIndex_(feature);\n                this.idIndex_[sid] = feature;\n            }\n        } else {\n            this.removeFromIdIndex_(feature);\n            this.uidIndex_[featureKey] = feature;\n        }\n        this.changed();\n        this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).CHANGEFEATURE, feature));\n    }\n    /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */ hasFeature(feature) {\n        const id = feature.getId();\n        if (id !== undefined) return id in this.idIndex_;\n        return (0, $6c5e11070e371322$export$5e82334337e0f204)(feature) in this.uidIndex_;\n    }\n    /**\n   * @return {boolean} Is empty.\n   */ isEmpty() {\n        if (this.featuresRtree_) return this.featuresRtree_.isEmpty() && (0, $beaefe87199bb537$export$dd1bc94b04021eeb)(this.nullGeometryFeatures_);\n        if (this.featuresCollection_) return this.featuresCollection_.getLength() === 0;\n        return true;\n    }\n    /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */ loadFeatures(extent, resolution, projection) {\n        const loadedExtentsRtree = this.loadedExtentsRtree_;\n        const extentsToLoad = this.strategy_(extent, resolution, projection);\n        for(let i = 0, ii = extentsToLoad.length; i < ii; ++i){\n            const extentToLoad = extentsToLoad[i];\n            const alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad, /**\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n         * @return {boolean} Contains.\n         */ function(object) {\n                return (0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(object.extent, extentToLoad);\n            });\n            if (!alreadyLoaded) {\n                ++this.loadingExtentsCount_;\n                this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).FEATURESLOADSTART));\n                this.loader_.call(this, extentToLoad, resolution, projection, (features)=>{\n                    --this.loadingExtentsCount_;\n                    this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).FEATURESLOADEND, undefined, features));\n                }, ()=>{\n                    --this.loadingExtentsCount_;\n                    this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).FEATURESLOADERROR));\n                });\n                loadedExtentsRtree.insert(extentToLoad, {\n                    extent: extentToLoad.slice()\n                });\n            }\n        }\n        this.loading = this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\n    }\n    refresh() {\n        this.clear(true);\n        this.loadedExtentsRtree_.clear();\n        super.refresh();\n    }\n    /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */ removeLoadedExtent(extent) {\n        const loadedExtentsRtree = this.loadedExtentsRtree_;\n        let obj;\n        loadedExtentsRtree.forEachInExtent(extent, function(object) {\n            if ((0, $6da4c8ed3074c92b$export$e9bab7fafb253603)(object.extent, extent)) {\n                obj = object;\n                return true;\n            }\n        });\n        if (obj) loadedExtentsRtree.remove(obj);\n    }\n    /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\n   * @api\n   */ removeFeature(feature) {\n        if (!feature) return;\n        const featureKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n        if (featureKey in this.nullGeometryFeatures_) delete this.nullGeometryFeatures_[featureKey];\n        else if (this.featuresRtree_) this.featuresRtree_.remove(feature);\n        const result = this.removeFeatureInternal(feature);\n        if (result) this.changed();\n    }\n    /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {import(\"../Feature.js\").default<Geometry>|undefined} The removed feature\n   *     (or undefined if the feature was not found).\n   * @protected\n   */ removeFeatureInternal(feature) {\n        const featureKey = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n        const featureChangeKeys = this.featureChangeKeys_[featureKey];\n        if (!featureChangeKeys) return;\n        featureChangeKeys.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        delete this.featureChangeKeys_[featureKey];\n        const id = feature.getId();\n        if (id !== undefined) delete this.idIndex_[id.toString()];\n        delete this.uidIndex_[featureKey];\n        this.dispatchEvent(new $84888e4daf3fdf44$export$d402fd02dc2b661c((0, $ccc4e6f11f11978f$export$2e2bcd8739ae039).REMOVEFEATURE, feature));\n        return feature;\n    }\n    /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */ removeFromIdIndex_(feature) {\n        let removed = false;\n        for(const id in this.idIndex_)if (this.idIndex_[id] === feature) {\n            delete this.idIndex_[id];\n            removed = true;\n            break;\n        }\n        return removed;\n    }\n    /**\n   * Set the new loader of the source. The next render cycle will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */ setLoader(loader) {\n        this.loader_ = loader;\n    }\n    /**\n   * Points the source to a new url. The next render cycle will use the new url.\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n   * @api\n   */ setUrl(url) {\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(this.format_, \"`format` must be set when `url` is set\");\n        this.url_ = url;\n        this.setLoader((0, $588823c001569193$export$14cc81df70b6707e)(url, this.format_));\n    }\n}\nvar $84888e4daf3fdf44$export$2e2bcd8739ae039 = $84888e4daf3fdf44$var$VectorSource;\n\n\n/**\n * @module ol/format/GeoJSON\n */ /**\n * @module ol/Feature\n */ \n\n\n\n/**\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\n */ /**\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\n */ /***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:geometry', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types\n *     |'change:geometry', Return>} FeatureOnSignature\n */ /***\n * @template Geometry\n * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry\n */ /**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature.js';\n * import Polygon from 'ol/geom/Polygon.js';\n * import Point from 'ol/geom/Point.js';\n *\n * const feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon',\n * });\n *\n * // get the polygon geometry\n * const poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * const point = feature.getGeometry();\n * ```\n *\n * @api\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\n */ class $9fd014ab6df63665$var$Feature extends (0, $b68b3d6e32e3074a$export$2e2bcd8739ae039) {\n    /**\n   * @param {Geometry|ObjectWithGeometry<Geometry>} [geometryOrProperties]\n   *     You may pass a Geometry object directly, or an object literal containing\n   *     properties. If you pass an object literal, you may include a Geometry\n   *     associated with a `geometry` key.\n   */ constructor(geometryOrProperties){\n        super();\n        /***\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\n     */ this.on;\n        /***\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\n     */ this.once;\n        /***\n     * @type {FeatureOnSignature<void>}\n     */ this.un;\n        /**\n     * @private\n     * @type {number|string|undefined}\n     */ this.id_ = undefined;\n        /**\n     * @type {string}\n     * @private\n     */ this.geometryName_ = \"geometry\";\n        /**\n     * User provided style.\n     * @private\n     * @type {import(\"./style/Style.js\").StyleLike}\n     */ this.style_ = null;\n        /**\n     * @private\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\n     */ this.styleFunction_ = undefined;\n        /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */ this.geometryChangeKey_ = null;\n        this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\n        if (geometryOrProperties) {\n            if (typeof /** @type {?} */ geometryOrProperties.getSimplifiedGeometry === \"function\") {\n                const geometry = /** @type {Geometry} */ geometryOrProperties;\n                this.setGeometry(geometry);\n            } else {\n                /** @type {Object<string, *>} */ const properties = geometryOrProperties;\n                this.setProperties(properties);\n            }\n        }\n    }\n    /**\n   * Clone this feature. If the original feature has a geometry it\n   * is also cloned. The feature id is not set in the clone.\n   * @return {Feature<Geometry>} The clone.\n   * @api\n   */ clone() {\n        const clone = /** @type {Feature<Geometry>} */ new $9fd014ab6df63665$var$Feature(this.hasProperties() ? this.getProperties() : null);\n        clone.setGeometryName(this.getGeometryName());\n        const geometry = this.getGeometry();\n        if (geometry) clone.setGeometry(/** @type {Geometry} */ geometry.clone());\n        const style = this.getStyle();\n        if (style) clone.setStyle(style);\n        return clone;\n    }\n    /**\n   * Get the feature's default geometry.  A feature may have any number of named\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n   * @return {Geometry|undefined} The default geometry for the feature.\n   * @api\n   * @observable\n   */ getGeometry() {\n        return /** @type {Geometry|undefined} */ this.get(this.geometryName_);\n    }\n    /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is either set when reading data from a remote source or set explicitly by\n   * calling {@link module:ol/Feature~Feature#setId}.\n   * @return {number|string|undefined} Id.\n   * @api\n   */ getId() {\n        return this.id_;\n    }\n    /**\n   * Get the name of the feature's default geometry.  By default, the default\n   * geometry is named `geometry`.\n   * @return {string} Get the property name associated with the default geometry\n   *     for this feature.\n   * @api\n   */ getGeometryName() {\n        return this.geometryName_;\n    }\n    /**\n   * Get the feature's style. Will return what was provided to the\n   * {@link module:ol/Feature~Feature#setStyle} method.\n   * @return {import(\"./style/Style.js\").StyleLike|undefined} The feature style.\n   * @api\n   */ getStyle() {\n        return this.style_;\n    }\n    /**\n   * Get the feature's style function.\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\n   * representing the current style of this feature.\n   * @api\n   */ getStyleFunction() {\n        return this.styleFunction_;\n    }\n    /**\n   * @private\n   */ handleGeometryChange_() {\n        this.changed();\n    }\n    /**\n   * @private\n   */ handleGeometryChanged_() {\n        if (this.geometryChangeKey_) {\n            (0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921)(this.geometryChangeKey_);\n            this.geometryChangeKey_ = null;\n        }\n        const geometry = this.getGeometry();\n        if (geometry) this.geometryChangeKey_ = (0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(geometry, (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.handleGeometryChange_, this);\n        this.changed();\n    }\n    /**\n   * Set the default geometry for the feature.  This will update the property\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n   * @param {Geometry|undefined} geometry The new geometry.\n   * @api\n   * @observable\n   */ setGeometry(geometry) {\n        this.set(this.geometryName_, geometry);\n    }\n    /**\n   * Set the style for the feature to override the layer style.  This can be a\n   * single style object, an array of styles, or a function that takes a\n   * resolution and returns an array of styles. To unset the feature style, call\n   * `setStyle()` without arguments or a falsey value.\n   * @param {import(\"./style/Style.js\").StyleLike} [style] Style for this feature.\n   * @api\n   * @fires module:ol/events/Event~BaseEvent#event:change\n   */ setStyle(style) {\n        this.style_ = style;\n        this.styleFunction_ = !style ? undefined : $9fd014ab6df63665$export$bb06ddfd5d66e02e(style);\n        this.changed();\n    }\n    /**\n   * Set the feature id.  The feature id is considered stable and may be used when\n   * requesting features or comparing identifiers returned from a remote source.\n   * The feature id can be used with the\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n   * @param {number|string|undefined} id The feature id.\n   * @api\n   * @fires module:ol/events/Event~BaseEvent#event:change\n   */ setId(id) {\n        this.id_ = id;\n        this.changed();\n    }\n    /**\n   * Set the property name to be used when getting the feature's default geometry.\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n   * this name will be returned.\n   * @param {string} name The property name of the default geometry.\n   * @api\n   */ setGeometryName(name) {\n        this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);\n        this.geometryName_ = name;\n        this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\n        this.handleGeometryChanged_();\n    }\n}\nfunction $9fd014ab6df63665$export$bb06ddfd5d66e02e(obj) {\n    if (typeof obj === \"function\") return obj;\n    /**\n   * @type {Array<import(\"./style/Style.js\").default>}\n   */ let styles;\n    if (Array.isArray(obj)) styles = obj;\n    else {\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof /** @type {?} */ obj.getZIndex === \"function\", \"Expected an `ol/style/Style` or an array of `ol/style/Style.js`\");\n        const style = /** @type {import(\"./style/Style.js\").default} */ obj;\n        styles = [\n            style\n        ];\n    }\n    return function() {\n        return styles;\n    };\n}\nvar $9fd014ab6df63665$export$2e2bcd8739ae039 = $9fd014ab6df63665$var$Feature;\n\n\n/**\n * @module ol/geom/GeometryCollection\n */ \n\n\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */ class $0e4f3959219eede5$var$GeometryCollection extends (0, $50db89a00eb954f6$export$2e2bcd8739ae039) {\n    /**\n   * @param {Array<Geometry>} [geometries] Geometries.\n   */ constructor(geometries){\n        super();\n        /**\n     * @private\n     * @type {Array<Geometry>}\n     */ this.geometries_ = geometries ? geometries : null;\n        /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */ this.changeEventsKeys_ = [];\n        this.listenGeometriesChange_();\n    }\n    /**\n   * @private\n   */ unlistenGeometriesChange_() {\n        this.changeEventsKeys_.forEach((0, $d5bf8abd656a3cdc$export$b0a21c8b3c1c921));\n        this.changeEventsKeys_.length = 0;\n    }\n    /**\n   * @private\n   */ listenGeometriesChange_() {\n        if (!this.geometries_) return;\n        for(let i = 0, ii = this.geometries_.length; i < ii; ++i)this.changeEventsKeys_.push((0, $d5bf8abd656a3cdc$export$63174c828edd6ff8)(this.geometries_[i], (0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, this.changed, this));\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */ clone() {\n        const geometryCollection = new $0e4f3959219eede5$var$GeometryCollection(null);\n        geometryCollection.setGeometries(this.geometries_);\n        geometryCollection.applyProperties(this);\n        return geometryCollection;\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n        return minSquaredDistance;\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */ containsXY(x, y) {\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i){\n            if (geometries[i].containsXY(x, y)) return true;\n        }\n        return false;\n    }\n    /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */ computeExtent(extent) {\n        (0, $6da4c8ed3074c92b$export$3e2152b047719fa1)(extent);\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)(0, $6da4c8ed3074c92b$export$8b58be045bf06082)(extent, geometries[i].getExtent());\n        return extent;\n    }\n    /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */ getGeometries() {\n        return $0e4f3959219eede5$var$cloneGeometries(this.geometries_);\n    }\n    /**\n   * @return {Array<Geometry>} Geometries.\n   */ getGeometriesArray() {\n        return this.geometries_;\n    }\n    /**\n   * @return {Array<Geometry>} Geometries.\n   */ getGeometriesArrayRecursive() {\n        /** @type {Array<Geometry>} */ let geometriesArray = [];\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)if (geometries[i].getType() === this.getType()) geometriesArray = geometriesArray.concat(/** @type {GeometryCollection} */ geometries[i].getGeometriesArrayRecursive());\n        else geometriesArray.push(geometries[i]);\n        return geometriesArray;\n    }\n    /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */ getSimplifiedGeometry(squaredTolerance) {\n        if (this.simplifiedGeometryRevision !== this.getRevision()) {\n            this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n            this.simplifiedGeometryRevision = this.getRevision();\n        }\n        if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance) return this;\n        const simplifiedGeometries = [];\n        const geometries = this.geometries_;\n        let simplified = false;\n        for(let i = 0, ii = geometries.length; i < ii; ++i){\n            const geometry = geometries[i];\n            const simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n            simplifiedGeometries.push(simplifiedGeometry);\n            if (simplifiedGeometry !== geometry) simplified = true;\n        }\n        if (simplified) {\n            const simplifiedGeometryCollection = new $0e4f3959219eede5$var$GeometryCollection(null);\n            simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n            return simplifiedGeometryCollection;\n        }\n        this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n        return this;\n    }\n    /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */ getType() {\n        return \"GeometryCollection\";\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */ intersectsExtent(extent) {\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i){\n            if (geometries[i].intersectsExtent(extent)) return true;\n        }\n        return false;\n    }\n    /**\n   * @return {boolean} Is empty.\n   */ isEmpty() {\n        return this.geometries_.length === 0;\n    }\n    /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */ rotate(angle, anchor) {\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)geometries[i].rotate(angle, anchor);\n        this.changed();\n    }\n    /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */ scale(sx, sy, anchor) {\n        if (!anchor) anchor = (0, $6da4c8ed3074c92b$export$c91255cadecfe081)(this.getExtent());\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)geometries[i].scale(sx, sy, anchor);\n        this.changed();\n    }\n    /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */ setGeometries(geometries) {\n        this.setGeometriesArray($0e4f3959219eede5$var$cloneGeometries(geometries));\n    }\n    /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */ setGeometriesArray(geometries) {\n        this.unlistenGeometriesChange_();\n        this.geometries_ = geometries;\n        this.listenGeometriesChange_();\n        this.changed();\n    }\n    /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */ applyTransform(transformFn) {\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)geometries[i].applyTransform(transformFn);\n        this.changed();\n    }\n    /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */ translate(deltaX, deltaY) {\n        const geometries = this.geometries_;\n        for(let i = 0, ii = geometries.length; i < ii; ++i)geometries[i].translate(deltaX, deltaY);\n        this.changed();\n    }\n    /**\n   * Clean up.\n   */ disposeInternal() {\n        this.unlistenGeometriesChange_();\n        super.disposeInternal();\n    }\n}\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */ function $0e4f3959219eede5$var$cloneGeometries(geometries) {\n    const clonedGeometries = [];\n    for(let i = 0, ii = geometries.length; i < ii; ++i)clonedGeometries.push(geometries[i].clone());\n    return clonedGeometries;\n}\nvar $0e4f3959219eede5$export$2e2bcd8739ae039 = $0e4f3959219eede5$var$GeometryCollection;\n\n\n/**\n * @module ol/format/JSONFeature\n */ /**\n * @module ol/format/Feature\n */ \n\n/**\n * @typedef {Object} ReadOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\n * If not provided, the projection will be derived from the data (where possible) or\n * the `dataProjection` of the format is assigned (where set). If the projection\n * can not be derived from the data and if no `dataProjection` is set for a format,\n * the features will not be reprojected.\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\n * This is only required when reading data with tile pixels as geometry units. When configured,\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\n * provided.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * created by the format reader. If not provided, features will be returned in the\n * `dataProjection`.\n */ /**\n * @typedef {Object} WriteOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\n * If not provided, the `dataProjection` of the format is assigned (where set).\n * If no `dataProjection` is set for a format, the features will be returned\n * in the `featureProjection`.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * that will be serialized by the format writer. If not provided, geometries are assumed\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\n * as they are provided at construction.  If `true`, the right-hand rule will\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\n * exterior and counter-clockwise for interior rings).  Note that not all\n * formats support this.  The GeoJSON format does use this property when writing\n * geometries.\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\n * coordinates with a large number of decimal places, not generally wanted on output.\n * Set a number here to round coordinates. Can also be used to ensure that\n * coordinates read in can be written back out with the same number of decimals.\n * Default is no rounding.\n */ /**\n * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type\n */ /**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for feature formats.\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\n * file formats.  See the documentation for each format for more details.\n *\n * @abstract\n * @api\n */ class $ec084d0ff9c13a22$var$FeatureFormat {\n    constructor(){\n        /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */ this.dataProjection = undefined;\n        /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */ this.defaultFeatureProjection = undefined;\n        /**\n     * A list media types supported by the format in descending order of preference.\n     * @type {Array<string>}\n     */ this.supportedMediaTypes = null;\n    }\n    /**\n   * Adds the data projection to the read options.\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [options] Options.\n   * @return {ReadOptions|undefined} Options.\n   * @protected\n   */ getReadOptions(source, options) {\n        if (options) {\n            let dataProjection = options.dataProjection ? (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.dataProjection) : this.readProjection(source);\n            if (options.extent && dataProjection && dataProjection.getUnits() === \"tile-pixels\") {\n                dataProjection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(dataProjection);\n                dataProjection.setWorldExtent(options.extent);\n            }\n            options = {\n                dataProjection: dataProjection,\n                featureProjection: options.featureProjection\n            };\n        }\n        return this.adaptOptions(options);\n    }\n    /**\n   * Sets the `dataProjection` on the options, if no `dataProjection`\n   * is set.\n   * @param {WriteOptions|ReadOptions|undefined} options\n   *     Options.\n   * @protected\n   * @return {WriteOptions|ReadOptions|undefined}\n   *     Updated options.\n   */ adaptOptions(options) {\n        return Object.assign({\n            dataProjection: this.dataProjection,\n            featureProjection: this.defaultFeatureProjection\n        }, options);\n    }\n    /**\n   * @abstract\n   * @return {Type} The format type.\n   */ getType() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Read a single feature from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").FeatureLike} Feature.\n   */ readFeature(source, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Read all features from a source.\n   *\n   * @abstract\n   * @param {Document|Element|ArrayBuffer|Object|string} source Source.\n   * @param {ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */ readFeatures(source, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Read a single geometry from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */ readGeometry(source, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Read the projection from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   */ readProjection(source) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Encode a feature in this format.\n   *\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */ writeFeature(feature, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Encode an array of features in this format.\n   *\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */ writeFeatures(features, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Write a single geometry in this format.\n   *\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */ writeGeometry(geometry, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n}\nvar $ec084d0ff9c13a22$export$2e2bcd8739ae039 = $ec084d0ff9c13a22$var$FeatureFormat;\nfunction $ec084d0ff9c13a22$export$7beeea566b560d4(geometry, write, options) {\n    const featureProjection = options ? (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.featureProjection) : null;\n    const dataProjection = options ? (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.dataProjection) : null;\n    let transformed;\n    if (featureProjection && dataProjection && !(0, $9c4744460e43e41b$export$fe091d73a555748b)(featureProjection, dataProjection)) transformed = (write ? geometry.clone() : geometry).transform(write ? featureProjection : dataProjection, write ? dataProjection : featureProjection);\n    else transformed = geometry;\n    if (write && options && /** @type {WriteOptions} */ options.decimals !== undefined) {\n        const power = Math.pow(10, /** @type {WriteOptions} */ options.decimals);\n        // if decimals option on write, round each coordinate appropriately\n        /**\n     * @param {Array<number>} coordinates Coordinates.\n     * @return {Array<number>} Transformed coordinates.\n     */ const transform = function(coordinates) {\n            for(let i = 0, ii = coordinates.length; i < ii; ++i)coordinates[i] = Math.round(coordinates[i] * power) / power;\n            return coordinates;\n        };\n        if (transformed === geometry) transformed = geometry.clone();\n        transformed.applyTransform(transform);\n    }\n    return transformed;\n}\nfunction $ec084d0ff9c13a22$export$d3e9e4b1c7f2405c(extent, options) {\n    const featureProjection = options ? (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.featureProjection) : null;\n    const dataProjection = options ? (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.dataProjection) : null;\n    if (featureProjection && dataProjection && !(0, $9c4744460e43e41b$export$fe091d73a555748b)(featureProjection, dataProjection)) return (0, $9c4744460e43e41b$export$751c68e0e0efff79)(extent, dataProjection, featureProjection);\n    return extent;\n}\n\n\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */ class $2f9f6f6b6e1ba437$var$JSONFeature extends (0, $ec084d0ff9c13a22$export$2e2bcd8739ae039) {\n    constructor(){\n        super();\n    }\n    /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */ getType() {\n        return \"json\";\n    }\n    /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */ readFeature(source, options) {\n        return this.readFeatureFromObject($2f9f6f6b6e1ba437$var$getObject(source), this.getReadOptions(source, options));\n    }\n    /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */ readFeatures(source, options) {\n        return this.readFeaturesFromObject($2f9f6f6b6e1ba437$var$getObject(source), this.getReadOptions(source, options));\n    }\n    /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */ readFeatureFromObject(object, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */ readFeaturesFromObject(object, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */ readGeometry(source, options) {\n        return this.readGeometryFromObject($2f9f6f6b6e1ba437$var$getObject(source), this.getReadOptions(source, options));\n    }\n    /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */ readGeometryFromObject(object, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */ readProjection(source) {\n        return this.readProjectionFromObject($2f9f6f6b6e1ba437$var$getObject(source));\n    }\n    /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */ readProjectionFromObject(object) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */ writeFeature(feature, options) {\n        return JSON.stringify(this.writeFeatureObject(feature, options));\n    }\n    /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */ writeFeatureObject(feature, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */ writeFeatures(features, options) {\n        return JSON.stringify(this.writeFeaturesObject(features, options));\n    }\n    /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */ writeFeaturesObject(features, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   */ writeGeometry(geometry, options) {\n        return JSON.stringify(this.writeGeometryObject(geometry, options));\n    }\n    /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */ writeGeometryObject(geometry, options) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n}\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */ function $2f9f6f6b6e1ba437$var$getObject(source) {\n    if (typeof source === \"string\") {\n        const object = JSON.parse(source);\n        return object ? /** @type {Object} */ object : null;\n    }\n    if (source !== null) return source;\n    return null;\n}\nvar $2f9f6f6b6e1ba437$export$2e2bcd8739ae039 = $2f9f6f6b6e1ba437$var$JSONFeature;\n\n\n/**\n * @module ol/geom/LineString\n */ \n\n\n\n\n\n\n\n/**\n * @module ol/geom/flat/interpolate\n */ \n\nfunction $43ed5485a1d0c509$export$687ff82efd78795b(flatCoordinates, offset, end, stride, fraction, dest, dimension) {\n    let o, t;\n    const n = (end - offset) / stride;\n    if (n === 1) o = offset;\n    else if (n === 2) {\n        o = offset;\n        t = fraction;\n    } else if (n !== 0) {\n        let x1 = flatCoordinates[offset];\n        let y1 = flatCoordinates[offset + 1];\n        let length = 0;\n        const cumulativeLengths = [\n            0\n        ];\n        for(let i = offset + stride; i < end; i += stride){\n            const x2 = flatCoordinates[i];\n            const y2 = flatCoordinates[i + 1];\n            length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n            cumulativeLengths.push(length);\n            x1 = x2;\n            y1 = y2;\n        }\n        const target = fraction * length;\n        const index = (0, $b998d41b678ed5d1$export$2e0ae67339d5f1ac)(cumulativeLengths, target);\n        if (index < 0) {\n            t = (target - cumulativeLengths[-index - 2]) / (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n            o = offset + (-index - 2) * stride;\n        } else o = offset + index * stride;\n    }\n    dimension = dimension > 1 ? dimension : 2;\n    dest = dest ? dest : new Array(dimension);\n    for(let i = 0; i < dimension; ++i)dest[i] = o === undefined ? NaN : t === undefined ? flatCoordinates[o + i] : (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\n    return dest;\n}\nfunction $43ed5485a1d0c509$export$8f44c3c220ef6f09(flatCoordinates, offset, end, stride, m, extrapolate) {\n    if (end == offset) return null;\n    let coordinate;\n    if (m < flatCoordinates[offset + stride - 1]) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(offset, offset + stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        return null;\n    }\n    if (flatCoordinates[end - 1] < m) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(end - stride, end);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        return null;\n    }\n    // FIXME use O(1) search\n    if (m == flatCoordinates[offset + stride - 1]) return flatCoordinates.slice(offset, offset + stride);\n    let lo = offset / stride;\n    let hi = end / stride;\n    while(lo < hi){\n        const mid = lo + hi >> 1;\n        if (m < flatCoordinates[(mid + 1) * stride - 1]) hi = mid;\n        else lo = mid + 1;\n    }\n    const m0 = flatCoordinates[lo * stride - 1];\n    if (m == m0) return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n    const m1 = flatCoordinates[(lo + 1) * stride - 1];\n    const t = (m - m0) / (m1 - m0);\n    coordinate = [];\n    for(let i = 0; i < stride - 1; ++i)coordinate.push((0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));\n    coordinate.push(m);\n    return coordinate;\n}\nfunction $43ed5485a1d0c509$export$6a3300857e9ef453(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {\n    if (interpolate) return $43ed5485a1d0c509$export$8f44c3c220ef6f09(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);\n    let coordinate;\n    if (m < flatCoordinates[stride - 1]) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(0, stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        return null;\n    }\n    if (flatCoordinates[flatCoordinates.length - 1] < m) {\n        if (extrapolate) {\n            coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n            coordinate[stride - 1] = m;\n            return coordinate;\n        }\n        return null;\n    }\n    for(let i = 0, ii = ends.length; i < ii; ++i){\n        const end = ends[i];\n        if (offset == end) continue;\n        if (m < flatCoordinates[offset + stride - 1]) return null;\n        if (m <= flatCoordinates[end - 1]) return $43ed5485a1d0c509$export$8f44c3c220ef6f09(flatCoordinates, offset, end, stride, m, false);\n        offset = end;\n    }\n    return null;\n}\n\n\n\n/**\n * @module ol/geom/flat/length\n */ /**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Length.\n */ function $bf04349d827c1d16$export$153f8c6b4d8caebc(flatCoordinates, offset, end, stride) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    let length = 0;\n    for(let i = offset + stride; i < end; i += stride){\n        const x2 = flatCoordinates[i];\n        const y2 = flatCoordinates[i + 1];\n        length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        x1 = x2;\n        y1 = y2;\n    }\n    return length;\n}\nfunction $bf04349d827c1d16$export$2bbb4f6f727a75c2(flatCoordinates, offset, end, stride) {\n    let perimeter = $bf04349d827c1d16$export$153f8c6b4d8caebc(flatCoordinates, offset, end, stride);\n    const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\n    const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\n    perimeter += Math.sqrt(dx * dx + dy * dy);\n    return perimeter;\n}\n\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */ class $292e4002746c8223$var$LineString extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */ constructor(coordinates, layout){\n        super();\n        /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */ this.flatMidpoint_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.flatMidpointRevision_ = -1;\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDelta_ = -1;\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDeltaRevision_ = -1;\n        if (layout !== undefined && !Array.isArray(coordinates[0])) this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n        else this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ coordinates, layout);\n    }\n    /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */ appendCoordinate(coordinate) {\n        if (!this.flatCoordinates) this.flatCoordinates = coordinate.slice();\n        else (0, $b998d41b678ed5d1$export$8b58be045bf06082)(this.flatCoordinates, coordinate);\n        this.changed();\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @api\n   */ clone() {\n        const lineString = new $292e4002746c8223$var$LineString(this.flatCoordinates.slice(), this.layout);\n        lineString.applyProperties(this);\n        return lineString;\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt((0, $bf5604c1b8258b71$export$bc2eb611ddf80103)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return (0, $bf5604c1b8258b71$export$4adc8e5135fb44c)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n    }\n    /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */ forEachSegment(callback) {\n        return (0, $3e64078bffae1cbd$export$4b80e395e36b5a56)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n    }\n    /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */ getCoordinateAtM(m, extrapolate) {\n        if (this.layout != \"XYM\" && this.layout != \"XYZM\") return null;\n        extrapolate = extrapolate !== undefined ? extrapolate : false;\n        return (0, $43ed5485a1d0c509$export$8f44c3c220ef6f09)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n    }\n    /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */ getCoordinates() {\n        return (0, $5454470599558ddd$export$9c0934e4e9c3f61e)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n    /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate} [dest] Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */ getCoordinateAt(fraction, dest) {\n        return (0, $43ed5485a1d0c509$export$687ff82efd78795b)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, dest, this.stride);\n    }\n    /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */ getLength() {\n        return (0, $bf04349d827c1d16$export$153f8c6b4d8caebc)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n    /**\n   * @return {Array<number>} Flat midpoint.\n   */ getFlatMidpoint() {\n        if (this.flatMidpointRevision_ != this.getRevision()) {\n            this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n            this.flatMidpointRevision_ = this.getRevision();\n        }\n        return this.flatMidpoint_;\n    }\n    /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} Simplified LineString.\n   * @protected\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        const simplifiedFlatCoordinates = [];\n        simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$ef693d1572e64fb8)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n        return new $292e4002746c8223$var$LineString(simplifiedFlatCoordinates, \"XY\");\n    }\n    /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */ getType() {\n        return \"LineString\";\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */ intersectsExtent(extent) {\n        return (0, $acee589e5b390c5c$export$40d8d71841a3d779)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n    }\n    /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 1);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        this.flatCoordinates.length = (0, $6b086aa46281540d$export$5c4daf67e03c190f)(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    }\n}\nvar $292e4002746c8223$export$2e2bcd8739ae039 = $292e4002746c8223$var$LineString;\n\n\n/**\n * @module ol/geom/MultiLineString\n */ \n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */ class $b4c0e2e13beea46e$var$MultiLineString extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n   *     combination with `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Flat coordinate ends for internal use.\n   */ constructor(coordinates, layout, ends){\n        super();\n        /**\n     * @type {Array<number>}\n     * @private\n     */ this.ends_ = [];\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDelta_ = -1;\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDeltaRevision_ = -1;\n        if (Array.isArray(coordinates[0])) this.setCoordinates(/** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ coordinates, layout);\n        else if (layout !== undefined && ends) {\n            this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n            this.ends_ = ends;\n        } else {\n            let layout = this.getLayout();\n            const lineStrings = /** @type {Array<LineString>} */ coordinates;\n            const flatCoordinates = [];\n            const ends = [];\n            for(let i = 0, ii = lineStrings.length; i < ii; ++i){\n                const lineString = lineStrings[i];\n                if (i === 0) layout = lineString.getLayout();\n                (0, $b998d41b678ed5d1$export$8b58be045bf06082)(flatCoordinates, lineString.getFlatCoordinates());\n                ends.push(flatCoordinates.length);\n            }\n            this.setFlatCoordinates(layout, flatCoordinates);\n            this.ends_ = ends;\n        }\n    }\n    /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */ appendLineString(lineString) {\n        if (!this.flatCoordinates) this.flatCoordinates = lineString.getFlatCoordinates().slice();\n        else (0, $b998d41b678ed5d1$export$8b58be045bf06082)(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n        this.ends_.push(this.flatCoordinates.length);\n        this.changed();\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @api\n   */ clone() {\n        const multiLineString = new $b4c0e2e13beea46e$var$MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n        multiLineString.applyProperties(this);\n        return multiLineString;\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt((0, $bf5604c1b8258b71$export$fbf31c8f2668ed5a)(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return (0, $bf5604c1b8258b71$export$5a48a0eefcf14992)(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n    }\n    /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @param {boolean} [interpolate] Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */ getCoordinateAtM(m, extrapolate, interpolate) {\n        if (this.layout != \"XYM\" && this.layout != \"XYZM\" || this.flatCoordinates.length === 0) return null;\n        extrapolate = extrapolate !== undefined ? extrapolate : false;\n        interpolate = interpolate !== undefined ? interpolate : false;\n        return (0, $43ed5485a1d0c509$export$6a3300857e9ef453)(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);\n    }\n    /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */ getCoordinates() {\n        return (0, $5454470599558ddd$export$cbb9596fc0f40db2)(this.flatCoordinates, 0, this.ends_, this.stride);\n    }\n    /**\n   * @return {Array<number>} Ends.\n   */ getEnds() {\n        return this.ends_;\n    }\n    /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */ getLineString(index) {\n        if (index < 0 || this.ends_.length <= index) return null;\n        return new (0, $292e4002746c8223$export$2e2bcd8739ae039)(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n    }\n    /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */ getLineStrings() {\n        const flatCoordinates = this.flatCoordinates;\n        const ends = this.ends_;\n        const layout = this.layout;\n        /** @type {Array<LineString>} */ const lineStrings = [];\n        let offset = 0;\n        for(let i = 0, ii = ends.length; i < ii; ++i){\n            const end = ends[i];\n            const lineString = new (0, $292e4002746c8223$export$2e2bcd8739ae039)(flatCoordinates.slice(offset, end), layout);\n            lineStrings.push(lineString);\n            offset = end;\n        }\n        return lineStrings;\n    }\n    /**\n   * @return {Array<number>} Flat midpoints.\n   */ getFlatMidpoints() {\n        const midpoints = [];\n        const flatCoordinates = this.flatCoordinates;\n        let offset = 0;\n        const ends = this.ends_;\n        const stride = this.stride;\n        for(let i = 0, ii = ends.length; i < ii; ++i){\n            const end = ends[i];\n            const midpoint = (0, $43ed5485a1d0c509$export$687ff82efd78795b)(flatCoordinates, offset, end, stride, 0.5);\n            (0, $b998d41b678ed5d1$export$8b58be045bf06082)(midpoints, midpoint);\n            offset = end;\n        }\n        return midpoints;\n    }\n    /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiLineString} Simplified MultiLineString.\n   * @protected\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        const simplifiedFlatCoordinates = [];\n        const simplifiedEnds = [];\n        simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$cedb9900c0b225c2)(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);\n        return new $b4c0e2e13beea46e$var$MultiLineString(simplifiedFlatCoordinates, \"XY\", simplifiedEnds);\n    }\n    /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */ getType() {\n        return \"MultiLineString\";\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */ intersectsExtent(extent) {\n        return (0, $acee589e5b390c5c$export$fdb1d8e850bf7937)(this.flatCoordinates, 0, this.ends_, this.stride, extent);\n    }\n    /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 2);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        const ends = (0, $6b086aa46281540d$export$47c3746a74384d45)(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n        this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n        this.changed();\n    }\n}\nvar $b4c0e2e13beea46e$export$2e2bcd8739ae039 = $b4c0e2e13beea46e$var$MultiLineString;\n\n\n/**\n * @module ol/geom/MultiPoint\n */ \n\n\n\n\n\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */ class $e6080c63a9451eda$var$MultiPoint extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */ constructor(coordinates, layout){\n        super();\n        if (layout && !Array.isArray(coordinates[0])) this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n        else this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */ coordinates, layout);\n    }\n    /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */ appendPoint(point) {\n        if (!this.flatCoordinates) this.flatCoordinates = point.getFlatCoordinates().slice();\n        else (0, $b998d41b678ed5d1$export$8b58be045bf06082)(this.flatCoordinates, point.getFlatCoordinates());\n        this.changed();\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */ clone() {\n        const multiPoint = new $e6080c63a9451eda$var$MultiPoint(this.flatCoordinates.slice(), this.layout);\n        multiPoint.applyProperties(this);\n        return multiPoint;\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        const flatCoordinates = this.flatCoordinates;\n        const stride = this.stride;\n        for(let i = 0, ii = flatCoordinates.length; i < ii; i += stride){\n            const squaredDistance = (0, $6b000a049d919fe5$export$88e6ebb4fe54f538)(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n            if (squaredDistance < minSquaredDistance) {\n                minSquaredDistance = squaredDistance;\n                for(let j = 0; j < stride; ++j)closestPoint[j] = flatCoordinates[i + j];\n                closestPoint.length = stride;\n            }\n        }\n        return minSquaredDistance;\n    }\n    /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */ getCoordinates() {\n        return (0, $5454470599558ddd$export$9c0934e4e9c3f61e)(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n    }\n    /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */ getPoint(index) {\n        const n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n        if (index < 0 || n <= index) return null;\n        return new (0, $6eced4c969949f6b$export$2e2bcd8739ae039)(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n    }\n    /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */ getPoints() {\n        const flatCoordinates = this.flatCoordinates;\n        const layout = this.layout;\n        const stride = this.stride;\n        /** @type {Array<Point>} */ const points = [];\n        for(let i = 0, ii = flatCoordinates.length; i < ii; i += stride){\n            const point = new (0, $6eced4c969949f6b$export$2e2bcd8739ae039)(flatCoordinates.slice(i, i + stride), layout);\n            points.push(point);\n        }\n        return points;\n    }\n    /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */ getType() {\n        return \"MultiPoint\";\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */ intersectsExtent(extent) {\n        const flatCoordinates = this.flatCoordinates;\n        const stride = this.stride;\n        for(let i = 0, ii = flatCoordinates.length; i < ii; i += stride){\n            const x = flatCoordinates[i];\n            const y = flatCoordinates[i + 1];\n            if ((0, $6da4c8ed3074c92b$export$805bdfd6d6690e97)(extent, x, y)) return true;\n        }\n        return false;\n    }\n    /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 1);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        this.flatCoordinates.length = (0, $6b086aa46281540d$export$5c4daf67e03c190f)(this.flatCoordinates, 0, coordinates, this.stride);\n        this.changed();\n    }\n}\nvar $e6080c63a9451eda$export$2e2bcd8739ae039 = $e6080c63a9451eda$var$MultiPoint;\n\n\n/**\n * @module ol/geom/MultiPolygon\n */ \n\n\n\n\n\n\n\n\n\n\n\n/**\n * @module ol/geom/flat/center\n */ \nfunction $9825fadaf3b68c4e$export$78e139679ca7205(flatCoordinates, offset, endss, stride) {\n    const flatCenters = [];\n    let extent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n    for(let i = 0, ii = endss.length; i < ii; ++i){\n        const ends = endss[i];\n        extent = (0, $6da4c8ed3074c92b$export$be0ab0bf96ca59ca)(flatCoordinates, offset, ends[0], stride);\n        flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);\n        offset = ends[ends.length - 1];\n    }\n    return flatCenters;\n}\n\n\n\n\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @api\n */ class $f73f35eb6af8b987$var$MultiPolygon extends (0, $c76e993e57efc8c4$export$2e2bcd8739ae039) {\n    /**\n   * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` and `endss` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<Array<number>>} [endss] Array of ends for internal use with flat coordinates.\n   */ constructor(coordinates, layout, endss){\n        super();\n        /**\n     * @type {Array<Array<number>>}\n     * @private\n     */ this.endss_ = [];\n        /**\n     * @private\n     * @type {number}\n     */ this.flatInteriorPointsRevision_ = -1;\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.flatInteriorPoints_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDelta_ = -1;\n        /**\n     * @private\n     * @type {number}\n     */ this.maxDeltaRevision_ = -1;\n        /**\n     * @private\n     * @type {number}\n     */ this.orientedRevision_ = -1;\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.orientedFlatCoordinates_ = null;\n        if (!endss && !Array.isArray(coordinates[0])) {\n            let thisLayout = this.getLayout();\n            const polygons = /** @type {Array<Polygon>} */ coordinates;\n            const flatCoordinates = [];\n            const thisEndss = [];\n            for(let i = 0, ii = polygons.length; i < ii; ++i){\n                const polygon = polygons[i];\n                if (i === 0) thisLayout = polygon.getLayout();\n                const offset = flatCoordinates.length;\n                const ends = polygon.getEnds();\n                for(let j = 0, jj = ends.length; j < jj; ++j)ends[j] += offset;\n                (0, $b998d41b678ed5d1$export$8b58be045bf06082)(flatCoordinates, polygon.getFlatCoordinates());\n                thisEndss.push(ends);\n            }\n            layout = thisLayout;\n            coordinates = flatCoordinates;\n            endss = thisEndss;\n        }\n        if (layout !== undefined && endss) {\n            this.setFlatCoordinates(layout, /** @type {Array<number>} */ coordinates);\n            this.endss_ = endss;\n        } else this.setCoordinates(/** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */ coordinates, layout);\n    }\n    /**\n   * Append the passed polygon to this multipolygon.\n   * @param {Polygon} polygon Polygon.\n   * @api\n   */ appendPolygon(polygon) {\n        /** @type {Array<number>} */ let ends;\n        if (!this.flatCoordinates) {\n            this.flatCoordinates = polygon.getFlatCoordinates().slice();\n            ends = polygon.getEnds().slice();\n            this.endss_.push();\n        } else {\n            const offset = this.flatCoordinates.length;\n            (0, $b998d41b678ed5d1$export$8b58be045bf06082)(this.flatCoordinates, polygon.getFlatCoordinates());\n            ends = polygon.getEnds().slice();\n            for(let i = 0, ii = ends.length; i < ii; ++i)ends[i] += offset;\n        }\n        this.endss_.push(ends);\n        this.changed();\n    }\n    /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPolygon} Clone.\n   * @api\n   */ clone() {\n        const len = this.endss_.length;\n        const newEndss = new Array(len);\n        for(let i = 0; i < len; ++i)newEndss[i] = this.endss_[i].slice();\n        const multiPolygon = new $f73f35eb6af8b987$var$MultiPolygon(this.flatCoordinates.slice(), this.layout, newEndss);\n        multiPolygon.applyProperties(this);\n        return multiPolygon;\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */ closestPointXY(x, y, closestPoint, minSquaredDistance) {\n        if (minSquaredDistance < (0, $6da4c8ed3074c92b$export$cbe64c389534206f)(this.getExtent(), x, y)) return minSquaredDistance;\n        if (this.maxDeltaRevision_ != this.getRevision()) {\n            this.maxDelta_ = Math.sqrt((0, $bf5604c1b8258b71$export$37c18e6e7d50501a)(this.flatCoordinates, 0, this.endss_, this.stride, 0));\n            this.maxDeltaRevision_ = this.getRevision();\n        }\n        return (0, $bf5604c1b8258b71$export$60e067685eb8f9c4)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n    }\n    /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */ containsXY(x, y) {\n        return (0, $239aa88e7a573859$export$c760d9d16cf92043)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, x, y);\n    }\n    /**\n   * Return the area of the multipolygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */ getArea() {\n        return (0, $01ff26a2f986a1d0$export$78e139679ca7205)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride);\n    }\n    /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for multi-polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\n   * @api\n   */ getCoordinates(right) {\n        let flatCoordinates;\n        if (right !== undefined) {\n            flatCoordinates = this.getOrientedFlatCoordinates().slice();\n            (0, $7892dc06ffd23218$export$ea9ed55fc2a85010)(flatCoordinates, 0, this.endss_, this.stride, right);\n        } else flatCoordinates = this.flatCoordinates;\n        return (0, $5454470599558ddd$export$915c7058aeb4dfeb)(flatCoordinates, 0, this.endss_, this.stride);\n    }\n    /**\n   * @return {Array<Array<number>>} Endss.\n   */ getEndss() {\n        return this.endss_;\n    }\n    /**\n   * @return {Array<number>} Flat interior points.\n   */ getFlatInteriorPoints() {\n        if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n            const flatCenters = (0, $9825fadaf3b68c4e$export$78e139679ca7205)(this.flatCoordinates, 0, this.endss_, this.stride);\n            this.flatInteriorPoints_ = (0, $2166f19777f69377$export$11463803eda8a372)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, flatCenters);\n            this.flatInteriorPointsRevision_ = this.getRevision();\n        }\n        return this.flatInteriorPoints_;\n    }\n    /**\n   * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.\n   * @return {MultiPoint} Interior points as XYM coordinates, where M is\n   * the length of the horizontal intersection that the point belongs to.\n   * @api\n   */ getInteriorPoints() {\n        return new (0, $e6080c63a9451eda$export$2e2bcd8739ae039)(this.getFlatInteriorPoints().slice(), \"XYM\");\n    }\n    /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */ getOrientedFlatCoordinates() {\n        if (this.orientedRevision_ != this.getRevision()) {\n            const flatCoordinates = this.flatCoordinates;\n            if ((0, $7892dc06ffd23218$export$a1d138f4bd85f4b4)(flatCoordinates, 0, this.endss_, this.stride)) this.orientedFlatCoordinates_ = flatCoordinates;\n            else {\n                this.orientedFlatCoordinates_ = flatCoordinates.slice();\n                this.orientedFlatCoordinates_.length = (0, $7892dc06ffd23218$export$ea9ed55fc2a85010)(this.orientedFlatCoordinates_, 0, this.endss_, this.stride);\n            }\n            this.orientedRevision_ = this.getRevision();\n        }\n        return this.orientedFlatCoordinates_;\n    }\n    /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiPolygon} Simplified MultiPolygon.\n   * @protected\n   */ getSimplifiedGeometryInternal(squaredTolerance) {\n        const simplifiedFlatCoordinates = [];\n        const simplifiedEndss = [];\n        simplifiedFlatCoordinates.length = (0, $8780aae6970f5f65$export$b9acf67ef05cd17c)(this.flatCoordinates, 0, this.endss_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEndss);\n        return new $f73f35eb6af8b987$var$MultiPolygon(simplifiedFlatCoordinates, \"XY\", simplifiedEndss);\n    }\n    /**\n   * Return the polygon at the specified index.\n   * @param {number} index Index.\n   * @return {Polygon} Polygon.\n   * @api\n   */ getPolygon(index) {\n        if (index < 0 || this.endss_.length <= index) return null;\n        let offset;\n        if (index === 0) offset = 0;\n        else {\n            const prevEnds = this.endss_[index - 1];\n            offset = prevEnds[prevEnds.length - 1];\n        }\n        const ends = this.endss_[index].slice();\n        const end = ends[ends.length - 1];\n        if (offset !== 0) for(let i = 0, ii = ends.length; i < ii; ++i)ends[i] -= offset;\n        return new (0, $40aa8d43bbe572bf$export$2e2bcd8739ae039)(this.flatCoordinates.slice(offset, end), this.layout, ends);\n    }\n    /**\n   * Return the polygons of this multipolygon.\n   * @return {Array<Polygon>} Polygons.\n   * @api\n   */ getPolygons() {\n        const layout = this.layout;\n        const flatCoordinates = this.flatCoordinates;\n        const endss = this.endss_;\n        const polygons = [];\n        let offset = 0;\n        for(let i = 0, ii = endss.length; i < ii; ++i){\n            const ends = endss[i].slice();\n            const end = ends[ends.length - 1];\n            if (offset !== 0) for(let j = 0, jj = ends.length; j < jj; ++j)ends[j] -= offset;\n            const polygon = new (0, $40aa8d43bbe572bf$export$2e2bcd8739ae039)(flatCoordinates.slice(offset, end), layout, ends);\n            polygons.push(polygon);\n            offset = end;\n        }\n        return polygons;\n    }\n    /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */ getType() {\n        return \"MultiPolygon\";\n    }\n    /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */ intersectsExtent(extent) {\n        return (0, $acee589e5b390c5c$export$77b72fa3792f5bf0)(this.getOrientedFlatCoordinates(), 0, this.endss_, this.stride, extent);\n    }\n    /**\n   * Set the coordinates of the multipolygon.\n   * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */ setCoordinates(coordinates, layout) {\n        this.setLayout(layout, coordinates, 3);\n        if (!this.flatCoordinates) this.flatCoordinates = [];\n        const endss = (0, $6b086aa46281540d$export$f9f2bb59da4accd3)(this.flatCoordinates, 0, coordinates, this.stride, this.endss_);\n        if (endss.length === 0) this.flatCoordinates.length = 0;\n        else {\n            const lastEnds = endss[endss.length - 1];\n            this.flatCoordinates.length = lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\n        }\n        this.changed();\n    }\n}\nvar $f73f35eb6af8b987$export$2e2bcd8739ae039 = $f73f35eb6af8b987$var$MultiPolygon;\n\n\n\n\n\n\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */ /**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */ /**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */ class $f602cef51a2e6950$var$GeoJSON extends (0, $2f9f6f6b6e1ba437$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        options = options ? options : {};\n        super();\n        /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */ this.dataProjection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.dataProjection ? options.dataProjection : \"EPSG:4326\");\n        if (options.featureProjection) /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */ this.defaultFeatureProjection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(options.featureProjection);\n        /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */ this.geometryName_ = options.geometryName;\n        /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */ this.extractGeometryName_ = options.extractGeometryName;\n        this.supportedMediaTypes = [\n            \"application/geo+json\",\n            \"application/vnd.geo+json\"\n        ];\n    }\n    /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */ readFeatureFromObject(object, options) {\n        /**\n     * @type {GeoJSONFeature}\n     */ let geoJSONFeature = null;\n        if (object[\"type\"] === \"Feature\") geoJSONFeature = /** @type {GeoJSONFeature} */ object;\n        else geoJSONFeature = {\n            \"type\": \"Feature\",\n            \"geometry\": /** @type {GeoJSONGeometry} */ object,\n            \"properties\": null\n        };\n        const geometry = $f602cef51a2e6950$var$readGeometry(geoJSONFeature[\"geometry\"], options);\n        const feature = new (0, $9fd014ab6df63665$export$2e2bcd8739ae039)();\n        if (this.geometryName_) feature.setGeometryName(this.geometryName_);\n        else if (this.extractGeometryName_ && true) feature.setGeometryName(geoJSONFeature[\"geometry_name\"]);\n        feature.setGeometry(geometry);\n        if (\"id\" in geoJSONFeature) feature.setId(geoJSONFeature[\"id\"]);\n        if (geoJSONFeature[\"properties\"]) feature.setProperties(geoJSONFeature[\"properties\"], true);\n        return feature;\n    }\n    /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */ readFeaturesFromObject(object, options) {\n        const geoJSONObject = /** @type {GeoJSONObject} */ object;\n        /** @type {Array<import(\"../Feature.js\").default>} */ let features = null;\n        if (geoJSONObject[\"type\"] === \"FeatureCollection\") {\n            const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ object;\n            features = [];\n            const geoJSONFeatures = geoJSONFeatureCollection[\"features\"];\n            for(let i = 0, ii = geoJSONFeatures.length; i < ii; ++i)features.push(this.readFeatureFromObject(geoJSONFeatures[i], options));\n        } else features = [\n            this.readFeatureFromObject(object, options)\n        ];\n        return features;\n    }\n    /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */ readGeometryFromObject(object, options) {\n        return $f602cef51a2e6950$var$readGeometry(object, options);\n    }\n    /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */ readProjectionFromObject(object) {\n        const crs = object[\"crs\"];\n        let projection;\n        if (crs) {\n            if (crs[\"type\"] == \"name\") projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(crs[\"properties\"][\"name\"]);\n            else if (crs[\"type\"] === \"EPSG\") projection = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(\"EPSG:\" + crs[\"properties\"][\"code\"]);\n            else throw new Error(\"Unknown SRS type\");\n        } else projection = this.dataProjection;\n        return /** @type {import(\"../proj/Projection.js\").default} */ projection;\n    }\n    /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */ writeFeatureObject(feature, options) {\n        options = this.adaptOptions(options);\n        /** @type {GeoJSONFeature} */ const object = {\n            \"type\": \"Feature\",\n            geometry: null,\n            properties: null\n        };\n        const id = feature.getId();\n        if (id !== undefined) object.id = id;\n        if (!feature.hasProperties()) return object;\n        const properties = feature.getProperties();\n        const geometry = feature.getGeometry();\n        if (geometry) {\n            object.geometry = $f602cef51a2e6950$var$writeGeometry(geometry, options);\n            delete properties[feature.getGeometryName()];\n        }\n        if (!(0, $beaefe87199bb537$export$dd1bc94b04021eeb)(properties)) object.properties = properties;\n        return object;\n    }\n    /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */ writeFeaturesObject(features, options) {\n        options = this.adaptOptions(options);\n        const objects = [];\n        for(let i = 0, ii = features.length; i < ii; ++i)objects.push(this.writeFeatureObject(features[i], options));\n        return {\n            type: \"FeatureCollection\",\n            features: objects\n        };\n    }\n    /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */ writeGeometryObject(geometry, options) {\n        return $f602cef51a2e6950$var$writeGeometry(geometry, this.adaptOptions(options));\n    }\n}\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */ function $f602cef51a2e6950$var$readGeometry(object, options) {\n    if (!object) return null;\n    /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */ let geometry;\n    switch(object[\"type\"]){\n        case \"Point\":\n            geometry = $f602cef51a2e6950$var$readPointGeometry(/** @type {GeoJSONPoint} */ object);\n            break;\n        case \"LineString\":\n            geometry = $f602cef51a2e6950$var$readLineStringGeometry(/** @type {GeoJSONLineString} */ object);\n            break;\n        case \"Polygon\":\n            geometry = $f602cef51a2e6950$var$readPolygonGeometry(/** @type {GeoJSONPolygon} */ object);\n            break;\n        case \"MultiPoint\":\n            geometry = $f602cef51a2e6950$var$readMultiPointGeometry(/** @type {GeoJSONMultiPoint} */ object);\n            break;\n        case \"MultiLineString\":\n            geometry = $f602cef51a2e6950$var$readMultiLineStringGeometry(/** @type {GeoJSONMultiLineString} */ object);\n            break;\n        case \"MultiPolygon\":\n            geometry = $f602cef51a2e6950$var$readMultiPolygonGeometry(/** @type {GeoJSONMultiPolygon} */ object);\n            break;\n        case \"GeometryCollection\":\n            geometry = $f602cef51a2e6950$var$readGeometryCollectionGeometry(/** @type {GeoJSONGeometryCollection} */ object);\n            break;\n        default:\n            throw new Error(\"Unsupported GeoJSON type: \" + object[\"type\"]);\n    }\n    return (0, $ec084d0ff9c13a22$export$7beeea566b560d4)(geometry, false, options);\n}\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */ function $f602cef51a2e6950$var$readGeometryCollectionGeometry(object, options) {\n    const geometries = object[\"geometries\"].map(/**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     */ function(geometry) {\n        return $f602cef51a2e6950$var$readGeometry(geometry, options);\n    });\n    return new (0, $0e4f3959219eede5$export$2e2bcd8739ae039)(geometries);\n}\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */ function $f602cef51a2e6950$var$readPointGeometry(object) {\n    return new (0, $6eced4c969949f6b$export$2e2bcd8739ae039)(object[\"coordinates\"]);\n}\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */ function $f602cef51a2e6950$var$readLineStringGeometry(object) {\n    return new (0, $292e4002746c8223$export$2e2bcd8739ae039)(object[\"coordinates\"]);\n}\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */ function $f602cef51a2e6950$var$readMultiLineStringGeometry(object) {\n    return new (0, $b4c0e2e13beea46e$export$2e2bcd8739ae039)(object[\"coordinates\"]);\n}\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */ function $f602cef51a2e6950$var$readMultiPointGeometry(object) {\n    return new (0, $e6080c63a9451eda$export$2e2bcd8739ae039)(object[\"coordinates\"]);\n}\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */ function $f602cef51a2e6950$var$readMultiPolygonGeometry(object) {\n    return new (0, $f73f35eb6af8b987$export$2e2bcd8739ae039)(object[\"coordinates\"]);\n}\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */ function $f602cef51a2e6950$var$readPolygonGeometry(object) {\n    return new (0, $40aa8d43bbe572bf$export$2e2bcd8739ae039)(object[\"coordinates\"]);\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */ function $f602cef51a2e6950$var$writeGeometry(geometry, options) {\n    geometry = (0, $ec084d0ff9c13a22$export$7beeea566b560d4)(geometry, true, options);\n    const type = geometry.getType();\n    /** @type {GeoJSONGeometry} */ let geoJSON;\n    switch(type){\n        case \"Point\":\n            geoJSON = $f602cef51a2e6950$var$writePointGeometry(/** @type {Point} */ geometry, options);\n            break;\n        case \"LineString\":\n            geoJSON = $f602cef51a2e6950$var$writeLineStringGeometry(/** @type {LineString} */ geometry, options);\n            break;\n        case \"Polygon\":\n            geoJSON = $f602cef51a2e6950$var$writePolygonGeometry(/** @type {Polygon} */ geometry, options);\n            break;\n        case \"MultiPoint\":\n            geoJSON = $f602cef51a2e6950$var$writeMultiPointGeometry(/** @type {MultiPoint} */ geometry, options);\n            break;\n        case \"MultiLineString\":\n            geoJSON = $f602cef51a2e6950$var$writeMultiLineStringGeometry(/** @type {MultiLineString} */ geometry, options);\n            break;\n        case \"MultiPolygon\":\n            geoJSON = $f602cef51a2e6950$var$writeMultiPolygonGeometry(/** @type {MultiPolygon} */ geometry, options);\n            break;\n        case \"GeometryCollection\":\n            geoJSON = $f602cef51a2e6950$var$writeGeometryCollectionGeometry(/** @type {GeometryCollection} */ geometry, options);\n            break;\n        case \"Circle\":\n            geoJSON = {\n                type: \"GeometryCollection\",\n                geometries: []\n            };\n            break;\n        default:\n            throw new Error(\"Unsupported geometry type: \" + type);\n    }\n    return geoJSON;\n}\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */ function $f602cef51a2e6950$var$writeGeometryCollectionGeometry(geometry, options) {\n    options = Object.assign({}, options);\n    delete options.featureProjection;\n    const geometries = geometry.getGeometriesArray().map(function(geometry) {\n        return $f602cef51a2e6950$var$writeGeometry(geometry, options);\n    });\n    return {\n        type: \"GeometryCollection\",\n        geometries: geometries\n    };\n}\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */ function $f602cef51a2e6950$var$writeLineStringGeometry(geometry, options) {\n    return {\n        type: \"LineString\",\n        coordinates: geometry.getCoordinates()\n    };\n}\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */ function $f602cef51a2e6950$var$writeMultiLineStringGeometry(geometry, options) {\n    return {\n        type: \"MultiLineString\",\n        coordinates: geometry.getCoordinates()\n    };\n}\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */ function $f602cef51a2e6950$var$writeMultiPointGeometry(geometry, options) {\n    return {\n        type: \"MultiPoint\",\n        coordinates: geometry.getCoordinates()\n    };\n}\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */ function $f602cef51a2e6950$var$writeMultiPolygonGeometry(geometry, options) {\n    let right;\n    if (options) right = options.rightHanded;\n    return {\n        type: \"MultiPolygon\",\n        coordinates: geometry.getCoordinates(right)\n    };\n}\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */ function $f602cef51a2e6950$var$writePointGeometry(geometry, options) {\n    return {\n        type: \"Point\",\n        coordinates: geometry.getCoordinates()\n    };\n}\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */ function $f602cef51a2e6950$var$writePolygonGeometry(geometry, options) {\n    let right;\n    if (options) right = options.rightHanded;\n    return {\n        type: \"Polygon\",\n        coordinates: geometry.getCoordinates(right)\n    };\n}\nvar $f602cef51a2e6950$export$2e2bcd8739ae039 = $f602cef51a2e6950$var$GeoJSON;\n\n\n\n/**\n * @module ol/layer/Vector\n */ /**\n * @module ol/layer/BaseVector\n */ \n\n/**\n * @module ol/style/Style\n */ /**\n * @module ol/style/Circle\n */ /**\n * @module ol/style/RegularShape\n */ \n/**\n * @module ol/style/Image\n */ \n\n/**\n * @typedef {Object} Options\n * @property {number} opacity Opacity.\n * @property {boolean} rotateWithView If the image should get rotated with the view.\n * @property {number} rotation Rotation.\n * @property {number|import(\"../size.js\").Size} scale Scale.\n * @property {Array<number>} displacement Displacement.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} declutterMode Declutter mode: `declutter`, `obstacle`, 'none */ /**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */ class $e60011aea38e6239$var$ImageStyle {\n    /**\n   * @param {Options} options Options.\n   */ constructor(options){\n        /**\n     * @private\n     * @type {number}\n     */ this.opacity_ = options.opacity;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.rotateWithView_ = options.rotateWithView;\n        /**\n     * @private\n     * @type {number}\n     */ this.rotation_ = options.rotation;\n        /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */ this.scale_ = options.scale;\n        /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */ this.scaleArray_ = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(options.scale);\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.displacement_ = options.displacement;\n        /**\n     * @private\n     * @type {\"declutter\"|\"obstacle\"|\"none\"|undefined}\n     */ this.declutterMode_ = options.declutterMode;\n    }\n    /**\n   * Clones the style.\n   * @return {ImageStyle} The cloned style.\n   * @api\n   */ clone() {\n        const scale = this.getScale();\n        return new $e60011aea38e6239$var$ImageStyle({\n            opacity: this.getOpacity(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            displacement: this.getDisplacement().slice(),\n            declutterMode: this.getDeclutterMode()\n        });\n    }\n    /**\n   * Get the symbolizer opacity.\n   * @return {number} Opacity.\n   * @api\n   */ getOpacity() {\n        return this.opacity_;\n    }\n    /**\n   * Determine whether the symbolizer rotates with the map.\n   * @return {boolean} Rotate with map.\n   * @api\n   */ getRotateWithView() {\n        return this.rotateWithView_;\n    }\n    /**\n   * Get the symoblizer rotation.\n   * @return {number} Rotation.\n   * @api\n   */ getRotation() {\n        return this.rotation_;\n    }\n    /**\n   * Get the symbolizer scale.\n   * @return {number|import(\"../size.js\").Size} Scale.\n   * @api\n   */ getScale() {\n        return this.scale_;\n    }\n    /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */ getScaleArray() {\n        return this.scaleArray_;\n    }\n    /**\n   * Get the displacement of the shape\n   * @return {Array<number>} Shape's center displacement\n   * @api\n   */ getDisplacement() {\n        return this.displacement_;\n    }\n    /**\n   * Get the declutter mode of the shape\n   * @return {\"declutter\"|\"obstacle\"|\"none\"|undefined} Shape's declutter mode\n   * @api\n   */ getDeclutterMode() {\n        return this.declutterMode_;\n    }\n    /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @abstract\n   * @return {Array<number>} Anchor.\n   */ getAnchor() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Get the image element for the symbolizer.\n   * @abstract\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {import('../DataTile.js').ImageLike} Image element.\n   */ getImage(pixelRatio) {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @abstract\n   * @return {import('../DataTile.js').ImageLike} Image element.\n   */ getHitDetectionImage() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */ getPixelRatio(pixelRatio) {\n        return 1;\n    }\n    /**\n   * @abstract\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */ getImageState() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @abstract\n   * @return {import(\"../size.js\").Size} Image size.\n   */ getImageSize() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Get the origin of the symbolizer.\n   * @abstract\n   * @return {Array<number>} Origin.\n   */ getOrigin() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Get the size of the symbolizer (in pixels).\n   * @abstract\n   * @return {import(\"../size.js\").Size} Size.\n   */ getSize() {\n        return (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Set the displacement.\n   *\n   * @param {Array<number>} displacement Displacement.\n   * @api\n   */ setDisplacement(displacement) {\n        this.displacement_ = displacement;\n    }\n    /**\n   * Set the opacity.\n   *\n   * @param {number} opacity Opacity.\n   * @api\n   */ setOpacity(opacity) {\n        this.opacity_ = opacity;\n    }\n    /**\n   * Set whether to rotate the style with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */ setRotateWithView(rotateWithView) {\n        this.rotateWithView_ = rotateWithView;\n    }\n    /**\n   * Set the rotation.\n   *\n   * @param {number} rotation Rotation.\n   * @api\n   */ setRotation(rotation) {\n        this.rotation_ = rotation;\n    }\n    /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */ setScale(scale) {\n        this.scale_ = scale;\n        this.scaleArray_ = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(scale);\n    }\n    /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */ listenImageChange(listener) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * Load not yet loaded URI.\n   * @abstract\n   */ load() {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n    /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */ unlistenImageChange(listener) {\n        (0, $6c5e11070e371322$export$817eb92a8194bab0)();\n    }\n}\nvar $e60011aea38e6239$export$2e2bcd8739ae039 = $e60011aea38e6239$var$ImageStyle;\n\n\n\n/**\n * @module ol/colorlike\n */ \nfunction $e0807f400ec9a0a9$export$dc5b1400ac3a10a8(color) {\n    if (Array.isArray(color)) return (0, $322346e1ff7894ca$export$f84e8e69fd4488a5)(color);\n    return color;\n}\n\n\n\n\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\n * Positive values will shift the shape right and up.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */ /**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {CanvasLineCap} lineCap LineCap.\n * @property {Array<number>|null} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */ /**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */ class $3e99c452138b2224$var$RegularShape extends (0, $e60011aea38e6239$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} options Options.\n   */ constructor(options){\n        /**\n     * @type {boolean}\n     */ const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n        super({\n            opacity: 1,\n            rotateWithView: rotateWithView,\n            rotation: options.rotation !== undefined ? options.rotation : 0,\n            scale: options.scale !== undefined ? options.scale : 1,\n            displacement: options.displacement !== undefined ? options.displacement : [\n                0,\n                0\n            ],\n            declutterMode: options.declutterMode\n        });\n        /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */ this.canvas_ = undefined;\n        /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */ this.hitDetectionCanvas_ = null;\n        /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */ this.fill_ = options.fill !== undefined ? options.fill : null;\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.origin_ = [\n            0,\n            0\n        ];\n        /**\n     * @private\n     * @type {number}\n     */ this.points_ = options.points;\n        /**\n     * @protected\n     * @type {number}\n     */ this.radius_ = options.radius !== undefined ? options.radius : options.radius1;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.radius2_ = options.radius2;\n        /**\n     * @private\n     * @type {number}\n     */ this.angle_ = options.angle !== undefined ? options.angle : 0;\n        /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */ this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */ this.size_ = null;\n        /**\n     * @private\n     * @type {RenderOptions}\n     */ this.renderOptions_ = null;\n        this.render();\n    }\n    /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */ clone() {\n        const scale = this.getScale();\n        const style = new $3e99c452138b2224$var$RegularShape({\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            points: this.getPoints(),\n            radius: this.getRadius(),\n            radius2: this.getRadius2(),\n            angle: this.getAngle(),\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            displacement: this.getDisplacement().slice(),\n            declutterMode: this.getDeclutterMode()\n        });\n        style.setOpacity(this.getOpacity());\n        return style;\n    }\n    /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */ getAnchor() {\n        const size = this.size_;\n        if (!size) return null;\n        const displacement = this.getDisplacement();\n        const scale = this.getScaleArray();\n        // anchor is scaled by renderer but displacement should not be scaled\n        // so divide by scale here\n        return [\n            size[0] / 2 - displacement[0] / scale[0],\n            size[1] / 2 + displacement[1] / scale[1]\n        ];\n    }\n    /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */ getAngle() {\n        return this.angle_;\n    }\n    /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */ getFill() {\n        return this.fill_;\n    }\n    /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */ setFill(fill) {\n        this.fill_ = fill;\n        this.render();\n    }\n    /**\n   * @return {HTMLCanvasElement} Image element.\n   */ getHitDetectionImage() {\n        if (!this.hitDetectionCanvas_) this.createHitDetectionCanvas_(this.renderOptions_);\n        return this.hitDetectionCanvas_;\n    }\n    /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */ getImage(pixelRatio) {\n        let image = this.canvas_[pixelRatio];\n        if (!image) {\n            const renderOptions = this.renderOptions_;\n            const context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);\n            this.draw_(renderOptions, context, pixelRatio);\n            image = context.canvas;\n            this.canvas_[pixelRatio] = image;\n        }\n        return image;\n    }\n    /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */ getPixelRatio(pixelRatio) {\n        return pixelRatio;\n    }\n    /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */ getImageSize() {\n        return this.size_;\n    }\n    /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */ getImageState() {\n        return (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED;\n    }\n    /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */ getOrigin() {\n        return this.origin_;\n    }\n    /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */ getPoints() {\n        return this.points_;\n    }\n    /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */ getRadius() {\n        return this.radius_;\n    }\n    /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */ getRadius2() {\n        return this.radius2_;\n    }\n    /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */ getSize() {\n        return this.size_;\n    }\n    /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */ getStroke() {\n        return this.stroke_;\n    }\n    /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */ setStroke(stroke) {\n        this.stroke_ = stroke;\n        this.render();\n    }\n    /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */ listenImageChange(listener) {}\n    /**\n   * Load not yet loaded URI.\n   */ load() {}\n    /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */ unlistenImageChange(listener) {}\n    /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */ calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n        if (strokeWidth === 0 || this.points_ === Infinity || lineJoin !== \"bevel\" && lineJoin !== \"miter\") return strokeWidth;\n        // m  | ^\n        // i  | |\\                  .\n        // t >|  #\\\n        // e  | |\\ \\              .\n        // r      \\s\\\n        //      |  \\t\\          .                 .\n        //          \\r\\                      .   .\n        //      |    \\o\\      .          .  . . .\n        //          e \\k\\            .  .    . .\n        //      |      \\e\\  .    .  .       . .\n        //       d      \\ \\  .  .          . .\n        //      | _ _a_ _\\#  .            . .\n        //   r1          / `             . .\n        //      |                       . .\n        //       b     /               . .\n        //      |                     . .\n        //           / r2            . .\n        //      |                        .   .\n        //         /                           .   .\n        //      |α                                   .   .\n        //       /                                         .   .\n        //      ° center\n        let r1 = this.radius_;\n        let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n        if (r1 < r2) {\n            const tmp = r1;\n            r1 = r2;\n            r2 = tmp;\n        }\n        const points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n        const alpha = 2 * Math.PI / points;\n        const a = r2 * Math.sin(alpha);\n        const b = Math.sqrt(r2 * r2 - a * a);\n        const d = r1 - b;\n        const e = Math.sqrt(a * a + d * d);\n        const miterRatio = e / a;\n        if (lineJoin === \"miter\" && miterRatio <= miterLimit) return miterRatio * strokeWidth;\n        // Calculate the distance from center to the stroke corner where\n        // it was cut short because of the miter limit.\n        //              l\n        //        ----+---- <= distance from center to here is maxr\n        //       /####|k ##\\\n        //      /#####^#####\\\n        //     /#### /+\\# s #\\\n        //    /### h/+++\\# t #\\\n        //   /### t/+++++\\# r #\\\n        //  /### a/+++++++\\# o #\\\n        // /### p/++ fill +\\# k #\\\n        ///#### /+++++^+++++\\# e #\\\n        //#####/+++++/+\\+++++\\#####\\\n        const k = strokeWidth / 2 / miterRatio;\n        const l = strokeWidth / 2 * (d / e);\n        const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n        const bevelAdd = maxr - r1;\n        if (this.radius2_ === undefined || lineJoin === \"bevel\") return bevelAdd * 2;\n        // If outer miter is over the miter limit the inner miter may reach through the\n        // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n        const aa = r1 * Math.sin(alpha);\n        const bb = Math.sqrt(r1 * r1 - aa * aa);\n        const dd = r2 - bb;\n        const ee = Math.sqrt(aa * aa + dd * dd);\n        const innerMiterRatio = ee / aa;\n        if (innerMiterRatio <= miterLimit) {\n            const innerLength = innerMiterRatio * strokeWidth / 2 - r2 - r1;\n            return 2 * Math.max(bevelAdd, innerLength);\n        }\n        return bevelAdd * 2;\n    }\n    /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */ createRenderOptions() {\n        let lineCap = (0, $d4aabc5c971073f1$export$17bd0c38d6ae694e);\n        let lineJoin = (0, $d4aabc5c971073f1$export$365eb9648cf19bd0);\n        let miterLimit = 0;\n        let lineDash = null;\n        let lineDashOffset = 0;\n        let strokeStyle;\n        let strokeWidth = 0;\n        if (this.stroke_) {\n            strokeStyle = this.stroke_.getColor();\n            if (strokeStyle === null) strokeStyle = (0, $d4aabc5c971073f1$export$1eb2eaecacf2031e);\n            strokeStyle = (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(strokeStyle);\n            strokeWidth = this.stroke_.getWidth();\n            if (strokeWidth === undefined) strokeWidth = (0, $d4aabc5c971073f1$export$79661f132c62010e);\n            lineDash = this.stroke_.getLineDash();\n            lineDashOffset = this.stroke_.getLineDashOffset();\n            lineJoin = this.stroke_.getLineJoin();\n            if (lineJoin === undefined) lineJoin = (0, $d4aabc5c971073f1$export$365eb9648cf19bd0);\n            lineCap = this.stroke_.getLineCap();\n            if (lineCap === undefined) lineCap = (0, $d4aabc5c971073f1$export$17bd0c38d6ae694e);\n            miterLimit = this.stroke_.getMiterLimit();\n            if (miterLimit === undefined) miterLimit = (0, $d4aabc5c971073f1$export$80c1c01844597b7b);\n        }\n        const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n        const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n        const size = Math.ceil(2 * maxRadius + add);\n        return {\n            strokeStyle: strokeStyle,\n            strokeWidth: strokeWidth,\n            size: size,\n            lineCap: lineCap,\n            lineDash: lineDash,\n            lineDashOffset: lineDashOffset,\n            lineJoin: lineJoin,\n            miterLimit: miterLimit\n        };\n    }\n    /**\n   * @protected\n   */ render() {\n        this.renderOptions_ = this.createRenderOptions();\n        const size = this.renderOptions_.size;\n        this.canvas_ = {};\n        this.size_ = [\n            size,\n            size\n        ];\n    }\n    /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */ draw_(renderOptions, context, pixelRatio) {\n        context.scale(pixelRatio, pixelRatio);\n        // set origin to canvas center\n        context.translate(renderOptions.size / 2, renderOptions.size / 2);\n        this.createPath_(context);\n        if (this.fill_) {\n            let color = this.fill_.getColor();\n            if (color === null) color = (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2);\n            context.fillStyle = (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(color);\n            context.fill();\n        }\n        if (this.stroke_) {\n            context.strokeStyle = renderOptions.strokeStyle;\n            context.lineWidth = renderOptions.strokeWidth;\n            if (renderOptions.lineDash) {\n                context.setLineDash(renderOptions.lineDash);\n                context.lineDashOffset = renderOptions.lineDashOffset;\n            }\n            context.lineCap = renderOptions.lineCap;\n            context.lineJoin = renderOptions.lineJoin;\n            context.miterLimit = renderOptions.miterLimit;\n            context.stroke();\n        }\n    }\n    /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */ createHitDetectionCanvas_(renderOptions) {\n        if (this.fill_) {\n            let color = this.fill_.getColor();\n            // determine if fill is transparent (or pattern or gradient)\n            let opacity = 0;\n            if (typeof color === \"string\") color = (0, $322346e1ff7894ca$export$75093a47a9fa838d)(color);\n            if (color === null) opacity = 1;\n            else if (Array.isArray(color)) opacity = color.length === 4 ? color[3] : 1;\n            if (opacity === 0) {\n                // if a transparent fill style is set, create an extra hit-detection image\n                // with a default fill style\n                const context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(renderOptions.size, renderOptions.size);\n                this.hitDetectionCanvas_ = context.canvas;\n                this.drawHitDetectionCanvas_(renderOptions, context);\n            }\n        }\n        if (!this.hitDetectionCanvas_) this.hitDetectionCanvas_ = this.getImage(1);\n    }\n    /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */ createPath_(context) {\n        let points = this.points_;\n        const radius = this.radius_;\n        if (points === Infinity) context.arc(0, 0, radius, 0, 2 * Math.PI);\n        else {\n            const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n            if (this.radius2_ !== undefined) points *= 2;\n            const startAngle = this.angle_ - Math.PI / 2;\n            const step = 2 * Math.PI / points;\n            for(let i = 0; i < points; i++){\n                const angle0 = startAngle + i * step;\n                const radiusC = i % 2 === 0 ? radius : radius2;\n                context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n            }\n            context.closePath();\n        }\n    }\n    /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */ drawHitDetectionCanvas_(renderOptions, context) {\n        // set origin to canvas center\n        context.translate(renderOptions.size / 2, renderOptions.size / 2);\n        this.createPath_(context);\n        context.fillStyle = (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2);\n        context.fill();\n        if (this.stroke_) {\n            context.strokeStyle = renderOptions.strokeStyle;\n            context.lineWidth = renderOptions.strokeWidth;\n            if (renderOptions.lineDash) {\n                context.setLineDash(renderOptions.lineDash);\n                context.lineDashOffset = renderOptions.lineDashOffset;\n            }\n            context.lineJoin = renderOptions.lineJoin;\n            context.miterLimit = renderOptions.miterLimit;\n            context.stroke();\n        }\n    }\n}\nvar $3e99c452138b2224$export$2e2bcd8739ae039 = $3e99c452138b2224$var$RegularShape;\n\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {Array<number>} [displacement=[0,0]] displacement\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\n * @property {number} [rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\n * (meaningful only when used in conjunction with a two dimensional scale).\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\n */ /**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */ class $06150d8570b7481b$var$CircleStyle extends (0, $3e99c452138b2224$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        options = options ? options : {\n            radius: 5\n        };\n        super({\n            points: Infinity,\n            fill: options.fill,\n            radius: options.radius,\n            stroke: options.stroke,\n            scale: options.scale !== undefined ? options.scale : 1,\n            rotation: options.rotation !== undefined ? options.rotation : 0,\n            rotateWithView: options.rotateWithView !== undefined ? options.rotateWithView : false,\n            displacement: options.displacement !== undefined ? options.displacement : [\n                0,\n                0\n            ],\n            declutterMode: options.declutterMode\n        });\n    }\n    /**\n   * Clones the style.\n   * @return {CircleStyle} The cloned style.\n   * @api\n   */ clone() {\n        const scale = this.getScale();\n        const style = new $06150d8570b7481b$var$CircleStyle({\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            radius: this.getRadius(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            displacement: this.getDisplacement().slice(),\n            declutterMode: this.getDeclutterMode()\n        });\n        style.setOpacity(this.getOpacity());\n        return style;\n    }\n    /**\n   * Set the circle radius.\n   *\n   * @param {number} radius Circle radius.\n   * @api\n   */ setRadius(radius) {\n        this.radius_ = radius;\n        this.render();\n    }\n}\nvar $06150d8570b7481b$export$2e2bcd8739ae039 = $06150d8570b7481b$var$CircleStyle;\n\n\n/**\n * @module ol/style/Fill\n */ /**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} [color=null] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */ /**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */ class $d61d1dcaf3c44610$var$Fill {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        options = options || {};\n        /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null}\n     */ this.color_ = options.color !== undefined ? options.color : null;\n    }\n    /**\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */ clone() {\n        const color = this.getColor();\n        return new $d61d1dcaf3c44610$var$Fill({\n            color: Array.isArray(color) ? color.slice() : color || undefined\n        });\n    }\n    /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} Color.\n   * @api\n   */ getColor() {\n        return this.color_;\n    }\n    /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} color Color.\n   * @api\n   */ setColor(color) {\n        this.color_ = color;\n    }\n}\nvar $d61d1dcaf3c44610$export$2e2bcd8739ae039 = $d61d1dcaf3c44610$var$Fill;\n\n\n/**\n * @module ol/style/Stroke\n */ /**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */ /**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */ class $f9d0329c5c745263$var$Stroke {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        options = options || {};\n        /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */ this.color_ = options.color !== undefined ? options.color : null;\n        /**\n     * @private\n     * @type {CanvasLineCap|undefined}\n     */ this.lineCap_ = options.lineCap;\n        /**\n     * @private\n     * @type {Array<number>|null}\n     */ this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.lineDashOffset_ = options.lineDashOffset;\n        /**\n     * @private\n     * @type {CanvasLineJoin|undefined}\n     */ this.lineJoin_ = options.lineJoin;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.miterLimit_ = options.miterLimit;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.width_ = options.width;\n    }\n    /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */ clone() {\n        const color = this.getColor();\n        return new $f9d0329c5c745263$var$Stroke({\n            color: Array.isArray(color) ? color.slice() : color || undefined,\n            lineCap: this.getLineCap(),\n            lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n            lineDashOffset: this.getLineDashOffset(),\n            lineJoin: this.getLineJoin(),\n            miterLimit: this.getMiterLimit(),\n            width: this.getWidth()\n        });\n    }\n    /**\n   * Get the stroke color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */ getColor() {\n        return this.color_;\n    }\n    /**\n   * Get the line cap type for the stroke.\n   * @return {CanvasLineCap|undefined} Line cap.\n   * @api\n   */ getLineCap() {\n        return this.lineCap_;\n    }\n    /**\n   * Get the line dash style for the stroke.\n   * @return {Array<number>|null} Line dash.\n   * @api\n   */ getLineDash() {\n        return this.lineDash_;\n    }\n    /**\n   * Get the line dash offset for the stroke.\n   * @return {number|undefined} Line dash offset.\n   * @api\n   */ getLineDashOffset() {\n        return this.lineDashOffset_;\n    }\n    /**\n   * Get the line join type for the stroke.\n   * @return {CanvasLineJoin|undefined} Line join.\n   * @api\n   */ getLineJoin() {\n        return this.lineJoin_;\n    }\n    /**\n   * Get the miter limit for the stroke.\n   * @return {number|undefined} Miter limit.\n   * @api\n   */ getMiterLimit() {\n        return this.miterLimit_;\n    }\n    /**\n   * Get the stroke width.\n   * @return {number|undefined} Width.\n   * @api\n   */ getWidth() {\n        return this.width_;\n    }\n    /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */ setColor(color) {\n        this.color_ = color;\n    }\n    /**\n   * Set the line cap.\n   *\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\n   * @api\n   */ setLineCap(lineCap) {\n        this.lineCap_ = lineCap;\n    }\n    /**\n   * Set the line dash.\n   *\n   * @param {Array<number>|null} lineDash Line dash.\n   * @api\n   */ setLineDash(lineDash) {\n        this.lineDash_ = lineDash;\n    }\n    /**\n   * Set the line dash offset.\n   *\n   * @param {number|undefined} lineDashOffset Line dash offset.\n   * @api\n   */ setLineDashOffset(lineDashOffset) {\n        this.lineDashOffset_ = lineDashOffset;\n    }\n    /**\n   * Set the line join.\n   *\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\n   * @api\n   */ setLineJoin(lineJoin) {\n        this.lineJoin_ = lineJoin;\n    }\n    /**\n   * Set the miter limit.\n   *\n   * @param {number|undefined} miterLimit Miter limit.\n   * @api\n   */ setMiterLimit(miterLimit) {\n        this.miterLimit_ = miterLimit;\n    }\n    /**\n   * Set the width.\n   *\n   * @param {number|undefined} width Width.\n   * @api\n   */ setWidth(width) {\n        this.width_ = width;\n    }\n}\nvar $f9d0329c5c745263$export$2e2bcd8739ae039 = $f9d0329c5c745263$var$Stroke;\n\n\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */ /**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */ /**\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */ /**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>|Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>),import(\"../render.js\").State): void} RenderFunction\n */ /**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */ /**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\n *\n *  const fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)',\n *  });\n *  const stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25,\n *  });\n *  const styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5,\n *      }),\n *      fill: fill,\n *      stroke: stroke,\n *    }),\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\n *\n *  const styles = {};\n *  const white = [255, 255, 255, 1];\n *  const blue = [0, 153, 255, 1];\n *  const width = 3;\n *  styles['Polygon'] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5],\n *      }),\n *    }),\n *  ];\n *  styles['MultiPolygon'] =\n *      styles['Polygon'];\n *  styles['LineString'] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2,\n *      }),\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width,\n *      }),\n *    }),\n *  ];\n *  styles['MultiLineString'] = styles['LineString'];\n *\n *  styles['Circle'] = styles['Polygon'].concat(\n *    styles['LineString']\n *  );\n *\n *  styles['Point'] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue,\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2,\n *        }),\n *      }),\n *      zIndex: Infinity,\n *    }),\n *  ];\n *  styles['MultiPoint'] =\n *      styles['Point'];\n *  styles['GeometryCollection'] =\n *      styles['Polygon'].concat(\n *          styles['LineString'],\n *          styles['Point']\n *      );\n * ```\n *\n * @api\n */ class $8c7f6dda98e8cb9c$var$Style {\n    /**\n   * @param {Options} [options] Style options.\n   */ constructor(options){\n        options = options || {};\n        /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     */ this.geometry_ = null;\n        /**\n     * @private\n     * @type {!GeometryFunction}\n     */ this.geometryFunction_ = $8c7f6dda98e8cb9c$var$defaultGeometryFunction;\n        if (options.geometry !== undefined) this.setGeometry(options.geometry);\n        /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */ this.fill_ = options.fill !== undefined ? options.fill : null;\n        /**\n     * @private\n     * @type {import(\"./Image.js\").default}\n     */ this.image_ = options.image !== undefined ? options.image : null;\n        /**\n     * @private\n     * @type {RenderFunction|null}\n     */ this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n        /**\n     * @private\n     * @type {RenderFunction|null}\n     */ this.hitDetectionRenderer_ = options.hitDetectionRenderer !== undefined ? options.hitDetectionRenderer : null;\n        /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */ this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\n     * @private\n     * @type {import(\"./Text.js\").default}\n     */ this.text_ = options.text !== undefined ? options.text : null;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.zIndex_ = options.zIndex;\n    }\n    /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */ clone() {\n        let geometry = this.getGeometry();\n        if (geometry && typeof geometry === \"object\") geometry = /** @type {import(\"../geom/Geometry.js\").default} */ geometry.clone();\n        return new $8c7f6dda98e8cb9c$var$Style({\n            geometry: geometry,\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            image: this.getImage() ? this.getImage().clone() : undefined,\n            renderer: this.getRenderer(),\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            text: this.getText() ? this.getText().clone() : undefined,\n            zIndex: this.getZIndex()\n        });\n    }\n    /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */ getRenderer() {\n        return this.renderer_;\n    }\n    /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */ setRenderer(renderer) {\n        this.renderer_ = renderer;\n    }\n    /**\n   * Sets a custom renderer function for this style used\n   * in hit detection.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */ setHitDetectionRenderer(renderer) {\n        this.hitDetectionRenderer_ = renderer;\n    }\n    /**\n   * Get the custom renderer function that was configured with\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */ getHitDetectionRenderer() {\n        return this.hitDetectionRenderer_;\n    }\n    /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */ getGeometry() {\n        return this.geometry_;\n    }\n    /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */ getGeometryFunction() {\n        return this.geometryFunction_;\n    }\n    /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */ getFill() {\n        return this.fill_;\n    }\n    /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */ setFill(fill) {\n        this.fill_ = fill;\n    }\n    /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default} Image style.\n   * @api\n   */ getImage() {\n        return this.image_;\n    }\n    /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */ setImage(image) {\n        this.image_ = image;\n    }\n    /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */ getStroke() {\n        return this.stroke_;\n    }\n    /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */ setStroke(stroke) {\n        this.stroke_ = stroke;\n    }\n    /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default} Text style.\n   * @api\n   */ getText() {\n        return this.text_;\n    }\n    /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */ setText(text) {\n        this.text_ = text;\n    }\n    /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */ getZIndex() {\n        return this.zIndex_;\n    }\n    /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */ setGeometry(geometry) {\n        if (typeof geometry === \"function\") this.geometryFunction_ = geometry;\n        else if (typeof geometry === \"string\") this.geometryFunction_ = function(feature) {\n            return /** @type {import(\"../geom/Geometry.js\").default} */ feature.get(geometry);\n        };\n        else if (!geometry) this.geometryFunction_ = $8c7f6dda98e8cb9c$var$defaultGeometryFunction;\n        else if (geometry !== undefined) this.geometryFunction_ = function() {\n            return /** @type {import(\"../geom/Geometry.js\").default} */ geometry;\n        };\n        this.geometry_ = geometry;\n    }\n    /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */ setZIndex(zIndex) {\n        this.zIndex_ = zIndex;\n    }\n}\nfunction $8c7f6dda98e8cb9c$export$c314ea3f6b164147(obj) {\n    let styleFunction;\n    if (typeof obj === \"function\") styleFunction = obj;\n    else {\n        /**\n     * @type {Array<Style>}\n     */ let styles;\n        if (Array.isArray(obj)) styles = obj;\n        else {\n            (0, $35d5ec884318008e$export$a7a9523472993e97)(typeof /** @type {?} */ obj.getZIndex === \"function\", \"Expected an `Style` or an array of `Style`\");\n            const style = /** @type {Style} */ obj;\n            styles = [\n                style\n            ];\n        }\n        styleFunction = function() {\n            return styles;\n        };\n    }\n    return styleFunction;\n}\n/**\n * @type {Array<Style>|null}\n */ let $8c7f6dda98e8cb9c$var$defaultStyles = null;\nfunction $8c7f6dda98e8cb9c$export$6865c5ac2f5ce8b6(feature, resolution) {\n    // We don't use an immediately-invoked function\n    // and a closure so we don't get an error at script evaluation time in\n    // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n    // canvas.getContext('2d') at construction time, which will cause an.error\n    // in such browsers.)\n    if (!$8c7f6dda98e8cb9c$var$defaultStyles) {\n        const fill = new (0, $d61d1dcaf3c44610$export$2e2bcd8739ae039)({\n            color: \"rgba(255,255,255,0.4)\"\n        });\n        const stroke = new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)({\n            color: \"#3399CC\",\n            width: 1.25\n        });\n        $8c7f6dda98e8cb9c$var$defaultStyles = [\n            new $8c7f6dda98e8cb9c$var$Style({\n                image: new (0, $06150d8570b7481b$export$2e2bcd8739ae039)({\n                    fill: fill,\n                    stroke: stroke,\n                    radius: 5\n                }),\n                fill: fill,\n                stroke: stroke\n            })\n        ];\n    }\n    return $8c7f6dda98e8cb9c$var$defaultStyles;\n}\nfunction $8c7f6dda98e8cb9c$export$ed1eaede5d0e77ac() {\n    /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */ const styles = {};\n    const white = [\n        255,\n        255,\n        255,\n        1\n    ];\n    const blue = [\n        0,\n        153,\n        255,\n        1\n    ];\n    const width = 3;\n    styles[\"Polygon\"] = [\n        new $8c7f6dda98e8cb9c$var$Style({\n            fill: new (0, $d61d1dcaf3c44610$export$2e2bcd8739ae039)({\n                color: [\n                    255,\n                    255,\n                    255,\n                    0.5\n                ]\n            })\n        })\n    ];\n    styles[\"MultiPolygon\"] = styles[\"Polygon\"];\n    styles[\"LineString\"] = [\n        new $8c7f6dda98e8cb9c$var$Style({\n            stroke: new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)({\n                color: white,\n                width: width + 2\n            })\n        }),\n        new $8c7f6dda98e8cb9c$var$Style({\n            stroke: new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)({\n                color: blue,\n                width: width\n            })\n        })\n    ];\n    styles[\"MultiLineString\"] = styles[\"LineString\"];\n    styles[\"Circle\"] = styles[\"Polygon\"].concat(styles[\"LineString\"]);\n    styles[\"Point\"] = [\n        new $8c7f6dda98e8cb9c$var$Style({\n            image: new (0, $06150d8570b7481b$export$2e2bcd8739ae039)({\n                radius: width * 2,\n                fill: new (0, $d61d1dcaf3c44610$export$2e2bcd8739ae039)({\n                    color: blue\n                }),\n                stroke: new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)({\n                    color: white,\n                    width: width / 2\n                })\n            }),\n            zIndex: Infinity\n        })\n    ];\n    styles[\"MultiPoint\"] = styles[\"Point\"];\n    styles[\"GeometryCollection\"] = styles[\"Polygon\"].concat(styles[\"LineString\"], styles[\"Point\"]);\n    return styles;\n}\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */ function $8c7f6dda98e8cb9c$var$defaultGeometryFunction(feature) {\n    return feature.getGeometry();\n}\nvar $8c7f6dda98e8cb9c$export$2e2bcd8739ae039 = $8c7f6dda98e8cb9c$var$Style;\n\n\n/**\n * @module ol/render/canvas/style\n */ \n\n/**\n * @module ol/style/Icon\n */ \n\n\n\n\n/**\n * @module ol/style/IconImage\n */ \n\n\n\n\n\n\n/**\n * @type {CanvasRenderingContext2D}\n */ let $0e5ad1d3b638689e$var$taintedTestContext = null;\nclass $0e5ad1d3b638689e$var$IconImage extends (0, $08c28d22c0cb5a39$export$2e2bcd8739ae039) {\n    /**\n   * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap} image Image.\n   * @param {string|undefined} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../ImageState.js\").default} imageState Image state.\n   * @param {import(\"../color.js\").Color} color Color.\n   */ constructor(image, src, crossOrigin, imageState, color){\n        super();\n        /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap}\n     */ this.hitDetectionImage_ = null;\n        /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap}\n     */ this.image_ = image;\n        /**\n     * @private\n     * @type {string|null}\n     */ this.crossOrigin_ = crossOrigin;\n        /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */ this.canvas_ = {};\n        /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */ this.color_ = color;\n        /**\n     * @private\n     * @type {import(\"../ImageState.js\").default}\n     */ this.imageState_ = imageState === undefined ? (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE : imageState;\n        /**\n     * @private\n     * @type {import(\"../size.js\").Size|null}\n     */ this.size_ = image && image.width && image.height ? [\n            image.width,\n            image.height\n        ] : null;\n        /**\n     * @private\n     * @type {string|undefined}\n     */ this.src_ = src;\n        /**\n     * @private\n     */ this.tainted_;\n    }\n    /**\n   * @private\n   */ initializeImage_() {\n        this.image_ = new Image();\n        if (this.crossOrigin_ !== null) this.image_.crossOrigin = this.crossOrigin_;\n    }\n    /**\n   * @private\n   * @return {boolean} The image canvas is tainted.\n   */ isTainted_() {\n        if (this.tainted_ === undefined && this.imageState_ === (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) {\n            if (!$0e5ad1d3b638689e$var$taintedTestContext) $0e5ad1d3b638689e$var$taintedTestContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(1, 1, undefined, {\n                willReadFrequently: true\n            });\n            $0e5ad1d3b638689e$var$taintedTestContext.drawImage(this.image_, 0, 0);\n            try {\n                $0e5ad1d3b638689e$var$taintedTestContext.getImageData(0, 0, 1, 1);\n                this.tainted_ = false;\n            } catch (e) {\n                $0e5ad1d3b638689e$var$taintedTestContext = null;\n                this.tainted_ = true;\n            }\n        }\n        return this.tainted_ === true;\n    }\n    /**\n   * @private\n   */ dispatchChangeEvent_() {\n        this.dispatchEvent((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE);\n    }\n    /**\n   * @private\n   */ handleImageError_() {\n        this.imageState_ = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR;\n        this.dispatchChangeEvent_();\n    }\n    /**\n   * @private\n   */ handleImageLoad_() {\n        this.imageState_ = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED;\n        this.size_ = [\n            this.image_.width,\n            this.image_.height\n        ];\n        this.dispatchChangeEvent_();\n    }\n    /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element or image bitmap.\n   */ getImage(pixelRatio) {\n        if (!this.image_) this.initializeImage_();\n        this.replaceColor_(pixelRatio);\n        return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;\n    }\n    /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Image or Canvas element.\n   */ getPixelRatio(pixelRatio) {\n        this.replaceColor_(pixelRatio);\n        return this.canvas_[pixelRatio] ? pixelRatio : 1;\n    }\n    /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */ getImageState() {\n        return this.imageState_;\n    }\n    /**\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\n   */ getHitDetectionImage() {\n        if (!this.image_) this.initializeImage_();\n        if (!this.hitDetectionImage_) {\n            if (this.isTainted_()) {\n                const width = this.size_[0];\n                const height = this.size_[1];\n                const context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(width, height);\n                context.fillRect(0, 0, width, height);\n                this.hitDetectionImage_ = context.canvas;\n            } else this.hitDetectionImage_ = this.image_;\n        }\n        return this.hitDetectionImage_;\n    }\n    /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   */ getSize() {\n        return this.size_;\n    }\n    /**\n   * @return {string|undefined} Image src.\n   */ getSrc() {\n        return this.src_;\n    }\n    /**\n   * Load not yet loaded URI.\n   */ load() {\n        if (this.imageState_ !== (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE) return;\n        if (!this.image_) this.initializeImage_();\n        this.imageState_ = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADING;\n        try {\n            if (this.src_ !== undefined) /** @type {HTMLImageElement} */ this.image_.src = this.src_;\n        } catch (e) {\n            this.handleImageError_();\n        }\n        if (this.image_ instanceof HTMLImageElement) (0, $b54439be79d4619a$export$a9e5af241c1bd389)(this.image_, this.src_).then((image)=>{\n            this.image_ = image;\n            this.handleImageLoad_();\n        }).catch(this.handleImageError_.bind(this));\n    }\n    /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @private\n   */ replaceColor_(pixelRatio) {\n        if (!this.color_ || this.canvas_[pixelRatio] || this.imageState_ !== (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) return;\n        const image = this.image_;\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = Math.ceil(image.width * pixelRatio);\n        canvas.height = Math.ceil(image.height * pixelRatio);\n        const ctx = canvas.getContext(\"2d\");\n        ctx.scale(pixelRatio, pixelRatio);\n        ctx.drawImage(image, 0, 0);\n        ctx.globalCompositeOperation = \"multiply\";\n        ctx.fillStyle = (0, $322346e1ff7894ca$export$590567be997858b6)(this.color_);\n        ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\n        ctx.globalCompositeOperation = \"destination-in\";\n        ctx.drawImage(image, 0, 0);\n        this.canvas_[pixelRatio] = canvas;\n    }\n}\nfunction $0e5ad1d3b638689e$export$3988ae62b71be9a3(image, cacheKey, crossOrigin, imageState, color) {\n    let iconImage = cacheKey === undefined ? undefined : (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).get(cacheKey, crossOrigin, color);\n    if (!iconImage) {\n        iconImage = new $0e5ad1d3b638689e$var$IconImage(image, image instanceof HTMLImageElement ? image.src || undefined : cacheKey, crossOrigin, imageState, color);\n        (0, $f351daabfe6e2d22$export$747ccdf771a87ab8).set(cacheKey, crossOrigin, color, iconImage);\n    }\n    return iconImage;\n}\nvar $0e5ad1d3b638689e$export$2e2bcd8739ae039 = $0e5ad1d3b638689e$var$IconImage;\n\n\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */ /**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */ /**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */ /**\n * @param {number} width The width.\n * @param {number} height The height.\n * @param {number|undefined} wantedWidth The wanted width.\n * @param {number|undefined} wantedHeight The wanted height.\n * @return {number|Array<number>} The scale.\n */ function $8463d325b53eeb0c$var$calculateScale(width, height, wantedWidth, wantedHeight) {\n    if (wantedWidth !== undefined && wantedHeight !== undefined) return [\n        wantedWidth / width,\n        wantedHeight / height\n    ];\n    if (wantedWidth !== undefined) return wantedWidth / width;\n    if (wantedHeight !== undefined) return wantedHeight / height;\n    return 1;\n}\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */ class $8463d325b53eeb0c$var$Icon extends (0, $e60011aea38e6239$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        options = options || {};\n        /**\n     * @type {number}\n     */ const opacity = options.opacity !== undefined ? options.opacity : 1;\n        /**\n     * @type {number}\n     */ const rotation = options.rotation !== undefined ? options.rotation : 0;\n        /**\n     * @type {number|import(\"../size.js\").Size}\n     */ const scale = options.scale !== undefined ? options.scale : 1;\n        /**\n     * @type {boolean}\n     */ const rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n        super({\n            opacity: opacity,\n            rotation: rotation,\n            scale: scale,\n            displacement: options.displacement !== undefined ? options.displacement : [\n                0,\n                0\n            ],\n            rotateWithView: rotateWithView,\n            declutterMode: options.declutterMode\n        });\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.anchor_ = options.anchor !== undefined ? options.anchor : [\n            0.5,\n            0.5\n        ];\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.normalizedAnchor_ = null;\n        /**\n     * @private\n     * @type {IconOrigin}\n     */ this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : \"top-left\";\n        /**\n     * @private\n     * @type {IconAnchorUnits}\n     */ this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : \"fraction\";\n        /**\n     * @private\n     * @type {IconAnchorUnits}\n     */ this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : \"fraction\";\n        /**\n     * @private\n     * @type {?string}\n     */ this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n        const image = options.img !== undefined ? options.img : null;\n        let cacheKey = options.src;\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!(cacheKey !== undefined && image), \"`image` and `src` cannot be provided at the same time\");\n        if ((cacheKey === undefined || cacheKey.length === 0) && image) cacheKey = /** @type {HTMLImageElement} */ image.src || (0, $6c5e11070e371322$export$5e82334337e0f204)(image);\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(cacheKey !== undefined && cacheKey.length > 0, \"A defined and non-empty `src` or `image` must be provided\");\n        (0, $35d5ec884318008e$export$a7a9523472993e97)(!((options.width !== undefined || options.height !== undefined) && options.scale !== undefined), \"`width` or `height` cannot be provided together with `scale`\");\n        let imageState;\n        if (options.src !== undefined) imageState = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE;\n        else if (image !== undefined) {\n            if (image instanceof HTMLImageElement) {\n                if (image.complete) imageState = image.src ? (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED : (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE;\n                else imageState = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADING;\n            } else imageState = (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED;\n        }\n        /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */ this.color_ = options.color !== undefined ? (0, $322346e1ff7894ca$export$75093a47a9fa838d)(options.color) : null;\n        /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */ this.iconImage_ = (0, $0e5ad1d3b638689e$export$3988ae62b71be9a3)(image, /** @type {string} */ cacheKey, this.crossOrigin_, imageState, this.color_);\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.offset_ = options.offset !== undefined ? options.offset : [\n            0,\n            0\n        ];\n        /**\n     * @private\n     * @type {IconOrigin}\n     */ this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : \"top-left\";\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.origin_ = null;\n        /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */ this.size_ = options.size !== undefined ? options.size : null;\n        /**\n     * Calculate the scale if width or height were given.\n     */ if (options.width !== undefined || options.height !== undefined) {\n            let width, height;\n            if (options.size) [width, height] = options.size;\n            else {\n                const image = this.getImage(1);\n                if (image.width && image.height) {\n                    width = image.width;\n                    height = image.height;\n                } else if (image instanceof HTMLImageElement) {\n                    this.initialOptions_ = options;\n                    const onload = ()=>{\n                        this.unlistenImageChange(onload);\n                        if (!this.initialOptions_) return;\n                        const imageSize = this.iconImage_.getSize();\n                        this.setScale($8463d325b53eeb0c$var$calculateScale(imageSize[0], imageSize[1], options.width, options.height));\n                    };\n                    this.listenImageChange(onload);\n                    return;\n                }\n            }\n            if (width !== undefined) this.setScale($8463d325b53eeb0c$var$calculateScale(width, height, options.width, options.height));\n        }\n    }\n    /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */ clone() {\n        let scale, width, height;\n        if (this.initialOptions_) {\n            width = this.initialOptions_.width;\n            height = this.initialOptions_.height;\n        } else {\n            scale = this.getScale();\n            scale = Array.isArray(scale) ? scale.slice() : scale;\n        }\n        return new $8463d325b53eeb0c$var$Icon({\n            anchor: this.anchor_.slice(),\n            anchorOrigin: this.anchorOrigin_,\n            anchorXUnits: this.anchorXUnits_,\n            anchorYUnits: this.anchorYUnits_,\n            color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n            crossOrigin: this.crossOrigin_,\n            offset: this.offset_.slice(),\n            offsetOrigin: this.offsetOrigin_,\n            opacity: this.getOpacity(),\n            rotateWithView: this.getRotateWithView(),\n            rotation: this.getRotation(),\n            scale: scale,\n            width: width,\n            height: height,\n            size: this.size_ !== null ? this.size_.slice() : undefined,\n            src: this.getSrc(),\n            displacement: this.getDisplacement().slice(),\n            declutterMode: this.getDeclutterMode()\n        });\n    }\n    /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */ getAnchor() {\n        let anchor = this.normalizedAnchor_;\n        if (!anchor) {\n            anchor = this.anchor_;\n            const size = this.getSize();\n            if (this.anchorXUnits_ == \"fraction\" || this.anchorYUnits_ == \"fraction\") {\n                if (!size) return null;\n                anchor = this.anchor_.slice();\n                if (this.anchorXUnits_ == \"fraction\") anchor[0] *= size[0];\n                if (this.anchorYUnits_ == \"fraction\") anchor[1] *= size[1];\n            }\n            if (this.anchorOrigin_ != \"top-left\") {\n                if (!size) return null;\n                if (anchor === this.anchor_) anchor = this.anchor_.slice();\n                if (this.anchorOrigin_ == \"top-right\" || this.anchorOrigin_ == \"bottom-right\") anchor[0] = -anchor[0] + size[0];\n                if (this.anchorOrigin_ == \"bottom-left\" || this.anchorOrigin_ == \"bottom-right\") anchor[1] = -anchor[1] + size[1];\n            }\n            this.normalizedAnchor_ = anchor;\n        }\n        const displacement = this.getDisplacement();\n        const scale = this.getScaleArray();\n        // anchor is scaled by renderer but displacement should not be scaled\n        // so divide by scale here\n        return [\n            anchor[0] - displacement[0] / scale[0],\n            anchor[1] + displacement[1] / scale[1]\n        ];\n    }\n    /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */ setAnchor(anchor) {\n        this.anchor_ = anchor;\n        this.normalizedAnchor_ = null;\n    }\n    /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */ getColor() {\n        return this.color_;\n    }\n    /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon\n   * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.\n   * @api\n   */ getImage(pixelRatio) {\n        return this.iconImage_.getImage(pixelRatio);\n    }\n    /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */ getPixelRatio(pixelRatio) {\n        return this.iconImage_.getPixelRatio(pixelRatio);\n    }\n    /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */ getImageSize() {\n        return this.iconImage_.getSize();\n    }\n    /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */ getImageState() {\n        return this.iconImage_.getImageState();\n    }\n    /**\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\n   */ getHitDetectionImage() {\n        return this.iconImage_.getHitDetectionImage();\n    }\n    /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */ getOrigin() {\n        if (this.origin_) return this.origin_;\n        let offset = this.offset_;\n        if (this.offsetOrigin_ != \"top-left\") {\n            const size = this.getSize();\n            const iconImageSize = this.iconImage_.getSize();\n            if (!size || !iconImageSize) return null;\n            offset = offset.slice();\n            if (this.offsetOrigin_ == \"top-right\" || this.offsetOrigin_ == \"bottom-right\") offset[0] = iconImageSize[0] - size[0] - offset[0];\n            if (this.offsetOrigin_ == \"bottom-left\" || this.offsetOrigin_ == \"bottom-right\") offset[1] = iconImageSize[1] - size[1] - offset[1];\n        }\n        this.origin_ = offset;\n        return this.origin_;\n    }\n    /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */ getSrc() {\n        return this.iconImage_.getSrc();\n    }\n    /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */ getSize() {\n        return !this.size_ ? this.iconImage_.getSize() : this.size_;\n    }\n    /**\n   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon width (in pixels).\n   * @api\n   */ getWidth() {\n        const scale = this.getScaleArray();\n        if (this.size_) return this.size_[0] * scale[0];\n        if (this.iconImage_.getImageState() == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) return this.iconImage_.getSize()[0] * scale[0];\n        return undefined;\n    }\n    /**\n   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon height (in pixels).\n   * @api\n   */ getHeight() {\n        const scale = this.getScaleArray();\n        if (this.size_) return this.size_[1] * scale[1];\n        if (this.iconImage_.getImageState() == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) return this.iconImage_.getSize()[1] * scale[1];\n        return undefined;\n    }\n    /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */ setScale(scale) {\n        delete this.initialOptions_;\n        super.setScale(scale);\n    }\n    /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */ listenImageChange(listener) {\n        this.iconImage_.addEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, listener);\n    }\n    /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */ load() {\n        this.iconImage_.load();\n    }\n    /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */ unlistenImageChange(listener) {\n        this.iconImage_.removeEventListener((0, $294047c5e65f31a3$export$2e2bcd8739ae039).CHANGE, listener);\n    }\n}\nvar $8463d325b53eeb0c$export$2e2bcd8739ae039 = $8463d325b53eeb0c$var$Icon;\n\n\n\n\n\n/**\n * @module ol/style/Text\n */ \n\n/**\n * @typedef {'point' | 'line'} TextPlacement\n * Default text placement is `'point'`. Note that\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\n */ /**\n * @typedef {'left' | 'center' | 'right'} TextJustify\n */ /**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */ const $944be50faeff5321$var$DEFAULT_FILL_COLOR = \"#333\";\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS `font` value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {TextPlacement} [placement='point'] Text placement.\n * @property {number} [repeat] Repeat interval. When set, the text will be repeated at this interval, which specifies\n * the distance between two text anchors in pixels. Only available when `placement` is set to `'line'`. Overrides 'textAlign'.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for `placement: 'line'` or the immediate rendering API.\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {TextJustify} [justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\n * `'hanging'`, `'ideographic'`.\n * @property {import(\"./Fill.js\").default|null} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333). Specify `null` for no fill.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */ /**\n * @classdesc\n * Set text style for vector features.\n * @api\n */ class $944be50faeff5321$var$Text {\n    /**\n   * @param {Options} [options] Options.\n   */ constructor(options){\n        options = options || {};\n        /**\n     * @private\n     * @type {string|undefined}\n     */ this.font_ = options.font;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.rotation_ = options.rotation;\n        /**\n     * @private\n     * @type {boolean|undefined}\n     */ this.rotateWithView_ = options.rotateWithView;\n        /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */ this.scale_ = options.scale;\n        /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */ this.scaleArray_ = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(options.scale !== undefined ? options.scale : 1);\n        /**\n     * @private\n     * @type {string|Array<string>|undefined}\n     */ this.text_ = options.text;\n        /**\n     * @private\n     * @type {CanvasTextAlign|undefined}\n     */ this.textAlign_ = options.textAlign;\n        /**\n     * @private\n     * @type {TextJustify|undefined}\n     */ this.justify_ = options.justify;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.repeat_ = options.repeat;\n        /**\n     * @private\n     * @type {CanvasTextBaseline|undefined}\n     */ this.textBaseline_ = options.textBaseline;\n        /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */ this.fill_ = options.fill !== undefined ? options.fill : new (0, $d61d1dcaf3c44610$export$2e2bcd8739ae039)({\n            color: $944be50faeff5321$var$DEFAULT_FILL_COLOR\n        });\n        /**\n     * @private\n     * @type {number}\n     */ this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n        /**\n     * @private\n     * @type {TextPlacement}\n     */ this.placement_ = options.placement !== undefined ? options.placement : \"point\";\n        /**\n     * @private\n     * @type {boolean}\n     */ this.overflow_ = !!options.overflow;\n        /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */ this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n        /**\n     * @private\n     * @type {number}\n     */ this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n        /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */ this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n        /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */ this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n        /**\n     * @private\n     * @type {Array<number>|null}\n     */ this.padding_ = options.padding === undefined ? null : options.padding;\n    }\n    /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */ clone() {\n        const scale = this.getScale();\n        return new $944be50faeff5321$var$Text({\n            font: this.getFont(),\n            placement: this.getPlacement(),\n            repeat: this.getRepeat(),\n            maxAngle: this.getMaxAngle(),\n            overflow: this.getOverflow(),\n            rotation: this.getRotation(),\n            rotateWithView: this.getRotateWithView(),\n            scale: Array.isArray(scale) ? scale.slice() : scale,\n            text: this.getText(),\n            textAlign: this.getTextAlign(),\n            justify: this.getJustify(),\n            textBaseline: this.getTextBaseline(),\n            fill: this.getFill() ? this.getFill().clone() : undefined,\n            stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n            offsetX: this.getOffsetX(),\n            offsetY: this.getOffsetY(),\n            backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n            backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,\n            padding: this.getPadding() || undefined\n        });\n    }\n    /**\n   * Get the `overflow` configuration.\n   * @return {boolean} Let text overflow the length of the path they follow.\n   * @api\n   */ getOverflow() {\n        return this.overflow_;\n    }\n    /**\n   * Get the font name.\n   * @return {string|undefined} Font.\n   * @api\n   */ getFont() {\n        return this.font_;\n    }\n    /**\n   * Get the maximum angle between adjacent characters.\n   * @return {number} Angle in radians.\n   * @api\n   */ getMaxAngle() {\n        return this.maxAngle_;\n    }\n    /**\n   * Get the label placement.\n   * @return {TextPlacement} Text placement.\n   * @api\n   */ getPlacement() {\n        return this.placement_;\n    }\n    /**\n   * Get the repeat interval of the text.\n   * @return {number|undefined} Repeat interval in pixels.\n   * @api\n   */ getRepeat() {\n        return this.repeat_;\n    }\n    /**\n   * Get the x-offset for the text.\n   * @return {number} Horizontal text offset.\n   * @api\n   */ getOffsetX() {\n        return this.offsetX_;\n    }\n    /**\n   * Get the y-offset for the text.\n   * @return {number} Vertical text offset.\n   * @api\n   */ getOffsetY() {\n        return this.offsetY_;\n    }\n    /**\n   * Get the fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */ getFill() {\n        return this.fill_;\n    }\n    /**\n   * Determine whether the text rotates with the map.\n   * @return {boolean|undefined} Rotate with map.\n   * @api\n   */ getRotateWithView() {\n        return this.rotateWithView_;\n    }\n    /**\n   * Get the text rotation.\n   * @return {number|undefined} Rotation.\n   * @api\n   */ getRotation() {\n        return this.rotation_;\n    }\n    /**\n   * Get the text scale.\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\n   * @api\n   */ getScale() {\n        return this.scale_;\n    }\n    /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */ getScaleArray() {\n        return this.scaleArray_;\n    }\n    /**\n   * Get the stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */ getStroke() {\n        return this.stroke_;\n    }\n    /**\n   * Get the text to be rendered.\n   * @return {string|Array<string>|undefined} Text.\n   * @api\n   */ getText() {\n        return this.text_;\n    }\n    /**\n   * Get the text alignment.\n   * @return {CanvasTextAlign|undefined} Text align.\n   * @api\n   */ getTextAlign() {\n        return this.textAlign_;\n    }\n    /**\n   * Get the justification.\n   * @return {TextJustify|undefined} Justification.\n   * @api\n   */ getJustify() {\n        return this.justify_;\n    }\n    /**\n   * Get the text baseline.\n   * @return {CanvasTextBaseline|undefined} Text baseline.\n   * @api\n   */ getTextBaseline() {\n        return this.textBaseline_;\n    }\n    /**\n   * Get the background fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */ getBackgroundFill() {\n        return this.backgroundFill_;\n    }\n    /**\n   * Get the background stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */ getBackgroundStroke() {\n        return this.backgroundStroke_;\n    }\n    /**\n   * Get the padding for the text.\n   * @return {Array<number>|null} Padding.\n   * @api\n   */ getPadding() {\n        return this.padding_;\n    }\n    /**\n   * Set the `overflow` property.\n   *\n   * @param {boolean} overflow Let text overflow the path that it follows.\n   * @api\n   */ setOverflow(overflow) {\n        this.overflow_ = overflow;\n    }\n    /**\n   * Set the font.\n   *\n   * @param {string|undefined} font Font.\n   * @api\n   */ setFont(font) {\n        this.font_ = font;\n    }\n    /**\n   * Set the maximum angle between adjacent characters.\n   *\n   * @param {number} maxAngle Angle in radians.\n   * @api\n   */ setMaxAngle(maxAngle) {\n        this.maxAngle_ = maxAngle;\n    }\n    /**\n   * Set the x offset.\n   *\n   * @param {number} offsetX Horizontal text offset.\n   * @api\n   */ setOffsetX(offsetX) {\n        this.offsetX_ = offsetX;\n    }\n    /**\n   * Set the y offset.\n   *\n   * @param {number} offsetY Vertical text offset.\n   * @api\n   */ setOffsetY(offsetY) {\n        this.offsetY_ = offsetY;\n    }\n    /**\n   * Set the text placement.\n   *\n   * @param {TextPlacement} placement Placement.\n   * @api\n   */ setPlacement(placement) {\n        this.placement_ = placement;\n    }\n    /**\n   * Set the repeat interval of the text.\n   * @param {number|undefined} [repeat] Repeat interval in pixels.\n   * @api\n   */ setRepeat(repeat) {\n        this.repeat_ = repeat;\n    }\n    /**\n   * Set whether to rotate the text with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */ setRotateWithView(rotateWithView) {\n        this.rotateWithView_ = rotateWithView;\n    }\n    /**\n   * Set the fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */ setFill(fill) {\n        this.fill_ = fill;\n    }\n    /**\n   * Set the rotation.\n   *\n   * @param {number|undefined} rotation Rotation.\n   * @api\n   */ setRotation(rotation) {\n        this.rotation_ = rotation;\n    }\n    /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n   * @api\n   */ setScale(scale) {\n        this.scale_ = scale;\n        this.scaleArray_ = (0, $cc435a5409103773$export$a71a825ff42fb8e1)(scale !== undefined ? scale : 1);\n    }\n    /**\n   * Set the stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */ setStroke(stroke) {\n        this.stroke_ = stroke;\n    }\n    /**\n   * Set the text.\n   *\n   * @param {string|Array<string>|undefined} text Text.\n   * @api\n   */ setText(text) {\n        this.text_ = text;\n    }\n    /**\n   * Set the text alignment.\n   *\n   * @param {CanvasTextAlign|undefined} textAlign Text align.\n   * @api\n   */ setTextAlign(textAlign) {\n        this.textAlign_ = textAlign;\n    }\n    /**\n   * Set the justification.\n   *\n   * @param {TextJustify|undefined} justify Justification.\n   * @api\n   */ setJustify(justify) {\n        this.justify_ = justify;\n    }\n    /**\n   * Set the text baseline.\n   *\n   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\n   * @api\n   */ setTextBaseline(textBaseline) {\n        this.textBaseline_ = textBaseline;\n    }\n    /**\n   * Set the background fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */ setBackgroundFill(fill) {\n        this.backgroundFill_ = fill;\n    }\n    /**\n   * Set the background stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */ setBackgroundStroke(stroke) {\n        this.backgroundStroke_ = stroke;\n    }\n    /**\n   * Set the padding (`[top, right, bottom, left]`).\n   *\n   * @param {Array<number>|null} padding Padding.\n   * @api\n   */ setPadding(padding) {\n        this.padding_ = padding;\n    }\n}\nvar $944be50faeff5321$export$2e2bcd8739ae039 = $944be50faeff5321$var$Text;\n\n\n/**\n * @module ol/expr/expression\n */ \n/**\n * @fileoverview This module includes types and functions for parsing array encoded expressions.\n * The result of parsing an encoded expression is one of the specific expression classes.\n * During parsing, information is added to the parsing context about the data accessed by the\n * expression.\n */ let $778943ec39690f8e$var$numTypes = 0;\nconst $778943ec39690f8e$export$267d7ad6fa96ffaf = 0;\nconst $778943ec39690f8e$export$240f7fffab1b25a0 = 1 << $778943ec39690f8e$var$numTypes++;\nconst $778943ec39690f8e$export$86a7aca748b1e260 = 1 << $778943ec39690f8e$var$numTypes++;\nconst $778943ec39690f8e$export$2b93044cbf134323 = 1 << $778943ec39690f8e$var$numTypes++;\nconst $778943ec39690f8e$export$2cd82751acc0e609 = 1 << $778943ec39690f8e$var$numTypes++;\nconst $778943ec39690f8e$export$d701d0e49f4bcb39 = 1 << $778943ec39690f8e$var$numTypes++;\nconst $778943ec39690f8e$export$ec4c9a150bae86cd = Math.pow(2, $778943ec39690f8e$var$numTypes) - 1;\nconst $778943ec39690f8e$var$typeNames = {\n    [$778943ec39690f8e$export$240f7fffab1b25a0]: \"boolean\",\n    [$778943ec39690f8e$export$86a7aca748b1e260]: \"number\",\n    [$778943ec39690f8e$export$2b93044cbf134323]: \"string\",\n    [$778943ec39690f8e$export$2cd82751acc0e609]: \"color\",\n    [$778943ec39690f8e$export$d701d0e49f4bcb39]: \"number[]\"\n};\nconst $778943ec39690f8e$var$namedTypes = Object.keys($778943ec39690f8e$var$typeNames).map(Number).sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\nfunction $778943ec39690f8e$export$b2afc7c96b2b4a45(type) {\n    const names = [];\n    for (const namedType of $778943ec39690f8e$var$namedTypes)if ($778943ec39690f8e$export$9fdcb8b441c4f2b4(type, namedType)) names.push($778943ec39690f8e$var$typeNames[namedType]);\n    if (names.length === 0) return \"untyped\";\n    if (names.length < 3) return names.join(\" or \");\n    return names.slice(0, -1).join(\", \") + \", or \" + names[names.length - 1];\n}\nfunction $778943ec39690f8e$export$9fdcb8b441c4f2b4(broad, specific) {\n    return (broad & specific) === specific;\n}\nfunction $778943ec39690f8e$export$3252d368d784c970(oneType, otherType) {\n    return !!(oneType & otherType);\n}\nfunction $778943ec39690f8e$export$26b9f946b448f23e(type, expected) {\n    return type === expected;\n}\nclass $778943ec39690f8e$export$eb63e96e0913dda4 {\n    /**\n   * @param {number} type The value type.\n   * @param {LiteralValue} value The literal value.\n   */ constructor(type, value){\n        this.type = type;\n        this.value = value;\n    }\n}\nclass $778943ec39690f8e$export$6f3d80189eb72cd4 {\n    /**\n   * @param {number} type The return type.\n   * @param {string} operator The operator.\n   * @param {...Expression} args The arguments.\n   */ constructor(type, operator, ...args){\n        this.type = type;\n        this.operator = operator;\n        this.args = args;\n    }\n}\nfunction $778943ec39690f8e$export$1c8b4c1584800354() {\n    return {\n        variables: new Set(),\n        properties: new Set()\n    };\n}\nfunction $778943ec39690f8e$export$98e6a39c04603d36(encoded, context) {\n    switch(typeof encoded){\n        case \"boolean\":\n            return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$240f7fffab1b25a0, encoded);\n        case \"number\":\n            return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$86a7aca748b1e260, encoded);\n        case \"string\":\n            return new $778943ec39690f8e$export$eb63e96e0913dda4($778943ec39690f8e$export$2b93044cbf134323, encoded);\n        default:\n    }\n    if (!Array.isArray(encoded)) throw new Error(\"Expression must be an array or a primitive value\");\n    if (encoded.length === 0) throw new Error(\"Empty expression\");\n    if (typeof encoded[0] === \"string\") return $778943ec39690f8e$var$parseCallExpression(encoded, context);\n    for (const item of encoded){\n        if (typeof item !== \"number\") throw new Error(\"Expected an array of numbers\");\n    }\n    let type = $778943ec39690f8e$export$d701d0e49f4bcb39;\n    if (encoded.length === 3 || encoded.length === 4) type |= $778943ec39690f8e$export$2cd82751acc0e609;\n    return new $778943ec39690f8e$export$eb63e96e0913dda4(type, encoded);\n}\nconst $778943ec39690f8e$export$2655e45458bc48f3 = {\n    Number: \"number\",\n    String: \"string\",\n    Get: \"get\",\n    Var: \"var\",\n    Any: \"any\",\n    All: \"all\",\n    Not: \"!\",\n    Resolution: \"resolution\",\n    Equal: \"==\",\n    NotEqual: \"!=\",\n    GreaterThan: \">\",\n    GreaterThanOrEqualTo: \">=\",\n    LessThan: \"<\",\n    LessThanOrEqualTo: \"<=\",\n    Multiply: \"*\",\n    Divide: \"/\",\n    Add: \"+\",\n    Subtract: \"-\",\n    Clamp: \"clamp\",\n    Mod: \"%\",\n    Pow: \"^\",\n    Abs: \"abs\",\n    Floor: \"floor\",\n    Ceil: \"ceil\",\n    Round: \"round\",\n    Sin: \"sin\",\n    Cos: \"cos\",\n    Atan: \"atan\",\n    Sqrt: \"sqrt\",\n    Match: \"match\"\n};\n/**\n * @typedef {function(Array, ParsingContext):Expression} Parser\n */ /**\n * @type {Object<string, Parser>}\n */ const $778943ec39690f8e$var$parsers = {\n    [$778943ec39690f8e$export$2655e45458bc48f3.Number]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(1, Infinity, $778943ec39690f8e$export$ec4c9a150bae86cd), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.String]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(1, Infinity, $778943ec39690f8e$export$ec4c9a150bae86cd), $778943ec39690f8e$export$2b93044cbf134323),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Get]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withGetArgs, $778943ec39690f8e$export$ec4c9a150bae86cd),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Var]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withVarArgs, $778943ec39690f8e$export$ec4c9a150bae86cd),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Resolution]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withNoArgs, $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Any]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, Infinity, $778943ec39690f8e$export$240f7fffab1b25a0), $778943ec39690f8e$export$240f7fffab1b25a0),\n    [$778943ec39690f8e$export$2655e45458bc48f3.All]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, Infinity, $778943ec39690f8e$export$240f7fffab1b25a0), $778943ec39690f8e$export$240f7fffab1b25a0),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Not]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(1, 1, $778943ec39690f8e$export$240f7fffab1b25a0), $778943ec39690f8e$export$240f7fffab1b25a0),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Equal]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, 2, $778943ec39690f8e$export$ec4c9a150bae86cd), $778943ec39690f8e$export$240f7fffab1b25a0),\n    [$778943ec39690f8e$export$2655e45458bc48f3.NotEqual]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, 2, $778943ec39690f8e$export$ec4c9a150bae86cd), $778943ec39690f8e$export$240f7fffab1b25a0),\n    [$778943ec39690f8e$export$2655e45458bc48f3.GreaterThan]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, 2, $778943ec39690f8e$export$ec4c9a150bae86cd), $778943ec39690f8e$export$240f7fffab1b25a0),\n    [$778943ec39690f8e$export$2655e45458bc48f3.GreaterThanOrEqualTo]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, 2, $778943ec39690f8e$export$ec4c9a150bae86cd), $778943ec39690f8e$export$240f7fffab1b25a0),\n    [$778943ec39690f8e$export$2655e45458bc48f3.LessThan]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, 2, $778943ec39690f8e$export$ec4c9a150bae86cd), $778943ec39690f8e$export$240f7fffab1b25a0),\n    [$778943ec39690f8e$export$2655e45458bc48f3.LessThanOrEqualTo]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, 2, $778943ec39690f8e$export$ec4c9a150bae86cd), $778943ec39690f8e$export$240f7fffab1b25a0),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Multiply]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, Infinity, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Divide]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, 2, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Add]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, Infinity, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Subtract]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, 2, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Clamp]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(3, 3, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Mod]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, 2, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Pow]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(2, 2, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Abs]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(1, 1, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Floor]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(1, 1, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Ceil]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(1, 1, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Round]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(1, 1, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Sin]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(1, 1, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Cos]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(1, 1, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Atan]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(1, 2, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Sqrt]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(1, 1, $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$86a7aca748b1e260),\n    [$778943ec39690f8e$export$2655e45458bc48f3.Match]: $778943ec39690f8e$var$createParser($778943ec39690f8e$var$withArgs(4, Infinity, $778943ec39690f8e$export$2b93044cbf134323 | $778943ec39690f8e$export$86a7aca748b1e260), $778943ec39690f8e$export$ec4c9a150bae86cd)\n};\n/**\n * @typedef {function(Array, ParsingContext):Array<Expression>} ArgValidator\n */ /**\n * @type ArgValidator\n */ function $778943ec39690f8e$var$withGetArgs(encoded, context) {\n    if (encoded.length !== 2) throw new Error(\"Expected 1 argument for get operation\");\n    const arg = $778943ec39690f8e$export$98e6a39c04603d36(encoded[1], context);\n    if (!(arg instanceof $778943ec39690f8e$export$eb63e96e0913dda4)) throw new Error(\"Expected a literal argument for get operation\");\n    if (typeof arg.value !== \"string\") throw new Error(\"Expected a string argument for get operation\");\n    context.properties.add(arg.value);\n    return [\n        arg\n    ];\n}\n/**\n * @type ArgValidator\n */ function $778943ec39690f8e$var$withVarArgs(encoded, context) {\n    if (encoded.length !== 2) throw new Error(\"Expected 1 argument for var operation\");\n    const arg = $778943ec39690f8e$export$98e6a39c04603d36(encoded[1], context);\n    if (!(arg instanceof $778943ec39690f8e$export$eb63e96e0913dda4)) throw new Error(\"Expected a literal argument for var operation\");\n    if (typeof arg.value !== \"string\") throw new Error(\"Expected a string argument for get operation\");\n    context.variables.add(arg.value);\n    return [\n        arg\n    ];\n}\n/**\n * @type ArgValidator\n */ function $778943ec39690f8e$var$withNoArgs(encoded, context) {\n    const operation = encoded[0];\n    if (encoded.length !== 1) throw new Error(`Expected no arguments for ${operation} operation`);\n    return [];\n}\n/**\n * @param {number} minArgs The minimum number of arguments.\n * @param {number} maxArgs The maximum number of arguments.\n * @param {number} argType The argument type.\n * @return {ArgValidator} The argument validator\n */ function $778943ec39690f8e$var$withArgs(minArgs, maxArgs, argType) {\n    return function(encoded, context) {\n        const operation = encoded[0];\n        const argCount = encoded.length - 1;\n        if (minArgs === maxArgs) {\n            if (argCount !== minArgs) {\n                const plural = minArgs === 1 ? \"\" : \"s\";\n                throw new Error(`Expected ${minArgs} argument${plural} for operation ${operation}, got ${argCount}`);\n            }\n        } else if (argCount < minArgs || argCount > maxArgs) throw new Error(`Expected ${minArgs} to ${maxArgs} arguments for operation ${operation}, got ${argCount}`);\n        /**\n     * @type {Array<Expression>}\n     */ const args = new Array(argCount);\n        for(let i = 0; i < argCount; ++i){\n            const expression = $778943ec39690f8e$export$98e6a39c04603d36(encoded[i + 1], context);\n            if (!$778943ec39690f8e$export$3252d368d784c970(argType, expression.type)) {\n                const gotType = $778943ec39690f8e$export$b2afc7c96b2b4a45(argType);\n                const expectedType = $778943ec39690f8e$export$b2afc7c96b2b4a45(expression.type);\n                throw new Error(`Unexpected type for argument ${i} of ${operation} operation` + ` : got ${gotType} but expected ${expectedType}`);\n            }\n            args[i] = expression;\n        }\n        return args;\n    };\n}\n/**\n * @param {ArgValidator} argValidator The argument validator.\n * @param {number} returnType The return type.\n * @return {Parser} The parser.\n */ function $778943ec39690f8e$var$createParser(argValidator, returnType) {\n    return function(encoded, context) {\n        const operator = encoded[0];\n        const args = argValidator(encoded, context);\n        return new $778943ec39690f8e$export$6f3d80189eb72cd4(returnType, operator, ...args);\n    };\n}\n/**\n * @param {Array} encoded The encoded expression.\n * @param {ParsingContext} context The parsing context.\n * @return {Expression} The parsed expression.\n */ function $778943ec39690f8e$var$parseCallExpression(encoded, context) {\n    const operator = encoded[0];\n    const parser = $778943ec39690f8e$var$parsers[operator];\n    if (!parser) throw new Error(`Unknown operator: ${operator}`);\n    return parser(encoded, context);\n}\n\n\n/**\n * @module ol/expr/cpu\n */ \nfunction $d597295b1f166e98$export$c18f39f0e136c26() {\n    return {\n        variables: {},\n        properties: {},\n        resolution: NaN\n    };\n}\nfunction $d597295b1f166e98$export$b5f535122a9211f0(encoded, type, context) {\n    const expression = (0, $778943ec39690f8e$export$98e6a39c04603d36)(encoded, context);\n    if (!(0, $778943ec39690f8e$export$3252d368d784c970)(type, expression.type)) {\n        const expected = (0, $778943ec39690f8e$export$b2afc7c96b2b4a45)(type);\n        const actual = (0, $778943ec39690f8e$export$b2afc7c96b2b4a45)(expression.type);\n        throw new Error(`Expected expression to be of type ${expected}, got ${actual}`);\n    }\n    return $d597295b1f166e98$var$compileExpression(expression, context);\n}\n/**\n * @param {import(\"./expression.js\").Expression} expression The expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */ function $d597295b1f166e98$var$compileExpression(expression, context) {\n    if (expression instanceof (0, $778943ec39690f8e$export$eb63e96e0913dda4)) return function() {\n        return expression.value;\n    };\n    const operator = expression.operator;\n    switch(operator){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Number:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).String:\n            return $d597295b1f166e98$var$compileAssertionExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Get:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Var:\n            return $d597295b1f166e98$var$compileAccessorExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Resolution:\n            return (context)=>context.resolution;\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Any:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).All:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Not:\n            return $d597295b1f166e98$var$compileLogicalExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Equal:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).NotEqual:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).LessThan:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).LessThanOrEqualTo:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).GreaterThan:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).GreaterThanOrEqualTo:\n            return $d597295b1f166e98$var$compileComparisonExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Multiply:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Divide:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Add:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Subtract:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Clamp:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Mod:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Pow:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Abs:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Floor:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Ceil:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Round:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Sin:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Cos:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Atan:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Sqrt:\n            return $d597295b1f166e98$var$compileNumericExpression(expression, context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Match:\n            return $d597295b1f166e98$var$compileMatchExpression(expression, context);\n        default:\n            throw new Error(`Unsupported operator ${operator}`);\n    }\n}\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */ function $d597295b1f166e98$var$compileAssertionExpression(expression, context) {\n    const type = expression.operator;\n    const length = expression.args.length;\n    const args = new Array(length);\n    for(let i = 0; i < length; ++i)args[i] = $d597295b1f166e98$var$compileExpression(expression.args[i], context);\n    switch(type){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Number:\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).String:\n            return (context)=>{\n                for(let i = 0; i < length; ++i){\n                    const value = args[i](context);\n                    if (typeof value === type) return value;\n                }\n                throw new Error(`Expected one of the values to be a ${type}`);\n            };\n        default:\n            throw new Error(`Unsupported assertion operator ${type}`);\n    }\n}\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */ function $d597295b1f166e98$var$compileAccessorExpression(expression, context) {\n    const nameExpression = expression.args[0];\n    if (!(nameExpression instanceof (0, $778943ec39690f8e$export$eb63e96e0913dda4))) throw new Error(\"Expected literal name\");\n    const name = nameExpression.value;\n    if (typeof name !== \"string\") throw new Error(\"Expected string name\");\n    switch(expression.operator){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Get:\n            return (context)=>context.properties[name];\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Var:\n            return (context)=>context.variables[name];\n        default:\n            throw new Error(`Unsupported accessor operator ${expression.operator}`);\n    }\n}\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {BooleanEvaluator} The evaluator function.\n */ function $d597295b1f166e98$var$compileComparisonExpression(expression, context) {\n    const op = expression.operator;\n    const left = $d597295b1f166e98$var$compileExpression(expression.args[0], context);\n    const right = $d597295b1f166e98$var$compileExpression(expression.args[1], context);\n    switch(op){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Equal:\n            return (context)=>left(context) === right(context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).NotEqual:\n            return (context)=>left(context) !== right(context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).LessThan:\n            return (context)=>left(context) < right(context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).LessThanOrEqualTo:\n            return (context)=>left(context) <= right(context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).GreaterThan:\n            return (context)=>left(context) > right(context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).GreaterThanOrEqualTo:\n            return (context)=>left(context) >= right(context);\n        default:\n            throw new Error(`Unsupported comparison operator ${op}`);\n    }\n}\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {BooleanEvaluator} The evaluator function.\n */ function $d597295b1f166e98$var$compileLogicalExpression(expression, context) {\n    const op = expression.operator;\n    const length = expression.args.length;\n    const args = new Array(length);\n    for(let i = 0; i < length; ++i)args[i] = $d597295b1f166e98$var$compileExpression(expression.args[i], context);\n    switch(op){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Any:\n            return (context)=>{\n                for(let i = 0; i < length; ++i){\n                    if (args[i](context)) return true;\n                }\n                return false;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).All:\n            return (context)=>{\n                for(let i = 0; i < length; ++i){\n                    if (!args[i](context)) return false;\n                }\n                return true;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Not:\n            return (context)=>!args[0](context);\n        default:\n            throw new Error(`Unsupported logical operator ${op}`);\n    }\n}\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {NumberEvaluator} The evaluator function.\n */ function $d597295b1f166e98$var$compileNumericExpression(expression, context) {\n    const op = expression.operator;\n    const length = expression.args.length;\n    const args = new Array(length);\n    for(let i = 0; i < length; ++i)args[i] = $d597295b1f166e98$var$compileExpression(expression.args[i], context);\n    switch(op){\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Multiply:\n            return (context)=>{\n                let value = 1;\n                for(let i = 0; i < length; ++i)value *= args[i](context);\n                return value;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Divide:\n            return (context)=>args[0](context) / args[1](context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Add:\n            return (context)=>{\n                let value = 0;\n                for(let i = 0; i < length; ++i)value += args[i](context);\n                return value;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Subtract:\n            return (context)=>args[0](context) - args[1](context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Clamp:\n            return (context)=>{\n                const value = args[0](context);\n                const min = args[1](context);\n                if (value < min) return min;\n                const max = args[2](context);\n                if (value > max) return max;\n                return value;\n            };\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Mod:\n            return (context)=>args[0](context) % args[1](context);\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Pow:\n            return (context)=>Math.pow(args[0](context), args[1](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Abs:\n            return (context)=>Math.abs(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Floor:\n            return (context)=>Math.floor(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Ceil:\n            return (context)=>Math.ceil(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Round:\n            return (context)=>Math.round(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Sin:\n            return (context)=>Math.sin(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Cos:\n            return (context)=>Math.cos(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Atan:\n            if (length === 2) return (context)=>Math.atan2(args[0](context), args[1](context));\n            return (context)=>Math.atan(args[0](context));\n        case (0, $778943ec39690f8e$export$2655e45458bc48f3).Sqrt:\n            return (context)=>Math.sqrt(args[0](context));\n        default:\n            throw new Error(`Unsupported numeric operator ${op}`);\n    }\n}\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */ function $d597295b1f166e98$var$compileMatchExpression(expression, context) {\n    const length = expression.args.length;\n    const args = new Array(length);\n    for(let i = 0; i < length; ++i)args[i] = $d597295b1f166e98$var$compileExpression(expression.args[i], context);\n    return (context)=>{\n        const value = args[0](context);\n        for(let i = 1; i < length; i += 2){\n            if (value === args[i](context)) return args[i + 1](context);\n        }\n        return args[length - 1](context);\n    };\n}\n\n\n\n/**\n * @fileoverview This module includes functions to build styles for the canvas renderer.  Building\n * is composed of two steps: parsing and compiling.  The parsing step takes an encoded expression\n * and returns an instance of one of the expression classes.  The compiling step takes the\n * expression instance and returns a function that can be evaluated to return a literal value.  The\n * evaluator function should do as little allocation and work as possible.\n */ /**\n * @typedef {import(\"../../style/flat.js\").FlatStyle} FlatStyle\n */ /**\n * @typedef {import(\"../../expr/expression.js\").EncodedExpression} EncodedExpression\n */ /**\n * @typedef {import(\"../../expr/expression.js\").ParsingContext} ParsingContext\n */ /**\n * @typedef {import(\"../../expr/expression.js\").CallExpression} CallExpression\n */ /**\n * @typedef {import(\"../../expr/cpu.js\").EvaluationContext} EvaluationContext\n */ /**\n * @typedef {import(\"../../expr/cpu.js\").ExpressionEvaluator} ExpressionEvaluator\n */ /**\n * @param {EvaluationContext} context The evaluation context.\n * @return {boolean} Always true.\n */ function $6000539d86fde80c$var$always(context) {\n    return true;\n}\nfunction $6000539d86fde80c$export$fc6a94152b1b05a8(rules) {\n    const parsingContext = (0, $778943ec39690f8e$export$1c8b4c1584800354)();\n    const evaluator = $6000539d86fde80c$export$d6ae6a4799989976(rules, parsingContext);\n    const evaluationContext = (0, $d597295b1f166e98$export$c18f39f0e136c26)();\n    return function(feature, resolution) {\n        evaluationContext.properties = feature.getPropertiesInternal();\n        evaluationContext.resolution = resolution;\n        return evaluator(evaluationContext);\n    };\n}\nfunction $6000539d86fde80c$export$5a130bc4f0a0420b(flatStyles) {\n    const parsingContext = (0, $778943ec39690f8e$export$1c8b4c1584800354)();\n    const length = flatStyles.length;\n    /**\n   * @type {Array<StyleEvaluator>}\n   */ const evaluators = new Array(length);\n    for(let i = 0; i < length; ++i)evaluators[i] = $6000539d86fde80c$export$a6e5f510497b7388(flatStyles[i], parsingContext);\n    const evaluationContext = (0, $d597295b1f166e98$export$c18f39f0e136c26)();\n    /**\n   * @type {Array<Style>}\n   */ const styles = new Array(length);\n    return function(feature, resolution) {\n        evaluationContext.properties = feature.getPropertiesInternal();\n        evaluationContext.resolution = resolution;\n        for(let i = 0; i < length; ++i)styles[i] = evaluators[i](evaluationContext);\n        return styles;\n    };\n}\nfunction $6000539d86fde80c$export$d6ae6a4799989976(rules, context) {\n    const length = rules.length;\n    /**\n   * @type {Array<CompiledRule>}\n   */ const compiledRules = new Array(length);\n    for(let i = 0; i < length; ++i){\n        const rule = rules[i];\n        const filter = \"filter\" in rule ? (0, $d597295b1f166e98$export$b5f535122a9211f0)(rule.filter, (0, $778943ec39690f8e$export$240f7fffab1b25a0), context) : $6000539d86fde80c$var$always;\n        /**\n     * @type {Array<StyleEvaluator>}\n     */ let styles;\n        if (Array.isArray(rule.style)) {\n            const styleLength = rule.style.length;\n            styles = new Array(styleLength);\n            for(let j = 0; j < styleLength; ++j)styles[j] = $6000539d86fde80c$export$a6e5f510497b7388(rule.style[j], context);\n        } else styles = [\n            $6000539d86fde80c$export$a6e5f510497b7388(rule.style, context)\n        ];\n        compiledRules[i] = {\n            filter: filter,\n            styles: styles\n        };\n    }\n    return function(context) {\n        /**\n     * @type {Array<Style>}\n     */ const styles = [];\n        let someMatched = false;\n        for(let i = 0; i < length; ++i){\n            const filterEvaluator = compiledRules[i].filter;\n            if (!filterEvaluator(context)) continue;\n            if (rules[i].else && someMatched) continue;\n            someMatched = true;\n            for (const styleEvaluator of compiledRules[i].styles){\n                const style = styleEvaluator(context);\n                if (!style) continue;\n                styles.push(style);\n            }\n        }\n        return styles;\n    };\n}\nfunction $6000539d86fde80c$export$a6e5f510497b7388(flatStyle, context) {\n    const evaluateFill = $6000539d86fde80c$var$buildFill(flatStyle, \"\", context);\n    const evaluateStroke = $6000539d86fde80c$var$buildStroke(flatStyle, \"\", context);\n    const evaluateText = $6000539d86fde80c$var$buildText(flatStyle, context);\n    const evaluateImage = $6000539d86fde80c$var$buildImage(flatStyle, context);\n    const evaluateZIndex = $6000539d86fde80c$var$numberEvaluator(flatStyle, \"z-index\", context);\n    const style = new (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039)();\n    return function(context) {\n        let empty = true;\n        if (evaluateFill) {\n            const fill = evaluateFill(context);\n            if (fill) empty = false;\n            style.setFill(fill);\n        }\n        if (evaluateStroke) {\n            const stroke = evaluateStroke(context);\n            if (stroke) empty = false;\n            style.setStroke(stroke);\n        }\n        if (evaluateText) {\n            const text = evaluateText(context);\n            if (text) empty = false;\n            style.setText(text);\n        }\n        if (evaluateImage) {\n            const image = evaluateImage(context);\n            if (image) empty = false;\n            style.setImage(image);\n        }\n        if (evaluateZIndex) style.setZIndex(evaluateZIndex(context));\n        if (empty) return null;\n        return style;\n    };\n}\n/**\n * @typedef {function(EvaluationContext):Fill} FillEvaluator\n */ /**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} prefix The property prefix.\n * @param {ParsingContext} context The parsing context.\n * @return {FillEvaluator?} A function that evaluates to a fill.\n */ function $6000539d86fde80c$var$buildFill(flatStyle, prefix, context) {\n    const evaluateColor = $6000539d86fde80c$var$colorLikeEvaluator(flatStyle, prefix + \"fill-color\", context);\n    if (!evaluateColor) return null;\n    const fill = new (0, $d61d1dcaf3c44610$export$2e2bcd8739ae039)();\n    return function(context) {\n        const color = evaluateColor(context);\n        if (color === \"none\") return null;\n        fill.setColor(color);\n        return fill;\n    };\n}\n/**\n * @typedef {function(EvaluationContext):Stroke} StrokeEvaluator\n */ /**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} prefix The property prefix.\n * @param {ParsingContext} context The parsing context.\n * @return {StrokeEvaluator?} A function the evaluates to a stroke.\n */ function $6000539d86fde80c$var$buildStroke(flatStyle, prefix, context) {\n    const evaluateWidth = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"stroke-width\", context);\n    const evaluateColor = $6000539d86fde80c$var$colorLikeEvaluator(flatStyle, prefix + \"stroke-color\", context);\n    if (!evaluateWidth && !evaluateColor) return null;\n    const evaluateLineCap = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + \"stroke-line-cap\", context);\n    const evaluateLineJoin = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + \"stroke-line-join\", context);\n    const evaluateLineDash = $6000539d86fde80c$var$numberArrayEvaluator(flatStyle, prefix + \"stroke-line-dash\", context);\n    const evaluateLineDashOffset = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"stroke-line-dash-offset\", context);\n    const evaluateMiterLimit = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"stroke-miter-limit\", context);\n    const stroke = new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)();\n    return function(context) {\n        if (evaluateColor) {\n            const color = evaluateColor(context);\n            if (color === \"none\") return null;\n            stroke.setColor(color);\n        }\n        if (evaluateWidth) stroke.setWidth(evaluateWidth(context));\n        if (evaluateLineCap) {\n            const lineCap = evaluateLineCap(context);\n            if (lineCap !== \"butt\" && lineCap !== \"round\" && lineCap !== \"square\") throw new Error(\"Expected butt, round, or square line cap\");\n            stroke.setLineCap(lineCap);\n        }\n        if (evaluateLineJoin) {\n            const lineJoin = evaluateLineJoin(context);\n            if (lineJoin !== \"bevel\" && lineJoin !== \"round\" && lineJoin !== \"miter\") throw new Error(\"Expected bevel, round, or miter line join\");\n            stroke.setLineJoin(lineJoin);\n        }\n        if (evaluateLineDash) stroke.setLineDash(evaluateLineDash(context));\n        if (evaluateLineDashOffset) stroke.setLineDashOffset(evaluateLineDashOffset(context));\n        if (evaluateMiterLimit) stroke.setMiterLimit(evaluateMiterLimit(context));\n        return stroke;\n    };\n}\n/**\n * @typedef {function(EvaluationContext):Text} TextEvaluator\n */ /**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {ParsingContext} context The parsing context.\n * @return {TextEvaluator?} A function that evaluates to a text symbolizer.\n */ function $6000539d86fde80c$var$buildText(flatStyle, context) {\n    const prefix = \"text-\";\n    // Currently, an Array<string> may be used for rich text support.  This doesn't\n    // work with our expression syntax where arrays of strings are interpreted as\n    // call expressions.  To support rich text, we could add a 'strings' operator\n    // where all the following arguments would be string values.\n    const evaluateValue = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + \"value\", context);\n    if (!evaluateValue) return null;\n    const evaluateFill = $6000539d86fde80c$var$buildFill(flatStyle, prefix, context);\n    const evaluateBackgroundFill = $6000539d86fde80c$var$buildFill(flatStyle, prefix + \"background-\", context);\n    const evaluateStroke = $6000539d86fde80c$var$buildStroke(flatStyle, prefix, context);\n    const evaluateBackgroundStroke = $6000539d86fde80c$var$buildStroke(flatStyle, prefix + \"background-\", context);\n    const evaluateFont = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + \"font\", context);\n    const evaluateMaxAngle = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"max-angle\", context);\n    const evaluateOffsetX = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"offset-x\", context);\n    const evaluateOffsetY = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"offset-y\", context);\n    const evaluateOverflow = $6000539d86fde80c$var$booleanEvaluator(flatStyle, prefix + \"overflow\", context);\n    const evaluatePlacement = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + \"placement\", context);\n    const evaluateRepeat = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"repeat\", context);\n    const evaluateScale = $6000539d86fde80c$var$sizeLikeEvaluator(flatStyle, prefix + \"scale\", context);\n    const evaluateRotateWithView = $6000539d86fde80c$var$booleanEvaluator(flatStyle, prefix + \"rotate-with-view\", context);\n    const evaluateRotation = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"rotation\", context);\n    const evaluateAlign = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + \"align\", context);\n    const evaluateJustify = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + \"justify\", context);\n    const evaluateBaseline = $6000539d86fde80c$var$stringEvaluator(flatStyle, prefix + \"baseline\", context);\n    const evaluatePadding = $6000539d86fde80c$var$numberArrayEvaluator(flatStyle, prefix + \"padding\", context);\n    const text = new (0, $944be50faeff5321$export$2e2bcd8739ae039)({});\n    return function(context) {\n        text.setText(evaluateValue(context));\n        if (evaluateFill) text.setFill(evaluateFill(context));\n        if (evaluateBackgroundFill) text.setBackgroundFill(evaluateBackgroundFill(context));\n        if (evaluateStroke) text.setStroke(evaluateStroke(context));\n        if (evaluateBackgroundStroke) text.setBackgroundStroke(evaluateBackgroundStroke(context));\n        if (evaluateFont) text.setFont(evaluateFont(context));\n        if (evaluateMaxAngle) text.setMaxAngle(evaluateMaxAngle(context));\n        if (evaluateOffsetX) text.setOffsetX(evaluateOffsetX(context));\n        if (evaluateOffsetY) text.setOffsetY(evaluateOffsetY(context));\n        if (evaluateOverflow) text.setOverflow(evaluateOverflow(context));\n        if (evaluatePlacement) {\n            const placement = evaluatePlacement(context);\n            if (placement !== \"point\" && placement !== \"line\") throw new Error(\"Expected point or line for text-placement\");\n            text.setPlacement(placement);\n        }\n        if (evaluateRepeat) text.setRepeat(evaluateRepeat(context));\n        if (evaluateScale) text.setScale(evaluateScale(context));\n        if (evaluateRotateWithView) text.setRotateWithView(evaluateRotateWithView(context));\n        if (evaluateRotation) text.setRotation(evaluateRotation(context));\n        if (evaluateAlign) {\n            const textAlign = evaluateAlign(context);\n            if (textAlign !== \"left\" && textAlign !== \"center\" && textAlign !== \"right\" && textAlign !== \"end\" && textAlign !== \"start\") throw new Error(\"Expected left, right, center, start, or end for text-align\");\n            text.setTextAlign(textAlign);\n        }\n        if (evaluateJustify) {\n            const justify = evaluateJustify(context);\n            if (justify !== \"left\" && justify !== \"right\" && justify !== \"center\") throw new Error(\"Expected left, right, or center for text-justify\");\n            text.setJustify(justify);\n        }\n        if (evaluateBaseline) {\n            const textBaseline = evaluateBaseline(context);\n            if (textBaseline !== \"bottom\" && textBaseline !== \"top\" && textBaseline !== \"middle\" && textBaseline !== \"alphabetic\" && textBaseline !== \"hanging\") throw new Error(\"Expected bottom, top, middle, alphabetic, or hanging for text-baseline\");\n            text.setTextBaseline(textBaseline);\n        }\n        if (evaluatePadding) text.setPadding(evaluatePadding(context));\n        return text;\n    };\n}\n/**\n * @typedef {function(EvaluationContext):import(\"../../style/Image.js\").default} ImageEvaluator\n */ /**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {ParsingContext} context The parsing context.\n * @return {ImageEvaluator?} A function that evaluates to an image symbolizer.\n */ function $6000539d86fde80c$var$buildImage(flatStyle, context) {\n    if (\"icon-src\" in flatStyle) return $6000539d86fde80c$var$buildIcon(flatStyle, context);\n    if (\"shape-points\" in flatStyle) return $6000539d86fde80c$var$buildShape(flatStyle, context);\n    if (\"circle-radius\" in flatStyle) return $6000539d86fde80c$var$buildCircle(flatStyle, context);\n    return null;\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {ParsingContext} context The parsing context.\n * @return {ImageEvaluator} A function that evaluates to an image symbolizer.\n */ function $6000539d86fde80c$var$buildIcon(flatStyle, context) {\n    const prefix = \"icon-\";\n    // required property\n    const srcName = prefix + \"src\";\n    const src = $6000539d86fde80c$var$requireString(flatStyle[srcName], srcName);\n    // settable properties\n    const evaluateAnchor = $6000539d86fde80c$var$coordinateEvaluator(flatStyle, prefix + \"anchor\", context);\n    const evaluateScale = $6000539d86fde80c$var$sizeLikeEvaluator(flatStyle, prefix + \"scale\", context);\n    const evaluateOpacity = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"opacity\", context);\n    const evaluateDisplacement = $6000539d86fde80c$var$coordinateEvaluator(flatStyle, prefix + \"displacement\", context);\n    const evaluateRotation = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"rotation\", context);\n    const evaluateRotateWithView = $6000539d86fde80c$var$booleanEvaluator(flatStyle, prefix + \"rotate-with-view\", context);\n    // the remaining symbolizer properties are not currently settable\n    const anchorOrigin = $6000539d86fde80c$var$optionalIconOrigin(flatStyle, prefix + \"anchor-origin\");\n    const anchorXUnits = $6000539d86fde80c$var$optionalIconAnchorUnits(flatStyle, prefix + \"anchor-x-units\");\n    const anchorYUnits = $6000539d86fde80c$var$optionalIconAnchorUnits(flatStyle, prefix + \"anchor-y-units\");\n    const color = $6000539d86fde80c$var$optionalColorLike(flatStyle, prefix + \"color\");\n    const crossOrigin = $6000539d86fde80c$var$optionalString(flatStyle, prefix + \"cross-origin\");\n    const offset = $6000539d86fde80c$var$optionalNumberArray(flatStyle, prefix + \"offset\");\n    const offsetOrigin = $6000539d86fde80c$var$optionalIconOrigin(flatStyle, prefix + \"offset-origin\");\n    const width = $6000539d86fde80c$var$optionalNumber(flatStyle, prefix + \"width\");\n    const height = $6000539d86fde80c$var$optionalNumber(flatStyle, prefix + \"height\");\n    const size = $6000539d86fde80c$var$optionalSize(flatStyle, prefix + \"size\");\n    const declutterMode = $6000539d86fde80c$var$optionalDeclutterMode(flatStyle, prefix + \"declutter\");\n    const icon = new (0, $8463d325b53eeb0c$export$2e2bcd8739ae039)({\n        src: src,\n        anchorOrigin: anchorOrigin,\n        anchorXUnits: anchorXUnits,\n        anchorYUnits: anchorYUnits,\n        color: color,\n        crossOrigin: crossOrigin,\n        offset: offset,\n        offsetOrigin: offsetOrigin,\n        height: height,\n        width: width,\n        size: size,\n        declutterMode: declutterMode\n    });\n    return function(context) {\n        if (evaluateOpacity) icon.setOpacity(evaluateOpacity(context));\n        if (evaluateDisplacement) icon.setDisplacement(evaluateDisplacement(context));\n        if (evaluateRotation) icon.setRotation(evaluateRotation(context));\n        if (evaluateRotateWithView) icon.setRotateWithView(evaluateRotateWithView(context));\n        if (evaluateScale) icon.setScale(evaluateScale(context));\n        if (evaluateAnchor) icon.setAnchor(evaluateAnchor(context));\n        return icon;\n    };\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {ParsingContext} context The parsing context.\n * @return {ImageEvaluator} A function that evaluates to an icon symbolizer.\n */ function $6000539d86fde80c$var$buildShape(flatStyle, context) {\n    const prefix = \"shape-\";\n    // required property\n    const pointsName = prefix + \"points\";\n    const points = $6000539d86fde80c$var$requireNumber(flatStyle[pointsName], pointsName);\n    // settable properties\n    const evaluateFill = $6000539d86fde80c$var$buildFill(flatStyle, prefix, context);\n    const evaluateStroke = $6000539d86fde80c$var$buildStroke(flatStyle, prefix, context);\n    const evaluateScale = $6000539d86fde80c$var$sizeLikeEvaluator(flatStyle, prefix + \"scale\", context);\n    const evaluateDisplacement = $6000539d86fde80c$var$coordinateEvaluator(flatStyle, prefix + \"displacement\", context);\n    const evaluateRotation = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"rotation\", context);\n    const evaluateRotateWithView = $6000539d86fde80c$var$booleanEvaluator(flatStyle, prefix + \"rotate-with-view\", context);\n    // the remaining properties are not currently settable\n    const radius = $6000539d86fde80c$var$optionalNumber(flatStyle, prefix + \"radius\");\n    const radius1 = $6000539d86fde80c$var$optionalNumber(flatStyle, prefix + \"radius1\");\n    const radius2 = $6000539d86fde80c$var$optionalNumber(flatStyle, prefix + \"radius2\");\n    const angle = $6000539d86fde80c$var$optionalNumber(flatStyle, prefix + \"angle\");\n    const declutterMode = $6000539d86fde80c$var$optionalDeclutterMode(flatStyle, prefix + \"declutter-mode\");\n    const shape = new (0, $3e99c452138b2224$export$2e2bcd8739ae039)({\n        points: points,\n        radius: radius,\n        radius1: radius1,\n        radius2: radius2,\n        angle: angle,\n        declutterMode: declutterMode\n    });\n    return function(context) {\n        if (evaluateFill) shape.setFill(evaluateFill(context));\n        if (evaluateStroke) shape.setStroke(evaluateStroke(context));\n        if (evaluateDisplacement) shape.setDisplacement(evaluateDisplacement(context));\n        if (evaluateRotation) shape.setRotation(evaluateRotation(context));\n        if (evaluateRotateWithView) shape.setRotateWithView(evaluateRotateWithView(context));\n        if (evaluateScale) shape.setScale(evaluateScale(context));\n        return shape;\n    };\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {ParsingContext} context The parsing context.\n * @return {ImageEvaluator} A function that evaluates to a circle symbolizer.\n */ function $6000539d86fde80c$var$buildCircle(flatStyle, context) {\n    const prefix = \"circle-\";\n    // settable properties\n    const evaluateFill = $6000539d86fde80c$var$buildFill(flatStyle, prefix, context);\n    const evaluateStroke = $6000539d86fde80c$var$buildStroke(flatStyle, prefix, context);\n    const evaluateRadius = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"radius\", context);\n    const evaluateScale = $6000539d86fde80c$var$sizeLikeEvaluator(flatStyle, prefix + \"scale\", context);\n    const evaluateDisplacement = $6000539d86fde80c$var$coordinateEvaluator(flatStyle, prefix + \"displacement\", context);\n    const evaluateRotation = $6000539d86fde80c$var$numberEvaluator(flatStyle, prefix + \"rotation\", context);\n    const evaluateRotateWithView = $6000539d86fde80c$var$booleanEvaluator(flatStyle, prefix + \"rotate-with-view\", context);\n    // the remaining properties are not currently settable\n    const declutterMode = $6000539d86fde80c$var$optionalDeclutterMode(flatStyle, prefix + \"declutter-mode\");\n    const circle = new (0, $06150d8570b7481b$export$2e2bcd8739ae039)({\n        radius: 5,\n        declutterMode: declutterMode\n    });\n    return function(context) {\n        if (evaluateRadius) circle.setRadius(evaluateRadius(context));\n        if (evaluateFill) circle.setFill(evaluateFill(context));\n        if (evaluateStroke) circle.setStroke(evaluateStroke(context));\n        if (evaluateDisplacement) circle.setDisplacement(evaluateDisplacement(context));\n        if (evaluateRotation) circle.setRotation(evaluateRotation(context));\n        if (evaluateRotateWithView) circle.setRotateWithView(evaluateRotateWithView(context));\n        if (evaluateScale) circle.setScale(evaluateScale(context));\n        return circle;\n    };\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').NumberEvaluator|undefined} The expression evaluator or undefined.\n */ function $6000539d86fde80c$var$numberEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return undefined;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$86a7aca748b1e260), context);\n    return function(context) {\n        return $6000539d86fde80c$var$requireNumber(evaluator(context), name);\n    };\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').StringEvaluator?} The expression evaluator.\n */ function $6000539d86fde80c$var$stringEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$2b93044cbf134323), context);\n    return function(context) {\n        return $6000539d86fde80c$var$requireString(evaluator(context), name);\n    };\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').BooleanEvaluator?} The expression evaluator.\n */ function $6000539d86fde80c$var$booleanEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$240f7fffab1b25a0), context);\n    return function(context) {\n        const value = evaluator(context);\n        if (typeof value !== \"boolean\") throw new Error(`Expected a boolean for ${name}`);\n        return value;\n    };\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').ColorLikeEvaluator?} The expression evaluator.\n */ function $6000539d86fde80c$var$colorLikeEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$2cd82751acc0e609) | (0, $778943ec39690f8e$export$2b93044cbf134323), context);\n    return function(context) {\n        return $6000539d86fde80c$var$requireColorLike(evaluator(context), name);\n    };\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').NumberArrayEvaluator?} The expression evaluator.\n */ function $6000539d86fde80c$var$numberArrayEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$d701d0e49f4bcb39), context);\n    return function(context) {\n        return $6000539d86fde80c$var$requireNumberArray(evaluator(context), name);\n    };\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').CoordinateEvaluator?} The expression evaluator.\n */ function $6000539d86fde80c$var$coordinateEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$d701d0e49f4bcb39), context);\n    return function(context) {\n        const array = $6000539d86fde80c$var$requireNumberArray(evaluator(context), name);\n        if (array.length !== 2) throw new Error(`Expected two numbers for ${name}`);\n        return array;\n    };\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').SizeLikeEvaluator?} The expression evaluator.\n */ function $6000539d86fde80c$var$sizeLikeEvaluator(flatStyle, name, context) {\n    if (!(name in flatStyle)) return null;\n    const evaluator = (0, $d597295b1f166e98$export$b5f535122a9211f0)(flatStyle[name], (0, $778943ec39690f8e$export$d701d0e49f4bcb39) | (0, $778943ec39690f8e$export$86a7aca748b1e260), context);\n    return function(context) {\n        return $6000539d86fde80c$var$requireSizeLike(evaluator(context), name);\n    };\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {number|undefined} A number or undefined.\n */ function $6000539d86fde80c$var$optionalNumber(flatStyle, property) {\n    const value = flatStyle[property];\n    if (value === undefined) return undefined;\n    if (typeof value !== \"number\") throw new Error(`Expected a number for ${property}`);\n    return value;\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {import(\"../../size.js\").Size|undefined} A size or undefined.\n */ function $6000539d86fde80c$var$optionalSize(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    if (typeof encoded === \"number\") return (0, $cc435a5409103773$export$a71a825ff42fb8e1)(encoded);\n    if (!Array.isArray(encoded)) throw new Error(`Expected a number or size array for ${property}`);\n    if (encoded.length !== 2 || typeof encoded[0] !== \"number\" || typeof encoded[1] !== \"number\") throw new Error(`Expected a number or size array for ${property}`);\n    return encoded;\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {string|undefined} A string or undefined.\n */ function $6000539d86fde80c$var$optionalString(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    if (typeof encoded !== \"string\") throw new Error(`Expected a string for ${property}`);\n    return encoded;\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {import(\"../../style/Icon.js\").IconOrigin|undefined} An icon origin or undefined.\n */ function $6000539d86fde80c$var$optionalIconOrigin(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    if (encoded !== \"bottom-left\" && encoded !== \"bottom-right\" && encoded !== \"top-left\" && encoded !== \"top-right\") throw new Error(`Expected bottom-left, bottom-right, top-left, or top-right for ${property}`);\n    return encoded;\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {import(\"../../style/Icon.js\").IconAnchorUnits|undefined} Icon anchor units or undefined.\n */ function $6000539d86fde80c$var$optionalIconAnchorUnits(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    if (encoded !== \"pixels\" && encoded !== \"fraction\") throw new Error(`Expected pixels or fraction for ${property}`);\n    return encoded;\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {Array<number>|undefined} An array of numbers or undefined.\n */ function $6000539d86fde80c$var$optionalNumberArray(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    return $6000539d86fde80c$var$requireNumberArray(encoded, property);\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {\"declutter\"|\"obstacle\"|\"none\"|undefined} Icon declutter mode.\n */ function $6000539d86fde80c$var$optionalDeclutterMode(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    if (typeof encoded !== \"string\") throw new Error(`Expected a string for ${property}`);\n    if (encoded !== \"declutter\" && encoded !== \"obstacle\" && encoded !== \"none\") throw new Error(`Expected declutter, obstacle, or none for ${property}`);\n    return encoded;\n}\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {string|Array<number>|undefined} A string or an array of color values or undefined.\n */ function $6000539d86fde80c$var$optionalColorLike(flatStyle, property) {\n    const encoded = flatStyle[property];\n    if (encoded === undefined) return undefined;\n    return $6000539d86fde80c$var$requireColorLike(encoded, property);\n}\n/**\n * @param {any} value The value.\n * @param {string} property The property.\n * @return {Array<number>} An array of numbers.\n */ function $6000539d86fde80c$var$requireNumberArray(value, property) {\n    if (!Array.isArray(value)) throw new Error(`Expected an array for ${property}`);\n    const length = value.length;\n    for(let i = 0; i < length; ++i){\n        if (typeof value[i] !== \"number\") throw new Error(`Expected an array of numbers for ${property}`);\n    }\n    return value;\n}\n/**\n * @param {any} value The value.\n * @param {string} property The property.\n * @return {string} A string.\n */ function $6000539d86fde80c$var$requireString(value, property) {\n    if (typeof value !== \"string\") throw new Error(`Expected a string for ${property}`);\n    return value;\n}\n/**\n * @param {any} value The value.\n * @param {string} property The property.\n * @return {number} A number.\n */ function $6000539d86fde80c$var$requireNumber(value, property) {\n    if (typeof value !== \"number\") throw new Error(`Expected a number for ${property}`);\n    return value;\n}\n/**\n * @param {any} value The value.\n * @param {string} property The property.\n * @return {Array<number>|string} A color.\n */ function $6000539d86fde80c$var$requireColorLike(value, property) {\n    if (typeof value === \"string\") return value;\n    const array = $6000539d86fde80c$var$requireNumberArray(value, property);\n    const length = array.length;\n    if (length < 3 || length > 4) throw new Error(`Expected a color with 3 or 4 values for ${property}`);\n    return array;\n}\n/**\n * @param {any} value The value.\n * @param {string} property The property.\n * @return {number|Array<number>} A number or an array of two numbers.\n */ function $6000539d86fde80c$var$requireSizeLike(value, property) {\n    if (typeof value === \"number\") return value;\n    const size = $6000539d86fde80c$var$requireNumberArray(value, property);\n    if (size.length !== 2) throw new Error(`Expected an array of two numbers for ${property}`);\n    return size;\n}\n\n\n/**\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {VectorSourceType} [source] Source.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all\n * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority\n * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.\n * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has\n * higher priority.\n *\n * As an optimization decluttered features from layers with the same `className` are rendered above\n * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this\n * behavior and place declutterd features with their own layer configure the layer with a `className`\n * other than `ol-layer`.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\n * which will be used if this is not set.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\n * be recreated during animations. This means that no vectors will be shown clipped, but the\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\n * batches will be recreated when no animation is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\n * be recreated during interactions. See also `updateWhileAnimating`.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */ /**\n * @enum {string}\n * @private\n */ const $c8d6dc4c09ed9916$var$Property = {\n    RENDER_ORDER: \"renderOrder\"\n};\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\n * @template {import(\"../renderer/canvas/VectorLayer.js\").default|import(\"../renderer/canvas/VectorTileLayer.js\").default|import(\"../renderer/canvas/VectorImageLayer.js\").default|import(\"../renderer/webgl/PointsLayer.js\").default} RendererType\n * @extends {Layer<VectorSourceType, RendererType>}\n * @api\n */ class $c8d6dc4c09ed9916$var$BaseVectorLayer extends (0, $534f30fce11effcd$export$2e2bcd8739ae039) {\n    /**\n   * @param {Options<VectorSourceType>} [options] Options.\n   */ constructor(options){\n        options = options ? options : {};\n        const baseOptions = Object.assign({}, options);\n        delete baseOptions.style;\n        delete baseOptions.renderBuffer;\n        delete baseOptions.updateWhileAnimating;\n        delete baseOptions.updateWhileInteracting;\n        super(baseOptions);\n        /**\n     * @private\n     * @type {boolean}\n     */ this.declutter_ = options.declutter !== undefined ? options.declutter : false;\n        /**\n     * @type {number}\n     * @private\n     */ this.renderBuffer_ = options.renderBuffer !== undefined ? options.renderBuffer : 100;\n        /**\n     * User provided style.\n     * @type {import(\"../style/Style.js\").StyleLike}\n     * @private\n     */ this.style_ = null;\n        /**\n     * Style function for use within the library.\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\n     * @private\n     */ this.styleFunction_ = undefined;\n        this.setStyle(options.style);\n        /**\n     * @type {boolean}\n     * @private\n     */ this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ? options.updateWhileAnimating : false;\n        /**\n     * @type {boolean}\n     * @private\n     */ this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ? options.updateWhileInteracting : false;\n    }\n    /**\n   * @return {boolean} Declutter.\n   */ getDeclutter() {\n        return this.declutter_;\n    }\n    /**\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\n   * that resolves with an array of features. The array will either contain the topmost feature\n   * when a hit was detected, or it will be empty.\n   *\n   * The hit detection algorithm used for this method is optimized for performance, but is less\n   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\n   * Text is not considered, and icons are only represented by their bounding box instead of the exact\n   * image.\n   *\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\n   * @api\n   */ getFeatures(pixel) {\n        return super.getFeatures(pixel);\n    }\n    /**\n   * @return {number|undefined} Render buffer.\n   */ getRenderBuffer() {\n        return this.renderBuffer_;\n    }\n    /**\n   * @return {function(import(\"../Feature.js\").default, import(\"../Feature.js\").default): number|null|undefined} Render\n   *     order.\n   */ getRenderOrder() {\n        return /** @type {import(\"../render.js\").OrderFunction|null|undefined} */ this.get($c8d6dc4c09ed9916$var$Property.RENDER_ORDER);\n    }\n    /**\n   * Get the style for features.  This returns whatever was passed to the `style`\n   * option at construction or to the `setStyle` method.\n   * @return {import(\"../style/Style.js\").StyleLike|null|undefined} Layer style.\n   * @api\n   */ getStyle() {\n        return this.style_;\n    }\n    /**\n   * Get the style function.\n   * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\n   * @api\n   */ getStyleFunction() {\n        return this.styleFunction_;\n    }\n    /**\n   * @return {boolean} Whether the rendered layer should be updated while\n   *     animating.\n   */ getUpdateWhileAnimating() {\n        return this.updateWhileAnimating_;\n    }\n    /**\n   * @return {boolean} Whether the rendered layer should be updated while\n   *     interacting.\n   */ getUpdateWhileInteracting() {\n        return this.updateWhileInteracting_;\n    }\n    /**\n   * Render declutter items for this layer\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */ renderDeclutter(frameState) {\n        if (!frameState.declutterTree) frameState.declutterTree = new (0, (/*@__PURE__*/$parcel$interopDefault($176ca75ee9f69668$exports)))(9);\n        /** @type {*} */ this.getRenderer().renderDeclutter(frameState);\n    }\n    /**\n   * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\n   *     Render order.\n   */ setRenderOrder(renderOrder) {\n        this.set($c8d6dc4c09ed9916$var$Property.RENDER_ORDER, renderOrder);\n    }\n    /**\n   * Set the style for features.  This can be a single style object, an array\n   * of styles, or a function that takes a feature and resolution and returns\n   * an array of styles. If set to `null`, the layer has no style (a `null` style),\n   * so only features that have their own styles will be rendered in the layer. Call\n   * `setStyle()` without arguments to reset to the default style. See\n   * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.\n   *\n   * If your layer has a static style, you can use [flat style]{@link module:ol/style/flat~FlatStyle} object\n   * literals instead of using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.):\n   * ```js\n   * vectorLayer.setStyle({\n   *   \"fill-color\": \"yellow\",\n   *   \"stroke-color\": \"black\",\n   *   \"stroke-width\": 4\n   * })\n   * ```\n   *\n   * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\n   * @api\n   */ setStyle(style) {\n        this.style_ = $c8d6dc4c09ed9916$var$toStyleLike(style);\n        this.styleFunction_ = style === null ? undefined : (0, $8c7f6dda98e8cb9c$export$c314ea3f6b164147)(this.style_);\n        this.changed();\n    }\n}\n/**\n * Coerce the allowed style types into a shorter list of types.  Flat styles, arrays of flat\n * styles, and arrays of rules are converted into style functions.\n *\n * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\n * @return {import(\"../style/Style.js\").StyleLike|null} The style.\n */ function $c8d6dc4c09ed9916$var$toStyleLike(style) {\n    if (style === undefined) return 0, $8c7f6dda98e8cb9c$export$6865c5ac2f5ce8b6;\n    if (!style) return null;\n    if (typeof style === \"function\") return style;\n    if (style instanceof (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039)) return style;\n    if (!Array.isArray(style)) return (0, $6000539d86fde80c$export$5a130bc4f0a0420b)([\n        style\n    ]);\n    if (style.length === 0) return [];\n    const length = style.length;\n    const first = style[0];\n    if (first instanceof (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039)) {\n        /**\n     * @type {Array<Style>}\n     */ const styles = new Array(length);\n        for(let i = 0; i < length; ++i){\n            const candidate = style[i];\n            if (!(candidate instanceof (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039))) throw new Error(\"Expected a list of style instances\");\n            styles[i] = candidate;\n        }\n        return styles;\n    }\n    if (\"style\" in first) {\n        /**\n     * @type Array<import(\"../style/flat.js\").Rule>\n     */ const rules = new Array(length);\n        for(let i = 0; i < length; ++i){\n            const candidate = style[i];\n            if (!(\"style\" in candidate)) throw new Error(\"Expected a list of rules with a style property\");\n            rules[i] = candidate;\n        }\n        return (0, $6000539d86fde80c$export$fc6a94152b1b05a8)(rules);\n    }\n    const flatStyles = /** @type {Array<import(\"../style/flat.js\").FlatStyle>} */ style;\n    return (0, $6000539d86fde80c$export$5a130bc4f0a0420b)(flatStyles);\n}\nvar $c8d6dc4c09ed9916$export$2e2bcd8739ae039 = $c8d6dc4c09ed9916$var$BaseVectorLayer;\n\n\n/**\n * @module ol/renderer/canvas/VectorLayer\n */ /**\n * @module ol/render/canvas/BuilderGroup\n */ /**\n * @module ol/render/canvas/Builder\n */ /**\n * @module ol/render/canvas/Instruction\n */ /**\n * @enum {number}\n */ const $cf547866e052f25b$var$Instruction = {\n    BEGIN_GEOMETRY: 0,\n    BEGIN_PATH: 1,\n    CIRCLE: 2,\n    CLOSE_PATH: 3,\n    CUSTOM: 4,\n    DRAW_CHARS: 5,\n    DRAW_IMAGE: 6,\n    END_GEOMETRY: 7,\n    FILL: 8,\n    MOVE_TO_LINE_TO: 9,\n    SET_FILL_STYLE: 10,\n    SET_STROKE_STYLE: 11,\n    STROKE: 12\n};\nconst $cf547866e052f25b$export$f21891651e408226 = [\n    $cf547866e052f25b$var$Instruction.FILL\n];\nconst $cf547866e052f25b$export$7a98aa5364d62ba8 = [\n    $cf547866e052f25b$var$Instruction.STROKE\n];\nconst $cf547866e052f25b$export$9f746cc58a899a00 = [\n    $cf547866e052f25b$var$Instruction.BEGIN_PATH\n];\nconst $cf547866e052f25b$export$89b10f327e413e71 = [\n    $cf547866e052f25b$var$Instruction.CLOSE_PATH\n];\nvar $cf547866e052f25b$export$2e2bcd8739ae039 = $cf547866e052f25b$var$Instruction;\n\n\n\n/**\n * @module ol/render/VectorContext\n */ /**\n * @classdesc\n * Context for drawing geometries.  A vector context is available on render\n * events and does not need to be constructed directly.\n * @api\n */ class $eb0e5c3938110b4c$var$VectorContext {\n    /**\n   * Render a geometry with a custom renderer.\n   *\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   * @param {Function} hitDetectionRenderer Renderer.\n   */ drawCustom(geometry, feature, renderer, hitDetectionRenderer) {}\n    /**\n   * Render a geometry.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry The geometry to render.\n   */ drawGeometry(geometry) {}\n    /**\n   * Set the rendering style.\n   *\n   * @param {import(\"../style/Style.js\").default} style The rendering style.\n   */ setStyle(style) {}\n    /**\n   * @param {import(\"../geom/Circle.js\").default} circleGeometry Circle geometry.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   */ drawCircle(circleGeometry, feature) {}\n    /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"../style/Style.js\").default} style Style.\n   */ drawFeature(feature, style) {}\n    /**\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometryCollectionGeometry Geometry collection.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   */ drawGeometryCollection(geometryCollectionGeometry, feature) {}\n    /**\n   * @param {import(\"../geom/LineString.js\").default|import(\"./Feature.js\").default} lineStringGeometry Line string geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */ drawLineString(lineStringGeometry, feature) {}\n    /**\n   * @param {import(\"../geom/MultiLineString.js\").default|import(\"./Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */ drawMultiLineString(multiLineStringGeometry, feature) {}\n    /**\n   * @param {import(\"../geom/MultiPoint.js\").default|import(\"./Feature.js\").default} multiPointGeometry MultiPoint geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */ drawMultiPoint(multiPointGeometry, feature) {}\n    /**\n   * @param {import(\"../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */ drawMultiPolygon(multiPolygonGeometry, feature) {}\n    /**\n   * @param {import(\"../geom/Point.js\").default|import(\"./Feature.js\").default} pointGeometry Point geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */ drawPoint(pointGeometry, feature) {}\n    /**\n   * @param {import(\"../geom/Polygon.js\").default|import(\"./Feature.js\").default} polygonGeometry Polygon geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */ drawPolygon(polygonGeometry, feature) {}\n    /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default|import(\"./Feature.js\").default} geometry Geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */ drawText(geometry, feature) {}\n    /**\n   * @param {import(\"../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../style/Stroke.js\").default} strokeStyle Stroke style.\n   */ setFillStrokeStyle(fillStyle, strokeStyle) {}\n    /**\n   * @param {import(\"../style/Image.js\").default} imageStyle Image style.\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.\n   */ setImageStyle(imageStyle, declutterImageWithText) {}\n    /**\n   * @param {import(\"../style/Text.js\").default} textStyle Text style.\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.\n   */ setTextStyle(textStyle, declutterImageWithText) {}\n}\nvar $eb0e5c3938110b4c$export$2e2bcd8739ae039 = $eb0e5c3938110b4c$var$VectorContext;\n\n\n\n\n\n\n\nclass $2bb20f8873deb436$var$CanvasBuilder extends (0, $eb0e5c3938110b4c$export$2e2bcd8739ae039) {\n    /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */ constructor(tolerance, maxExtent, resolution, pixelRatio){\n        super();\n        /**\n     * @protected\n     * @type {number}\n     */ this.tolerance = tolerance;\n        /**\n     * @protected\n     * @const\n     * @type {import(\"../../extent.js\").Extent}\n     */ this.maxExtent = maxExtent;\n        /**\n     * @protected\n     * @type {number}\n     */ this.pixelRatio = pixelRatio;\n        /**\n     * @protected\n     * @type {number}\n     */ this.maxLineWidth = 0;\n        /**\n     * @protected\n     * @const\n     * @type {number}\n     */ this.resolution = resolution;\n        /**\n     * @private\n     * @type {Array<*>}\n     */ this.beginGeometryInstruction1_ = null;\n        /**\n     * @private\n     * @type {Array<*>}\n     */ this.beginGeometryInstruction2_ = null;\n        /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */ this.bufferedMaxExtent_ = null;\n        /**\n     * @protected\n     * @type {Array<*>}\n     */ this.instructions = [];\n        /**\n     * @protected\n     * @type {Array<number>}\n     */ this.coordinates = [];\n        /**\n     * @private\n     * @type {import(\"../../coordinate.js\").Coordinate}\n     */ this.tmpCoordinate_ = [];\n        /**\n     * @protected\n     * @type {Array<*>}\n     */ this.hitDetectionInstructions = [];\n        /**\n     * @protected\n     * @type {import(\"../canvas.js\").FillStrokeState}\n     */ this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */ {};\n    }\n    /**\n   * @protected\n   * @param {Array<number>} dashArray Dash array.\n   * @return {Array<number>} Dash array with pixel ratio applied\n   */ applyPixelRatio(dashArray) {\n        const pixelRatio = this.pixelRatio;\n        return pixelRatio == 1 ? dashArray : dashArray.map(function(dash) {\n            return dash * pixelRatio;\n        });\n    }\n    /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} stride Stride.\n   * @protected\n   * @return {number} My end\n   */ appendFlatPointCoordinates(flatCoordinates, stride) {\n        const extent = this.getBufferedMaxExtent();\n        const tmpCoord = this.tmpCoordinate_;\n        const coordinates = this.coordinates;\n        let myEnd = coordinates.length;\n        for(let i = 0, ii = flatCoordinates.length; i < ii; i += stride){\n            tmpCoord[0] = flatCoordinates[i];\n            tmpCoord[1] = flatCoordinates[i + 1];\n            if ((0, $6da4c8ed3074c92b$export$ac68c24d37ca240f)(extent, tmpCoord)) {\n                coordinates[myEnd++] = tmpCoord[0];\n                coordinates[myEnd++] = tmpCoord[1];\n            }\n        }\n        return myEnd;\n    }\n    /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} closed Last input coordinate equals first.\n   * @param {boolean} skipFirst Skip first coordinate.\n   * @protected\n   * @return {number} My end.\n   */ appendFlatLineCoordinates(flatCoordinates, offset, end, stride, closed, skipFirst) {\n        const coordinates = this.coordinates;\n        let myEnd = coordinates.length;\n        const extent = this.getBufferedMaxExtent();\n        if (skipFirst) offset += stride;\n        let lastXCoord = flatCoordinates[offset];\n        let lastYCoord = flatCoordinates[offset + 1];\n        const nextCoord = this.tmpCoordinate_;\n        let skipped = true;\n        let i, lastRel, nextRel;\n        for(i = offset + stride; i < end; i += stride){\n            nextCoord[0] = flatCoordinates[i];\n            nextCoord[1] = flatCoordinates[i + 1];\n            nextRel = (0, $6da4c8ed3074c92b$export$f97905ead28c61a8)(extent, nextCoord);\n            if (nextRel !== lastRel) {\n                if (skipped) {\n                    coordinates[myEnd++] = lastXCoord;\n                    coordinates[myEnd++] = lastYCoord;\n                    skipped = false;\n                }\n                coordinates[myEnd++] = nextCoord[0];\n                coordinates[myEnd++] = nextCoord[1];\n            } else if (nextRel === (0, $dab4245bc22b806c$export$2e2bcd8739ae039).INTERSECTING) {\n                coordinates[myEnd++] = nextCoord[0];\n                coordinates[myEnd++] = nextCoord[1];\n                skipped = false;\n            } else skipped = true;\n            lastXCoord = nextCoord[0];\n            lastYCoord = nextCoord[1];\n            lastRel = nextRel;\n        }\n        // Last coordinate equals first or only one point to append:\n        if (closed && skipped || i === offset + stride) {\n            coordinates[myEnd++] = lastXCoord;\n            coordinates[myEnd++] = lastYCoord;\n        }\n        return myEnd;\n    }\n    /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @param {Array<number>} builderEnds Builder ends.\n   * @return {number} Offset.\n   */ drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\n        for(let i = 0, ii = ends.length; i < ii; ++i){\n            const end = ends[i];\n            const builderEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);\n            builderEnds.push(builderEnd);\n            offset = end;\n        }\n        return offset;\n    }\n    /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   * @param {Function} hitDetectionRenderer Renderer.\n   */ drawCustom(geometry, feature, renderer, hitDetectionRenderer) {\n        this.beginGeometry(geometry, feature);\n        const type = geometry.getType();\n        const stride = geometry.getStride();\n        const builderBegin = this.coordinates.length;\n        let flatCoordinates, builderEnd, builderEnds, builderEndss;\n        let offset;\n        switch(type){\n            case \"MultiPolygon\":\n                flatCoordinates = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ geometry.getOrientedFlatCoordinates();\n                builderEndss = [];\n                const endss = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ geometry.getEndss();\n                offset = 0;\n                for(let i = 0, ii = endss.length; i < ii; ++i){\n                    const myEnds = [];\n                    offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);\n                    builderEndss.push(myEnds);\n                }\n                this.instructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEndss,\n                    geometry,\n                    renderer,\n                    (0, $5454470599558ddd$export$915c7058aeb4dfeb)\n                ]);\n                this.hitDetectionInstructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEndss,\n                    geometry,\n                    hitDetectionRenderer || renderer,\n                    (0, $5454470599558ddd$export$915c7058aeb4dfeb)\n                ]);\n                break;\n            case \"Polygon\":\n            case \"MultiLineString\":\n                builderEnds = [];\n                flatCoordinates = type == \"Polygon\" ? /** @type {import(\"../../geom/Polygon.js\").default} */ geometry.getOrientedFlatCoordinates() : geometry.getFlatCoordinates();\n                offset = this.drawCustomCoordinates_(flatCoordinates, 0, /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */ geometry.getEnds(), stride, builderEnds);\n                this.instructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEnds,\n                    geometry,\n                    renderer,\n                    (0, $5454470599558ddd$export$cbb9596fc0f40db2)\n                ]);\n                this.hitDetectionInstructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEnds,\n                    geometry,\n                    hitDetectionRenderer || renderer,\n                    (0, $5454470599558ddd$export$cbb9596fc0f40db2)\n                ]);\n                break;\n            case \"LineString\":\n            case \"Circle\":\n                flatCoordinates = geometry.getFlatCoordinates();\n                builderEnd = this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);\n                this.instructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEnd,\n                    geometry,\n                    renderer,\n                    (0, $5454470599558ddd$export$9c0934e4e9c3f61e)\n                ]);\n                this.hitDetectionInstructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEnd,\n                    geometry,\n                    hitDetectionRenderer || renderer,\n                    (0, $5454470599558ddd$export$9c0934e4e9c3f61e)\n                ]);\n                break;\n            case \"MultiPoint\":\n                flatCoordinates = geometry.getFlatCoordinates();\n                builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n                if (builderEnd > builderBegin) {\n                    this.instructions.push([\n                        (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                        builderBegin,\n                        builderEnd,\n                        geometry,\n                        renderer,\n                        (0, $5454470599558ddd$export$9c0934e4e9c3f61e)\n                    ]);\n                    this.hitDetectionInstructions.push([\n                        (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                        builderBegin,\n                        builderEnd,\n                        geometry,\n                        hitDetectionRenderer || renderer,\n                        (0, $5454470599558ddd$export$9c0934e4e9c3f61e)\n                    ]);\n                }\n                break;\n            case \"Point\":\n                flatCoordinates = geometry.getFlatCoordinates();\n                this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n                builderEnd = this.coordinates.length;\n                this.instructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEnd,\n                    geometry,\n                    renderer\n                ]);\n                this.hitDetectionInstructions.push([\n                    (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM,\n                    builderBegin,\n                    builderEnd,\n                    geometry,\n                    hitDetectionRenderer || renderer\n                ]);\n                break;\n            default:\n        }\n        this.endGeometry(feature);\n    }\n    /**\n   * @protected\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */ beginGeometry(geometry, feature) {\n        this.beginGeometryInstruction1_ = [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).BEGIN_GEOMETRY,\n            feature,\n            0,\n            geometry\n        ];\n        this.instructions.push(this.beginGeometryInstruction1_);\n        this.beginGeometryInstruction2_ = [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).BEGIN_GEOMETRY,\n            feature,\n            0,\n            geometry\n        ];\n        this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n    }\n    /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */ finish() {\n        return {\n            instructions: this.instructions,\n            hitDetectionInstructions: this.hitDetectionInstructions,\n            coordinates: this.coordinates\n        };\n    }\n    /**\n   * Reverse the hit detection instructions.\n   */ reverseHitDetectionInstructions() {\n        const hitDetectionInstructions = this.hitDetectionInstructions;\n        // step 1 - reverse array\n        hitDetectionInstructions.reverse();\n        // step 2 - reverse instructions within geometry blocks\n        let i;\n        const n = hitDetectionInstructions.length;\n        let instruction;\n        let type;\n        let begin = -1;\n        for(i = 0; i < n; ++i){\n            instruction = hitDetectionInstructions[i];\n            type = /** @type {import(\"./Instruction.js\").default} */ instruction[0];\n            if (type == (0, $cf547866e052f25b$export$2e2bcd8739ae039).END_GEOMETRY) begin = i;\n            else if (type == (0, $cf547866e052f25b$export$2e2bcd8739ae039).BEGIN_GEOMETRY) {\n                instruction[2] = i;\n                (0, $b998d41b678ed5d1$export$292cfa960964f0e0)(this.hitDetectionInstructions, begin, i);\n                begin = -1;\n            }\n        }\n    }\n    /**\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   */ setFillStrokeStyle(fillStyle, strokeStyle) {\n        const state = this.state;\n        if (fillStyle) {\n            const fillStyleColor = fillStyle.getColor();\n            state.fillStyle = (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(fillStyleColor ? fillStyleColor : (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2));\n        } else state.fillStyle = undefined;\n        if (strokeStyle) {\n            const strokeStyleColor = strokeStyle.getColor();\n            state.strokeStyle = (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(strokeStyleColor ? strokeStyleColor : (0, $d4aabc5c971073f1$export$1eb2eaecacf2031e));\n            const strokeStyleLineCap = strokeStyle.getLineCap();\n            state.lineCap = strokeStyleLineCap !== undefined ? strokeStyleLineCap : (0, $d4aabc5c971073f1$export$17bd0c38d6ae694e);\n            const strokeStyleLineDash = strokeStyle.getLineDash();\n            state.lineDash = strokeStyleLineDash ? strokeStyleLineDash.slice() : (0, $d4aabc5c971073f1$export$e21b4112fdc612fc);\n            const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n            state.lineDashOffset = strokeStyleLineDashOffset ? strokeStyleLineDashOffset : (0, $d4aabc5c971073f1$export$e06efc2409049f76);\n            const strokeStyleLineJoin = strokeStyle.getLineJoin();\n            state.lineJoin = strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : (0, $d4aabc5c971073f1$export$365eb9648cf19bd0);\n            const strokeStyleWidth = strokeStyle.getWidth();\n            state.lineWidth = strokeStyleWidth !== undefined ? strokeStyleWidth : (0, $d4aabc5c971073f1$export$79661f132c62010e);\n            const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n            state.miterLimit = strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : (0, $d4aabc5c971073f1$export$80c1c01844597b7b);\n            if (state.lineWidth > this.maxLineWidth) {\n                this.maxLineWidth = state.lineWidth;\n                // invalidate the buffered max extent cache\n                this.bufferedMaxExtent_ = null;\n            }\n        } else {\n            state.strokeStyle = undefined;\n            state.lineCap = undefined;\n            state.lineDash = null;\n            state.lineDashOffset = undefined;\n            state.lineJoin = undefined;\n            state.lineWidth = undefined;\n            state.miterLimit = undefined;\n        }\n    }\n    /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Fill instruction.\n   */ createFill(state) {\n        const fillStyle = state.fillStyle;\n        /** @type {Array<*>} */ const fillInstruction = [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_FILL_STYLE,\n            fillStyle\n        ];\n        if (typeof fillStyle !== \"string\") // Fill is a pattern or gradient - align it!\n        fillInstruction.push(true);\n        return fillInstruction;\n    }\n    /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */ applyStroke(state) {\n        this.instructions.push(this.createStroke(state));\n    }\n    /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Stroke instruction.\n   */ createStroke(state) {\n        return [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE,\n            state.strokeStyle,\n            state.lineWidth * this.pixelRatio,\n            state.lineCap,\n            state.lineJoin,\n            state.miterLimit,\n            this.applyPixelRatio(state.lineDash),\n            state.lineDashOffset * this.pixelRatio\n        ];\n    }\n    /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\n   */ updateFillStyle(state, createFill) {\n        const fillStyle = state.fillStyle;\n        if (typeof fillStyle !== \"string\" || state.currentFillStyle != fillStyle) {\n            if (fillStyle !== undefined) this.instructions.push(createFill.call(this, state));\n            state.currentFillStyle = fillStyle;\n        }\n    }\n    /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\n   */ updateStrokeStyle(state, applyStroke) {\n        const strokeStyle = state.strokeStyle;\n        const lineCap = state.lineCap;\n        const lineDash = state.lineDash;\n        const lineDashOffset = state.lineDashOffset;\n        const lineJoin = state.lineJoin;\n        const lineWidth = state.lineWidth;\n        const miterLimit = state.miterLimit;\n        if (state.currentStrokeStyle != strokeStyle || state.currentLineCap != lineCap || lineDash != state.currentLineDash && !(0, $b998d41b678ed5d1$export$e9bab7fafb253603)(state.currentLineDash, lineDash) || state.currentLineDashOffset != lineDashOffset || state.currentLineJoin != lineJoin || state.currentLineWidth != lineWidth || state.currentMiterLimit != miterLimit) {\n            if (strokeStyle !== undefined) applyStroke.call(this, state);\n            state.currentStrokeStyle = strokeStyle;\n            state.currentLineCap = lineCap;\n            state.currentLineDash = lineDash;\n            state.currentLineDashOffset = lineDashOffset;\n            state.currentLineJoin = lineJoin;\n            state.currentLineWidth = lineWidth;\n            state.currentMiterLimit = miterLimit;\n        }\n    }\n    /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */ endGeometry(feature) {\n        this.beginGeometryInstruction1_[2] = this.instructions.length;\n        this.beginGeometryInstruction1_ = null;\n        this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n        this.beginGeometryInstruction2_ = null;\n        const endGeometryInstruction = [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).END_GEOMETRY,\n            feature\n        ];\n        this.instructions.push(endGeometryInstruction);\n        this.hitDetectionInstructions.push(endGeometryInstruction);\n    }\n    /**\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\n   * provided to the constructor.  To account for symbolizers that may intersect\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\n   * @protected\n   */ getBufferedMaxExtent() {\n        if (!this.bufferedMaxExtent_) {\n            this.bufferedMaxExtent_ = (0, $6da4c8ed3074c92b$export$9cd59f9826255e47)(this.maxExtent);\n            if (this.maxLineWidth > 0) {\n                const width = this.resolution * (this.maxLineWidth + 1) / 2;\n                (0, $6da4c8ed3074c92b$export$ab1029bcae9ddb4a)(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n            }\n        }\n        return this.bufferedMaxExtent_;\n    }\n}\nvar $2bb20f8873deb436$export$2e2bcd8739ae039 = $2bb20f8873deb436$var$CanvasBuilder;\n\n\n/**\n * @module ol/render/canvas/ImageBuilder\n */ \n\nclass $b652f9dd73b29cfe$var$CanvasImageBuilder extends (0, $2bb20f8873deb436$export$2e2bcd8739ae039) {\n    /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */ constructor(tolerance, maxExtent, resolution, pixelRatio){\n        super(tolerance, maxExtent, resolution, pixelRatio);\n        /**\n     * @private\n     * @type {import('../../DataTile.js').ImageLike}\n     */ this.hitDetectionImage_ = null;\n        /**\n     * @private\n     * @type {import('../../DataTile.js').ImageLike}\n     */ this.image_ = null;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.imagePixelRatio_ = undefined;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.anchorX_ = undefined;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.anchorY_ = undefined;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.height_ = undefined;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.opacity_ = undefined;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.originX_ = undefined;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.originY_ = undefined;\n        /**\n     * @private\n     * @type {boolean|undefined}\n     */ this.rotateWithView_ = undefined;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.rotation_ = undefined;\n        /**\n     * @private\n     * @type {import(\"../../size.js\").Size|undefined}\n     */ this.scale_ = undefined;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.width_ = undefined;\n        /**\n     * @private\n     * @type {\"declutter\"|\"obstacle\"|\"none\"|undefined}\n     */ this.declutterMode_ = undefined;\n        /**\n     * Data shared with a text builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */ this.declutterImageWithText_ = undefined;\n    }\n    /**\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} pointGeometry Point geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */ drawPoint(pointGeometry, feature) {\n        if (!this.image_) return;\n        this.beginGeometry(pointGeometry, feature);\n        const flatCoordinates = pointGeometry.getFlatCoordinates();\n        const stride = pointGeometry.getStride();\n        const myBegin = this.coordinates.length;\n        const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n        this.instructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE,\n            myBegin,\n            myEnd,\n            this.image_,\n            // Remaining arguments to DRAW_IMAGE are in alphabetical order\n            this.anchorX_ * this.imagePixelRatio_,\n            this.anchorY_ * this.imagePixelRatio_,\n            Math.ceil(this.height_ * this.imagePixelRatio_),\n            this.opacity_,\n            this.originX_ * this.imagePixelRatio_,\n            this.originY_ * this.imagePixelRatio_,\n            this.rotateWithView_,\n            this.rotation_,\n            [\n                this.scale_[0] * this.pixelRatio / this.imagePixelRatio_,\n                this.scale_[1] * this.pixelRatio / this.imagePixelRatio_\n            ],\n            Math.ceil(this.width_ * this.imagePixelRatio_),\n            this.declutterMode_,\n            this.declutterImageWithText_\n        ]);\n        this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE,\n            myBegin,\n            myEnd,\n            this.hitDetectionImage_,\n            // Remaining arguments to DRAW_IMAGE are in alphabetical order\n            this.anchorX_,\n            this.anchorY_,\n            this.height_,\n            1,\n            this.originX_,\n            this.originY_,\n            this.rotateWithView_,\n            this.rotation_,\n            this.scale_,\n            this.width_,\n            this.declutterMode_,\n            this.declutterImageWithText_\n        ]);\n        this.endGeometry(feature);\n    }\n    /**\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} multiPointGeometry MultiPoint geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */ drawMultiPoint(multiPointGeometry, feature) {\n        if (!this.image_) return;\n        this.beginGeometry(multiPointGeometry, feature);\n        const flatCoordinates = multiPointGeometry.getFlatCoordinates();\n        const stride = multiPointGeometry.getStride();\n        const myBegin = this.coordinates.length;\n        const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n        this.instructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE,\n            myBegin,\n            myEnd,\n            this.image_,\n            // Remaining arguments to DRAW_IMAGE are in alphabetical order\n            this.anchorX_ * this.imagePixelRatio_,\n            this.anchorY_ * this.imagePixelRatio_,\n            Math.ceil(this.height_ * this.imagePixelRatio_),\n            this.opacity_,\n            this.originX_ * this.imagePixelRatio_,\n            this.originY_ * this.imagePixelRatio_,\n            this.rotateWithView_,\n            this.rotation_,\n            [\n                this.scale_[0] * this.pixelRatio / this.imagePixelRatio_,\n                this.scale_[1] * this.pixelRatio / this.imagePixelRatio_\n            ],\n            Math.ceil(this.width_ * this.imagePixelRatio_),\n            this.declutterMode_,\n            this.declutterImageWithText_\n        ]);\n        this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE,\n            myBegin,\n            myEnd,\n            this.hitDetectionImage_,\n            // Remaining arguments to DRAW_IMAGE are in alphabetical order\n            this.anchorX_,\n            this.anchorY_,\n            this.height_,\n            1,\n            this.originX_,\n            this.originY_,\n            this.rotateWithView_,\n            this.rotation_,\n            this.scale_,\n            this.width_,\n            this.declutterMode_,\n            this.declutterImageWithText_\n        ]);\n        this.endGeometry(feature);\n    }\n    /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */ finish() {\n        this.reverseHitDetectionInstructions();\n        // FIXME this doesn't really protect us against further calls to draw*Geometry\n        this.anchorX_ = undefined;\n        this.anchorY_ = undefined;\n        this.hitDetectionImage_ = null;\n        this.image_ = null;\n        this.imagePixelRatio_ = undefined;\n        this.height_ = undefined;\n        this.scale_ = undefined;\n        this.opacity_ = undefined;\n        this.originX_ = undefined;\n        this.originY_ = undefined;\n        this.rotateWithView_ = undefined;\n        this.rotation_ = undefined;\n        this.width_ = undefined;\n        return super.finish();\n    }\n    /**\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\n   * @param {Object} [sharedData] Shared data.\n   */ setImageStyle(imageStyle, sharedData) {\n        const anchor = imageStyle.getAnchor();\n        const size = imageStyle.getSize();\n        const origin = imageStyle.getOrigin();\n        this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);\n        this.anchorX_ = anchor[0];\n        this.anchorY_ = anchor[1];\n        this.hitDetectionImage_ = imageStyle.getHitDetectionImage();\n        this.image_ = imageStyle.getImage(this.pixelRatio);\n        this.height_ = size[1];\n        this.opacity_ = imageStyle.getOpacity();\n        this.originX_ = origin[0];\n        this.originY_ = origin[1];\n        this.rotateWithView_ = imageStyle.getRotateWithView();\n        this.rotation_ = imageStyle.getRotation();\n        this.scale_ = imageStyle.getScaleArray();\n        this.width_ = size[0];\n        this.declutterMode_ = imageStyle.getDeclutterMode();\n        this.declutterImageWithText_ = sharedData;\n    }\n}\nvar $b652f9dd73b29cfe$export$2e2bcd8739ae039 = $b652f9dd73b29cfe$var$CanvasImageBuilder;\n\n\n/**\n * @module ol/render/canvas/LineStringBuilder\n */ \n\n\nclass $a207f23baa5aa2c5$var$CanvasLineStringBuilder extends (0, $2bb20f8873deb436$export$2e2bcd8739ae039) {\n    /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */ constructor(tolerance, maxExtent, resolution, pixelRatio){\n        super(tolerance, maxExtent, resolution, pixelRatio);\n    }\n    /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} end.\n   */ drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\n        const myBegin = this.coordinates.length;\n        const myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);\n        const moveToLineToInstruction = [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).MOVE_TO_LINE_TO,\n            myBegin,\n            myEnd\n        ];\n        this.instructions.push(moveToLineToInstruction);\n        this.hitDetectionInstructions.push(moveToLineToInstruction);\n        return end;\n    }\n    /**\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} lineStringGeometry Line string geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */ drawLineString(lineStringGeometry, feature) {\n        const state = this.state;\n        const strokeStyle = state.strokeStyle;\n        const lineWidth = state.lineWidth;\n        if (strokeStyle === undefined || lineWidth === undefined) return;\n        this.updateStrokeStyle(state, this.applyStroke);\n        this.beginGeometry(lineStringGeometry, feature);\n        this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE,\n            state.strokeStyle,\n            state.lineWidth,\n            state.lineCap,\n            state.lineJoin,\n            state.miterLimit,\n            (0, $d4aabc5c971073f1$export$e21b4112fdc612fc),\n            (0, $d4aabc5c971073f1$export$e06efc2409049f76)\n        ], (0, $cf547866e052f25b$export$9f746cc58a899a00));\n        const flatCoordinates = lineStringGeometry.getFlatCoordinates();\n        const stride = lineStringGeometry.getStride();\n        this.drawFlatCoordinates_(flatCoordinates, 0, flatCoordinates.length, stride);\n        this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n        this.endGeometry(feature);\n    }\n    /**\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */ drawMultiLineString(multiLineStringGeometry, feature) {\n        const state = this.state;\n        const strokeStyle = state.strokeStyle;\n        const lineWidth = state.lineWidth;\n        if (strokeStyle === undefined || lineWidth === undefined) return;\n        this.updateStrokeStyle(state, this.applyStroke);\n        this.beginGeometry(multiLineStringGeometry, feature);\n        this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE,\n            state.strokeStyle,\n            state.lineWidth,\n            state.lineCap,\n            state.lineJoin,\n            state.miterLimit,\n            (0, $d4aabc5c971073f1$export$e21b4112fdc612fc),\n            (0, $d4aabc5c971073f1$export$e06efc2409049f76)\n        ], (0, $cf547866e052f25b$export$9f746cc58a899a00));\n        const ends = multiLineStringGeometry.getEnds();\n        const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\n        const stride = multiLineStringGeometry.getStride();\n        let offset = 0;\n        for(let i = 0, ii = ends.length; i < ii; ++i)offset = this.drawFlatCoordinates_(flatCoordinates, offset, /** @type {number} */ ends[i], stride);\n        this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n        this.endGeometry(feature);\n    }\n    /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */ finish() {\n        const state = this.state;\n        if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) this.instructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n        this.reverseHitDetectionInstructions();\n        this.state = null;\n        return super.finish();\n    }\n    /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */ applyStroke(state) {\n        if (state.lastStroke != undefined && state.lastStroke != this.coordinates.length) {\n            this.instructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n            state.lastStroke = this.coordinates.length;\n        }\n        state.lastStroke = 0;\n        super.applyStroke(state);\n        this.instructions.push((0, $cf547866e052f25b$export$9f746cc58a899a00));\n    }\n}\nvar $a207f23baa5aa2c5$export$2e2bcd8739ae039 = $a207f23baa5aa2c5$var$CanvasLineStringBuilder;\n\n\n/**\n * @module ol/render/canvas/PolygonBuilder\n */ \n\n\n\nclass $7d2e8ba11a45ae8a$var$CanvasPolygonBuilder extends (0, $2bb20f8873deb436$export$2e2bcd8739ae039) {\n    /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */ constructor(tolerance, maxExtent, resolution, pixelRatio){\n        super(tolerance, maxExtent, resolution, pixelRatio);\n    }\n    /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */ drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {\n        const state = this.state;\n        const fill = state.fillStyle !== undefined;\n        const stroke = state.strokeStyle !== undefined;\n        const numEnds = ends.length;\n        this.instructions.push((0, $cf547866e052f25b$export$9f746cc58a899a00));\n        this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$9f746cc58a899a00));\n        for(let i = 0; i < numEnds; ++i){\n            const end = ends[i];\n            const myBegin = this.coordinates.length;\n            const myEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, true, !stroke);\n            const moveToLineToInstruction = [\n                (0, $cf547866e052f25b$export$2e2bcd8739ae039).MOVE_TO_LINE_TO,\n                myBegin,\n                myEnd\n            ];\n            this.instructions.push(moveToLineToInstruction);\n            this.hitDetectionInstructions.push(moveToLineToInstruction);\n            if (stroke) {\n                // Performance optimization: only call closePath() when we have a stroke.\n                // Otherwise the ring is closed already (see appendFlatLineCoordinates above).\n                this.instructions.push((0, $cf547866e052f25b$export$89b10f327e413e71));\n                this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$89b10f327e413e71));\n            }\n            offset = end;\n        }\n        if (fill) {\n            this.instructions.push((0, $cf547866e052f25b$export$f21891651e408226));\n            this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$f21891651e408226));\n        }\n        if (stroke) {\n            this.instructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n            this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n        }\n        return offset;\n    }\n    /**\n   * @param {import(\"../../geom/Circle.js\").default} circleGeometry Circle geometry.\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   */ drawCircle(circleGeometry, feature) {\n        const state = this.state;\n        const fillStyle = state.fillStyle;\n        const strokeStyle = state.strokeStyle;\n        if (fillStyle === undefined && strokeStyle === undefined) return;\n        this.setFillStrokeStyles_();\n        this.beginGeometry(circleGeometry, feature);\n        if (state.fillStyle !== undefined) this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_FILL_STYLE,\n            (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2)\n        ]);\n        if (state.strokeStyle !== undefined) this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE,\n            state.strokeStyle,\n            state.lineWidth,\n            state.lineCap,\n            state.lineJoin,\n            state.miterLimit,\n            (0, $d4aabc5c971073f1$export$e21b4112fdc612fc),\n            (0, $d4aabc5c971073f1$export$e06efc2409049f76)\n        ]);\n        const flatCoordinates = circleGeometry.getFlatCoordinates();\n        const stride = circleGeometry.getStride();\n        const myBegin = this.coordinates.length;\n        this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);\n        const circleInstruction = [\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).CIRCLE,\n            myBegin\n        ];\n        this.instructions.push((0, $cf547866e052f25b$export$9f746cc58a899a00), circleInstruction);\n        this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$9f746cc58a899a00), circleInstruction);\n        if (state.fillStyle !== undefined) {\n            this.instructions.push((0, $cf547866e052f25b$export$f21891651e408226));\n            this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$f21891651e408226));\n        }\n        if (state.strokeStyle !== undefined) {\n            this.instructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n            this.hitDetectionInstructions.push((0, $cf547866e052f25b$export$7a98aa5364d62ba8));\n        }\n        this.endGeometry(feature);\n    }\n    /**\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} polygonGeometry Polygon geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */ drawPolygon(polygonGeometry, feature) {\n        const state = this.state;\n        const fillStyle = state.fillStyle;\n        const strokeStyle = state.strokeStyle;\n        if (fillStyle === undefined && strokeStyle === undefined) return;\n        this.setFillStrokeStyles_();\n        this.beginGeometry(polygonGeometry, feature);\n        if (state.fillStyle !== undefined) this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_FILL_STYLE,\n            (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2)\n        ]);\n        if (state.strokeStyle !== undefined) this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE,\n            state.strokeStyle,\n            state.lineWidth,\n            state.lineCap,\n            state.lineJoin,\n            state.miterLimit,\n            (0, $d4aabc5c971073f1$export$e21b4112fdc612fc),\n            (0, $d4aabc5c971073f1$export$e06efc2409049f76)\n        ]);\n        const ends = polygonGeometry.getEnds();\n        const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();\n        const stride = polygonGeometry.getStride();\n        this.drawFlatCoordinatess_(flatCoordinates, 0, /** @type {Array<number>} */ ends, stride);\n        this.endGeometry(feature);\n    }\n    /**\n   * @param {import(\"../../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */ drawMultiPolygon(multiPolygonGeometry, feature) {\n        const state = this.state;\n        const fillStyle = state.fillStyle;\n        const strokeStyle = state.strokeStyle;\n        if (fillStyle === undefined && strokeStyle === undefined) return;\n        this.setFillStrokeStyles_();\n        this.beginGeometry(multiPolygonGeometry, feature);\n        if (state.fillStyle !== undefined) this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_FILL_STYLE,\n            (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2)\n        ]);\n        if (state.strokeStyle !== undefined) this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE,\n            state.strokeStyle,\n            state.lineWidth,\n            state.lineCap,\n            state.lineJoin,\n            state.miterLimit,\n            (0, $d4aabc5c971073f1$export$e21b4112fdc612fc),\n            (0, $d4aabc5c971073f1$export$e06efc2409049f76)\n        ]);\n        const endss = multiPolygonGeometry.getEndss();\n        const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();\n        const stride = multiPolygonGeometry.getStride();\n        let offset = 0;\n        for(let i = 0, ii = endss.length; i < ii; ++i)offset = this.drawFlatCoordinatess_(flatCoordinates, offset, endss[i], stride);\n        this.endGeometry(feature);\n    }\n    /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */ finish() {\n        this.reverseHitDetectionInstructions();\n        this.state = null;\n        // We want to preserve topology when drawing polygons.  Polygons are\n        // simplified using quantization and point elimination. However, we might\n        // have received a mix of quantized and non-quantized geometries, so ensure\n        // that all are quantized by quantizing all coordinates in the batch.\n        const tolerance = this.tolerance;\n        if (tolerance !== 0) {\n            const coordinates = this.coordinates;\n            for(let i = 0, ii = coordinates.length; i < ii; ++i)coordinates[i] = (0, $8780aae6970f5f65$export$51a0620f7a28532b)(coordinates[i], tolerance);\n        }\n        return super.finish();\n    }\n    /**\n   * @private\n   */ setFillStrokeStyles_() {\n        const state = this.state;\n        const fillStyle = state.fillStyle;\n        if (fillStyle !== undefined) this.updateFillStyle(state, this.createFill);\n        if (state.strokeStyle !== undefined) this.updateStrokeStyle(state, this.applyStroke);\n    }\n}\nvar $7d2e8ba11a45ae8a$export$2e2bcd8739ae039 = $7d2e8ba11a45ae8a$var$CanvasPolygonBuilder;\n\n\n/**\n * @module ol/render/canvas/TextBuilder\n */ \n\n\n\n\n\n\nfunction $7704cc1df2ddb619$export$f08272c6ff321e57(chunkLength, flatCoordinates, offset, end, stride) {\n    const chunks = [];\n    let cursor = offset;\n    let chunkM = 0;\n    let currentChunk = flatCoordinates.slice(offset, 2);\n    while(chunkM < chunkLength && cursor + stride < end){\n        const [x1, y1] = currentChunk.slice(-2);\n        const x2 = flatCoordinates[cursor + stride];\n        const y2 = flatCoordinates[cursor + stride + 1];\n        const segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        chunkM += segmentLength;\n        if (chunkM >= chunkLength) {\n            const m = (chunkLength - chunkM + segmentLength) / segmentLength;\n            const x = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(x1, x2, m);\n            const y = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(y1, y2, m);\n            currentChunk.push(x, y);\n            chunks.push(currentChunk);\n            currentChunk = [\n                x,\n                y\n            ];\n            if (chunkM == chunkLength) cursor += stride;\n            chunkM = 0;\n        } else if (chunkM < chunkLength) {\n            currentChunk.push(flatCoordinates[cursor + stride], flatCoordinates[cursor + stride + 1]);\n            cursor += stride;\n        } else {\n            const missing = segmentLength - chunkM;\n            const x = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(x1, x2, missing / segmentLength);\n            const y = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(y1, y2, missing / segmentLength);\n            currentChunk.push(x, y);\n            chunks.push(currentChunk);\n            currentChunk = [\n                x,\n                y\n            ];\n            chunkM = 0;\n            cursor += stride;\n        }\n    }\n    if (chunkM > 0) chunks.push(currentChunk);\n    return chunks;\n}\n\n\n/**\n * @module ol/geom/flat/straightchunk\n */ /**\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Array<number>} Start and end of the first suitable chunk of the\n * given `flatCoordinates`.\n */ function $79529ab61b92f869$export$ed6c897eea07a254(maxAngle, flatCoordinates, offset, end, stride) {\n    let chunkStart = offset;\n    let chunkEnd = offset;\n    let chunkM = 0;\n    let m = 0;\n    let start = offset;\n    let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\n    for(i = offset; i < end; i += stride){\n        const x2 = flatCoordinates[i];\n        const y2 = flatCoordinates[i + 1];\n        if (x1 !== undefined) {\n            x23 = x2 - x1;\n            y23 = y2 - y1;\n            m23 = Math.sqrt(x23 * x23 + y23 * y23);\n            if (x12 !== undefined) {\n                m += m12;\n                acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\n                if (acos > maxAngle) {\n                    if (m > chunkM) {\n                        chunkM = m;\n                        chunkStart = start;\n                        chunkEnd = i;\n                    }\n                    m = 0;\n                    start = i - stride;\n                }\n            }\n            m12 = m23;\n            x12 = x23;\n            y12 = y23;\n        }\n        x1 = x2;\n        y1 = y2;\n    }\n    m += m23;\n    return m > chunkM ? [\n        start,\n        i\n    ] : [\n        chunkStart,\n        chunkEnd\n    ];\n}\n\n\nconst $8243e906fae47bbe$export$91a016276e4aee96 = {\n    \"left\": 0,\n    \"center\": 0.5,\n    \"right\": 1,\n    \"top\": 0,\n    \"middle\": 0.5,\n    \"hanging\": 0.2,\n    \"alphabetic\": 0.8,\n    \"ideographic\": 0.8,\n    \"bottom\": 1\n};\nclass $8243e906fae47bbe$var$CanvasTextBuilder extends (0, $2bb20f8873deb436$export$2e2bcd8739ae039) {\n    /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */ constructor(tolerance, maxExtent, resolution, pixelRatio){\n        super(tolerance, maxExtent, resolution, pixelRatio);\n        /**\n     * @private\n     * @type {Array<HTMLCanvasElement>}\n     */ this.labels_ = null;\n        /**\n     * @private\n     * @type {string|Array<string>}\n     */ this.text_ = \"\";\n        /**\n     * @private\n     * @type {number}\n     */ this.textOffsetX_ = 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.textOffsetY_ = 0;\n        /**\n     * @private\n     * @type {boolean|undefined}\n     */ this.textRotateWithView_ = undefined;\n        /**\n     * @private\n     * @type {number}\n     */ this.textRotation_ = 0;\n        /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */ this.textFillState_ = null;\n        /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */ this.fillStates = {};\n        this.fillStates[0, $d4aabc5c971073f1$export$c495d52ee3fd74b2] = {\n            fillStyle: (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2)\n        };\n        /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */ this.textStrokeState_ = null;\n        /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */ this.strokeStates = {};\n        /**\n     * @private\n     * @type {import(\"../canvas.js\").TextState}\n     */ this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ {};\n        /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */ this.textStates = {};\n        /**\n     * @private\n     * @type {string}\n     */ this.textKey_ = \"\";\n        /**\n     * @private\n     * @type {string}\n     */ this.fillKey_ = \"\";\n        /**\n     * @private\n     * @type {string}\n     */ this.strokeKey_ = \"\";\n        /**\n     * Data shared with an image builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */ this.declutterImageWithText_ = undefined;\n    }\n    /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */ finish() {\n        const instructions = super.finish();\n        instructions.textStates = this.textStates;\n        instructions.fillStates = this.fillStates;\n        instructions.strokeStates = this.strokeStates;\n        return instructions;\n    }\n    /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */ drawText(geometry, feature) {\n        const fillState = this.textFillState_;\n        const strokeState = this.textStrokeState_;\n        const textState = this.textState_;\n        if (this.text_ === \"\" || !textState || !fillState && !strokeState) return;\n        const coordinates = this.coordinates;\n        let begin = coordinates.length;\n        const geometryType = geometry.getType();\n        let flatCoordinates = null;\n        let stride = geometry.getStride();\n        if (textState.placement === \"line\" && (geometryType == \"LineString\" || geometryType == \"MultiLineString\" || geometryType == \"Polygon\" || geometryType == \"MultiPolygon\")) {\n            if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(this.getBufferedMaxExtent(), geometry.getExtent())) return;\n            let ends;\n            flatCoordinates = geometry.getFlatCoordinates();\n            if (geometryType == \"LineString\") ends = [\n                flatCoordinates.length\n            ];\n            else if (geometryType == \"MultiLineString\") ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ geometry.getEnds();\n            else if (geometryType == \"Polygon\") ends = /** @type {import(\"../../geom/Polygon.js\").default} */ geometry.getEnds().slice(0, 1);\n            else if (geometryType == \"MultiPolygon\") {\n                const endss = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ geometry.getEndss();\n                ends = [];\n                for(let i = 0, ii = endss.length; i < ii; ++i)ends.push(endss[i][0]);\n            }\n            this.beginGeometry(geometry, feature);\n            const repeat = textState.repeat;\n            const textAlign = repeat ? undefined : textState.textAlign;\n            // No `justify` support for line placement.\n            let flatOffset = 0;\n            for(let o = 0, oo = ends.length; o < oo; ++o){\n                let chunks;\n                if (repeat) chunks = (0, $7704cc1df2ddb619$export$f08272c6ff321e57)(repeat * this.resolution, flatCoordinates, flatOffset, ends[o], stride);\n                else chunks = [\n                    flatCoordinates.slice(flatOffset, ends[o])\n                ];\n                for(let c = 0, cc = chunks.length; c < cc; ++c){\n                    const chunk = chunks[c];\n                    let chunkBegin = 0;\n                    let chunkEnd = chunk.length;\n                    if (textAlign == undefined) {\n                        const range = (0, $79529ab61b92f869$export$ed6c897eea07a254)(textState.maxAngle, chunk, 0, chunk.length, 2);\n                        chunkBegin = range[0];\n                        chunkEnd = range[1];\n                    }\n                    for(let i = chunkBegin; i < chunkEnd; i += stride)coordinates.push(chunk[i], chunk[i + 1]);\n                    const end = coordinates.length;\n                    flatOffset = ends[o];\n                    this.drawChars_(begin, end);\n                    begin = end;\n                }\n            }\n            this.endGeometry(feature);\n        } else {\n            let geometryWidths = textState.overflow ? null : [];\n            switch(geometryType){\n                case \"Point\":\n                case \"MultiPoint\":\n                    flatCoordinates = /** @type {import(\"../../geom/MultiPoint.js\").default} */ geometry.getFlatCoordinates();\n                    break;\n                case \"LineString\":\n                    flatCoordinates = /** @type {import(\"../../geom/LineString.js\").default} */ geometry.getFlatMidpoint();\n                    break;\n                case \"Circle\":\n                    flatCoordinates = /** @type {import(\"../../geom/Circle.js\").default} */ geometry.getCenter();\n                    break;\n                case \"MultiLineString\":\n                    flatCoordinates = /** @type {import(\"../../geom/MultiLineString.js\").default} */ geometry.getFlatMidpoints();\n                    stride = 2;\n                    break;\n                case \"Polygon\":\n                    flatCoordinates = /** @type {import(\"../../geom/Polygon.js\").default} */ geometry.getFlatInteriorPoint();\n                    if (!textState.overflow) geometryWidths.push(flatCoordinates[2] / this.resolution);\n                    stride = 3;\n                    break;\n                case \"MultiPolygon\":\n                    const interiorPoints = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ geometry.getFlatInteriorPoints();\n                    flatCoordinates = [];\n                    for(let i = 0, ii = interiorPoints.length; i < ii; i += 3){\n                        if (!textState.overflow) geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n                        flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n                    }\n                    if (flatCoordinates.length === 0) return;\n                    stride = 2;\n                    break;\n                default:\n            }\n            const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\n            if (end === begin) return;\n            if (geometryWidths && (end - begin) / 2 !== flatCoordinates.length / stride) {\n                let beg = begin / 2;\n                geometryWidths = geometryWidths.filter((w, i)=>{\n                    const keep = coordinates[(beg + i) * 2] === flatCoordinates[i * stride] && coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\n                    if (!keep) --beg;\n                    return keep;\n                });\n            }\n            this.saveTextStates_();\n            if (textState.backgroundFill || textState.backgroundStroke) {\n                this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);\n                if (textState.backgroundFill) this.updateFillStyle(this.state, this.createFill);\n                if (textState.backgroundStroke) {\n                    this.updateStrokeStyle(this.state, this.applyStroke);\n                    this.hitDetectionInstructions.push(this.createStroke(this.state));\n                }\n            }\n            this.beginGeometry(geometry, feature);\n            // adjust padding for negative scale\n            let padding = textState.padding;\n            if (padding != (0, $d4aabc5c971073f1$export$40a9eeef55665a40) && (textState.scale[0] < 0 || textState.scale[1] < 0)) {\n                let p0 = textState.padding[0];\n                let p1 = textState.padding[1];\n                let p2 = textState.padding[2];\n                let p3 = textState.padding[3];\n                if (textState.scale[0] < 0) {\n                    p1 = -p1;\n                    p3 = -p3;\n                }\n                if (textState.scale[1] < 0) {\n                    p0 = -p0;\n                    p2 = -p2;\n                }\n                padding = [\n                    p0,\n                    p1,\n                    p2,\n                    p3\n                ];\n            }\n            // The image is unknown at this stage so we pass null; it will be computed at render time.\n            // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n            // render time.\n            const pixelRatio = this.pixelRatio;\n            this.instructions.push([\n                (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE,\n                begin,\n                end,\n                null,\n                NaN,\n                NaN,\n                NaN,\n                1,\n                0,\n                0,\n                this.textRotateWithView_,\n                this.textRotation_,\n                [\n                    1,\n                    1\n                ],\n                NaN,\n                undefined,\n                this.declutterImageWithText_,\n                padding == (0, $d4aabc5c971073f1$export$40a9eeef55665a40) ? (0, $d4aabc5c971073f1$export$40a9eeef55665a40) : padding.map(function(p) {\n                    return p * pixelRatio;\n                }),\n                !!textState.backgroundFill,\n                !!textState.backgroundStroke,\n                this.text_,\n                this.textKey_,\n                this.strokeKey_,\n                this.fillKey_,\n                this.textOffsetX_,\n                this.textOffsetY_,\n                geometryWidths\n            ]);\n            const scale = 1 / pixelRatio;\n            // Set default fill for hit detection background\n            const currentFillStyle = this.state.fillStyle;\n            if (textState.backgroundFill) {\n                this.state.fillStyle = (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2);\n                this.hitDetectionInstructions.push(this.createFill(this.state));\n            }\n            this.hitDetectionInstructions.push([\n                (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE,\n                begin,\n                end,\n                null,\n                NaN,\n                NaN,\n                NaN,\n                1,\n                0,\n                0,\n                this.textRotateWithView_,\n                this.textRotation_,\n                [\n                    scale,\n                    scale\n                ],\n                NaN,\n                undefined,\n                this.declutterImageWithText_,\n                padding,\n                !!textState.backgroundFill,\n                !!textState.backgroundStroke,\n                this.text_,\n                this.textKey_,\n                this.strokeKey_,\n                this.fillKey_ ? (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2) : this.fillKey_,\n                this.textOffsetX_,\n                this.textOffsetY_,\n                geometryWidths\n            ]);\n            // Reset previous fill\n            if (textState.backgroundFill) {\n                this.state.fillStyle = currentFillStyle;\n                this.hitDetectionInstructions.push(this.createFill(this.state));\n            }\n            this.endGeometry(feature);\n        }\n    }\n    /**\n   * @private\n   */ saveTextStates_() {\n        const strokeState = this.textStrokeState_;\n        const textState = this.textState_;\n        const fillState = this.textFillState_;\n        const strokeKey = this.strokeKey_;\n        if (strokeState) {\n            if (!(strokeKey in this.strokeStates)) this.strokeStates[strokeKey] = {\n                strokeStyle: strokeState.strokeStyle,\n                lineCap: strokeState.lineCap,\n                lineDashOffset: strokeState.lineDashOffset,\n                lineWidth: strokeState.lineWidth,\n                lineJoin: strokeState.lineJoin,\n                miterLimit: strokeState.miterLimit,\n                lineDash: strokeState.lineDash\n            };\n        }\n        const textKey = this.textKey_;\n        if (!(textKey in this.textStates)) this.textStates[textKey] = {\n            font: textState.font,\n            textAlign: textState.textAlign || (0, $d4aabc5c971073f1$export$94d53b95641b5766),\n            justify: textState.justify,\n            textBaseline: textState.textBaseline || (0, $d4aabc5c971073f1$export$cf2279a1bff62eb),\n            scale: textState.scale\n        };\n        const fillKey = this.fillKey_;\n        if (fillState) {\n            if (!(fillKey in this.fillStates)) this.fillStates[fillKey] = {\n                fillStyle: fillState.fillStyle\n            };\n        }\n    }\n    /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   */ drawChars_(begin, end) {\n        const strokeState = this.textStrokeState_;\n        const textState = this.textState_;\n        const strokeKey = this.strokeKey_;\n        const textKey = this.textKey_;\n        const fillKey = this.fillKey_;\n        this.saveTextStates_();\n        const pixelRatio = this.pixelRatio;\n        const baseline = $8243e906fae47bbe$export$91a016276e4aee96[textState.textBaseline];\n        const offsetY = this.textOffsetY_ * pixelRatio;\n        const text = this.text_;\n        const strokeWidth = strokeState ? strokeState.lineWidth * Math.abs(textState.scale[0]) / 2 : 0;\n        this.instructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_CHARS,\n            begin,\n            end,\n            baseline,\n            textState.overflow,\n            fillKey,\n            textState.maxAngle,\n            pixelRatio,\n            offsetY,\n            strokeKey,\n            strokeWidth * pixelRatio,\n            text,\n            textKey,\n            1\n        ]);\n        this.hitDetectionInstructions.push([\n            (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_CHARS,\n            begin,\n            end,\n            baseline,\n            textState.overflow,\n            fillKey ? (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2) : fillKey,\n            textState.maxAngle,\n            pixelRatio,\n            offsetY,\n            strokeKey,\n            strokeWidth * pixelRatio,\n            text,\n            textKey,\n            1 / pixelRatio\n        ]);\n    }\n    /**\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @param {Object} [sharedData] Shared data.\n   */ setTextStyle(textStyle, sharedData) {\n        let textState, fillState, strokeState;\n        if (!textStyle) this.text_ = \"\";\n        else {\n            const textFillStyle = textStyle.getFill();\n            if (!textFillStyle) {\n                fillState = null;\n                this.textFillState_ = fillState;\n            } else {\n                fillState = this.textFillState_;\n                if (!fillState) {\n                    fillState = /** @type {import(\"../canvas.js\").FillState} */ {};\n                    this.textFillState_ = fillState;\n                }\n                fillState.fillStyle = (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(textFillStyle.getColor() || (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2));\n            }\n            const textStrokeStyle = textStyle.getStroke();\n            if (!textStrokeStyle) {\n                strokeState = null;\n                this.textStrokeState_ = strokeState;\n            } else {\n                strokeState = this.textStrokeState_;\n                if (!strokeState) {\n                    strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ {};\n                    this.textStrokeState_ = strokeState;\n                }\n                const lineDash = textStrokeStyle.getLineDash();\n                const lineDashOffset = textStrokeStyle.getLineDashOffset();\n                const lineWidth = textStrokeStyle.getWidth();\n                const miterLimit = textStrokeStyle.getMiterLimit();\n                strokeState.lineCap = textStrokeStyle.getLineCap() || (0, $d4aabc5c971073f1$export$17bd0c38d6ae694e);\n                strokeState.lineDash = lineDash ? lineDash.slice() : (0, $d4aabc5c971073f1$export$e21b4112fdc612fc);\n                strokeState.lineDashOffset = lineDashOffset === undefined ? (0, $d4aabc5c971073f1$export$e06efc2409049f76) : lineDashOffset;\n                strokeState.lineJoin = textStrokeStyle.getLineJoin() || (0, $d4aabc5c971073f1$export$365eb9648cf19bd0);\n                strokeState.lineWidth = lineWidth === undefined ? (0, $d4aabc5c971073f1$export$79661f132c62010e) : lineWidth;\n                strokeState.miterLimit = miterLimit === undefined ? (0, $d4aabc5c971073f1$export$80c1c01844597b7b) : miterLimit;\n                strokeState.strokeStyle = (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(textStrokeStyle.getColor() || (0, $d4aabc5c971073f1$export$1eb2eaecacf2031e));\n            }\n            textState = this.textState_;\n            const font = textStyle.getFont() || (0, $d4aabc5c971073f1$export$3847dfea4f8d4dfa);\n            (0, $d4aabc5c971073f1$export$a534074a28fa87ff)(font);\n            const textScale = textStyle.getScaleArray();\n            textState.overflow = textStyle.getOverflow();\n            textState.font = font;\n            textState.maxAngle = textStyle.getMaxAngle();\n            textState.placement = textStyle.getPlacement();\n            textState.textAlign = textStyle.getTextAlign();\n            textState.repeat = textStyle.getRepeat();\n            textState.justify = textStyle.getJustify();\n            textState.textBaseline = textStyle.getTextBaseline() || (0, $d4aabc5c971073f1$export$cf2279a1bff62eb);\n            textState.backgroundFill = textStyle.getBackgroundFill();\n            textState.backgroundStroke = textStyle.getBackgroundStroke();\n            textState.padding = textStyle.getPadding() || (0, $d4aabc5c971073f1$export$40a9eeef55665a40);\n            textState.scale = textScale === undefined ? [\n                1,\n                1\n            ] : textScale;\n            const textOffsetX = textStyle.getOffsetX();\n            const textOffsetY = textStyle.getOffsetY();\n            const textRotateWithView = textStyle.getRotateWithView();\n            const textRotation = textStyle.getRotation();\n            this.text_ = textStyle.getText() || \"\";\n            this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n            this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n            this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;\n            this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n            this.strokeKey_ = strokeState ? (typeof strokeState.strokeStyle == \"string\" ? strokeState.strokeStyle : (0, $6c5e11070e371322$export$5e82334337e0f204)(strokeState.strokeStyle)) + strokeState.lineCap + strokeState.lineDashOffset + \"|\" + strokeState.lineWidth + strokeState.lineJoin + strokeState.miterLimit + \"[\" + strokeState.lineDash.join() + \"]\" : \"\";\n            this.textKey_ = textState.font + textState.scale + (textState.textAlign || \"?\") + (textState.repeat || \"?\") + (textState.justify || \"?\") + (textState.textBaseline || \"?\");\n            this.fillKey_ = fillState ? typeof fillState.fillStyle == \"string\" ? fillState.fillStyle : \"|\" + (0, $6c5e11070e371322$export$5e82334337e0f204)(fillState.fillStyle) : \"\";\n        }\n        this.declutterImageWithText_ = sharedData;\n    }\n}\nvar $8243e906fae47bbe$export$2e2bcd8739ae039 = $8243e906fae47bbe$var$CanvasTextBuilder;\n\n\n/**\n * @type {Object<import(\"../canvas.js\").BuilderType, typeof Builder>}\n */ const $e22658f4b743550b$var$BATCH_CONSTRUCTORS = {\n    \"Circle\": (0, $7d2e8ba11a45ae8a$export$2e2bcd8739ae039),\n    \"Default\": (0, $2bb20f8873deb436$export$2e2bcd8739ae039),\n    \"Image\": (0, $b652f9dd73b29cfe$export$2e2bcd8739ae039),\n    \"LineString\": (0, $a207f23baa5aa2c5$export$2e2bcd8739ae039),\n    \"Polygon\": (0, $7d2e8ba11a45ae8a$export$2e2bcd8739ae039),\n    \"Text\": (0, $8243e906fae47bbe$export$2e2bcd8739ae039)\n};\nclass $e22658f4b743550b$var$BuilderGroup {\n    /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */ constructor(tolerance, maxExtent, resolution, pixelRatio){\n        /**\n     * @private\n     * @type {number}\n     */ this.tolerance_ = tolerance;\n        /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */ this.maxExtent_ = maxExtent;\n        /**\n     * @private\n     * @type {number}\n     */ this.pixelRatio_ = pixelRatio;\n        /**\n     * @private\n     * @type {number}\n     */ this.resolution_ = resolution;\n        /**\n     * @private\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, Builder>>}\n     */ this.buildersByZIndex_ = {};\n    }\n    /**\n   * @return {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Builder.js\").SerializableInstructions>>} The serializable instructions\n   */ finish() {\n        const builderInstructions = {};\n        for(const zKey in this.buildersByZIndex_){\n            builderInstructions[zKey] = builderInstructions[zKey] || {};\n            const builders = this.buildersByZIndex_[zKey];\n            for(const builderKey in builders){\n                const builderInstruction = builders[builderKey].finish();\n                builderInstructions[zKey][builderKey] = builderInstruction;\n            }\n        }\n        return builderInstructions;\n    }\n    /**\n   * @param {number|undefined} zIndex Z index.\n   * @param {import(\"../canvas.js\").BuilderType} builderType Replay type.\n   * @return {import(\"../VectorContext.js\").default} Replay.\n   */ getBuilder(zIndex, builderType) {\n        const zIndexKey = zIndex !== undefined ? zIndex.toString() : \"0\";\n        let replays = this.buildersByZIndex_[zIndexKey];\n        if (replays === undefined) {\n            replays = {};\n            this.buildersByZIndex_[zIndexKey] = replays;\n        }\n        let replay = replays[builderType];\n        if (replay === undefined) {\n            const Constructor = $e22658f4b743550b$var$BATCH_CONSTRUCTORS[builderType];\n            replay = new Constructor(this.tolerance_, this.maxExtent_, this.resolution_, this.pixelRatio_);\n            replays[builderType] = replay;\n        }\n        return replay;\n    }\n}\nvar $e22658f4b743550b$export$2e2bcd8739ae039 = $e22658f4b743550b$var$BuilderGroup;\n\n\n\n/**\n * @module ol/render/canvas/ExecutorGroup\n */ /**\n * @module ol/render/canvas/Executor\n */ \n\n\n\n\n/**\n * @module ol/geom/flat/textpath\n */ \n\nfunction $f6421f31729929e6$export$153a9a17ab3e949f(flatCoordinates, offset, end, stride, text, startM, maxAngle, scale, measureAndCacheTextWidth, font, cache, rotation) {\n    let x2 = flatCoordinates[offset];\n    let y2 = flatCoordinates[offset + 1];\n    let x1 = 0;\n    let y1 = 0;\n    let segmentLength = 0;\n    let segmentM = 0;\n    function advance() {\n        x1 = x2;\n        y1 = y2;\n        offset += stride;\n        x2 = flatCoordinates[offset];\n        y2 = flatCoordinates[offset + 1];\n        segmentM += segmentLength;\n        segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    }\n    do advance();\n    while (offset < end - stride && segmentM + segmentLength < startM);\n    let interpolate = segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;\n    const beginX = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(x1, x2, interpolate);\n    const beginY = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(y1, y2, interpolate);\n    const startOffset = offset - stride;\n    const startLength = segmentM;\n    const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);\n    while(offset < end - stride && segmentM + segmentLength < endM)advance();\n    interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;\n    const endX = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(x1, x2, interpolate);\n    const endY = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(y1, y2, interpolate);\n    // Keep text upright\n    let reverse;\n    if (rotation) {\n        const flat = [\n            beginX,\n            beginY,\n            endX,\n            endY\n        ];\n        (0, $14c6e714516e527b$export$bb628a54ab399bc9)(flat, 0, 4, 2, rotation, flat, flat);\n        reverse = flat[0] > flat[2];\n    } else reverse = beginX > endX;\n    const PI = Math.PI;\n    const result = [];\n    const singleSegment = startOffset + stride === offset;\n    offset = startOffset;\n    segmentLength = 0;\n    segmentM = startLength;\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    let previousAngle;\n    // All on the same segment\n    if (singleSegment) {\n        advance();\n        previousAngle = Math.atan2(y2 - y1, x2 - x1);\n        if (reverse) previousAngle += previousAngle > 0 ? -PI : PI;\n        const x = (endX + beginX) / 2;\n        const y = (endY + beginY) / 2;\n        result[0] = [\n            x,\n            y,\n            (endM - startM) / 2,\n            previousAngle,\n            text\n        ];\n        return result;\n    }\n    // rendering across line segments\n    text = text.replace(/\\n/g, \" \"); // ensure rendering in single-line as all calculations below don't handle multi-lines\n    for(let i = 0, ii = text.length; i < ii;){\n        advance();\n        let angle = Math.atan2(y2 - y1, x2 - x1);\n        if (reverse) angle += angle > 0 ? -PI : PI;\n        if (previousAngle !== undefined) {\n            let delta = angle - previousAngle;\n            delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;\n            if (Math.abs(delta) > maxAngle) return null;\n        }\n        previousAngle = angle;\n        const iStart = i;\n        let charLength = 0;\n        for(; i < ii; ++i){\n            const index = reverse ? ii - i - 1 : i;\n            const len = scale * measureAndCacheTextWidth(font, text[index], cache);\n            if (offset + stride < end && segmentM + segmentLength < startM + charLength + len / 2) break;\n            charLength += len;\n        }\n        if (i === iStart) continue;\n        const chars = reverse ? text.substring(ii - iStart, ii - i) : text.substring(iStart, i);\n        interpolate = segmentLength === 0 ? 0 : (startM + charLength / 2 - segmentM) / segmentLength;\n        const x = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(x1, x2, interpolate);\n        const y = (0, $6b000a049d919fe5$export$3a89f8d6f6bf6c9f)(y1, y2, interpolate);\n        result.push([\n            x,\n            y,\n            charLength / 2,\n            angle,\n            chars\n        ]);\n        startM += charLength;\n    }\n    return result;\n}\n\n\n\n\n\n/**\n * @typedef {Object} BBox\n * @property {number} minX Minimal x.\n * @property {number} minY Minimal y.\n * @property {number} maxX Maximal x.\n * @property {number} maxY Maximal y\n * @property {*} value Value.\n */ /**\n * @typedef {Object} ImageOrLabelDimensions\n * @property {number} drawImageX DrawImageX.\n * @property {number} drawImageY DrawImageY.\n * @property {number} drawImageW DrawImageW.\n * @property {number} drawImageH DrawImageH.\n * @property {number} originX OriginX.\n * @property {number} originY OriginY.\n * @property {Array<number>} scale Scale.\n * @property {BBox} declutterBox DeclutterBox.\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\n */ /**\n * @typedef {{0: CanvasRenderingContext2D, 1: number, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\n */ /**\n * @template T\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */ /**\n * @type {import(\"../../extent.js\").Extent}\n */ const $6526fa4ee42dc39d$var$tmpExtent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n/** @type {import(\"../../coordinate.js\").Coordinate} */ const $6526fa4ee42dc39d$var$p1 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */ const $6526fa4ee42dc39d$var$p2 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */ const $6526fa4ee42dc39d$var$p3 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */ const $6526fa4ee42dc39d$var$p4 = [];\n/**\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\n * @return {BBox} Declutter bbox.\n */ function $6526fa4ee42dc39d$var$getDeclutterBox(replayImageOrLabelArgs) {\n    return replayImageOrLabelArgs[3].declutterBox;\n}\nconst $6526fa4ee42dc39d$var$rtlRegEx = new RegExp(/* eslint-disable prettier/prettier */ \"[\" + String.fromCharCode(0x00591) + \"-\" + String.fromCharCode(0x008ff) + String.fromCharCode(0x0fb1d) + \"-\" + String.fromCharCode(0x0fdff) + String.fromCharCode(0x0fe70) + \"-\" + String.fromCharCode(0x0fefc) + String.fromCharCode(0x10800) + \"-\" + String.fromCharCode(0x10fff) + String.fromCharCode(0x1e800) + \"-\" + String.fromCharCode(0x1efff) + \"]\");\n/**\n * @param {string} text Text.\n * @param {CanvasTextAlign} align Alignment.\n * @return {number} Text alignment.\n */ function $6526fa4ee42dc39d$var$horizontalTextAlign(text, align) {\n    if (align === \"start\") align = $6526fa4ee42dc39d$var$rtlRegEx.test(text) ? \"right\" : \"left\";\n    else if (align === \"end\") align = $6526fa4ee42dc39d$var$rtlRegEx.test(text) ? \"left\" : \"right\";\n    return (0, $8243e906fae47bbe$export$91a016276e4aee96)[align];\n}\n/**\n * @param {Array<string>} acc Accumulator.\n * @param {string} line Line of text.\n * @param {number} i Index\n * @return {Array<string>} Accumulator.\n */ function $6526fa4ee42dc39d$var$createTextChunks(acc, line, i) {\n    if (i > 0) acc.push(\"\\n\", \"\");\n    acc.push(line, \"\");\n    return acc;\n}\nclass $6526fa4ee42dc39d$var$Executor {\n    /**\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The replay can have overlapping geometries.\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions\n   */ constructor(resolution, pixelRatio, overlaps, instructions){\n        /**\n     * @protected\n     * @type {boolean}\n     */ this.overlaps = overlaps;\n        /**\n     * @protected\n     * @type {number}\n     */ this.pixelRatio = pixelRatio;\n        /**\n     * @protected\n     * @const\n     * @type {number}\n     */ this.resolution = resolution;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.alignFill_;\n        /**\n     * @protected\n     * @type {Array<*>}\n     */ this.instructions = instructions.instructions;\n        /**\n     * @protected\n     * @type {Array<number>}\n     */ this.coordinates = instructions.coordinates;\n        /**\n     * @private\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\n     */ this.coordinateCache_ = {};\n        /**\n     * @private\n     * @type {!import(\"../../transform.js\").Transform}\n     */ this.renderedTransform_ = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        /**\n     * @protected\n     * @type {Array<*>}\n     */ this.hitDetectionInstructions = instructions.hitDetectionInstructions;\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.pixelCoordinates_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.viewRotation_ = 0;\n        /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */ this.fillStates = instructions.fillStates || {};\n        /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */ this.strokeStates = instructions.strokeStates || {};\n        /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */ this.textStates = instructions.textStates || {};\n        /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */ this.widths_ = {};\n        /**\n     * @private\n     * @type {Object<string, import(\"../canvas.js\").Label>}\n     */ this.labels_ = {};\n    }\n    /**\n   * @param {string|Array<string>} text Text.\n   * @param {string} textKey Text style key.\n   * @param {string} fillKey Fill style key.\n   * @param {string} strokeKey Stroke style key.\n   * @return {import(\"../canvas.js\").Label} Label.\n   */ createLabel(text, textKey, fillKey, strokeKey) {\n        const key = text + textKey + fillKey + strokeKey;\n        if (this.labels_[key]) return this.labels_[key];\n        const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\n        const fillState = fillKey ? this.fillStates[fillKey] : null;\n        const textState = this.textStates[textKey];\n        const pixelRatio = this.pixelRatio;\n        const scale = [\n            textState.scale[0] * pixelRatio,\n            textState.scale[1] * pixelRatio\n        ];\n        const textIsArray = Array.isArray(text);\n        const align = textState.justify ? (0, $8243e906fae47bbe$export$91a016276e4aee96)[textState.justify] : $6526fa4ee42dc39d$var$horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || (0, $d4aabc5c971073f1$export$94d53b95641b5766));\n        const strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n        const chunks = textIsArray ? text : text.split(\"\\n\").reduce($6526fa4ee42dc39d$var$createTextChunks, []);\n        const { width: width, height: height, widths: widths, heights: heights, lineWidths: lineWidths } = (0, $d4aabc5c971073f1$export$7d7c13020df1e791)(textState, chunks);\n        const renderWidth = width + strokeWidth;\n        const contextInstructions = [];\n        // make canvas 2 pixels wider to account for italic text width measurement errors\n        const w = (renderWidth + 2) * scale[0];\n        const h = (height + strokeWidth) * scale[1];\n        /** @type {import(\"../canvas.js\").Label} */ const label = {\n            width: w < 0 ? Math.floor(w) : Math.ceil(w),\n            height: h < 0 ? Math.floor(h) : Math.ceil(h),\n            contextInstructions: contextInstructions\n        };\n        if (scale[0] != 1 || scale[1] != 1) contextInstructions.push(\"scale\", scale);\n        if (strokeKey) {\n            contextInstructions.push(\"strokeStyle\", strokeState.strokeStyle);\n            contextInstructions.push(\"lineWidth\", strokeWidth);\n            contextInstructions.push(\"lineCap\", strokeState.lineCap);\n            contextInstructions.push(\"lineJoin\", strokeState.lineJoin);\n            contextInstructions.push(\"miterLimit\", strokeState.miterLimit);\n            contextInstructions.push(\"setLineDash\", [\n                strokeState.lineDash\n            ]);\n            contextInstructions.push(\"lineDashOffset\", strokeState.lineDashOffset);\n        }\n        if (fillKey) contextInstructions.push(\"fillStyle\", fillState.fillStyle);\n        contextInstructions.push(\"textBaseline\", \"middle\");\n        contextInstructions.push(\"textAlign\", \"center\");\n        const leftRight = 0.5 - align;\n        let x = align * renderWidth + leftRight * strokeWidth;\n        const strokeInstructions = [];\n        const fillInstructions = [];\n        let lineHeight = 0;\n        let lineOffset = 0;\n        let widthHeightIndex = 0;\n        let lineWidthIndex = 0;\n        let previousFont;\n        for(let i = 0, ii = chunks.length; i < ii; i += 2){\n            const text = chunks[i];\n            if (text === \"\\n\") {\n                lineOffset += lineHeight;\n                lineHeight = 0;\n                x = align * renderWidth + leftRight * strokeWidth;\n                ++lineWidthIndex;\n                continue;\n            }\n            const font = chunks[i + 1] || textState.font;\n            if (font !== previousFont) {\n                if (strokeKey) strokeInstructions.push(\"font\", font);\n                if (fillKey) fillInstructions.push(\"font\", font);\n                previousFont = font;\n            }\n            lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\n            const fillStrokeArgs = [\n                text,\n                x + leftRight * widths[widthHeightIndex] + align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),\n                0.5 * (strokeWidth + lineHeight) + lineOffset\n            ];\n            x += widths[widthHeightIndex];\n            if (strokeKey) strokeInstructions.push(\"strokeText\", fillStrokeArgs);\n            if (fillKey) fillInstructions.push(\"fillText\", fillStrokeArgs);\n            ++widthHeightIndex;\n        }\n        Array.prototype.push.apply(contextInstructions, strokeInstructions);\n        Array.prototype.push.apply(contextInstructions, fillInstructions);\n        this.labels_[key] = label;\n        return label;\n    }\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */ replayTextBackground_(context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {\n        context.beginPath();\n        context.moveTo.apply(context, p1);\n        context.lineTo.apply(context, p2);\n        context.lineTo.apply(context, p3);\n        context.lineTo.apply(context, p4);\n        context.lineTo.apply(context, p1);\n        if (fillInstruction) {\n            this.alignFill_ = /** @type {boolean} */ fillInstruction[2];\n            this.fill_(context);\n        }\n        if (strokeInstruction) {\n            this.setStrokeStyle_(context, /** @type {Array<*>} */ strokeInstruction);\n            context.stroke();\n        }\n    }\n    /**\n   * @private\n   * @param {number} sheetWidth Width of the sprite sheet.\n   * @param {number} sheetHeight Height of the sprite sheet.\n   * @param {number} centerX X.\n   * @param {number} centerY Y.\n   * @param {number} width Width.\n   * @param {number} height Height.\n   * @param {number} anchorX Anchor X.\n   * @param {number} anchorY Anchor Y.\n   * @param {number} originX Origin X.\n   * @param {number} originY Origin Y.\n   * @param {number} rotation Rotation.\n   * @param {import(\"../../size.js\").Size} scale Scale.\n   * @param {boolean} snapToPixel Snap to pixel.\n   * @param {Array<number>} padding Padding.\n   * @param {boolean} fillStroke Background fill or stroke.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\n   */ calculateImageOrLabelDimensions_(sheetWidth, sheetHeight, centerX, centerY, width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, fillStroke, feature) {\n        anchorX *= scale[0];\n        anchorY *= scale[1];\n        let x = centerX - anchorX;\n        let y = centerY - anchorY;\n        const w = width + originX > sheetWidth ? sheetWidth - originX : width;\n        const h = height + originY > sheetHeight ? sheetHeight - originY : height;\n        const boxW = padding[3] + w * scale[0] + padding[1];\n        const boxH = padding[0] + h * scale[1] + padding[2];\n        const boxX = x - padding[3];\n        const boxY = y - padding[0];\n        if (fillStroke || rotation !== 0) {\n            $6526fa4ee42dc39d$var$p1[0] = boxX;\n            $6526fa4ee42dc39d$var$p4[0] = boxX;\n            $6526fa4ee42dc39d$var$p1[1] = boxY;\n            $6526fa4ee42dc39d$var$p2[1] = boxY;\n            $6526fa4ee42dc39d$var$p2[0] = boxX + boxW;\n            $6526fa4ee42dc39d$var$p3[0] = $6526fa4ee42dc39d$var$p2[0];\n            $6526fa4ee42dc39d$var$p3[1] = boxY + boxH;\n            $6526fa4ee42dc39d$var$p4[1] = $6526fa4ee42dc39d$var$p3[1];\n        }\n        let transform;\n        if (rotation !== 0) {\n            transform = (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)((0, $e22e7611e69f42a9$export$185802fd694ee1f5)(), centerX, centerY, 1, 1, rotation, -centerX, -centerY);\n            (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(transform, $6526fa4ee42dc39d$var$p1);\n            (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(transform, $6526fa4ee42dc39d$var$p2);\n            (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(transform, $6526fa4ee42dc39d$var$p3);\n            (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(transform, $6526fa4ee42dc39d$var$p4);\n            (0, $6da4c8ed3074c92b$export$958e3e1a02eac4b6)(Math.min($6526fa4ee42dc39d$var$p1[0], $6526fa4ee42dc39d$var$p2[0], $6526fa4ee42dc39d$var$p3[0], $6526fa4ee42dc39d$var$p4[0]), Math.min($6526fa4ee42dc39d$var$p1[1], $6526fa4ee42dc39d$var$p2[1], $6526fa4ee42dc39d$var$p3[1], $6526fa4ee42dc39d$var$p4[1]), Math.max($6526fa4ee42dc39d$var$p1[0], $6526fa4ee42dc39d$var$p2[0], $6526fa4ee42dc39d$var$p3[0], $6526fa4ee42dc39d$var$p4[0]), Math.max($6526fa4ee42dc39d$var$p1[1], $6526fa4ee42dc39d$var$p2[1], $6526fa4ee42dc39d$var$p3[1], $6526fa4ee42dc39d$var$p4[1]), $6526fa4ee42dc39d$var$tmpExtent);\n        } else (0, $6da4c8ed3074c92b$export$958e3e1a02eac4b6)(Math.min(boxX, boxX + boxW), Math.min(boxY, boxY + boxH), Math.max(boxX, boxX + boxW), Math.max(boxY, boxY + boxH), $6526fa4ee42dc39d$var$tmpExtent);\n        if (snapToPixel) {\n            x = Math.round(x);\n            y = Math.round(y);\n        }\n        return {\n            drawImageX: x,\n            drawImageY: y,\n            drawImageW: w,\n            drawImageH: h,\n            originX: originX,\n            originY: originY,\n            declutterBox: {\n                minX: $6526fa4ee42dc39d$var$tmpExtent[0],\n                minY: $6526fa4ee42dc39d$var$tmpExtent[1],\n                maxX: $6526fa4ee42dc39d$var$tmpExtent[2],\n                maxY: $6526fa4ee42dc39d$var$tmpExtent[3],\n                value: feature\n            },\n            canvasTransform: transform,\n            scale: scale\n        };\n    }\n    /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\n   * @param {number} opacity Opacity.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   * @return {boolean} The image or label was rendered.\n   */ replayImageOrLabel_(context, contextScale, imageOrLabel, dimensions, opacity, fillInstruction, strokeInstruction) {\n        const fillStroke = !!(fillInstruction || strokeInstruction);\n        const box = dimensions.declutterBox;\n        const canvas = context.canvas;\n        const strokePadding = strokeInstruction ? strokeInstruction[2] * dimensions.scale[0] / 2 : 0;\n        const intersects = box.minX - strokePadding <= canvas.width / contextScale && box.maxX + strokePadding >= 0 && box.minY - strokePadding <= canvas.height / contextScale && box.maxY + strokePadding >= 0;\n        if (intersects) {\n            if (fillStroke) this.replayTextBackground_(context, $6526fa4ee42dc39d$var$p1, $6526fa4ee42dc39d$var$p2, $6526fa4ee42dc39d$var$p3, $6526fa4ee42dc39d$var$p4, /** @type {Array<*>} */ fillInstruction, /** @type {Array<*>} */ strokeInstruction);\n            (0, $d4aabc5c971073f1$export$3cb6f3a6e49cc0ee)(context, dimensions.canvasTransform, opacity, imageOrLabel, dimensions.originX, dimensions.originY, dimensions.drawImageW, dimensions.drawImageH, dimensions.drawImageX, dimensions.drawImageY, dimensions.scale);\n        }\n        return true;\n    }\n    /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   */ fill_(context) {\n        if (this.alignFill_) {\n            const origin = (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(this.renderedTransform_, [\n                0,\n                0\n            ]);\n            const repeatSize = 512 * this.pixelRatio;\n            context.save();\n            context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\n            context.rotate(this.viewRotation_);\n        }\n        context.fill();\n        if (this.alignFill_) context.restore();\n    }\n    /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {Array<*>} instruction Instruction.\n   */ setStrokeStyle_(context, instruction) {\n        context[\"strokeStyle\"] = /** @type {import(\"../../colorlike.js\").ColorLike} */ instruction[1];\n        context.lineWidth = /** @type {number} */ instruction[2];\n        context.lineCap = /** @type {CanvasLineCap} */ instruction[3];\n        context.lineJoin = /** @type {CanvasLineJoin} */ instruction[4];\n        context.miterLimit = /** @type {number} */ instruction[5];\n        context.lineDashOffset = /** @type {number} */ instruction[7];\n        context.setLineDash(/** @type {Array<number>} */ instruction[6]);\n    }\n    /**\n   * @private\n   * @param {string|Array<string>} text The text to draw.\n   * @param {string} textKey The key of the text state.\n   * @param {string} strokeKey The key for the stroke state.\n   * @param {string} fillKey The key for the fill state.\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\n   */ drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\n        const textState = this.textStates[textKey];\n        const label = this.createLabel(text, textKey, fillKey, strokeKey);\n        const strokeState = this.strokeStates[strokeKey];\n        const pixelRatio = this.pixelRatio;\n        const align = $6526fa4ee42dc39d$var$horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || (0, $d4aabc5c971073f1$export$94d53b95641b5766));\n        const baseline = (0, $8243e906fae47bbe$export$91a016276e4aee96)[textState.textBaseline || (0, $d4aabc5c971073f1$export$cf2279a1bff62eb)];\n        const strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n        // Remove the 2 pixels we added in createLabel() for the anchor\n        const width = label.width / pixelRatio - 2 * textState.scale[0];\n        const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\n        const anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;\n        return {\n            label: label,\n            anchorX: anchorX,\n            anchorY: anchorY\n        };\n    }\n    /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {Array<*>} instructions Instructions array.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\n   *     features that intersect this extent.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */ execute_(context, contextScale, transform, instructions, snapToPixel, featureCallback, hitExtent, declutterTree) {\n        /** @type {Array<number>} */ let pixelCoordinates;\n        if (this.pixelCoordinates_ && (0, $b998d41b678ed5d1$export$e9bab7fafb253603)(transform, this.renderedTransform_)) pixelCoordinates = this.pixelCoordinates_;\n        else {\n            if (!this.pixelCoordinates_) this.pixelCoordinates_ = [];\n            pixelCoordinates = (0, $14c6e714516e527b$export$b92b2dedcfff79de)(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);\n            (0, $e22e7611e69f42a9$export$42b4187a82d80ed0)(this.renderedTransform_, transform);\n        }\n        let i = 0; // instruction index\n        const ii = instructions.length; // end of instructions\n        let d = 0; // data index\n        let dd; // end of per-instruction data\n        let anchorX, anchorY, prevX, prevY, roundX, roundY, image, text, textKey, strokeKey, fillKey;\n        let pendingFill = 0;\n        let pendingStroke = 0;\n        let lastFillInstruction = null;\n        let lastStrokeInstruction = null;\n        const coordinateCache = this.coordinateCache_;\n        const viewRotation = this.viewRotation_;\n        const viewRotationFromTransform = Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\n        const state = /** @type {import(\"../../render.js\").State} */ {\n            context: context,\n            pixelRatio: this.pixelRatio,\n            resolution: this.resolution,\n            rotation: viewRotation\n        };\n        // When the batch size gets too big, performance decreases. 200 is a good\n        // balance between batch size and number of fill/stroke instructions.\n        const batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;\n        let /** @type {import(\"../../Feature.js\").FeatureLike} */ feature;\n        let x, y, currentGeometry;\n        while(i < ii){\n            const instruction = instructions[i];\n            const type = /** @type {import(\"./Instruction.js\").default} */ instruction[0];\n            switch(type){\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).BEGIN_GEOMETRY:\n                    feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ instruction[1];\n                    currentGeometry = instruction[3];\n                    if (!feature.getGeometry()) i = /** @type {number} */ instruction[2];\n                    else if (hitExtent !== undefined && !(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(hitExtent, currentGeometry.getExtent())) i = /** @type {number} */ instruction[2] + 1;\n                    else ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).BEGIN_PATH:\n                    if (pendingFill > batchSize) {\n                        this.fill_(context);\n                        pendingFill = 0;\n                    }\n                    if (pendingStroke > batchSize) {\n                        context.stroke();\n                        pendingStroke = 0;\n                    }\n                    if (!pendingFill && !pendingStroke) {\n                        context.beginPath();\n                        prevX = NaN;\n                        prevY = NaN;\n                    }\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).CIRCLE:\n                    d = /** @type {number} */ instruction[1];\n                    const x1 = pixelCoordinates[d];\n                    const y1 = pixelCoordinates[d + 1];\n                    const x2 = pixelCoordinates[d + 2];\n                    const y2 = pixelCoordinates[d + 3];\n                    const dx = x2 - x1;\n                    const dy = y2 - y1;\n                    const r = Math.sqrt(dx * dx + dy * dy);\n                    context.moveTo(x1 + r, y1);\n                    context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).CLOSE_PATH:\n                    context.closePath();\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).CUSTOM:\n                    d = /** @type {number} */ instruction[1];\n                    dd = instruction[2];\n                    const geometry = /** @type {import(\"../../geom/SimpleGeometry.js\").default} */ instruction[3];\n                    const renderer = instruction[4];\n                    const fn = instruction.length == 6 ? instruction[5] : undefined;\n                    state.geometry = geometry;\n                    state.feature = feature;\n                    if (!(i in coordinateCache)) coordinateCache[i] = [];\n                    const coords = coordinateCache[i];\n                    if (fn) fn(pixelCoordinates, d, dd, 2, coords);\n                    else {\n                        coords[0] = pixelCoordinates[d];\n                        coords[1] = pixelCoordinates[d + 1];\n                        coords.length = 2;\n                    }\n                    renderer(coords, state);\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_IMAGE:\n                    d = /** @type {number} */ instruction[1];\n                    dd = /** @type {number} */ instruction[2];\n                    image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ instruction[3];\n                    // Remaining arguments in DRAW_IMAGE are in alphabetical order\n                    anchorX = /** @type {number} */ instruction[4];\n                    anchorY = /** @type {number} */ instruction[5];\n                    let height = /** @type {number} */ instruction[6];\n                    const opacity = /** @type {number} */ instruction[7];\n                    const originX = /** @type {number} */ instruction[8];\n                    const originY = /** @type {number} */ instruction[9];\n                    const rotateWithView = /** @type {boolean} */ instruction[10];\n                    let rotation = /** @type {number} */ instruction[11];\n                    const scale = /** @type {import(\"../../size.js\").Size} */ instruction[12];\n                    let width = /** @type {number} */ instruction[13];\n                    const declutterMode = /** @type {\"declutter\"|\"obstacle\"|\"none\"|undefined} */ instruction[14];\n                    const declutterImageWithText = /** @type {import(\"../canvas.js\").DeclutterImageWithText} */ instruction[15];\n                    if (!image && instruction.length >= 20) {\n                        // create label images\n                        text = /** @type {string} */ instruction[19];\n                        textKey = /** @type {string} */ instruction[20];\n                        strokeKey = /** @type {string} */ instruction[21];\n                        fillKey = /** @type {string} */ instruction[22];\n                        const labelWithAnchor = this.drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey);\n                        image = labelWithAnchor.label;\n                        instruction[3] = image;\n                        const textOffsetX = /** @type {number} */ instruction[23];\n                        anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\n                        instruction[4] = anchorX;\n                        const textOffsetY = /** @type {number} */ instruction[24];\n                        anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\n                        instruction[5] = anchorY;\n                        height = image.height;\n                        instruction[6] = height;\n                        width = image.width;\n                        instruction[13] = width;\n                    }\n                    let geometryWidths;\n                    if (instruction.length > 25) geometryWidths = /** @type {number} */ instruction[25];\n                    let padding, backgroundFill, backgroundStroke;\n                    if (instruction.length > 17) {\n                        padding = /** @type {Array<number>} */ instruction[16];\n                        backgroundFill = /** @type {boolean} */ instruction[17];\n                        backgroundStroke = /** @type {boolean} */ instruction[18];\n                    } else {\n                        padding = (0, $d4aabc5c971073f1$export$40a9eeef55665a40);\n                        backgroundFill = false;\n                        backgroundStroke = false;\n                    }\n                    if (rotateWithView && viewRotationFromTransform) // Canvas is expected to be rotated to reverse view rotation.\n                    rotation += viewRotation;\n                    else if (!rotateWithView && !viewRotationFromTransform) // Canvas is not rotated, images need to be rotated back to be north-up.\n                    rotation -= viewRotation;\n                    let widthIndex = 0;\n                    for(; d < dd; d += 2){\n                        if (geometryWidths && geometryWidths[widthIndex++] < width / this.pixelRatio) continue;\n                        const dimensions = this.calculateImageOrLabelDimensions_(image.width, image.height, pixelCoordinates[d], pixelCoordinates[d + 1], width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, backgroundFill || backgroundStroke, feature);\n                        /** @type {ReplayImageOrLabelArgs} */ const args = [\n                            context,\n                            contextScale,\n                            image,\n                            dimensions,\n                            opacity,\n                            backgroundFill ? /** @type {Array<*>} */ lastFillInstruction : null,\n                            backgroundStroke ? /** @type {Array<*>} */ lastStrokeInstruction : null\n                        ];\n                        if (declutterTree) {\n                            if (declutterMode === \"none\") continue;\n                            else if (declutterMode === \"obstacle\") {\n                                // will always be drawn, thus no collision detection, but insert as obstacle\n                                declutterTree.insert(dimensions.declutterBox);\n                                continue;\n                            } else {\n                                let imageArgs;\n                                let imageDeclutterBox;\n                                if (declutterImageWithText) {\n                                    const index = dd - d;\n                                    if (!declutterImageWithText[index]) {\n                                        // We now have the image for an image+text combination.\n                                        declutterImageWithText[index] = args;\n                                        continue;\n                                    }\n                                    imageArgs = declutterImageWithText[index];\n                                    delete declutterImageWithText[index];\n                                    imageDeclutterBox = $6526fa4ee42dc39d$var$getDeclutterBox(imageArgs);\n                                    if (declutterTree.collides(imageDeclutterBox)) continue;\n                                }\n                                if (declutterTree.collides(dimensions.declutterBox)) continue;\n                                if (imageArgs) {\n                                    // We now have image and text for an image+text combination.\n                                    declutterTree.insert(imageDeclutterBox);\n                                    // Render the image before we render the text.\n                                    this.replayImageOrLabel_.apply(this, imageArgs);\n                                }\n                                declutterTree.insert(dimensions.declutterBox);\n                            }\n                        }\n                        this.replayImageOrLabel_.apply(this, args);\n                    }\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).DRAW_CHARS:\n                    const begin = /** @type {number} */ instruction[1];\n                    const end = /** @type {number} */ instruction[2];\n                    const baseline = /** @type {number} */ instruction[3];\n                    const overflow = /** @type {number} */ instruction[4];\n                    fillKey = /** @type {string} */ instruction[5];\n                    const maxAngle = /** @type {number} */ instruction[6];\n                    const measurePixelRatio = /** @type {number} */ instruction[7];\n                    const offsetY = /** @type {number} */ instruction[8];\n                    strokeKey = /** @type {string} */ instruction[9];\n                    const strokeWidth = /** @type {number} */ instruction[10];\n                    text = /** @type {string} */ instruction[11];\n                    textKey = /** @type {string} */ instruction[12];\n                    const pixelRatioScale = [\n                        /** @type {number} */ instruction[13],\n                        /** @type {number} */ instruction[13]\n                    ];\n                    const textState = this.textStates[textKey];\n                    const font = textState.font;\n                    const textScale = [\n                        textState.scale[0] * measurePixelRatio,\n                        textState.scale[1] * measurePixelRatio\n                    ];\n                    let cachedWidths;\n                    if (font in this.widths_) cachedWidths = this.widths_[font];\n                    else {\n                        cachedWidths = {};\n                        this.widths_[font] = cachedWidths;\n                    }\n                    const pathLength = (0, $bf04349d827c1d16$export$153f8c6b4d8caebc)(pixelCoordinates, begin, end, 2);\n                    const textLength = Math.abs(textScale[0]) * (0, $d4aabc5c971073f1$export$915c7ba51467308f)(font, text, cachedWidths);\n                    if (overflow || textLength <= pathLength) {\n                        const textAlign = this.textStates[textKey].textAlign;\n                        const startM = (pathLength - textLength) * $6526fa4ee42dc39d$var$horizontalTextAlign(text, textAlign);\n                        const parts = (0, $f6421f31729929e6$export$153a9a17ab3e949f)(pixelCoordinates, begin, end, 2, text, startM, maxAngle, Math.abs(textScale[0]), (0, $d4aabc5c971073f1$export$915c7ba51467308f), font, cachedWidths, viewRotationFromTransform ? 0 : this.viewRotation_);\n                        drawChars: if (parts) {\n                            /** @type {Array<ReplayImageOrLabelArgs>} */ const replayImageOrLabelArgs = [];\n                            let c, cc, chars, label, part;\n                            if (strokeKey) for(c = 0, cc = parts.length; c < cc; ++c){\n                                part = parts[c]; // x, y, anchorX, rotation, chunk\n                                chars = /** @type {string} */ part[4];\n                                label = this.createLabel(chars, textKey, \"\", strokeKey);\n                                anchorX = /** @type {number} */ part[2] + (textScale[0] < 0 ? -strokeWidth : strokeWidth);\n                                anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth * textScale[1] / textScale[0] - offsetY;\n                                const dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, (0, $d4aabc5c971073f1$export$40a9eeef55665a40), false, feature);\n                                if (declutterTree && declutterTree.collides(dimensions.declutterBox)) break drawChars;\n                                replayImageOrLabelArgs.push([\n                                    context,\n                                    contextScale,\n                                    label,\n                                    dimensions,\n                                    1,\n                                    null,\n                                    null\n                                ]);\n                            }\n                            if (fillKey) for(c = 0, cc = parts.length; c < cc; ++c){\n                                part = parts[c]; // x, y, anchorX, rotation, chunk\n                                chars = /** @type {string} */ part[4];\n                                label = this.createLabel(chars, textKey, fillKey, \"\");\n                                anchorX = /** @type {number} */ part[2];\n                                anchorY = baseline * label.height - offsetY;\n                                const dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, (0, $d4aabc5c971073f1$export$40a9eeef55665a40), false, feature);\n                                if (declutterTree && declutterTree.collides(dimensions.declutterBox)) break drawChars;\n                                replayImageOrLabelArgs.push([\n                                    context,\n                                    contextScale,\n                                    label,\n                                    dimensions,\n                                    1,\n                                    null,\n                                    null\n                                ]);\n                            }\n                            if (declutterTree) declutterTree.load(replayImageOrLabelArgs.map($6526fa4ee42dc39d$var$getDeclutterBox));\n                            for(let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i)this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\n                        }\n                    }\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).END_GEOMETRY:\n                    if (featureCallback !== undefined) {\n                        feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ instruction[1];\n                        const result = featureCallback(feature, currentGeometry);\n                        if (result) return result;\n                    }\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).FILL:\n                    if (batchSize) pendingFill++;\n                    else this.fill_(context);\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).MOVE_TO_LINE_TO:\n                    d = /** @type {number} */ instruction[1];\n                    dd = /** @type {number} */ instruction[2];\n                    x = pixelCoordinates[d];\n                    y = pixelCoordinates[d + 1];\n                    roundX = x + 0.5 | 0;\n                    roundY = y + 0.5 | 0;\n                    if (roundX !== prevX || roundY !== prevY) {\n                        context.moveTo(x, y);\n                        prevX = roundX;\n                        prevY = roundY;\n                    }\n                    for(d += 2; d < dd; d += 2){\n                        x = pixelCoordinates[d];\n                        y = pixelCoordinates[d + 1];\n                        roundX = x + 0.5 | 0;\n                        roundY = y + 0.5 | 0;\n                        if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n                            context.lineTo(x, y);\n                            prevX = roundX;\n                            prevY = roundY;\n                        }\n                    }\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_FILL_STYLE:\n                    lastFillInstruction = instruction;\n                    this.alignFill_ = instruction[2];\n                    if (pendingFill) {\n                        this.fill_(context);\n                        pendingFill = 0;\n                        if (pendingStroke) {\n                            context.stroke();\n                            pendingStroke = 0;\n                        }\n                    }\n                    context.fillStyle = /** @type {import(\"../../colorlike.js\").ColorLike} */ instruction[1];\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).SET_STROKE_STYLE:\n                    lastStrokeInstruction = instruction;\n                    if (pendingStroke) {\n                        context.stroke();\n                        pendingStroke = 0;\n                    }\n                    this.setStrokeStyle_(context, /** @type {Array<*>} */ instruction);\n                    ++i;\n                    break;\n                case (0, $cf547866e052f25b$export$2e2bcd8739ae039).STROKE:\n                    if (batchSize) pendingStroke++;\n                    else context.stroke();\n                    ++i;\n                    break;\n                default:\n                    ++i;\n                    break;\n            }\n        }\n        if (pendingFill) this.fill_(context);\n        if (pendingStroke) context.stroke();\n        return undefined;\n    }\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */ execute(context, contextScale, transform, viewRotation, snapToPixel, declutterTree) {\n        this.viewRotation_ = viewRotation;\n        this.execute_(context, contextScale, transform, this.instructions, snapToPixel, undefined, undefined, declutterTree);\n    }\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\n   *     features that intersect this extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */ executeHitDetection(context, transform, viewRotation, featureCallback, hitExtent) {\n        this.viewRotation_ = viewRotation;\n        return this.execute_(context, 1, transform, this.hitDetectionInstructions, true, featureCallback, hitExtent);\n    }\n}\nvar $6526fa4ee42dc39d$export$2e2bcd8739ae039 = $6526fa4ee42dc39d$var$Executor;\n\n\n\n\n\n\n\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */ const $a34a824d875e4ea1$var$ORDER = [\n    \"Polygon\",\n    \"Circle\",\n    \"LineString\",\n    \"Image\",\n    \"Text\",\n    \"Default\"\n];\nclass $a34a824d875e4ea1$var$ExecutorGroup {\n    /**\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceed that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number} [renderBuffer] Optional rendering buffer.\n   */ constructor(maxExtent, resolution, pixelRatio, overlaps, allInstructions, renderBuffer){\n        /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */ this.maxExtent_ = maxExtent;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.overlaps_ = overlaps;\n        /**\n     * @private\n     * @type {number}\n     */ this.pixelRatio_ = pixelRatio;\n        /**\n     * @private\n     * @type {number}\n     */ this.resolution_ = resolution;\n        /**\n     * @private\n     * @type {number|undefined}\n     */ this.renderBuffer_ = renderBuffer;\n        /**\n     * @private\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Executor\").default>>}\n     */ this.executorsByZIndex_ = {};\n        /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */ this.hitDetectionContext_ = null;\n        /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */ this.hitDetectionTransform_ = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n        this.createExecutors_(allInstructions);\n    }\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */ clip(context, transform) {\n        const flatClipCoords = this.getClipCoords(transform);\n        context.beginPath();\n        context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n        context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n        context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n        context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n        context.clip();\n    }\n    /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\n   */ createExecutors_(allInstructions) {\n        for(const zIndex in allInstructions){\n            let executors = this.executorsByZIndex_[zIndex];\n            if (executors === undefined) {\n                executors = {};\n                this.executorsByZIndex_[zIndex] = executors;\n            }\n            const instructionByZindex = allInstructions[zIndex];\n            for(const builderType in instructionByZindex){\n                const instructions = instructionByZindex[builderType];\n                executors[builderType] = new (0, $6526fa4ee42dc39d$export$2e2bcd8739ae039)(this.resolution_, this.pixelRatio_, this.overlaps_, instructions);\n            }\n        }\n    }\n    /**\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */ hasExecutors(executors) {\n        for(const zIndex in this.executorsByZIndex_){\n            const candidates = this.executorsByZIndex_[zIndex];\n            for(let i = 0, ii = executors.length; i < ii; ++i){\n                if (executors[i] in candidates) return true;\n            }\n        }\n        return false;\n    }\n    /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */ forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {\n        hitTolerance = Math.round(hitTolerance);\n        const contextSize = hitTolerance * 2 + 1;\n        const transform = (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);\n        const newContext = !this.hitDetectionContext_;\n        if (newContext) this.hitDetectionContext_ = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(contextSize, contextSize, undefined, {\n            willReadFrequently: true\n        });\n        const context = this.hitDetectionContext_;\n        if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {\n            context.canvas.width = contextSize;\n            context.canvas.height = contextSize;\n        } else if (!newContext) context.clearRect(0, 0, contextSize, contextSize);\n        /**\n     * @type {import(\"../../extent.js\").Extent}\n     */ let hitExtent;\n        if (this.renderBuffer_ !== undefined) {\n            hitExtent = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n            (0, $6da4c8ed3074c92b$export$1f820e3920fa5715)(hitExtent, coordinate);\n            (0, $6da4c8ed3074c92b$export$ab1029bcae9ddb4a)(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);\n        }\n        const indexes = $a34a824d875e4ea1$export$96fc84ea21b8269f(hitTolerance);\n        let builderType;\n        /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */ function featureCallback(feature, geometry) {\n            const imageData = context.getImageData(0, 0, contextSize, contextSize).data;\n            for(let i = 0, ii = indexes.length; i < ii; i++)if (imageData[indexes[i]] > 0) {\n                if (!declutteredFeatures || builderType !== \"Image\" && builderType !== \"Text\" || declutteredFeatures.includes(feature)) {\n                    const idx = (indexes[i] - 3) / 4;\n                    const x = hitTolerance - idx % contextSize;\n                    const y = hitTolerance - (idx / contextSize | 0);\n                    const result = callback(feature, geometry, x * x + y * y);\n                    if (result) return result;\n                }\n                context.clearRect(0, 0, contextSize, contextSize);\n                break;\n            }\n            return undefined;\n        }\n        /** @type {Array<number>} */ const zs = Object.keys(this.executorsByZIndex_).map(Number);\n        zs.sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n        let i, j, executors, executor, result;\n        for(i = zs.length - 1; i >= 0; --i){\n            const zIndexKey = zs[i].toString();\n            executors = this.executorsByZIndex_[zIndexKey];\n            for(j = $a34a824d875e4ea1$var$ORDER.length - 1; j >= 0; --j){\n                builderType = $a34a824d875e4ea1$var$ORDER[j];\n                executor = executors[builderType];\n                if (executor !== undefined) {\n                    result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);\n                    if (result) return result;\n                }\n            }\n        }\n        return undefined;\n    }\n    /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @return {Array<number>|null} Clip coordinates.\n   */ getClipCoords(transform) {\n        const maxExtent = this.maxExtent_;\n        if (!maxExtent) return null;\n        const minX = maxExtent[0];\n        const minY = maxExtent[1];\n        const maxX = maxExtent[2];\n        const maxY = maxExtent[3];\n        const flatClipCoords = [\n            minX,\n            minY,\n            minX,\n            maxY,\n            maxX,\n            maxY,\n            maxX,\n            minY\n        ];\n        (0, $14c6e714516e527b$export$b92b2dedcfff79de)(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n        return flatClipCoords;\n    }\n    /**\n   * @return {boolean} Is empty.\n   */ isEmpty() {\n        return (0, $beaefe87199bb537$export$dd1bc94b04021eeb)(this.executorsByZIndex_);\n    }\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [builderTypes] Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ORDER}\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */ execute(context, contextScale, transform, viewRotation, snapToPixel, builderTypes, declutterTree) {\n        /** @type {Array<number>} */ const zs = Object.keys(this.executorsByZIndex_).map(Number);\n        zs.sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n        // setup clipping so that the parts of over-simplified geometries are not\n        // visible outside the current extent when panning\n        if (this.maxExtent_) {\n            context.save();\n            this.clip(context, transform);\n        }\n        builderTypes = builderTypes ? builderTypes : $a34a824d875e4ea1$var$ORDER;\n        let i, ii, j, jj, replays, replay;\n        if (declutterTree) zs.reverse();\n        for(i = 0, ii = zs.length; i < ii; ++i){\n            const zIndexKey = zs[i].toString();\n            replays = this.executorsByZIndex_[zIndexKey];\n            for(j = 0, jj = builderTypes.length; j < jj; ++j){\n                const builderType = builderTypes[j];\n                replay = replays[builderType];\n                if (replay !== undefined) replay.execute(context, contextScale, transform, viewRotation, snapToPixel, declutterTree);\n            }\n        }\n        if (this.maxExtent_) context.restore();\n    }\n}\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */ const $a34a824d875e4ea1$var$circlePixelIndexArrayCache = {};\nfunction $a34a824d875e4ea1$export$96fc84ea21b8269f(radius) {\n    if ($a34a824d875e4ea1$var$circlePixelIndexArrayCache[radius] !== undefined) return $a34a824d875e4ea1$var$circlePixelIndexArrayCache[radius];\n    const size = radius * 2 + 1;\n    const maxDistanceSq = radius * radius;\n    const distances = new Array(maxDistanceSq + 1);\n    for(let i = 0; i <= radius; ++i)for(let j = 0; j <= radius; ++j){\n        const distanceSq = i * i + j * j;\n        if (distanceSq > maxDistanceSq) break;\n        let distance = distances[distanceSq];\n        if (!distance) {\n            distance = [];\n            distances[distanceSq] = distance;\n        }\n        distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n        if (i > 0) distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n        if (j > 0) {\n            distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n            if (i > 0) distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n    }\n    const pixelIndex = [];\n    for(let i = 0, ii = distances.length; i < ii; ++i)if (distances[i]) pixelIndex.push(...distances[i]);\n    $a34a824d875e4ea1$var$circlePixelIndexArrayCache[radius] = pixelIndex;\n    return pixelIndex;\n}\nvar $a34a824d875e4ea1$export$2e2bcd8739ae039 = $a34a824d875e4ea1$var$ExecutorGroup;\n\n\n\n\n/**\n * @module ol/render/canvas/hitdetect\n */ /**\n * @module ol/render/canvas/Immediate\n */ // FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\n\n\n\n\n\n\n\n\n\n/**\n * @classdesc\n * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements\n * direct rendering of features and geometries to an HTML5 Canvas context.\n * Instances of this class are created internally by the library and\n * provided to application code as vectorContext member of the\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\n * render events emitted by layers and maps.\n */ class $7b0c2128a27f5020$var$CanvasImmediateRenderer extends (0, $eb0e5c3938110b4c$export$2e2bcd8739ae039) {\n    /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.\n   * @param {import(\"../../proj.js\").TransformFunction} [userTransform] Transform from user to view projection.\n   */ constructor(context, pixelRatio, extent, transform, viewRotation, squaredTolerance, userTransform){\n        super();\n        /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */ this.context_ = context;\n        /**\n     * @private\n     * @type {number}\n     */ this.pixelRatio_ = pixelRatio;\n        /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */ this.extent_ = extent;\n        /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */ this.transform_ = transform;\n        /**\n     * @private\n     * @type {number}\n     */ this.transformRotation_ = transform ? (0, $6b000a049d919fe5$export$a81f732198733497)(Math.atan2(transform[1], transform[0]), 10) : 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.viewRotation_ = viewRotation;\n        /**\n     * @private\n     * @type {number}\n     */ this.squaredTolerance_ = squaredTolerance;\n        /**\n     * @private\n     * @type {import(\"../../proj.js\").TransformFunction}\n     */ this.userTransform_ = userTransform;\n        /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */ this.contextFillState_ = null;\n        /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */ this.contextStrokeState_ = null;\n        /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */ this.contextTextState_ = null;\n        /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */ this.fillState_ = null;\n        /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */ this.strokeState_ = null;\n        /**\n     * @private\n     * @type {import('../../DataTile.js').ImageLike}\n     */ this.image_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.imageAnchorX_ = 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.imageAnchorY_ = 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.imageHeight_ = 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.imageOpacity_ = 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.imageOriginX_ = 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.imageOriginY_ = 0;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.imageRotateWithView_ = false;\n        /**\n     * @private\n     * @type {number}\n     */ this.imageRotation_ = 0;\n        /**\n     * @private\n     * @type {import(\"../../size.js\").Size}\n     */ this.imageScale_ = [\n            0,\n            0\n        ];\n        /**\n     * @private\n     * @type {number}\n     */ this.imageWidth_ = 0;\n        /**\n     * @private\n     * @type {string}\n     */ this.text_ = \"\";\n        /**\n     * @private\n     * @type {number}\n     */ this.textOffsetX_ = 0;\n        /**\n     * @private\n     * @type {number}\n     */ this.textOffsetY_ = 0;\n        /**\n     * @private\n     * @type {boolean}\n     */ this.textRotateWithView_ = false;\n        /**\n     * @private\n     * @type {number}\n     */ this.textRotation_ = 0;\n        /**\n     * @private\n     * @type {import(\"../../size.js\").Size}\n     */ this.textScale_ = [\n            0,\n            0\n        ];\n        /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */ this.textFillState_ = null;\n        /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */ this.textStrokeState_ = null;\n        /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */ this.textState_ = null;\n        /**\n     * @private\n     * @type {Array<number>}\n     */ this.pixelCoordinates_ = [];\n        /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */ this.tmpLocalTransform_ = (0, $e22e7611e69f42a9$export$185802fd694ee1f5)();\n    }\n    /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */ drawImages_(flatCoordinates, offset, end, stride) {\n        if (!this.image_) return;\n        const pixelCoordinates = (0, $14c6e714516e527b$export$b92b2dedcfff79de)(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n        const context = this.context_;\n        const localTransform = this.tmpLocalTransform_;\n        const alpha = context.globalAlpha;\n        if (this.imageOpacity_ != 1) context.globalAlpha = alpha * this.imageOpacity_;\n        let rotation = this.imageRotation_;\n        if (this.transformRotation_ === 0) rotation -= this.viewRotation_;\n        if (this.imageRotateWithView_) rotation += this.viewRotation_;\n        for(let i = 0, ii = pixelCoordinates.length; i < ii; i += 2){\n            const x = pixelCoordinates[i] - this.imageAnchorX_;\n            const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\n            if (rotation !== 0 || this.imageScale_[0] != 1 || this.imageScale_[1] != 1) {\n                const centerX = x + this.imageAnchorX_;\n                const centerY = y + this.imageAnchorY_;\n                (0, $e22e7611e69f42a9$export$f672e0b6f7222cd7)(localTransform, centerX, centerY, 1, 1, rotation, -centerX, -centerY);\n                context.save();\n                context.transform.apply(context, localTransform);\n                context.translate(centerX, centerY);\n                context.scale(this.imageScale_[0], this.imageScale_[1]);\n                context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, -this.imageAnchorX_, -this.imageAnchorY_, this.imageWidth_, this.imageHeight_);\n                context.restore();\n            } else context.drawImage(this.image_, this.imageOriginX_, this.imageOriginY_, this.imageWidth_, this.imageHeight_, x, y, this.imageWidth_, this.imageHeight_);\n        }\n        if (this.imageOpacity_ != 1) context.globalAlpha = alpha;\n    }\n    /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */ drawText_(flatCoordinates, offset, end, stride) {\n        if (!this.textState_ || this.text_ === \"\") return;\n        if (this.textFillState_) this.setContextFillState_(this.textFillState_);\n        if (this.textStrokeState_) this.setContextStrokeState_(this.textStrokeState_);\n        this.setContextTextState_(this.textState_);\n        const pixelCoordinates = (0, $14c6e714516e527b$export$b92b2dedcfff79de)(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n        const context = this.context_;\n        let rotation = this.textRotation_;\n        if (this.transformRotation_ === 0) rotation -= this.viewRotation_;\n        if (this.textRotateWithView_) rotation += this.viewRotation_;\n        for(; offset < end; offset += stride){\n            const x = pixelCoordinates[offset] + this.textOffsetX_;\n            const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\n            if (rotation !== 0 || this.textScale_[0] != 1 || this.textScale_[1] != 1) {\n                context.save();\n                context.translate(x - this.textOffsetX_, y - this.textOffsetY_);\n                context.rotate(rotation);\n                context.translate(this.textOffsetX_, this.textOffsetY_);\n                context.scale(this.textScale_[0], this.textScale_[1]);\n                if (this.textStrokeState_) context.strokeText(this.text_, 0, 0);\n                if (this.textFillState_) context.fillText(this.text_, 0, 0);\n                context.restore();\n            } else {\n                if (this.textStrokeState_) context.strokeText(this.text_, x, y);\n                if (this.textFillState_) context.fillText(this.text_, x, y);\n            }\n        }\n    }\n    /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} close Close.\n   * @private\n   * @return {number} end End.\n   */ moveToLineTo_(flatCoordinates, offset, end, stride, close) {\n        const context = this.context_;\n        const pixelCoordinates = (0, $14c6e714516e527b$export$b92b2dedcfff79de)(flatCoordinates, offset, end, stride, this.transform_, this.pixelCoordinates_);\n        context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n        let length = pixelCoordinates.length;\n        if (close) length -= 2;\n        for(let i = 2; i < length; i += 2)context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n        if (close) context.closePath();\n        return end;\n    }\n    /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */ drawRings_(flatCoordinates, offset, ends, stride) {\n        for(let i = 0, ii = ends.length; i < ii; ++i)offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, true);\n        return offset;\n    }\n    /**\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\n   * the current fill and stroke styles.\n   *\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\n   * @api\n   */ drawCircle(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/Circle.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(this.extent_, geometry.getExtent())) return;\n        if (this.fillState_ || this.strokeState_) {\n            if (this.fillState_) this.setContextFillState_(this.fillState_);\n            if (this.strokeState_) this.setContextStrokeState_(this.strokeState_);\n            const pixelCoordinates = (0, $c76e993e57efc8c4$export$a3767472617c7861)(geometry, this.transform_, this.pixelCoordinates_);\n            const dx = pixelCoordinates[2] - pixelCoordinates[0];\n            const dy = pixelCoordinates[3] - pixelCoordinates[1];\n            const radius = Math.sqrt(dx * dx + dy * dy);\n            const context = this.context_;\n            context.beginPath();\n            context.arc(pixelCoordinates[0], pixelCoordinates[1], radius, 0, 2 * Math.PI);\n            if (this.fillState_) context.fill();\n            if (this.strokeState_) context.stroke();\n        }\n        if (this.text_ !== \"\") this.drawText_(geometry.getCenter(), 0, 2, 2);\n    }\n    /**\n   * Set the rendering style.  Note that since this is an immediate rendering API,\n   * any `zIndex` on the provided style will be ignored.\n   *\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\n   * @api\n   */ setStyle(style) {\n        this.setFillStrokeStyle(style.getFill(), style.getStroke());\n        this.setImageStyle(style.getImage());\n        this.setTextStyle(style.getText());\n    }\n    /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */ setTransform(transform) {\n        this.transform_ = transform;\n    }\n    /**\n   * Render a geometry into the canvas.  Call\n   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.\n   *\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\n   * @api\n   */ drawGeometry(geometry) {\n        const type = geometry.getType();\n        switch(type){\n            case \"Point\":\n                this.drawPoint(/** @type {import(\"../../geom/Point.js\").default} */ geometry);\n                break;\n            case \"LineString\":\n                this.drawLineString(/** @type {import(\"../../geom/LineString.js\").default} */ geometry);\n                break;\n            case \"Polygon\":\n                this.drawPolygon(/** @type {import(\"../../geom/Polygon.js\").default} */ geometry);\n                break;\n            case \"MultiPoint\":\n                this.drawMultiPoint(/** @type {import(\"../../geom/MultiPoint.js\").default} */ geometry);\n                break;\n            case \"MultiLineString\":\n                this.drawMultiLineString(/** @type {import(\"../../geom/MultiLineString.js\").default} */ geometry);\n                break;\n            case \"MultiPolygon\":\n                this.drawMultiPolygon(/** @type {import(\"../../geom/MultiPolygon.js\").default} */ geometry);\n                break;\n            case \"GeometryCollection\":\n                this.drawGeometryCollection(/** @type {import(\"../../geom/GeometryCollection.js\").default} */ geometry);\n                break;\n            case \"Circle\":\n                this.drawCircle(/** @type {import(\"../../geom/Circle.js\").default} */ geometry);\n                break;\n            default:\n        }\n    }\n    /**\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\n   * style will be ignored - features are rendered immediately in the order that\n   * this method is called.  If you need `zIndex` support, you should be using an\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\n   *\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {import(\"../../style/Style.js\").default} style Style.\n   * @api\n   */ drawFeature(feature, style) {\n        const geometry = style.getGeometryFunction()(feature);\n        if (!geometry) return;\n        this.setStyle(style);\n        this.drawGeometry(geometry);\n    }\n    /**\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\n   * uses the current styles appropriate for each geometry in the collection.\n   *\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\n   */ drawGeometryCollection(geometry) {\n        const geometries = geometry.getGeometriesArray();\n        for(let i = 0, ii = geometries.length; i < ii; ++i)this.drawGeometry(geometries[i]);\n    }\n    /**\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\n   */ drawPoint(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/Point.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        const flatCoordinates = geometry.getFlatCoordinates();\n        const stride = geometry.getStride();\n        if (this.image_) this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n        if (this.text_ !== \"\") this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    /**\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\n   * uses the current style.\n   *\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\n   */ drawMultiPoint(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/MultiPoint.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        const flatCoordinates = geometry.getFlatCoordinates();\n        const stride = geometry.getStride();\n        if (this.image_) this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n        if (this.text_ !== \"\") this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    /**\n   * Render a LineString into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\n   */ drawLineString(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/LineString.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(this.extent_, geometry.getExtent())) return;\n        if (this.strokeState_) {\n            this.setContextStrokeState_(this.strokeState_);\n            const context = this.context_;\n            const flatCoordinates = geometry.getFlatCoordinates();\n            context.beginPath();\n            this.moveToLineTo_(flatCoordinates, 0, flatCoordinates.length, geometry.getStride(), false);\n            context.stroke();\n        }\n        if (this.text_ !== \"\") {\n            const flatMidpoint = geometry.getFlatMidpoint();\n            this.drawText_(flatMidpoint, 0, 2, 2);\n        }\n    }\n    /**\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\n   * and uses the current style.\n   *\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\n   */ drawMultiLineString(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/MultiLineString.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        const geometryExtent = geometry.getExtent();\n        if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(this.extent_, geometryExtent)) return;\n        if (this.strokeState_) {\n            this.setContextStrokeState_(this.strokeState_);\n            const context = this.context_;\n            const flatCoordinates = geometry.getFlatCoordinates();\n            let offset = 0;\n            const ends = /** @type {Array<number>} */ geometry.getEnds();\n            const stride = geometry.getStride();\n            context.beginPath();\n            for(let i = 0, ii = ends.length; i < ii; ++i)offset = this.moveToLineTo_(flatCoordinates, offset, ends[i], stride, false);\n            context.stroke();\n        }\n        if (this.text_ !== \"\") {\n            const flatMidpoints = geometry.getFlatMidpoints();\n            this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n        }\n    }\n    /**\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\n   */ drawPolygon(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/Polygon.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(this.extent_, geometry.getExtent())) return;\n        if (this.strokeState_ || this.fillState_) {\n            if (this.fillState_) this.setContextFillState_(this.fillState_);\n            if (this.strokeState_) this.setContextStrokeState_(this.strokeState_);\n            const context = this.context_;\n            context.beginPath();\n            this.drawRings_(geometry.getOrientedFlatCoordinates(), 0, /** @type {Array<number>} */ geometry.getEnds(), geometry.getStride());\n            if (this.fillState_) context.fill();\n            if (this.strokeState_) context.stroke();\n        }\n        if (this.text_ !== \"\") {\n            const flatInteriorPoint = geometry.getFlatInteriorPoint();\n            this.drawText_(flatInteriorPoint, 0, 2, 2);\n        }\n    }\n    /**\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\n   * uses the current style.\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   */ drawMultiPolygon(geometry) {\n        if (this.squaredTolerance_) geometry = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ geometry.simplifyTransformed(this.squaredTolerance_, this.userTransform_);\n        if (!(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(this.extent_, geometry.getExtent())) return;\n        if (this.strokeState_ || this.fillState_) {\n            if (this.fillState_) this.setContextFillState_(this.fillState_);\n            if (this.strokeState_) this.setContextStrokeState_(this.strokeState_);\n            const context = this.context_;\n            const flatCoordinates = geometry.getOrientedFlatCoordinates();\n            let offset = 0;\n            const endss = geometry.getEndss();\n            const stride = geometry.getStride();\n            context.beginPath();\n            for(let i = 0, ii = endss.length; i < ii; ++i){\n                const ends = endss[i];\n                offset = this.drawRings_(flatCoordinates, offset, ends, stride);\n            }\n            if (this.fillState_) context.fill();\n            if (this.strokeState_) context.stroke();\n        }\n        if (this.text_ !== \"\") {\n            const flatInteriorPoints = geometry.getFlatInteriorPoints();\n            this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n        }\n    }\n    /**\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\n   * @private\n   */ setContextFillState_(fillState) {\n        const context = this.context_;\n        const contextFillState = this.contextFillState_;\n        if (!contextFillState) {\n            context.fillStyle = fillState.fillStyle;\n            this.contextFillState_ = {\n                fillStyle: fillState.fillStyle\n            };\n        } else if (contextFillState.fillStyle != fillState.fillStyle) {\n            contextFillState.fillStyle = fillState.fillStyle;\n            context.fillStyle = fillState.fillStyle;\n        }\n    }\n    /**\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\n   * @private\n   */ setContextStrokeState_(strokeState) {\n        const context = this.context_;\n        const contextStrokeState = this.contextStrokeState_;\n        if (!contextStrokeState) {\n            context.lineCap = strokeState.lineCap;\n            context.setLineDash(strokeState.lineDash);\n            context.lineDashOffset = strokeState.lineDashOffset;\n            context.lineJoin = strokeState.lineJoin;\n            context.lineWidth = strokeState.lineWidth;\n            context.miterLimit = strokeState.miterLimit;\n            context.strokeStyle = strokeState.strokeStyle;\n            this.contextStrokeState_ = {\n                lineCap: strokeState.lineCap,\n                lineDash: strokeState.lineDash,\n                lineDashOffset: strokeState.lineDashOffset,\n                lineJoin: strokeState.lineJoin,\n                lineWidth: strokeState.lineWidth,\n                miterLimit: strokeState.miterLimit,\n                strokeStyle: strokeState.strokeStyle\n            };\n        } else {\n            if (contextStrokeState.lineCap != strokeState.lineCap) {\n                contextStrokeState.lineCap = strokeState.lineCap;\n                context.lineCap = strokeState.lineCap;\n            }\n            if (!(0, $b998d41b678ed5d1$export$e9bab7fafb253603)(contextStrokeState.lineDash, strokeState.lineDash)) context.setLineDash(contextStrokeState.lineDash = strokeState.lineDash);\n            if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n                contextStrokeState.lineDashOffset = strokeState.lineDashOffset;\n                context.lineDashOffset = strokeState.lineDashOffset;\n            }\n            if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n                contextStrokeState.lineJoin = strokeState.lineJoin;\n                context.lineJoin = strokeState.lineJoin;\n            }\n            if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n                contextStrokeState.lineWidth = strokeState.lineWidth;\n                context.lineWidth = strokeState.lineWidth;\n            }\n            if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n                contextStrokeState.miterLimit = strokeState.miterLimit;\n                context.miterLimit = strokeState.miterLimit;\n            }\n            if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n                contextStrokeState.strokeStyle = strokeState.strokeStyle;\n                context.strokeStyle = strokeState.strokeStyle;\n            }\n        }\n    }\n    /**\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\n   * @private\n   */ setContextTextState_(textState) {\n        const context = this.context_;\n        const contextTextState = this.contextTextState_;\n        const textAlign = textState.textAlign ? textState.textAlign : (0, $d4aabc5c971073f1$export$94d53b95641b5766);\n        if (!contextTextState) {\n            context.font = textState.font;\n            context.textAlign = textAlign;\n            context.textBaseline = textState.textBaseline;\n            this.contextTextState_ = {\n                font: textState.font,\n                textAlign: textAlign,\n                textBaseline: textState.textBaseline\n            };\n        } else {\n            if (contextTextState.font != textState.font) {\n                contextTextState.font = textState.font;\n                context.font = textState.font;\n            }\n            if (contextTextState.textAlign != textAlign) {\n                contextTextState.textAlign = textAlign;\n                context.textAlign = textAlign;\n            }\n            if (contextTextState.textBaseline != textState.textBaseline) {\n                contextTextState.textBaseline = textState.textBaseline;\n                context.textBaseline = textState.textBaseline;\n            }\n        }\n    }\n    /**\n   * Set the fill and stroke style for subsequent draw operations.  To clear\n   * either fill or stroke styles, pass null for the appropriate parameter.\n   *\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   */ setFillStrokeStyle(fillStyle, strokeStyle) {\n        if (!fillStyle) this.fillState_ = null;\n        else {\n            const fillStyleColor = fillStyle.getColor();\n            this.fillState_ = {\n                fillStyle: (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(fillStyleColor ? fillStyleColor : (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2))\n            };\n        }\n        if (!strokeStyle) this.strokeState_ = null;\n        else {\n            const strokeStyleColor = strokeStyle.getColor();\n            const strokeStyleLineCap = strokeStyle.getLineCap();\n            const strokeStyleLineDash = strokeStyle.getLineDash();\n            const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n            const strokeStyleLineJoin = strokeStyle.getLineJoin();\n            const strokeStyleWidth = strokeStyle.getWidth();\n            const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n            const lineDash = strokeStyleLineDash ? strokeStyleLineDash : (0, $d4aabc5c971073f1$export$e21b4112fdc612fc);\n            this.strokeState_ = {\n                lineCap: strokeStyleLineCap !== undefined ? strokeStyleLineCap : (0, $d4aabc5c971073f1$export$17bd0c38d6ae694e),\n                lineDash: this.pixelRatio_ === 1 ? lineDash : lineDash.map((n)=>n * this.pixelRatio_),\n                lineDashOffset: (strokeStyleLineDashOffset ? strokeStyleLineDashOffset : (0, $d4aabc5c971073f1$export$e06efc2409049f76)) * this.pixelRatio_,\n                lineJoin: strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : (0, $d4aabc5c971073f1$export$365eb9648cf19bd0),\n                lineWidth: (strokeStyleWidth !== undefined ? strokeStyleWidth : (0, $d4aabc5c971073f1$export$79661f132c62010e)) * this.pixelRatio_,\n                miterLimit: strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : (0, $d4aabc5c971073f1$export$80c1c01844597b7b),\n                strokeStyle: (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(strokeStyleColor ? strokeStyleColor : (0, $d4aabc5c971073f1$export$1eb2eaecacf2031e))\n            };\n        }\n    }\n    /**\n   * Set the image style for subsequent draw operations.  Pass null to remove\n   * the image style.\n   *\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\n   */ setImageStyle(imageStyle) {\n        let imageSize;\n        if (!imageStyle || !(imageSize = imageStyle.getSize())) {\n            this.image_ = null;\n            return;\n        }\n        const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);\n        const imageAnchor = imageStyle.getAnchor();\n        const imageOrigin = imageStyle.getOrigin();\n        this.image_ = imageStyle.getImage(this.pixelRatio_);\n        this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;\n        this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;\n        this.imageHeight_ = imageSize[1] * imagePixelRatio;\n        this.imageOpacity_ = imageStyle.getOpacity();\n        this.imageOriginX_ = imageOrigin[0];\n        this.imageOriginY_ = imageOrigin[1];\n        this.imageRotateWithView_ = imageStyle.getRotateWithView();\n        this.imageRotation_ = imageStyle.getRotation();\n        const imageScale = imageStyle.getScaleArray();\n        this.imageScale_ = [\n            imageScale[0] * this.pixelRatio_ / imagePixelRatio,\n            imageScale[1] * this.pixelRatio_ / imagePixelRatio\n        ];\n        this.imageWidth_ = imageSize[0] * imagePixelRatio;\n    }\n    /**\n   * Set the text style for subsequent draw operations.  Pass null to\n   * remove the text style.\n   *\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   */ setTextStyle(textStyle) {\n        if (!textStyle) this.text_ = \"\";\n        else {\n            const textFillStyle = textStyle.getFill();\n            if (!textFillStyle) this.textFillState_ = null;\n            else {\n                const textFillStyleColor = textFillStyle.getColor();\n                this.textFillState_ = {\n                    fillStyle: (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(textFillStyleColor ? textFillStyleColor : (0, $d4aabc5c971073f1$export$c495d52ee3fd74b2))\n                };\n            }\n            const textStrokeStyle = textStyle.getStroke();\n            if (!textStrokeStyle) this.textStrokeState_ = null;\n            else {\n                const textStrokeStyleColor = textStrokeStyle.getColor();\n                const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n                const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n                const textStrokeStyleLineDashOffset = textStrokeStyle.getLineDashOffset();\n                const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n                const textStrokeStyleWidth = textStrokeStyle.getWidth();\n                const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n                this.textStrokeState_ = {\n                    lineCap: textStrokeStyleLineCap !== undefined ? textStrokeStyleLineCap : (0, $d4aabc5c971073f1$export$17bd0c38d6ae694e),\n                    lineDash: textStrokeStyleLineDash ? textStrokeStyleLineDash : (0, $d4aabc5c971073f1$export$e21b4112fdc612fc),\n                    lineDashOffset: textStrokeStyleLineDashOffset ? textStrokeStyleLineDashOffset : (0, $d4aabc5c971073f1$export$e06efc2409049f76),\n                    lineJoin: textStrokeStyleLineJoin !== undefined ? textStrokeStyleLineJoin : (0, $d4aabc5c971073f1$export$365eb9648cf19bd0),\n                    lineWidth: textStrokeStyleWidth !== undefined ? textStrokeStyleWidth : (0, $d4aabc5c971073f1$export$79661f132c62010e),\n                    miterLimit: textStrokeStyleMiterLimit !== undefined ? textStrokeStyleMiterLimit : (0, $d4aabc5c971073f1$export$80c1c01844597b7b),\n                    strokeStyle: (0, $e0807f400ec9a0a9$export$dc5b1400ac3a10a8)(textStrokeStyleColor ? textStrokeStyleColor : (0, $d4aabc5c971073f1$export$1eb2eaecacf2031e))\n                };\n            }\n            const textFont = textStyle.getFont();\n            const textOffsetX = textStyle.getOffsetX();\n            const textOffsetY = textStyle.getOffsetY();\n            const textRotateWithView = textStyle.getRotateWithView();\n            const textRotation = textStyle.getRotation();\n            const textScale = textStyle.getScaleArray();\n            const textText = textStyle.getText();\n            const textTextAlign = textStyle.getTextAlign();\n            const textTextBaseline = textStyle.getTextBaseline();\n            this.textState_ = {\n                font: textFont !== undefined ? textFont : (0, $d4aabc5c971073f1$export$3847dfea4f8d4dfa),\n                textAlign: textTextAlign !== undefined ? textTextAlign : (0, $d4aabc5c971073f1$export$94d53b95641b5766),\n                textBaseline: textTextBaseline !== undefined ? textTextBaseline : (0, $d4aabc5c971073f1$export$cf2279a1bff62eb)\n            };\n            this.text_ = textText !== undefined ? Array.isArray(textText) ? textText.reduce((acc, t, i)=>acc += i % 2 ? \" \" : t, \"\") : textText : \"\";\n            this.textOffsetX_ = textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\n            this.textOffsetY_ = textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\n            this.textRotateWithView_ = textRotateWithView !== undefined ? textRotateWithView : false;\n            this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n            this.textScale_ = [\n                this.pixelRatio_ * textScale[0],\n                this.pixelRatio_ * textScale[1]\n            ];\n        }\n    }\n}\nvar $7b0c2128a27f5020$export$2e2bcd8739ae039 = $7b0c2128a27f5020$var$CanvasImmediateRenderer;\n\n\n\n\n\n\n\nconst $13dfa0283bf5c35f$export$ab51038298418f25 = 0.5;\nfunction $13dfa0283bf5c35f$export$bd05e394339d469(size, transforms, features, styleFunction, extent, resolution, rotation) {\n    const width = size[0] * $13dfa0283bf5c35f$export$ab51038298418f25;\n    const height = size[1] * $13dfa0283bf5c35f$export$ab51038298418f25;\n    const context = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(width, height);\n    context.imageSmoothingEnabled = false;\n    const canvas = context.canvas;\n    const renderer = new (0, $7b0c2128a27f5020$export$2e2bcd8739ae039)(context, $13dfa0283bf5c35f$export$ab51038298418f25, extent, null, rotation);\n    const featureCount = features.length;\n    // Stretch hit detection index to use the whole available color range\n    const indexFactor = Math.floor(16777215 / featureCount);\n    const featuresByZIndex = {};\n    for(let i = 1; i <= featureCount; ++i){\n        const feature = features[i - 1];\n        const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n        if (!featureStyleFunction) continue;\n        let styles = featureStyleFunction(feature, resolution);\n        if (!styles) continue;\n        if (!Array.isArray(styles)) styles = [\n            styles\n        ];\n        const index = i * indexFactor;\n        const color = index.toString(16).padStart(7, \"#00000\");\n        for(let j = 0, jj = styles.length; j < jj; ++j){\n            const originalStyle = styles[j];\n            const geometry = originalStyle.getGeometryFunction()(feature);\n            if (!geometry || !(0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(extent, geometry.getExtent())) continue;\n            const style = originalStyle.clone();\n            const fill = style.getFill();\n            if (fill) fill.setColor(color);\n            const stroke = style.getStroke();\n            if (stroke) {\n                stroke.setColor(color);\n                stroke.setLineDash(null);\n            }\n            style.setText(undefined);\n            const image = originalStyle.getImage();\n            if (image) {\n                const imgSize = image.getImageSize();\n                if (!imgSize) continue;\n                const imgContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(imgSize[0], imgSize[1], undefined, {\n                    alpha: false\n                });\n                const img = imgContext.canvas;\n                imgContext.fillStyle = color;\n                imgContext.fillRect(0, 0, img.width, img.height);\n                style.setImage(new (0, $8463d325b53eeb0c$export$2e2bcd8739ae039)({\n                    img: img,\n                    anchor: image.getAnchor(),\n                    anchorXUnits: \"pixels\",\n                    anchorYUnits: \"pixels\",\n                    offset: image.getOrigin(),\n                    opacity: 1,\n                    size: image.getSize(),\n                    scale: image.getScale(),\n                    rotation: image.getRotation(),\n                    rotateWithView: image.getRotateWithView()\n                }));\n            }\n            const zIndex = style.getZIndex() || 0;\n            let byGeometryType = featuresByZIndex[zIndex];\n            if (!byGeometryType) {\n                byGeometryType = {};\n                featuresByZIndex[zIndex] = byGeometryType;\n                byGeometryType[\"Polygon\"] = [];\n                byGeometryType[\"Circle\"] = [];\n                byGeometryType[\"LineString\"] = [];\n                byGeometryType[\"Point\"] = [];\n            }\n            const type = geometry.getType();\n            if (type === \"GeometryCollection\") {\n                const geometries = /** @type {import(\"../../geom/GeometryCollection.js\").default} */ geometry.getGeometriesArrayRecursive();\n                for(let i = 0, ii = geometries.length; i < ii; ++i){\n                    const geometry = geometries[i];\n                    byGeometryType[geometry.getType().replace(\"Multi\", \"\")].push(geometry, style);\n                }\n            } else byGeometryType[type.replace(\"Multi\", \"\")].push(geometry, style);\n        }\n    }\n    const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort((0, $b998d41b678ed5d1$export$fcb633242ef15540));\n    for(let i = 0, ii = zIndexKeys.length; i < ii; ++i){\n        const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n        for(const type in byGeometryType){\n            const geomAndStyle = byGeometryType[type];\n            for(let j = 0, jj = geomAndStyle.length; j < jj; j += 2){\n                renderer.setStyle(geomAndStyle[j + 1]);\n                for(let k = 0, kk = transforms.length; k < kk; ++k){\n                    renderer.setTransform(transforms[k]);\n                    renderer.drawGeometry(geomAndStyle[j]);\n                }\n            }\n        }\n    }\n    return context.getImageData(0, 0, canvas.width, canvas.height);\n}\nfunction $13dfa0283bf5c35f$export$6d4d555ddbfffa32(pixel, features, imageData) {\n    const resultFeatures = [];\n    if (imageData) {\n        const x = Math.floor(Math.round(pixel[0]) * $13dfa0283bf5c35f$export$ab51038298418f25);\n        const y = Math.floor(Math.round(pixel[1]) * $13dfa0283bf5c35f$export$ab51038298418f25);\n        // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n        // for browsers returning coordinates slightly larger than the actual canvas size\n        // due to a non-integer pixel ratio.\n        const index = ((0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(x, 0, imageData.width - 1) + (0, $6b000a049d919fe5$export$7d15b64cf5a3a4c4)(y, 0, imageData.height - 1) * imageData.width) * 4;\n        const r = imageData.data[index];\n        const g = imageData.data[index + 1];\n        const b = imageData.data[index + 2];\n        const i = b + 256 * (g + 256 * r);\n        const indexFactor = Math.floor(16777215 / features.length);\n        if (i && i % indexFactor === 0) resultFeatures.push(features[i / indexFactor - 1]);\n    }\n    // @ts-ignore Features are copied from `features` to `resultFeatures` so the type should be the same\n    return resultFeatures;\n}\n\n\n\n\n\n/**\n * @module ol/renderer/vector\n */ \n\n/**\n * Feature callback. The callback will be called with three arguments. The first\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\n * @template T\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */ /**\n * Tolerance for geometry simplification in device pixels.\n * @type {number}\n */ const $4b9ac454600c05d2$var$SIMPLIFY_TOLERANCE = 0.5;\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type,\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\n *                         import(\"../style/Style.js\").default, Object): void>}\n */ const $4b9ac454600c05d2$var$GEOMETRY_RENDERERS = {\n    \"Point\": $4b9ac454600c05d2$var$renderPointGeometry,\n    \"LineString\": $4b9ac454600c05d2$var$renderLineStringGeometry,\n    \"Polygon\": $4b9ac454600c05d2$var$renderPolygonGeometry,\n    \"MultiPoint\": $4b9ac454600c05d2$var$renderMultiPointGeometry,\n    \"MultiLineString\": $4b9ac454600c05d2$var$renderMultiLineStringGeometry,\n    \"MultiPolygon\": $4b9ac454600c05d2$var$renderMultiPolygonGeometry,\n    \"GeometryCollection\": $4b9ac454600c05d2$var$renderGeometryCollectionGeometry,\n    \"Circle\": $4b9ac454600c05d2$var$renderCircleGeometry\n};\nfunction $4b9ac454600c05d2$export$531ddd8416d52dfc(feature1, feature2) {\n    return parseInt((0, $6c5e11070e371322$export$5e82334337e0f204)(feature1), 10) - parseInt((0, $6c5e11070e371322$export$5e82334337e0f204)(feature2), 10);\n}\nfunction $4b9ac454600c05d2$export$75084a70d324c1e6(resolution, pixelRatio) {\n    const tolerance = $4b9ac454600c05d2$export$bdacc5b475012edb(resolution, pixelRatio);\n    return tolerance * tolerance;\n}\nfunction $4b9ac454600c05d2$export$bdacc5b475012edb(resolution, pixelRatio) {\n    return $4b9ac454600c05d2$var$SIMPLIFY_TOLERANCE * resolution / pixelRatio;\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */ function $4b9ac454600c05d2$var$renderCircleGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {\n    const fillStyle = style.getFill();\n    const strokeStyle = style.getStroke();\n    if (fillStyle || strokeStyle) {\n        const circleReplay = builderGroup.getBuilder(style.getZIndex(), \"Circle\");\n        circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        circleReplay.drawCircle(geometry, feature);\n    }\n    const textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), \"Text\");\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\nfunction $4b9ac454600c05d2$export$36f470a33a42f413(replayGroup, feature, style, squaredTolerance, listener, transform, declutterBuilderGroup) {\n    let loading = false;\n    const imageStyle = style.getImage();\n    if (imageStyle) {\n        const imageState = imageStyle.getImageState();\n        if (imageState == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED || imageState == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).ERROR) imageStyle.unlistenImageChange(listener);\n        else {\n            if (imageState == (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).IDLE) imageStyle.load();\n            imageStyle.listenImageChange(listener);\n            loading = true;\n        }\n    }\n    $4b9ac454600c05d2$var$renderFeatureInternal(replayGroup, feature, style, squaredTolerance, transform, declutterBuilderGroup);\n    return loading;\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */ function $4b9ac454600c05d2$var$renderFeatureInternal(replayGroup, feature, style, squaredTolerance, transform, declutterBuilderGroup) {\n    const geometry = style.getGeometryFunction()(feature);\n    if (!geometry) return;\n    const simplifiedGeometry = geometry.simplifyTransformed(squaredTolerance, transform);\n    const renderer = style.getRenderer();\n    if (renderer) $4b9ac454600c05d2$var$renderGeometry(replayGroup, simplifiedGeometry, style, feature);\n    else {\n        const geometryRenderer = $4b9ac454600c05d2$var$GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\n        geometryRenderer(replayGroup, simplifiedGeometry, style, feature, declutterBuilderGroup);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */ function $4b9ac454600c05d2$var$renderGeometry(replayGroup, geometry, style, feature) {\n    if (geometry.getType() == \"GeometryCollection\") {\n        const geometries = /** @type {import(\"../geom/GeometryCollection.js\").default} */ geometry.getGeometries();\n        for(let i = 0, ii = geometries.length; i < ii; ++i)$4b9ac454600c05d2$var$renderGeometry(replayGroup, geometries[i], style, feature);\n        return;\n    }\n    const replay = replayGroup.getBuilder(style.getZIndex(), \"Default\");\n    replay.drawCustom(/** @type {import(\"../geom/SimpleGeometry.js\").default} */ geometry, feature, style.getRenderer(), style.getHitDetectionRenderer());\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */ function $4b9ac454600c05d2$var$renderGeometryCollectionGeometry(replayGroup, geometry, style, feature, declutterBuilderGroup) {\n    const geometries = geometry.getGeometriesArray();\n    let i, ii;\n    for(i = 0, ii = geometries.length; i < ii; ++i){\n        const geometryRenderer = $4b9ac454600c05d2$var$GEOMETRY_RENDERERS[geometries[i].getType()];\n        geometryRenderer(replayGroup, geometries[i], style, feature, declutterBuilderGroup);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */ function $4b9ac454600c05d2$var$renderLineStringGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {\n    const strokeStyle = style.getStroke();\n    if (strokeStyle) {\n        const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), \"LineString\");\n        lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n        lineStringReplay.drawLineString(geometry, feature);\n    }\n    const textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), \"Text\");\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */ function $4b9ac454600c05d2$var$renderMultiLineStringGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {\n    const strokeStyle = style.getStroke();\n    if (strokeStyle) {\n        const lineStringReplay = builderGroup.getBuilder(style.getZIndex(), \"LineString\");\n        lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n        lineStringReplay.drawMultiLineString(geometry, feature);\n    }\n    const textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), \"Text\");\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */ function $4b9ac454600c05d2$var$renderMultiPolygonGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {\n    const fillStyle = style.getFill();\n    const strokeStyle = style.getStroke();\n    if (strokeStyle || fillStyle) {\n        const polygonReplay = builderGroup.getBuilder(style.getZIndex(), \"Polygon\");\n        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        polygonReplay.drawMultiPolygon(geometry, feature);\n    }\n    const textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), \"Text\");\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */ function $4b9ac454600c05d2$var$renderPointGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {\n    const imageStyle = style.getImage();\n    const textStyle = style.getText();\n    /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */ let declutterImageWithText;\n    if (imageStyle) {\n        if (imageStyle.getImageState() != (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) return;\n        let imageBuilderGroup = builderGroup;\n        if (declutterBuilderGroup) {\n            const declutterMode = imageStyle.getDeclutterMode();\n            if (declutterMode !== \"none\") {\n                imageBuilderGroup = declutterBuilderGroup;\n                if (declutterMode === \"obstacle\") {\n                    // draw in non-declutter group:\n                    const imageReplay = builderGroup.getBuilder(style.getZIndex(), \"Image\");\n                    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n                    imageReplay.drawPoint(geometry, feature);\n                } else if (textStyle && textStyle.getText()) declutterImageWithText = {};\n            }\n        }\n        const imageReplay = imageBuilderGroup.getBuilder(style.getZIndex(), \"Image\");\n        imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n        imageReplay.drawPoint(geometry, feature);\n    }\n    if (textStyle && textStyle.getText()) {\n        let textBuilderGroup = builderGroup;\n        if (declutterBuilderGroup) textBuilderGroup = declutterBuilderGroup;\n        const textReplay = textBuilderGroup.getBuilder(style.getZIndex(), \"Text\");\n        textReplay.setTextStyle(textStyle, declutterImageWithText);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */ function $4b9ac454600c05d2$var$renderMultiPointGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {\n    const imageStyle = style.getImage();\n    const textStyle = style.getText();\n    /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */ let declutterImageWithText;\n    if (imageStyle) {\n        if (imageStyle.getImageState() != (0, $7eb75c96a6b6f2c6$export$2e2bcd8739ae039).LOADED) return;\n        let imageBuilderGroup = builderGroup;\n        if (declutterBuilderGroup) {\n            const declutterMode = imageStyle.getDeclutterMode();\n            if (declutterMode !== \"none\") {\n                imageBuilderGroup = declutterBuilderGroup;\n                if (declutterMode === \"obstacle\") {\n                    // draw in non-declutter group:\n                    const imageReplay = builderGroup.getBuilder(style.getZIndex(), \"Image\");\n                    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n                    imageReplay.drawMultiPoint(geometry, feature);\n                } else if (textStyle && textStyle.getText()) declutterImageWithText = {};\n            }\n        }\n        const imageReplay = imageBuilderGroup.getBuilder(style.getZIndex(), \"Image\");\n        imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n        imageReplay.drawMultiPoint(geometry, feature);\n    }\n    if (textStyle && textStyle.getText()) {\n        let textBuilderGroup = builderGroup;\n        if (declutterBuilderGroup) textBuilderGroup = declutterBuilderGroup;\n        const textReplay = textBuilderGroup.getBuilder(style.getZIndex(), \"Text\");\n        textReplay.setTextStyle(textStyle, declutterImageWithText);\n        textReplay.drawText(geometry, feature);\n    }\n}\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */ function $4b9ac454600c05d2$var$renderPolygonGeometry(builderGroup, geometry, style, feature, declutterBuilderGroup) {\n    const fillStyle = style.getFill();\n    const strokeStyle = style.getStroke();\n    if (fillStyle || strokeStyle) {\n        const polygonReplay = builderGroup.getBuilder(style.getZIndex(), \"Polygon\");\n        polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n        polygonReplay.drawPolygon(geometry, feature);\n    }\n    const textStyle = style.getText();\n    if (textStyle && textStyle.getText()) {\n        const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(style.getZIndex(), \"Text\");\n        textReplay.setTextStyle(textStyle);\n        textReplay.drawText(geometry, feature);\n    }\n}\n\n\n\n\n\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */ class $659e0e97392a5f5e$var$CanvasVectorLayerRenderer extends (0, $42152f52b26b6ca7$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */ constructor(vectorLayer){\n        super(vectorLayer);\n        /** @private */ this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n        /**\n     * @type {boolean}\n     */ this.animatingOrInteracting_;\n        /**\n     * @type {ImageData|null}\n     */ this.hitDetectionImageData_ = null;\n        /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */ this.renderedFeatures_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.renderedRevision_ = -1;\n        /**\n     * @private\n     * @type {number}\n     */ this.renderedResolution_ = NaN;\n        /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */ this.renderedExtent_ = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */ this.wrappedRenderedExtent_ = (0, $6da4c8ed3074c92b$export$fe201bb3bbe031e9)();\n        /**\n     * @private\n     * @type {number}\n     */ this.renderedRotation_;\n        /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */ this.renderedCenter_ = null;\n        /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */ this.renderedProjection_ = null;\n        /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */ this.renderedRenderOrder_ = null;\n        /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */ this.replayGroup_ = null;\n        /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */ this.replayGroupChanged = true;\n        /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */ this.declutterExecutorGroup = null;\n        /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */ this.clipping = true;\n        /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */ this.compositionContext_ = null;\n        /**\n     * @private\n     * @type {number}\n     */ this.opacity_ = 1;\n    }\n    /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */ renderWorlds(executorGroup, frameState, declutterTree) {\n        const extent = frameState.extent;\n        const viewState = frameState.viewState;\n        const center = viewState.center;\n        const resolution = viewState.resolution;\n        const projection = viewState.projection;\n        const rotation = viewState.rotation;\n        const projectionExtent = projection.getExtent();\n        const vectorSource = this.getLayer().getSource();\n        const pixelRatio = frameState.pixelRatio;\n        const viewHints = frameState.viewHints;\n        const snapToPixel = !(viewHints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING] || viewHints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING]);\n        const context = this.compositionContext_;\n        const width = Math.round(frameState.size[0] * pixelRatio);\n        const height = Math.round(frameState.size[1] * pixelRatio);\n        const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n        const worldWidth = multiWorld ? (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent) : null;\n        const endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n        let world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n        do {\n            const transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n            executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, declutterTree);\n        }while (++world < endWorld);\n    }\n    setupCompositionContext_() {\n        if (this.opacity_ !== 1) {\n            const compositionContext = (0, $075f937d7366f1a2$export$9e05d10eae75c464)(this.context.canvas.width, this.context.canvas.height, (0, $42152f52b26b6ca7$export$a166f0857c555517));\n            this.compositionContext_ = compositionContext;\n        } else this.compositionContext_ = this.context;\n    }\n    releaseCompositionContext_() {\n        if (this.opacity_ !== 1) {\n            const alpha = this.context.globalAlpha;\n            this.context.globalAlpha = this.opacity_;\n            this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n            this.context.globalAlpha = alpha;\n            (0, $075f937d7366f1a2$export$e918ac6a1026a12a)(this.compositionContext_);\n            (0, $42152f52b26b6ca7$export$a166f0857c555517).push(this.compositionContext_.canvas);\n            this.compositionContext_ = null;\n        }\n    }\n    /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */ renderDeclutter(frameState) {\n        if (this.declutterExecutorGroup) {\n            this.setupCompositionContext_();\n            this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n            this.releaseCompositionContext_();\n        }\n    }\n    /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement|null} target Target that may be used to render content to.\n   * @return {HTMLElement|null} The rendered element.\n   */ renderFrame(frameState, target) {\n        const pixelRatio = frameState.pixelRatio;\n        const layerState = frameState.layerStatesArray[frameState.layerIndex];\n        // set forward and inverse pixel transforms\n        (0, $e22e7611e69f42a9$export$3e4e33ea14aeb531)(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n        (0, $e22e7611e69f42a9$export$bd70ea2a93c0fa4)(this.inversePixelTransform, this.pixelTransform);\n        const canvasTransform = (0, $e22e7611e69f42a9$export$f84e8e69fd4488a5)(this.pixelTransform);\n        this.useContainer(target, canvasTransform, this.getBackground(frameState));\n        const context = this.context;\n        const canvas = context.canvas;\n        const replayGroup = this.replayGroup_;\n        const declutterExecutorGroup = this.declutterExecutorGroup;\n        let render = replayGroup && !replayGroup.isEmpty() || declutterExecutorGroup && !declutterExecutorGroup.isEmpty();\n        if (!render) {\n            const hasRenderListeners = this.getLayer().hasListener((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).PRERENDER) || this.getLayer().hasListener((0, $f5e92a4d985a2824$export$2e2bcd8739ae039).POSTRENDER);\n            if (!hasRenderListeners) return null;\n        }\n        // resize and clear\n        const width = Math.round(frameState.size[0] * pixelRatio);\n        const height = Math.round(frameState.size[1] * pixelRatio);\n        if (canvas.width != width || canvas.height != height) {\n            canvas.width = width;\n            canvas.height = height;\n            if (canvas.style.transform !== canvasTransform) canvas.style.transform = canvasTransform;\n        } else if (!this.containerReused) context.clearRect(0, 0, width, height);\n        this.preRender(context, frameState);\n        const viewState = frameState.viewState;\n        const projection = viewState.projection;\n        this.opacity_ = layerState.opacity;\n        this.setupCompositionContext_();\n        // clipped rendering if layer extent is set\n        let clipped = false;\n        if (render && layerState.extent && this.clipping) {\n            const layerExtent = (0, $9c4744460e43e41b$export$494be3a3a25689ca)(layerState.extent, projection);\n            render = (0, $6da4c8ed3074c92b$export$7b0a31e10bbff018)(layerExtent, frameState.extent);\n            clipped = render && !(0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(layerExtent, frameState.extent);\n            if (clipped) this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n        }\n        if (render) this.renderWorlds(replayGroup, frameState);\n        if (clipped) this.compositionContext_.restore();\n        this.releaseCompositionContext_();\n        this.postRender(context, frameState);\n        if (this.renderedRotation_ !== viewState.rotation) {\n            this.renderedRotation_ = viewState.rotation;\n            this.hitDetectionImageData_ = null;\n        }\n        return this.container;\n    }\n    /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\n   * that resolves with an array of features.\n   */ getFeatures(pixel) {\n        return new Promise((resolve)=>{\n            if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n                const size = [\n                    this.context.canvas.width,\n                    this.context.canvas.height\n                ];\n                (0, $e22e7611e69f42a9$export$5635d7ef4b8fee1c)(this.pixelTransform, size);\n                const center = this.renderedCenter_;\n                const resolution = this.renderedResolution_;\n                const rotation = this.renderedRotation_;\n                const projection = this.renderedProjection_;\n                const extent = this.wrappedRenderedExtent_;\n                const layer = this.getLayer();\n                const transforms = [];\n                const width = size[0] * (0, $13dfa0283bf5c35f$export$ab51038298418f25);\n                const height = size[1] * (0, $13dfa0283bf5c35f$export$ab51038298418f25);\n                transforms.push(this.getRenderTransform(center, resolution, rotation, (0, $13dfa0283bf5c35f$export$ab51038298418f25), width, height, 0).slice());\n                const source = layer.getSource();\n                const projectionExtent = projection.getExtent();\n                if (source.getWrapX() && projection.canWrapX() && !(0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(projectionExtent, extent)) {\n                    let startX = extent[0];\n                    const worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent);\n                    let world = 0;\n                    let offsetX;\n                    while(startX < projectionExtent[0]){\n                        --world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, (0, $13dfa0283bf5c35f$export$ab51038298418f25), width, height, offsetX).slice());\n                        startX += worldWidth;\n                    }\n                    world = 0;\n                    startX = extent[2];\n                    while(startX > projectionExtent[2]){\n                        ++world;\n                        offsetX = worldWidth * world;\n                        transforms.push(this.getRenderTransform(center, resolution, rotation, (0, $13dfa0283bf5c35f$export$ab51038298418f25), width, height, offsetX).slice());\n                        startX -= worldWidth;\n                    }\n                }\n                this.hitDetectionImageData_ = (0, $13dfa0283bf5c35f$export$bd05e394339d469)(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n            }\n            resolve((0, $13dfa0283bf5c35f$export$6d4d555ddbfffa32)(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n        });\n    }\n    /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */ forEachFeatureAtCoordinate(coordinate, frameState, hitTolerance, callback, matches) {\n        if (!this.replayGroup_) return undefined;\n        const resolution = frameState.viewState.resolution;\n        const rotation = frameState.viewState.rotation;\n        const layer = this.getLayer();\n        /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */ const features = {};\n        /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */ const featureCallback = function(feature, geometry, distanceSq) {\n            const key = (0, $6c5e11070e371322$export$5e82334337e0f204)(feature);\n            const match = features[key];\n            if (!match) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    return callback(feature, layer, geometry);\n                }\n                matches.push(features[key] = {\n                    feature: feature,\n                    layer: layer,\n                    geometry: geometry,\n                    distanceSq: distanceSq,\n                    callback: callback\n                });\n            } else if (match !== true && distanceSq < match.distanceSq) {\n                if (distanceSq === 0) {\n                    features[key] = true;\n                    matches.splice(matches.lastIndexOf(match), 1);\n                    return callback(feature, layer, geometry);\n                }\n                match.geometry = geometry;\n                match.distanceSq = distanceSq;\n            }\n            return undefined;\n        };\n        let result;\n        const executorGroups = [\n            this.replayGroup_\n        ];\n        if (this.declutterExecutorGroup) executorGroups.push(this.declutterExecutorGroup);\n        executorGroups.some((executorGroup)=>{\n            return result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === this.declutterExecutorGroup && frameState.declutterTree ? frameState.declutterTree.all().map((item)=>item.value) : null);\n        });\n        return result;\n    }\n    /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */ handleFontsChanged() {\n        const layer = this.getLayer();\n        if (layer.getVisible() && this.replayGroup_) layer.changed();\n    }\n    /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */ handleStyleImageChange_(event) {\n        this.renderIfReadyAndVisible();\n    }\n    /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */ prepareFrame(frameState) {\n        const vectorLayer = this.getLayer();\n        const vectorSource = vectorLayer.getSource();\n        if (!vectorSource) return false;\n        const animating = frameState.viewHints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).ANIMATING];\n        const interacting = frameState.viewHints[(0, $7d362782b4ccb93d$export$2e2bcd8739ae039).INTERACTING];\n        const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n        const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n        if (this.ready && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n            this.animatingOrInteracting_ = true;\n            return true;\n        }\n        this.animatingOrInteracting_ = false;\n        const frameStateExtent = frameState.extent;\n        const viewState = frameState.viewState;\n        const projection = viewState.projection;\n        const resolution = viewState.resolution;\n        const pixelRatio = frameState.pixelRatio;\n        const vectorLayerRevision = vectorLayer.getRevision();\n        const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n        let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n        if (vectorLayerRenderOrder === undefined) vectorLayerRenderOrder = (0, $4b9ac454600c05d2$export$531ddd8416d52dfc);\n        const center = viewState.center.slice();\n        const extent = (0, $6da4c8ed3074c92b$export$ab1029bcae9ddb4a)(frameStateExtent, vectorLayerRenderBuffer * resolution);\n        const renderedExtent = extent.slice();\n        const loadExtents = [\n            extent.slice()\n        ];\n        const projectionExtent = projection.getExtent();\n        if (vectorSource.getWrapX() && projection.canWrapX() && !(0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(projectionExtent, frameState.extent)) {\n            // For the replay group, we need an extent that intersects the real world\n            // (-180° to +180°). To support geometries in a coordinate range from -540°\n            // to +540°, we add at least 1 world width on each side of the projection\n            // extent. If the viewport is wider than the world, we need to add half of\n            // the viewport width to make sure we cover the whole viewport.\n            const worldWidth = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(projectionExtent);\n            const gutter = Math.max((0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)(extent) / 2, worldWidth);\n            extent[0] = projectionExtent[0] - gutter;\n            extent[2] = projectionExtent[2] + gutter;\n            (0, $1bd0a226f9a16141$export$39a9ce3624977b84)(center, projection);\n            const loadExtent = (0, $6da4c8ed3074c92b$export$39a9ce3624977b84)(loadExtents[0], projection);\n            // If the extent crosses the date line, we load data for both edges of the worlds\n            if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) loadExtents.push([\n                loadExtent[0] + worldWidth,\n                loadExtent[1],\n                loadExtent[2] + worldWidth,\n                loadExtent[3]\n            ]);\n            else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) loadExtents.push([\n                loadExtent[0] - worldWidth,\n                loadExtent[1],\n                loadExtent[2] - worldWidth,\n                loadExtent[3]\n            ]);\n        }\n        if (this.ready && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && (0, $6da4c8ed3074c92b$export$be866b1e0809b17e)(this.wrappedRenderedExtent_, extent)) {\n            if (!(0, $b998d41b678ed5d1$export$e9bab7fafb253603)(this.renderedExtent_, renderedExtent)) {\n                this.hitDetectionImageData_ = null;\n                this.renderedExtent_ = renderedExtent;\n            }\n            this.renderedCenter_ = center;\n            this.replayGroupChanged = false;\n            return true;\n        }\n        this.replayGroup_ = null;\n        const replayGroup = new (0, $e22658f4b743550b$export$2e2bcd8739ae039)((0, $4b9ac454600c05d2$export$bdacc5b475012edb)(resolution, pixelRatio), extent, resolution, pixelRatio);\n        let declutterBuilderGroup;\n        if (this.getLayer().getDeclutter()) declutterBuilderGroup = new (0, $e22658f4b743550b$export$2e2bcd8739ae039)((0, $4b9ac454600c05d2$export$bdacc5b475012edb)(resolution, pixelRatio), extent, resolution, pixelRatio);\n        const userProjection = (0, $9c4744460e43e41b$export$3973b77d5f6f2790)();\n        let userTransform;\n        if (userProjection) {\n            for(let i = 0, ii = loadExtents.length; i < ii; ++i){\n                const extent = loadExtents[i];\n                const userExtent = (0, $9c4744460e43e41b$export$96bfd09e2cffb006)(extent, projection);\n                vectorSource.loadFeatures(userExtent, (0, $9c4744460e43e41b$export$b56bb8ad8b3a00e9)(resolution, projection), userProjection);\n            }\n            userTransform = (0, $9c4744460e43e41b$export$e3c4995a701c26a3)(userProjection, projection);\n        } else for(let i = 0, ii = loadExtents.length; i < ii; ++i)vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n        const squaredTolerance = (0, $4b9ac454600c05d2$export$75084a70d324c1e6)(resolution, pixelRatio);\n        let ready = true;\n        const render = /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       */ (feature)=>{\n            let styles;\n            const styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n            if (styleFunction) styles = styleFunction(feature, resolution);\n            if (styles) {\n                const dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n                ready = ready && !dirty;\n            }\n        };\n        const userExtent = (0, $9c4744460e43e41b$export$96bfd09e2cffb006)(extent, projection);\n        /** @type {Array<import(\"../../Feature.js\").default>} */ const features = vectorSource.getFeaturesInExtent(userExtent);\n        if (vectorLayerRenderOrder) features.sort(vectorLayerRenderOrder);\n        for(let i = 0, ii = features.length; i < ii; ++i)render(features[i]);\n        this.renderedFeatures_ = features;\n        this.ready = ready;\n        const replayGroupInstructions = replayGroup.finish();\n        const executorGroup = new (0, $a34a824d875e4ea1$export$2e2bcd8739ae039)(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n        if (declutterBuilderGroup) this.declutterExecutorGroup = new (0, $a34a824d875e4ea1$export$2e2bcd8739ae039)(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n        this.renderedResolution_ = resolution;\n        this.renderedRevision_ = vectorLayerRevision;\n        this.renderedRenderOrder_ = vectorLayerRenderOrder;\n        this.renderedExtent_ = renderedExtent;\n        this.wrappedRenderedExtent_ = extent;\n        this.renderedCenter_ = center;\n        this.renderedProjection_ = projection;\n        this.replayGroup_ = executorGroup;\n        this.hitDetectionImageData_ = null;\n        this.replayGroupChanged = true;\n        return true;\n    }\n    /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */ renderFeature(feature, squaredTolerance, styles, builderGroup, transform, declutterBuilderGroup) {\n        if (!styles) return false;\n        let loading = false;\n        if (Array.isArray(styles)) for(let i = 0, ii = styles.length; i < ii; ++i)loading = (0, $4b9ac454600c05d2$export$36f470a33a42f413)(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, transform, declutterBuilderGroup) || loading;\n        else loading = (0, $4b9ac454600c05d2$export$36f470a33a42f413)(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, transform, declutterBuilderGroup);\n        return loading;\n    }\n}\nvar $659e0e97392a5f5e$export$2e2bcd8739ae039 = $659e0e97392a5f5e$var$CanvasVectorLayerRenderer;\n\n\n/**\n * @classdesc\n * Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering\n * even during animations. Points and labels stay upright on rotated views. For very large\n * amounts of vector data, performance may suffer during pan and zoom animations. In this case,\n * try {@link module:ol/layer/VectorImage~VectorImageLayer}.\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default} VectorSourceType\n * @extends {BaseVectorLayer<VectorSourceType, CanvasVectorLayerRenderer>}\n * @api\n */ class $82a68515bd6ef378$var$VectorLayer extends (0, $c8d6dc4c09ed9916$export$2e2bcd8739ae039) {\n    /**\n   * @param {import(\"./BaseVector.js\").Options<VectorSourceType>} [options] Options.\n   */ constructor(options){\n        super(options);\n    }\n    createRenderer() {\n        return new (0, $659e0e97392a5f5e$export$2e2bcd8739ae039)(this);\n    }\n}\nvar $82a68515bd6ef378$export$2e2bcd8739ae039 = $82a68515bd6ef378$var$VectorLayer;\n\n\n\nvar $d715ae420eabdf2c$exports = {};\n$d715ae420eabdf2c$exports = JSON.parse('{\"0\":\"INDETERMINE\",\"1\":\"PIERRE\",\"2\":\"MEULIERE\",\"3\":\"BETON\",\"4\":\"BRIQUES\",\"5\":\"AGGLOMERE\",\"6\":\"BOIS\",\"9\":\"AUTRES\",\"10\":\"PIERRE\",\"11\":\"PIERRE\",\"12\":\"MEULIERE - PIERRE\",\"13\":\"BETON - PIERRE\",\"14\":\"BRIQUES - PIERRE\",\"15\":\"AGGLOMERE - PIERRE\",\"16\":\"BOIS - PIERRE\",\"19\":\"PIERRE - AUTRES\",\"20\":\"MEULIERE\",\"21\":\"MEULIERE - PIERRE\",\"22\":\"MEULIERE\",\"23\":\"BETON - MEULIERE\",\"24\":\"BRIQUES - MEULIERE\",\"25\":\"AGGLOMERE - MEULIERE\",\"26\":\"BOIS - MEULIERE\",\"29\":\"MEULIERE - AUTRES\",\"30\":\"BETON\",\"31\":\"BETON - PIERRE\",\"32\":\"BETON - MEULIERE\",\"33\":\"BETON\",\"34\":\"BETON - BRIQUES\",\"35\":\"AGGLOMERE - BETON\",\"36\":\"BETON - BOIS\",\"39\":\"BETON - AUTRES\",\"40\":\"BRIQUES\",\"41\":\"BRIQUES - PIERRE\",\"42\":\"BRIQUES - MEULIERE\",\"43\":\"BETON - BRIQUES\",\"44\":\"BRIQUES\",\"45\":\"AGGLOMERE - BRIQUES\",\"46\":\"BOIS - BRIQUES\",\"49\":\"BRIQUES - AUTRES\",\"50\":\"AGGLOMERE\",\"51\":\"AGGLOMERE - PIERRE\",\"52\":\"AGGLOMERE - MEULIERE\",\"53\":\"AGGLOMERE - BETON\",\"54\":\"AGGLOMERE - BRIQUES\",\"55\":\"AGGLOMERE\",\"56\":\"AGGLOMERE - BOIS\",\"59\":\"AGGLOMERE - AUTRES\",\"60\":\"BOIS\",\"61\":\"BOIS - PIERRE\",\"62\":\"BOIS - MEULIERE\",\"63\":\"BETON - BOIS\",\"64\":\"BOIS - BRIQUES\",\"65\":\"AGGLOMERE - BOIS\",\"66\":\"BOIS\",\"69\":\"BOIS - AUTRES\",\"90\":\"AUTRES\",\"91\":\"PIERRE - AUTRES\",\"92\":\"MEULIERE - AUTRES\",\"93\":\"BETON - AUTRES\",\"94\":\"BRIQUES - AUTRES\",\"95\":\"AGGLOMERE - AUTRES\",\"96\":\"BOIS - AUTRES\",\"99\":\"AUTRES\",\"00\":\"INDETERMINE\",\"01\":\"PIERRE\",\"02\":\"MEULIERE\",\"03\":\"BETON\",\"04\":\"BRIQUES\",\"05\":\"AGGLOMERE\",\"06\":\"BOIS\",\"09\":\"AUTRES\"}');\n\n\nvar $f6675ff5b9f887ad$exports = {};\n$f6675ff5b9f887ad$exports = JSON.parse('{\"0\":\"INDETERMINE\",\"1\":\"TUILES\",\"2\":\"ARDOISES\",\"3\":\"ZINC ALUMINIUM\",\"4\":\"BETON\",\"9\":\"AUTRES\",\"10\":\"TUILES\",\"11\":\"TUILES\",\"12\":\"ARDOISES - TUILES\",\"13\":\"TUILES - ZINC ALUMINIUM\",\"14\":\"BETON - TUILES\",\"19\":\"TUILES - AUTRES\",\"20\":\"ARDOISES\",\"21\":\"ARDOISES - TUILES\",\"22\":\"ARDOISES\",\"23\":\"ARDOISES - ZINC ALUMINIUM\",\"24\":\"ARDOISES - BETON\",\"29\":\"ARDOISES - AUTRES\",\"30\":\"ZINC ALUMINIUM\",\"31\":\"TUILES - ZINC ALUMINIUM\",\"32\":\"ARDOISES - ZINC ALUMINIUM\",\"33\":\"ZINC ALUMINIUM\",\"34\":\"BETON - ZINC ALUMINIUM\",\"39\":\"ZINC ALUMINIUM - AUTRES\",\"40\":\"BETON\",\"41\":\"BETON - TUILES\",\"42\":\"ARDOISES - BETON\",\"43\":\"BETON - ZINC ALUMINIUM\",\"44\":\"BETON\",\"49\":\"BETON - AUTRES\",\"90\":\"AUTRES\",\"91\":\"TUILES - AUTRES\",\"92\":\"ARDOISES - AUTRES\",\"93\":\"ZINC ALUMINIUM - AUTRES\",\"94\":\"BETON - AUTRES\",\"99\":\"AUTRES\",\"00\":\"INDETERMINE\",\"01\":\"TUILES\",\"02\":\"ARDOISES\",\"03\":\"ZINC ALUMINIUM\",\"04\":\"BETON\",\"09\":\"AUTRES\"}');\n\n\n// Infobulle\nvar $efd3ba4ec2608b1d$var$container = document.getElementById(\"popup\");\nvar $efd3ba4ec2608b1d$var$content = document.getElementById(\"popup-content\");\nvar $efd3ba4ec2608b1d$var$closer = document.getElementById(\"popup-closer\");\nconst $efd3ba4ec2608b1d$var$toPrint = [\n    \"altitude_maximale_sol\",\n    \"altitude_maximale_toit\",\n    \"altitude_minimale_sol\",\n    \"altitude_minimale_toit\",\n    \"construction_legere\",\n    \"date_d_apparition\",\n    \"etat_de_l_objet\",\n    \"hauteur\",\n    \"materiaux_de_la_toiture\",\n    \"materiaux_des_murs\",\n    \"nature\",\n    \"nombre_d_etages\",\n    \"nombre_de_logements\",\n    \"usage_1\",\n    \"usage_2\"\n];\nvar $efd3ba4ec2608b1d$var$overlay = new (0, $c80d3ed2a84f41ed$export$2e2bcd8739ae039)({\n    element: $efd3ba4ec2608b1d$var$container,\n    autoPan: true,\n    autoPanAnimation: {\n        duration: 250\n    }\n});\n$efd3ba4ec2608b1d$var$closer.onclick = function() {\n    $efd3ba4ec2608b1d$var$overlay.setPosition(undefined);\n    $efd3ba4ec2608b1d$var$closer.blur();\n    return false;\n};\n// Définition de la pyramide de résolution Géoportail\nvar $efd3ba4ec2608b1d$var$resolutions = [];\nvar $efd3ba4ec2608b1d$var$matrixIds = [];\nvar $efd3ba4ec2608b1d$var$proj3857 = (0, $9c4744460e43e41b$export$3988ae62b71be9a3)(\"EPSG:3857\");\nvar $efd3ba4ec2608b1d$var$maxResolution = (0, $6da4c8ed3074c92b$export$3c49c185de0c2bfc)($efd3ba4ec2608b1d$var$proj3857.getExtent()) / 256;\nfor(var $efd3ba4ec2608b1d$var$i = 0; $efd3ba4ec2608b1d$var$i < 19; $efd3ba4ec2608b1d$var$i++){\n    $efd3ba4ec2608b1d$var$matrixIds[$efd3ba4ec2608b1d$var$i] = $efd3ba4ec2608b1d$var$i.toString();\n    $efd3ba4ec2608b1d$var$resolutions[$efd3ba4ec2608b1d$var$i] = $efd3ba4ec2608b1d$var$maxResolution / Math.pow(2, $efd3ba4ec2608b1d$var$i);\n}\nvar $efd3ba4ec2608b1d$var$tileGrid = new (0, $17e2c305e5143e39$export$2e2bcd8739ae039)({\n    origin: [\n        -20037508,\n        20037508\n    ],\n    resolutions: $efd3ba4ec2608b1d$var$resolutions,\n    matrixIds: $efd3ba4ec2608b1d$var$matrixIds\n});\n// Objets WFS Batiments\nvar $efd3ba4ec2608b1d$var$vectorSource = new (0, $84888e4daf3fdf44$export$2e2bcd8739ae039)({\n    format: new (0, $f602cef51a2e6950$export$2e2bcd8739ae039)(),\n    url: function(extent) {\n        return \"https://wxs.ign.fr/essentiels/geoportail/wfs?service=WFS&version=1.1.0&request=GetFeature&typename=BDTOPO_V3:batiment&outputFormat=application/json&srsname=EPSG:3857&bbox=\" + extent.join(\",\") + \",EPSG:3857\";\n    },\n    strategy: (0, $eb51d0a16123ee90$export$3c17558da18e4d75)($efd3ba4ec2608b1d$var$tileGrid)\n});\nvar $efd3ba4ec2608b1d$var$wfs = new (0, $82a68515bd6ef378$export$2e2bcd8739ae039)({\n    source: $efd3ba4ec2608b1d$var$vectorSource,\n    style: new (0, $8c7f6dda98e8cb9c$export$2e2bcd8739ae039)({\n        stroke: new (0, $f9d0329c5c745263$export$2e2bcd8739ae039)({\n            color: \"rgba(0, 0, 255, 1.0)\",\n            width: 2\n        }),\n        fill: new (0, $d61d1dcaf3c44610$export$2e2bcd8739ae039)({\n            color: \"rgba(0, 0, 255, 0.2)\"\n        })\n    }),\n    minZoom: 16\n});\n// Couche WMTS PLAN IGN v2\nvar $efd3ba4ec2608b1d$var$rasterSource1 = new (0, $03da246cb7c9d812$export$2e2bcd8739ae039)({\n    url: \"https://wxs.ign.fr/essentiels/geoportail/wmts\",\n    layer: \"GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2\",\n    format: \"image/png\",\n    matrixSet: \"PM\",\n    projection: \"EPSG:3857\",\n    tileGrid: $efd3ba4ec2608b1d$var$tileGrid,\n    style: \"normal\",\n    attributions: '<a href=\"http://www.ign.fr\" target=\"_blank\"><img src=\"https://wxs.ign.fr/static/logos/IGN/IGN.gif\" title=\"Institut national de l\\'information g\\xe9ographique et foresti\\xe8re\" alt=\"IGN\"></a>'\n});\nvar $efd3ba4ec2608b1d$var$wmts1 = new (0, $32e67a4d3559554a$export$2e2bcd8739ae039)({\n    source: $efd3ba4ec2608b1d$var$rasterSource1,\n    maxZoom: 16\n});\n// Couche WMTS ORTHO PHOTO\nvar $efd3ba4ec2608b1d$var$rasterSource2 = new (0, $03da246cb7c9d812$export$2e2bcd8739ae039)({\n    url: \"https://wxs.ign.fr/essentiels/geoportail/wmts\",\n    layer: \"ORTHOIMAGERY.ORTHOPHOTOS\",\n    format: \"image/jpeg\",\n    matrixSet: \"PM\",\n    projection: \"EPSG:3857\",\n    tileGrid: $efd3ba4ec2608b1d$var$tileGrid,\n    style: \"normal\",\n    attributions: '<a href=\"http://www.ign.fr\" target=\"_blank\"><img src=\"https://wxs.ign.fr/static/logos/IGN/IGN.gif\" title=\"Institut national de l\\'information g\\xe9ographique et foresti\\xe8re\" alt=\"IGN\"></a>'\n});\nvar $efd3ba4ec2608b1d$var$wmts2 = new (0, $32e67a4d3559554a$export$2e2bcd8739ae039)({\n    source: $efd3ba4ec2608b1d$var$rasterSource2,\n    minZoom: 16\n});\n// Map OpenLayers\nvar $efd3ba4ec2608b1d$var$map = new (0, $41aa29ae0c4b607a$export$2e2bcd8739ae039)({\n    layers: [\n        $efd3ba4ec2608b1d$var$wmts1,\n        $efd3ba4ec2608b1d$var$wmts2,\n        $efd3ba4ec2608b1d$var$wfs\n    ],\n    overlays: [\n        $efd3ba4ec2608b1d$var$overlay\n    ],\n    target: document.getElementById(\"map\"),\n    view: new (0, $70364d0195659942$export$2e2bcd8739ae039)({\n        center: (0, $9c4744460e43e41b$export$b15d9668511529b9)([\n            3.280578,\n            47.368489\n        ]),\n        maxZoom: 20,\n        zoom: 19\n    })\n});\n// Ouverture infobulle\n$efd3ba4ec2608b1d$var$map.on(\"singleclick\", function(evt) {\n    var coordinate = evt.coordinate;\n    var feature = $efd3ba4ec2608b1d$var$map.forEachFeatureAtPixel(evt.pixel, function(feature, layer) {\n        return feature;\n    });\n    if (feature) {\n        var props = feature.getProperties();\n        var id = feature.getId().replace(\"batiment.\", \"\");\n        var liste = \"<center><b>\" + id + \"</b></center>\";\n        liste += \"<ul>\";\n        for(const p in props)if (props[p] != null && props[p] != \"\" && $efd3ba4ec2608b1d$var$toPrint.includes(p)) {\n            var value = props[p];\n            if (p == \"materiaux_des_murs\") value = (0, (/*@__PURE__*/$parcel$interopDefault($d715ae420eabdf2c$exports)))[props[p]];\n            if (p == \"materiaux_de_la_toiture\") value = (0, (/*@__PURE__*/$parcel$interopDefault($f6675ff5b9f887ad$exports)))[props[p]];\n            if (value == \"INDETERMINE\" || value == false) continue;\n            liste += \"<li><b>\" + p + \"</b> : \" + value + \"</li>\";\n        }\n        liste += \"</ul>\";\n        $efd3ba4ec2608b1d$var$content.innerHTML = liste;\n        $efd3ba4ec2608b1d$var$overlay.setPosition(coordinate);\n    }\n});\n\n\n//# sourceMappingURL=index.2f54ac02.js.map\n","import 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport Overlay from 'ol/Overlay';\nimport WMTS from 'ol/source/WMTS';\nimport { fromLonLat, get as getProjection } from 'ol/proj';\nimport WMTSTileGrid from 'ol/tilegrid/WMTS';\nimport { getWidth } from 'ol/extent';\nimport VectorSource from 'ol/source/Vector';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { bbox as bboxStrategy, tile as tileStrategy } from 'ol/loadingstrategy';\nimport VectorLayer from 'ol/layer/Vector';\nimport { Stroke, Style, Fill } from 'ol/style';\nimport materiaux_mur from './dmatgm.json';\nimport materiaux_toit from './dmatto.json';\n\n// Infobulle\nvar container = document.getElementById('popup');\nvar content = document.getElementById('popup-content');\nvar closer = document.getElementById('popup-closer');\nconst toPrint = [\"altitude_maximale_sol\", \"altitude_maximale_toit\",\n  \"altitude_minimale_sol\", \"altitude_minimale_toit\",\n  \"construction_legere\", \"date_d_apparition\", \"etat_de_l_objet\",\n  \"hauteur\", \"materiaux_de_la_toiture\", \"materiaux_des_murs\",\n  \"nature\", \"nombre_d_etages\", \"nombre_de_logements\", \"usage_1\", \"usage_2\"\n]\n\nvar overlay = new Overlay({\n  element: container,\n  autoPan: true,\n  autoPanAnimation: {\n    duration: 250,\n  },\n});\n\ncloser.onclick = function () {\n  overlay.setPosition(undefined);\n  closer.blur();\n  return false;\n};\n\n// Définition de la pyramide de résolution Géoportail\nvar resolutions = [];\nvar matrixIds = [];\nvar proj3857 = getProjection('EPSG:3857');\nvar maxResolution = getWidth(proj3857.getExtent()) / 256;\n\nfor (var i = 0; i < 19; i++) {\n  matrixIds[i] = i.toString();\n  resolutions[i] = maxResolution / Math.pow(2, i);\n};\n\nvar tileGrid = new WMTSTileGrid({\n  origin: [-20037508, 20037508],\n  resolutions: resolutions,\n  matrixIds: matrixIds,\n});\n\n// Objets WFS Batiments\nvar vectorSource = new VectorSource({\n  format: new GeoJSON(),\n  url: function (extent) {\n    return (\n      'https://wxs.ign.fr/essentiels/geoportail/wfs?service=WFS&' +\n      'version=1.1.0&request=GetFeature&typename=BDTOPO_V3:batiment&' +\n      'outputFormat=application/json&srsname=EPSG:3857&' +\n      'bbox=' +\n      extent.join(',') +\n      ',EPSG:3857'\n    );\n  },\n  strategy: tileStrategy(tileGrid),\n});\n\nvar wfs = new VectorLayer({\n  source: vectorSource,\n  style: new Style({\n    stroke: new Stroke({\n      color: 'rgba(0, 0, 255, 1.0)',\n      width: 2,\n    }),\n    fill: new Fill({\n      color: 'rgba(0, 0, 255, 0.2)'\n    }),\n  }),\n  minZoom: 16\n});\n\n// Couche WMTS PLAN IGN v2\nvar rasterSource1 = new WMTS({\n  url: 'https://wxs.ign.fr/essentiels/geoportail/wmts',\n  layer: 'GEOGRAPHICALGRIDSYSTEMS.PLANIGNV2',\n  format: 'image/png',\n  matrixSet: 'PM',\n  projection: 'EPSG:3857',\n  tileGrid: tileGrid,\n  style: 'normal',\n  attributions:\n    '<a href=\"http://www.ign.fr\" target=\"_blank\">' +\n    '<img src=\"https://wxs.ign.fr/static/logos/IGN/IGN.gif\" title=\"Institut national de l\\'' +\n    'information géographique et forestière\" alt=\"IGN\"></a>',\n});\n\nvar wmts1 = new TileLayer({\n  source: rasterSource1,\n  maxZoom: 16\n});\n\n// Couche WMTS ORTHO PHOTO\nvar rasterSource2 = new WMTS({\n  url: 'https://wxs.ign.fr/essentiels/geoportail/wmts',\n  layer: 'ORTHOIMAGERY.ORTHOPHOTOS',\n  format: 'image/jpeg',\n  matrixSet: 'PM',\n  projection: 'EPSG:3857',\n  tileGrid: tileGrid,\n  style: 'normal',\n  attributions:\n    '<a href=\"http://www.ign.fr\" target=\"_blank\">' +\n    '<img src=\"https://wxs.ign.fr/static/logos/IGN/IGN.gif\" title=\"Institut national de l\\'' +\n    'information géographique et forestière\" alt=\"IGN\"></a>',\n});\n\nvar wmts2 = new TileLayer({\n  source: rasterSource2,\n  minZoom: 16\n});\n\n// Map OpenLayers\nvar map = new Map({\n  layers: [wmts1, wmts2, wfs],\n  overlays: [overlay],\n  target: document.getElementById('map'),\n  view: new View({\n    center: fromLonLat([3.280578, 47.368489]),\n    maxZoom: 20,\n    zoom: 19,\n  }),\n});\n\n// Ouverture infobulle\nmap.on('singleclick', function (evt) {\n  var coordinate = evt.coordinate;\n  var feature = map.forEachFeatureAtPixel(evt.pixel,\n    function (feature, layer) {\n      return feature;\n    });\n  if (feature) {\n    var props = feature.getProperties();\n    var id = feature.getId().replace(\"batiment.\", \"\");\n    var liste = \"<center><b>\" + id + \"</b></center>\"\n    liste += \"<ul>\";\n    for (const p in props) {\n      if (props[p] != null && props[p] != \"\" && toPrint.includes(p)) {\n        var value = props[p]\n        if (p == \"materiaux_des_murs\") value = materiaux_mur[props[p]];\n        if (p == \"materiaux_de_la_toiture\") value = materiaux_toit[props[p]];\n        if (value == \"INDETERMINE\" || value == false) continue;\n        liste += \"<li><b>\" + p + \"</b> : \" + value + \"</li>\";\n      }\n    }\n    liste += \"</ul>\";\n    content.innerHTML = liste;\n    overlay.setPosition(coordinate);\n  }\n});\n","/**\n * @module ol/Map\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport CompositeMapRenderer from './renderer/Composite.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, {GroupEvent} from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, {getTilePriority} from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport {DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS} from './has.js';\nimport {TRUE} from './functions.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n} from './transform.js';\nimport {assert} from './asserts.js';\nimport {\n  clone,\n  createOrUpdateEmpty,\n  equals as equalsExtent,\n  getForViewAndSize,\n  isEmpty,\n} from './extent.js';\nimport {defaults as defaultControls} from './control/defaults.js';\nimport {defaults as defaultInteractions} from './interaction/defaults.js';\nimport {equals} from './array.js';\nimport {fromUserCoordinate, toUserCoordinate} from './proj.js';\nimport {getUid} from './util.js';\nimport {hasArea} from './size.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {removeNode} from './dom.js';\nimport {warn} from './console.js';\n\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent (in view projection coordinates).\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */\n\n/**\n * @typedef {function(Map, ?FrameState): any} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} MapEventHandler\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control/defaults.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction/defaults.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * **Note:** CSS `transform` support for the target element is limited to `scale`.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */\nfunction removeLayerMapProperty(layer) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(null);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    layer.getLayers().forEach(removeLayerMapProperty);\n  }\n}\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {Map} map Map.\n */\nfunction setLayerMapProperty(layer, map) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(map);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    const layers = layer.getLayers().getArray();\n    for (let i = 0, ii = layers.length; i < ii; ++i) {\n      setLayerMapProperty(layers[i], map);\n    }\n  }\n}\n\n/**\n * @classdesc\n * The map is the core component of OpenLayers. For a map to render, a view,\n * one or more layers, and a target container are needed:\n *\n *     import Map from 'ol/Map.js';\n *     import View from 'ol/View.js';\n *     import TileLayer from 'ol/layer/Tile.js';\n *     import OSM from 'ol/source/OSM.js';\n *\n *     const map = new Map({\n *       view: new View({\n *         center: [0, 0],\n *         zoom: 1,\n *       }),\n *       layers: [\n *         new TileLayer({\n *           source: new OSM(),\n *         }),\n *       ],\n *       target: 'map',\n *     });\n *\n * The above snippet creates a map using a {@link module:ol/layer/Tile~TileLayer} to\n * display {@link module:ol/source/OSM~OSM} OSM data and render it to a DOM\n * element with the id `map`.\n *\n * The constructor places a viewport container (with CSS class name\n * `ol-viewport`) in the target element (see `getViewport()`), and then two\n * further elements within the viewport: one with CSS class name\n * `ol-overlaycontainer-stopevent` for controls and some overlays, and one with\n * CSS class name `ol-overlaycontainer` for other overlays (see the `stopEvent`\n * option of {@link module:ol/Overlay~Overlay} for the difference). The map\n * itself is placed in a further element within the viewport.\n *\n * Layers are stored as a {@link module:ol/Collection~Collection} in\n * layerGroups. A top-level group is provided by the library. This is what is\n * accessed by `getLayerGroup` and `setLayerGroup`. Layers entered in the\n * options are added to this group, and `addLayer` and `removeLayer` change the\n * layer collection in the group. `getLayers` is a convenience function for\n * `getLayerGroup().getLayers()`. Note that {@link module:ol/layer/Group~LayerGroup}\n * is a subclass of {@link module:ol/layer/Base~BaseLayer}, so layers entered in the\n * options or added with `addLayer` can be groups, which can contain further\n * groups, and so on.\n *\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nclass Map extends BaseObject {\n  /**\n   * @param {MapOptions} [options] Map options.\n   */\n  constructor(options) {\n    super();\n\n    options = options || {};\n\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {MapEventHandler<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {MapEventHandler<void>}\n     */\n    this.un;\n\n    const optionsInternal = createOptionsInternal(options);\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.renderComplete_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.loaded_ = true;\n\n    /** @private */\n    this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxTilesLoading_ =\n      options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ =\n      options.pixelRatio !== undefined\n        ? options.pixelRatio\n        : DEVICE_PIXEL_RATIO;\n\n    /**\n     * @private\n     * @type {ReturnType<typeof setTimeout>}\n     */\n    this.postRenderTimeoutHandle_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.animationDelayKey_;\n\n    /**\n     * @private\n     */\n    this.animationDelay_ = this.animationDelay_.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.coordinateToPixelTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.pixelToCoordinateTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.frameIndex_ = 0;\n\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    this.frameState_ = null;\n\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.previousExtent_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewPropertyListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewChangeListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.layerGroupPropertyListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className =\n      'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%';\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.style.position = 'absolute';\n    this.overlayContainer_.style.zIndex = '0';\n    this.overlayContainer_.style.width = '100%';\n    this.overlayContainer_.style.height = '100%';\n    this.overlayContainer_.style.pointerEvents = 'none';\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.style.position = 'absolute';\n    this.overlayContainerStopEvent_.style.zIndex = '0';\n    this.overlayContainerStopEvent_.style.width = '100%';\n    this.overlayContainerStopEvent_.style.height = '100%';\n    this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    this.mapBrowserEventHandler_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.moveTolerance_ = options.moveTolerance;\n\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.targetChangeHandlerKeys_ = null;\n\n    /**\n     * @private\n     * @type {HTMLElement|null}\n     */\n    this.targetElement_ = null;\n\n    /**\n     * @type {ResizeObserver}\n     */\n    this.resizeObserver_ = new ResizeObserver(() => this.updateSize());\n\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    this.controls = optionsInternal.controls || defaultControls();\n\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    this.interactions =\n      optionsInternal.interactions ||\n      defaultInteractions({\n        onFocusOnly: true,\n      });\n\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    this.overlays_ = optionsInternal.overlays;\n\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    this.overlayIdIndex_ = {};\n\n    /**\n     * @type {import(\"./renderer/Map.js\").default|null}\n     * @private\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    this.postRenderFunctions_ = [];\n\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    this.tileQueue_ = new TileQueue(\n      this.getTilePriority.bind(this),\n      this.handleTileChange_.bind(this)\n    );\n\n    this.addChangeListener(\n      MapProperty.LAYERGROUP,\n      this.handleLayerGroupChanged_\n    );\n    this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);\n    this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);\n    this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_);\n\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    this.setProperties(optionsInternal.values);\n\n    const map = this;\n    if (options.view && !(options.view instanceof View)) {\n      options.view.then(function (viewOptions) {\n        map.setView(new View(viewOptions));\n      });\n    }\n\n    this.controls.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent\n       */\n      (event) => {\n        event.element.setMap(this);\n      }\n    );\n\n    this.controls.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./control/Control.js\").default>} event CollectionEvent.\n       */\n      (event) => {\n        event.element.setMap(null);\n      }\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n       */\n      (event) => {\n        event.element.setMap(this);\n      }\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./interaction/Interaction.js\").default>} event CollectionEvent.\n       */\n      (event) => {\n        event.element.setMap(null);\n      }\n    );\n\n    this.overlays_.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n       */\n      (event) => {\n        this.addOverlayInternal_(event.element);\n      }\n    );\n\n    this.overlays_.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent<import(\"./Overlay.js\").default>} event CollectionEvent.\n       */\n      (event) => {\n        const id = event.element.getId();\n        if (id !== undefined) {\n          delete this.overlayIdIndex_[id.toString()];\n        }\n        event.element.setMap(null);\n      }\n    );\n\n    this.controls.forEach(\n      /**\n       * @param {import(\"./control/Control.js\").default} control Control.\n       */\n      (control) => {\n        control.setMap(this);\n      }\n    );\n\n    this.interactions.forEach(\n      /**\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n       */\n      (interaction) => {\n        interaction.setMap(this);\n      }\n    );\n\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n  }\n\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  addControl(control) {\n    this.getControls().push(control);\n  }\n\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteractions()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n  addInteraction(interaction) {\n    this.getInteractions().push(interaction);\n  }\n\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n  addLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  }\n\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n   * @private\n   */\n  handleLayerAdd_(event) {\n    setLayerMapProperty(event.layer, this);\n  }\n\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n  addOverlay(overlay) {\n    this.getOverlays().push(overlay);\n  }\n\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n  addOverlayInternal_(overlay) {\n    const id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  }\n\n  /**\n   *\n   * Clean up.\n   */\n  disposeInternal() {\n    this.controls.clear();\n    this.interactions.clear();\n    this.overlays_.clear();\n    this.resizeObserver_.disconnect();\n    this.setTarget(null);\n    super.disposeInternal();\n  }\n\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature~Feature feature} or\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template T\n   * @api\n   */\n  forEachFeatureAtPixel(pixel, callback, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const hitTolerance =\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const layerFilter =\n      options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      callback,\n      null,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n  getFeaturesAtPixel(pixel, options) {\n    const features = [];\n    this.forEachFeatureAtPixel(\n      pixel,\n      function (feature) {\n        features.push(feature);\n      },\n      options\n    );\n    return features;\n  }\n\n  /**\n   * Get all layers from all layer groups.\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n   * @api\n   */\n  getAllLayers() {\n    const layers = [];\n    function addLayersFrom(layerGroup) {\n      layerGroup.forEach(function (layer) {\n        if (layer instanceof LayerGroup) {\n          addLayersFrom(layer.getLayers());\n        } else {\n          layers.push(layer);\n        }\n      });\n    }\n    addLayersFrom(this.getLayers());\n    return layers;\n  }\n\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through the `layerFilter` option.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [options] Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n  hasFeatureAtPixel(pixel, options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return false;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    options = options !== undefined ? options : {};\n    const layerFilter =\n      options.layerFilter !== undefined ? options.layerFilter : TRUE;\n    const hitTolerance =\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const checkWrapped = options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getEventCoordinate(event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n  getEventCoordinateInternal(event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent|{clientX: number, clientY: number}} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n  getEventPixel(event) {\n    const viewport = this.viewport_;\n    const viewportPosition = viewport.getBoundingClientRect();\n    const viewportSize = this.getSize();\n    const scaleX = viewportPosition.width / viewportSize[0];\n    const scaleY = viewportPosition.height / viewportSize[1];\n    const eventPosition =\n      //FIXME Are we really calling this with a TouchEvent anywhere?\n      'changedTouches' in event\n        ? /** @type {TouchEvent} */ (event).changedTouches[0]\n        : /** @type {MouseEvent} */ (event);\n\n    return [\n      (eventPosition.clientX - viewportPosition.left) / scaleX,\n      (eventPosition.clientY - viewportPosition.top) / scaleY,\n    ];\n  }\n\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n  getTarget() {\n    return /** @type {HTMLElement|string|undefined} */ (\n      this.get(MapProperty.TARGET)\n    );\n  }\n\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n  getTargetElement() {\n    return this.targetElement_;\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n  getCoordinateFromPixel(pixel) {\n    return toUserCoordinate(\n      this.getCoordinateFromPixelInternal(pixel),\n      this.getView().getProjection()\n    );\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n  getCoordinateFromPixelInternal(pixel) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    }\n    return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n  }\n\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n  getControls() {\n    return this.controls;\n  }\n\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n  getOverlays() {\n    return this.overlays_;\n  }\n\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n  getOverlayById(id) {\n    const overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  }\n\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n  getInteractions() {\n    return this.interactions;\n  }\n\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  getLayerGroup() {\n    return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));\n  }\n\n  /**\n   * Clear any existing layers and add layers to the map.\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n   * @api\n   */\n  setLayers(layers) {\n    const group = this.getLayerGroup();\n    if (layers instanceof Collection) {\n      group.setLayers(layers);\n      return;\n    }\n\n    const collection = group.getLayers();\n    collection.clear();\n    collection.extend(layers);\n  }\n\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n  getLayers() {\n    const layers = this.getLayerGroup().getLayers();\n    return layers;\n  }\n\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n  getLoadingOrNotReady() {\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const state = layerStatesArray[i];\n      if (!state.visible) {\n        continue;\n      }\n      const renderer = state.layer.getRenderer();\n      if (renderer && !renderer.ready) {\n        return true;\n      }\n      const source = state.layer.getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n  getPixelFromCoordinate(coordinate) {\n    const viewCoordinate = fromUserCoordinate(\n      coordinate,\n      this.getView().getProjection()\n    );\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n  getPixelFromCoordinateInternal(coordinate) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    }\n    return applyTransform(\n      frameState.coordinateToPixelTransform,\n      coordinate.slice(0, 2)\n    );\n  }\n\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  getSize() {\n    return /** @type {import(\"./size.js\").Size|undefined} */ (\n      this.get(MapProperty.SIZE)\n    );\n  }\n\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n  getView() {\n    return /** @type {View} */ (this.get(MapProperty.VIEW));\n  }\n\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n  getViewport() {\n    return this.viewport_;\n  }\n\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n  getOverlayContainer() {\n    return this.overlayContainer_;\n  }\n\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n  getOverlayContainerStopEvent() {\n    return this.overlayContainerStopEvent_;\n  }\n\n  /**\n   * @return {!Document} The document where the map is displayed.\n   */\n  getOwnerDocument() {\n    const targetElement = this.getTargetElement();\n    return targetElement ? targetElement.ownerDocument : document;\n  }\n\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(\n      this.frameState_,\n      tile,\n      tileSourceKey,\n      tileCenter,\n      tileResolution\n    );\n  }\n\n  /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string} [type] Type.\n   */\n  handleBrowserEvent(browserEvent, type) {\n    type = type || browserEvent.type;\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  }\n\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n  handleMapBrowserEvent(mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    const originalEvent = /** @type {PointerEvent} */ (\n      mapBrowserEvent.originalEvent\n    );\n    const eventType = originalEvent.type;\n    if (\n      eventType === PointerEventType.POINTERDOWN ||\n      eventType === EventType.WHEEL ||\n      eventType === EventType.KEYDOWN\n    ) {\n      const doc = this.getOwnerDocument();\n      const rootNode = this.viewport_.getRootNode\n        ? this.viewport_.getRootNode()\n        : doc;\n      const target = /** @type {Node} */ (originalEvent.target);\n      if (\n        // Abort if the target is a child of the container for elements whose events are not meant\n        // to be handled by map interactions.\n        this.overlayContainerStopEvent_.contains(target) ||\n        // Abort if the event target is a child of the container that is no longer in the page.\n        // It's possible for the target to no longer be in the page if it has been removed in an\n        // event listener, this might happen in a Control that recreates it's content based on\n        // user interaction either manually or via a render in something like https://reactjs.org/\n        !(rootNode === doc ? doc.documentElement : rootNode).contains(target)\n      ) {\n        return;\n      }\n    }\n    mapBrowserEvent.frameState = this.frameState_;\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      const interactionsArray = this.getInteractions().getArray().slice();\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\n        const interaction = interactionsArray[i];\n        if (\n          interaction.getMap() !== this ||\n          !interaction.getActive() ||\n          !this.getTargetElement()\n        ) {\n          continue;\n        }\n        const cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont || mapBrowserEvent.propagationStopped) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handlePostRender() {\n    const frameState = this.frameState_;\n\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    const tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      let maxTotalLoading = this.maxTilesLoading_;\n      let maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        const hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          const lowOnFrameBudget = Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n\n    if (frameState && this.renderer_ && !frameState.animate) {\n      if (this.renderComplete_ === true) {\n        if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n          this.renderer_.dispatchRenderEvent(\n            RenderEventType.RENDERCOMPLETE,\n            frameState\n          );\n        }\n        if (this.loaded_ === false) {\n          this.loaded_ = true;\n          this.dispatchEvent(\n            new MapEvent(MapEventType.LOADEND, this, frameState)\n          );\n        }\n      } else if (this.loaded_ === true) {\n        this.loaded_ = false;\n        this.dispatchEvent(\n          new MapEvent(MapEventType.LOADSTART, this, frameState)\n        );\n      }\n    }\n\n    const postRenderFunctions = this.postRenderFunctions_;\n    for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  handleSizeChanged_() {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleTargetChanged_() {\n    if (this.mapBrowserEventHandler_) {\n      for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.targetChangeHandlerKeys_[i]);\n      }\n      this.targetChangeHandlerKeys_ = null;\n      this.viewport_.removeEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_\n      );\n      this.viewport_.removeEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_\n      );\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    }\n\n    if (this.targetElement_) {\n      this.resizeObserver_.unobserve(this.targetElement_);\n      const rootNode = this.targetElement_.getRootNode();\n      if (rootNode instanceof ShadowRoot) {\n        this.resizeObserver_.unobserve(rootNode.host);\n      }\n      this.setSize(undefined);\n    }\n\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n    const target = this.getTarget();\n    const targetElement =\n      typeof target === 'string' ? document.getElementById(target) : target;\n    this.targetElement_ = targetElement;\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderTimeoutHandle_ = undefined;\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n      if (!this.renderer_) {\n        this.renderer_ = new CompositeMapRenderer(this);\n      }\n\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(\n        this,\n        this.moveTolerance_\n      );\n      for (const key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(\n          MapBrowserEventType[key],\n          this.handleMapBrowserEvent.bind(this)\n        );\n      }\n      this.viewport_.addEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_,\n        false\n      );\n      this.viewport_.addEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_,\n        PASSIVE_EVENT_LISTENERS ? {passive: false} : false\n      );\n\n      const keyboardEventTarget = !this.keyboardEventTarget_\n        ? targetElement\n        : this.keyboardEventTarget_;\n      this.targetChangeHandlerKeys_ = [\n        listen(\n          keyboardEventTarget,\n          EventType.KEYDOWN,\n          this.handleBrowserEvent,\n          this\n        ),\n        listen(\n          keyboardEventTarget,\n          EventType.KEYPRESS,\n          this.handleBrowserEvent,\n          this\n        ),\n      ];\n      const rootNode = targetElement.getRootNode();\n      if (rootNode instanceof ShadowRoot) {\n        this.resizeObserver_.observe(rootNode.host);\n      }\n      this.resizeObserver_.observe(targetElement);\n    }\n\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  }\n\n  /**\n   * @private\n   */\n  handleTileChange_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewPropertyChanged_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewChanged_() {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    const view = this.getView();\n    if (view) {\n      this.updateViewportSize_();\n\n      this.viewPropertyListenerKey_ = listen(\n        view,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n      this.viewChangeListenerKey_ = listen(\n        view,\n        EventType.CHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n\n      view.resolveConstraints(0);\n    }\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleLayerGroupChanged_() {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    const layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n      this.layerGroupPropertyListenerKeys_ = [\n        listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),\n        listen(layerGroup, EventType.CHANGE, this.render, this),\n        listen(layerGroup, 'addlayer', this.handleLayerAdd_, this),\n        listen(layerGroup, 'removelayer', this.handleLayerRemove_, this),\n      ];\n    }\n    this.render();\n  }\n\n  /**\n   * @return {boolean} Is rendered.\n   */\n  isRendered() {\n    return !!this.frameState_;\n  }\n\n  /**\n   * @private\n   */\n  animationDelay_() {\n    this.animationDelayKey_ = undefined;\n    this.renderFrame_(Date.now());\n  }\n\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n  renderSync() {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  }\n\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n  redrawText() {\n    const layerStates = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStates.length; i < ii; ++i) {\n      const layer = layerStates[i].layer;\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  }\n\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n  render() {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  }\n\n  /**\n   * This method is meant to be called in a layer's `prerender` listener. It causes all collected\n   * declutter items to be decluttered and rendered on the map immediately. This is useful for\n   * layers that need to appear entirely above the decluttered items of layers lower in the layer\n   * stack.\n   * @api\n   */\n  flushDeclutterItems() {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return;\n    }\n    this.renderer_.flushDeclutterItems(frameState);\n  }\n\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n  removeControl(control) {\n    return this.getControls().remove(control);\n  }\n\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n  removeInteraction(interaction) {\n    return this.getInteractions().remove(interaction);\n  }\n\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n  removeLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  }\n\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n   * @private\n   */\n  handleLayerRemove_(event) {\n    removeLayerMapProperty(event.layer);\n  }\n\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n  removeOverlay(overlay) {\n    return this.getOverlays().remove(overlay);\n  }\n\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n  renderFrame_(time) {\n    const size = this.getSize();\n    const view = this.getView();\n    const previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    let frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      const viewHints = view.getHints(\n        this.frameState_ ? this.frameState_.viewHints : undefined\n      );\n      const viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterTree: null,\n        extent: getForViewAndSize(\n          viewState.center,\n          viewState.resolution,\n          viewState.rotation,\n          size\n        ),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {},\n        mapId: getUid(this),\n        renderTargets: {},\n      };\n      if (viewState.nextCenter && viewState.nextResolution) {\n        const rotation = isNaN(viewState.nextRotation)\n          ? viewState.rotation\n          : viewState.nextRotation;\n\n        frameState.nextExtent = getForViewAndSize(\n          viewState.nextCenter,\n          viewState.nextResolution,\n          rotation,\n          size\n        );\n      }\n    }\n\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(\n        this.postRenderFunctions_,\n        frameState.postRenderFunctions\n      );\n\n      if (previousFrameState) {\n        const moveStart =\n          !this.previousExtent_ ||\n          (!isEmpty(this.previousExtent_) &&\n            !equalsExtent(frameState.extent, this.previousExtent_));\n        if (moveStart) {\n          this.dispatchEvent(\n            new MapEvent(MapEventType.MOVESTART, this, previousFrameState)\n          );\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      const idle =\n        this.previousExtent_ &&\n        !frameState.viewHints[ViewHint.ANIMATING] &&\n        !frameState.viewHints[ViewHint.INTERACTING] &&\n        !equalsExtent(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(\n          new MapEvent(MapEventType.MOVEEND, this, frameState)\n        );\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n\n    this.renderComplete_ =\n      this.hasListener(MapEventType.LOADSTART) ||\n      this.hasListener(MapEventType.LOADEND) ||\n      this.hasListener(RenderEventType.RENDERCOMPLETE)\n        ? !this.tileQueue_.getTilesLoading() &&\n          !this.tileQueue_.getCount() &&\n          !this.getLoadingOrNotReady()\n        : undefined;\n\n    if (!this.postRenderTimeoutHandle_) {\n      this.postRenderTimeoutHandle_ = setTimeout(() => {\n        this.postRenderTimeoutHandle_ = undefined;\n        this.handlePostRender();\n      }, 0);\n    }\n  }\n\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  setLayerGroup(layerGroup) {\n    const oldLayerGroup = this.getLayerGroup();\n    if (oldLayerGroup) {\n      this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n    }\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  }\n\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  setSize(size) {\n    this.set(MapProperty.SIZE, size);\n  }\n\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string} [target] The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n  setTarget(target) {\n    this.set(MapProperty.TARGET, target);\n  }\n\n  /**\n   * Set the view for this map.\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\n   * alternative allows view properties to be resolved by sources or other components that load\n   * view-related metadata.\n   * @observable\n   * @api\n   */\n  setView(view) {\n    if (!view || view instanceof View) {\n      this.set(MapProperty.VIEW, view);\n      return;\n    }\n    this.set(MapProperty.VIEW, new View());\n\n    const map = this;\n    view.then(function (viewOptions) {\n      map.setView(new View(viewOptions));\n    });\n  }\n\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n  updateSize() {\n    const targetElement = this.getTargetElement();\n\n    let size = undefined;\n    if (targetElement) {\n      const computedStyle = getComputedStyle(targetElement);\n      const width =\n        targetElement.offsetWidth -\n        parseFloat(computedStyle['borderLeftWidth']) -\n        parseFloat(computedStyle['paddingLeft']) -\n        parseFloat(computedStyle['paddingRight']) -\n        parseFloat(computedStyle['borderRightWidth']);\n      const height =\n        targetElement.offsetHeight -\n        parseFloat(computedStyle['borderTopWidth']) -\n        parseFloat(computedStyle['paddingTop']) -\n        parseFloat(computedStyle['paddingBottom']) -\n        parseFloat(computedStyle['borderBottomWidth']);\n      if (!isNaN(width) && !isNaN(height)) {\n        size = [width, height];\n        if (\n          !hasArea(size) &&\n          !!(\n            targetElement.offsetWidth ||\n            targetElement.offsetHeight ||\n            targetElement.getClientRects().length\n          )\n        ) {\n          warn(\n            \"No map visible because the map container's width or height are 0.\"\n          );\n        }\n      }\n    }\n\n    const oldSize = this.getSize();\n    if (size && (!oldSize || !equals(size, oldSize))) {\n      this.setSize(size);\n      this.updateViewportSize_();\n    }\n  }\n\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */\n  updateViewportSize_() {\n    const view = this.getView();\n    if (view) {\n      let size = undefined;\n      const computedStyle = getComputedStyle(this.viewport_);\n      if (computedStyle.width && computedStyle.height) {\n        size = [\n          parseInt(computedStyle.width, 10),\n          parseInt(computedStyle.height, 10),\n        ];\n      }\n      view.setViewportSize(size);\n    }\n  }\n}\n\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  let keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget =\n      typeof options.keyboardEventTarget === 'string'\n        ? document.getElementById(options.keyboardEventTarget)\n        : options.keyboardEventTarget;\n  }\n\n  /**\n   * @type {Object<string, *>}\n   */\n  const values = {};\n\n  const layerGroup =\n    options.layers &&\n    typeof (/** @type {?} */ (options.layers).getLayers) === 'function'\n      ? /** @type {LayerGroup} */ (options.layers)\n      : new LayerGroup({\n          layers:\n            /** @type {Collection<import(\"./layer/Base.js\").default>|Array<import(\"./layer/Base.js\").default>} */ (\n              options.layers\n            ),\n        });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n\n  values[MapProperty.TARGET] = options.target;\n\n  values[MapProperty.VIEW] =\n    options.view instanceof View ? options.view : new View();\n\n  /** @type {Collection<import(\"./control/Control.js\").default>} */\n  let controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.controls).getArray) === 'function',\n        'Expected `controls` to be an array or an `ol/Collection.js`'\n      );\n      controls = options.controls;\n    }\n  }\n\n  /** @type {Collection<import(\"./interaction/Interaction\").default>} */\n  let interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.interactions).getArray) ===\n          'function',\n        'Expected `interactions` to be an array or an `ol/Collection.js`'\n      );\n      interactions = options.interactions;\n    }\n  }\n\n  /** @type {Collection<import(\"./Overlay.js\").default>} */\n  let overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.overlays).getArray) === 'function',\n        'Expected `overlays` to be an array or an `ol/Collection.js`'\n      );\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values,\n  };\n}\nexport default Map;\n","/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport {getUid} from './util.js';\nimport {isEmpty} from './obj.js';\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport class ObjectEvent extends Event {\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  constructor(type, key, oldValue) {\n    super(type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nclass BaseObject extends Observable {\n  /**\n   * @param {Object<string, *>} [values] An object with key-value pairs.\n   */\n  constructor(values) {\n    super();\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n    this.un;\n\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n    this.values_ = null;\n\n    if (values !== undefined) {\n      this.setProperties(values);\n    }\n  }\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  get(key) {\n    let value;\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  }\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  getKeys() {\n    return (this.values_ && Object.keys(this.values_)) || [];\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  getProperties() {\n    return (this.values_ && Object.assign({}, this.values_)) || {};\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>?} Object.\n   */\n  getPropertiesInternal() {\n    return this.values_;\n  }\n\n  /**\n   * @return {boolean} The object has properties.\n   */\n  hasProperties() {\n    return !!this.values_;\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  notify(key, oldValue) {\n    let eventType;\n    eventType = `change:${key}`;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  addChangeListener(key, listener) {\n    this.addEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  removeChangeListener(key, listener) {\n    this.removeEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n  set(key, value, silent) {\n    const values = this.values_ || (this.values_ = {});\n    if (silent) {\n      values[key] = value;\n    } else {\n      const oldValue = values[key];\n      values[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [silent] Update without triggering an event.\n   * @api\n   */\n  setProperties(values, silent) {\n    for (const key in values) {\n      this.set(key, values[key], silent);\n    }\n  }\n\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n  applyProperties(source) {\n    if (!source.values_) {\n      return;\n    }\n    Object.assign(this.values_ || (this.values_ = {}), source.values_);\n  }\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [silent] Unset without triggering an event.\n   * @api\n   */\n  unset(key, silent) {\n    if (this.values_ && key in this.values_) {\n      const oldValue = this.values_[key];\n      delete this.values_[key];\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n      if (!silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n}\n\nexport default BaseObject;\n","/**\n * @module ol/events/Event\n */\n\n/**\n * @classdesc\n * Stripped down implementation of the W3C DOM Level 2 Event interface.\n * See https://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface.\n *\n * This implementation only provides `type` and `target` properties, and\n * `stopPropagation` and `preventDefault` methods. It is meant as base class\n * for higher level events defined in the library, and works with\n * {@link module:ol/events/Target~Target}.\n */\nclass BaseEvent {\n  /**\n   * @param {string} type Type.\n   */\n  constructor(type) {\n    /**\n     * @type {boolean}\n     */\n    this.propagationStopped;\n\n    /**\n     * @type {boolean}\n     */\n    this.defaultPrevented;\n\n    /**\n     * The event type.\n     * @type {string}\n     * @api\n     */\n    this.type = type;\n\n    /**\n     * The event target.\n     * @type {Object}\n     * @api\n     */\n    this.target = null;\n  }\n\n  /**\n   * Prevent default. This means that no emulated `click`, `singleclick` or `doubleclick` events\n   * will be fired.\n   * @api\n   */\n  preventDefault() {\n    this.defaultPrevented = true;\n  }\n\n  /**\n   * Stop event propagation.\n   * @api\n   */\n  stopPropagation() {\n    this.propagationStopped = true;\n  }\n}\n\n/**\n * @param {Event|import(\"./Event.js\").default} evt Event\n */\nexport function stopPropagation(evt) {\n  evt.stopPropagation();\n}\n\n/**\n * @param {Event|import(\"./Event.js\").default} evt Event\n */\nexport function preventDefault(evt) {\n  evt.preventDefault();\n}\n\nexport default BaseEvent;\n","/**\n * @module ol/ObjectEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a property is changed.\n   * @event module:ol/Object.ObjectEvent#propertychange\n   * @api\n   */\n  PROPERTYCHANGE: 'propertychange',\n};\n\n/**\n * @typedef {'propertychange'} Types\n */\n","/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport {listen, listenOnce, unlistenByKey} from './events.js';\n\n/***\n * @template {string} Type\n * @template {Event|import(\"./events/Event.js\").default} EventClass\n * @template Return\n * @typedef {(type: Type, listener: (event: EventClass) => ?) => Return} OnSignature\n */\n\n/***\n * @template {string} Type\n * @template Return\n * @typedef {(type: Type[], listener: (event: Event|import(\"./events/Event\").default) => ?) => Return extends void ? void : Return[]} CombinedOnSignature\n */\n\n/**\n * @typedef {'change'|'error'} EventTypes\n */\n\n/***\n * @template Return\n * @typedef {OnSignature<EventTypes, import(\"./events/Event.js\").default, Return> & CombinedOnSignature<EventTypes, Return>} ObservableOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n    super();\n\n    this.on =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onInternal\n      );\n\n    this.once =\n      /** @type {ObservableOnSignature<import(\"./events\").EventsKey>} */ (\n        this.onceInternal\n      );\n\n    this.un = /** @type {ObservableOnSignature<void>} */ (this.unInternal);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onInternal(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    }\n    return listen(this, /** @type {string} */ (type), listener);\n  }\n\n  /**\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Event key.\n   * @protected\n   */\n  onceInternal(type, listener) {\n    let key;\n    if (Array.isArray(type)) {\n      const len = type.length;\n      key = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this, /** @type {string} */ (type), listener);\n    }\n    /** @type {Object} */ (listener).ol_key = key;\n    return key;\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type Type.\n   * @param {function((Event|import(\"./events/Event\").default)): ?} listener Listener.\n   * @protected\n   */\n  unInternal(type, listener) {\n    const key = /** @type {Object} */ (listener).ol_key;\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  }\n}\n\n/**\n * Listen for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.on;\n\n/**\n * Listen once for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\nObservable.prototype.once;\n\n/**\n * Unlisten for a certain type of event.\n * @function\n * @param {string|Array<string>} type The event type or array of event types.\n * @param {function((Event|import(\"./events/Event\").default)): ?} listener The listener function.\n * @api\n */\nObservable.prototype.un;\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\nexport default Observable;\n","/**\n * @module ol/events/Target\n */\nimport Disposable from '../Disposable.js';\nimport Event from './Event.js';\nimport {VOID} from '../functions.js';\nimport {clear} from '../obj.js';\n\n/**\n * @typedef {EventTarget|Target} EventTargetLike\n */\n\n/**\n * @classdesc\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\n *\n * There are two important simplifications compared to the specification:\n *\n * 1. The handling of `useCapture` in `addEventListener` and\n *    `removeEventListener`. There is no real capture model.\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\n *    There is no event target hierarchy. When a listener calls\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\n *    more listeners after this one will be called. Same as when the listener\n *    returns false.\n */\nclass Target extends Disposable {\n  /**\n   * @param {*} [target] Default event target for dispatched events.\n   */\n  constructor(target) {\n    super();\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.eventTarget_ = target;\n\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n    this.pendingRemovals_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n    this.dispatching_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>}\n     */\n    this.listeners_ = null;\n  }\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  addEventListener(type, listener) {\n    if (!type || !listener) {\n      return;\n    }\n    const listeners = this.listeners_ || (this.listeners_ = {});\n    const listenersForType = listeners[type] || (listeners[type] = []);\n    if (!listenersForType.includes(listener)) {\n      listenersForType.push(listener);\n    }\n  }\n\n  /**\n   * Dispatches an event and calls all listeners listening for events\n   * of this type. The event parameter can either be a string or an\n   * Object with a `type` property.\n   *\n   * @param {import(\"./Event.js\").default|string} event Event object.\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\n   *     event object or if any of the listeners returned false.\n   * @api\n   */\n  dispatchEvent(event) {\n    const isString = typeof event === 'string';\n    const type = isString ? event : event.type;\n    const listeners = this.listeners_ && this.listeners_[type];\n    if (!listeners) {\n      return;\n    }\n\n    const evt = isString ? new Event(event) : /** @type {Event} */ (event);\n    if (!evt.target) {\n      evt.target = this.eventTarget_ || this;\n    }\n    const dispatching = this.dispatching_ || (this.dispatching_ = {});\n    const pendingRemovals =\n      this.pendingRemovals_ || (this.pendingRemovals_ = {});\n    if (!(type in dispatching)) {\n      dispatching[type] = 0;\n      pendingRemovals[type] = 0;\n    }\n    ++dispatching[type];\n    let propagate;\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      if ('handleEvent' in listeners[i]) {\n        propagate = /** @type {import(\"../events.js\").ListenerObject} */ (\n          listeners[i]\n        ).handleEvent(evt);\n      } else {\n        propagate = /** @type {import(\"../events.js\").ListenerFunction} */ (\n          listeners[i]\n        ).call(this, evt);\n      }\n      if (propagate === false || evt.propagationStopped) {\n        propagate = false;\n        break;\n      }\n    }\n    if (--dispatching[type] === 0) {\n      let pr = pendingRemovals[type];\n      delete pendingRemovals[type];\n      while (pr--) {\n        this.removeEventListener(type, VOID);\n      }\n      delete dispatching[type];\n    }\n    return propagate;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.listeners_ && clear(this.listeners_);\n  }\n\n  /**\n   * Get the listeners for a specified event type. Listeners are returned in the\n   * order that they will be called in.\n   *\n   * @param {string} type Type.\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\n   */\n  getListeners(type) {\n    return (this.listeners_ && this.listeners_[type]) || undefined;\n  }\n\n  /**\n   * @param {string} [type] Type. If not provided,\n   *     `true` will be returned if this event target has any listeners.\n   * @return {boolean} Has listeners.\n   */\n  hasListener(type) {\n    if (!this.listeners_) {\n      return false;\n    }\n    return type\n      ? type in this.listeners_\n      : Object.keys(this.listeners_).length > 0;\n  }\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  removeEventListener(type, listener) {\n    const listeners = this.listeners_ && this.listeners_[type];\n    if (listeners) {\n      const index = listeners.indexOf(listener);\n      if (index !== -1) {\n        if (this.pendingRemovals_ && type in this.pendingRemovals_) {\n          // make listener a no-op, and remove later in #dispatchEvent()\n          listeners[index] = VOID;\n          ++this.pendingRemovals_[type];\n        } else {\n          listeners.splice(index, 1);\n          if (listeners.length === 0) {\n            delete this.listeners_[type];\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default Target;\n","/**\n * @module ol/Disposable\n */\n\n/**\n * @classdesc\n * Objects that need to clean up after themselves.\n */\nclass Disposable {\n  constructor() {\n    /**\n     * The object has already been disposed.\n     * @type {boolean}\n     * @protected\n     */\n    this.disposed = false;\n  }\n\n  /**\n   * Clean up.\n   */\n  dispose() {\n    if (!this.disposed) {\n      this.disposed = true;\n      this.disposeInternal();\n    }\n  }\n\n  /**\n   * Extension point for disposable objects.\n   * @protected\n   */\n  disposeInternal() {}\n}\n\nexport default Disposable;\n","/**\n * @module ol/functions\n */\n\nimport {equals as arrayEquals} from './array.js';\n\n/**\n * Always returns true.\n * @return {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n\n/**\n * Always returns false.\n * @return {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n  let called = false;\n\n  /** @type {ReturnType} */\n  let lastResult;\n\n  /** @type {Array<any>} */\n  let lastArgs;\n\n  let lastThis;\n\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}\n\n/**\n * @template T\n * @param {function(): (T | Promise<T>)} getter A function that returns a value or a promise for a value.\n * @return {Promise<T>} A promise for the value.\n */\nexport function toPromise(getter) {\n  function promiseGetter() {\n    let value;\n    try {\n      value = getter();\n    } catch (err) {\n      return Promise.reject(err);\n    }\n    if (value instanceof Promise) {\n      return value;\n    }\n    return Promise.resolve(value);\n  }\n  return promiseGetter();\n}\n","/**\n * @module ol/array\n */\n\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, comparator) {\n  let mid, cmp;\n  comparator = comparator || ascending;\n  let low = 0;\n  let high = haystack.length;\n  let found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + ((high - low) >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) {\n      /* Too low. */\n      low = mid + 1;\n    } else {\n      /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n\n  /* Key not found. */\n  return found ? low : ~low;\n}\n\n/**\n * Compare function sorting arrays in ascending order.  Safe to use for numeric values.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nexport function ascending(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\n/**\n * Compare function sorting arrays in descending order.  Safe to use for numeric values.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is greater than, equal to, or less than the second.\n */\nexport function descending(a, b) {\n  return a < b ? 1 : a > b ? -1 : 0;\n}\n\n/**\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\n * of this type to determine which nearest resolution to use.\n *\n * This function takes a `{number}` representing a value between two array entries,\n * a `{number}` representing the value of the nearest higher entry and\n * a `{number}` representing the value of the nearest lower entry\n * as arguments and returns a `{number}`. If a negative number or zero is returned\n * the lower value will be used, if a positive number is returned the higher value\n * will be used.\n * @typedef {function(number, number, number): number} NearestDirectionFunction\n * @api\n */\n\n/**\n * @param {Array<number>} arr Array in descending order.\n * @param {number} target Target.\n * @param {number|NearestDirectionFunction} direction\n *    0 means return the nearest,\n *    > 0 means return the largest nearest,\n *    < 0 means return the smallest nearest.\n * @return {number} Index.\n */\nexport function linearFindNearest(arr, target, direction) {\n  if (arr[0] <= target) {\n    return 0;\n  }\n\n  const n = arr.length;\n  if (target <= arr[n - 1]) {\n    return n - 1;\n  }\n\n  if (typeof direction === 'function') {\n    for (let i = 1; i < n; ++i) {\n      const candidate = arr[i];\n      if (candidate === target) {\n        return i;\n      }\n      if (candidate < target) {\n        if (direction(target, arr[i - 1], candidate) > 0) {\n          return i - 1;\n        }\n        return i;\n      }\n    }\n    return n - 1;\n  }\n\n  if (direction > 0) {\n    for (let i = 1; i < n; ++i) {\n      if (arr[i] < target) {\n        return i - 1;\n      }\n    }\n    return n - 1;\n  }\n\n  if (direction < 0) {\n    for (let i = 1; i < n; ++i) {\n      if (arr[i] <= target) {\n        return i;\n      }\n    }\n    return n - 1;\n  }\n\n  for (let i = 1; i < n; ++i) {\n    if (arr[i] == target) {\n      return i;\n    }\n    if (arr[i] < target) {\n      if (arr[i - 1] - target < target - arr[i]) {\n        return i - 1;\n      }\n      return i;\n    }\n  }\n  return n - 1;\n}\n\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\nexport function reverseSubArray(arr, begin, end) {\n  while (begin < end) {\n    const tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\nexport function extend(arr, data) {\n  const extension = Array.isArray(data) ? data : [data];\n  const length = extension.length;\n  for (let i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\nexport function remove(arr, obj) {\n  const i = arr.indexOf(obj);\n  const found = i > -1;\n  if (found) {\n    arr.splice(i, 1);\n  }\n  return found;\n}\n\n/**\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\nexport function equals(arr1, arr2) {\n  const len1 = arr1.length;\n  if (len1 !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Sort the passed array such that the relative order of equal elements is preserved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\nexport function stableSort(arr, compareFnc) {\n  const length = arr.length;\n  const tmp = Array(arr.length);\n  let i;\n  for (i = 0; i < length; i++) {\n    tmp[i] = {index: i, value: arr[i]};\n  }\n  tmp.sort(function (a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n}\n\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function} [func] Comparison function.\n * @param {boolean} [strict] Strictly sorted (default false).\n * @return {boolean} Return index.\n */\nexport function isSorted(arr, func, strict) {\n  const compare = func || ascending;\n  return arr.every(function (currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n    const res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || (strict && res === 0));\n  });\n}\n","/**\n * @module ol/obj\n */\n\n/**\n * Removes all properties from an object.\n * @param {Object} object The object to clear.\n */\nexport function clear(object) {\n  for (const property in object) {\n    delete object[property];\n  }\n}\n\n/**\n * Determine if an object has any properties.\n * @param {Object} object The object to check.\n * @return {boolean} The object is empty.\n */\nexport function isEmpty(object) {\n  let property;\n  for (property in object) {\n    return false;\n  }\n  return !property;\n}\n","/**\n * @module ol/events/EventType\n */\n\n/**\n * @enum {string}\n * @const\n */\nexport default {\n  /**\n   * Generic change event. Triggered when the revision counter is increased.\n   * @event module:ol/events/Event~BaseEvent#change\n   * @api\n   */\n  CHANGE: 'change',\n\n  /**\n   * Generic error event. Triggered when an error occurs.\n   * @event module:ol/events/Event~BaseEvent#error\n   * @api\n   */\n  ERROR: 'error',\n\n  BLUR: 'blur',\n  CLEAR: 'clear',\n  CONTEXTMENU: 'contextmenu',\n  CLICK: 'click',\n  DBLCLICK: 'dblclick',\n  DRAGENTER: 'dragenter',\n  DRAGOVER: 'dragover',\n  DROP: 'drop',\n  FOCUS: 'focus',\n  KEYDOWN: 'keydown',\n  KEYPRESS: 'keypress',\n  LOAD: 'load',\n  RESIZE: 'resize',\n  TOUCHMOVE: 'touchmove',\n  WHEEL: 'wheel',\n};\n","/**\n * @module ol/events\n */\nimport {clear} from './obj.js';\n\n/**\n * Key to use with {@link module:ol/Observable.unByKey}.\n * @typedef {Object} EventsKey\n * @property {ListenerFunction} listener Listener.\n * @property {import(\"./events/Target.js\").EventTargetLike} target Target.\n * @property {string} type Type.\n * @api\n */\n\n/**\n * Listener function. This function is called with an event object as argument.\n * When the function returns `false`, event propagation will stop.\n *\n * @typedef {function((Event|import(\"./events/Event.js\").default)): (void|boolean)} ListenerFunction\n * @api\n */\n\n/**\n * @typedef {Object} ListenerObject\n * @property {ListenerFunction} handleEvent HandleEvent listener function.\n */\n\n/**\n * @typedef {ListenerFunction|ListenerObject} Listener\n */\n\n/**\n * Registers an event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` to a `this` object, and returns\n * a key for use with {@link module:ol/events.unlistenByKey}.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object} [thisArg] Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @param {boolean} [once] If true, add the listener as one-off listener.\n * @return {EventsKey} Unique key for the listener.\n */\nexport function listen(target, type, listener, thisArg, once) {\n  if (thisArg && thisArg !== target) {\n    listener = listener.bind(thisArg);\n  }\n  if (once) {\n    const originalListener = listener;\n    listener = function () {\n      target.removeEventListener(type, listener);\n      originalListener.apply(this, arguments);\n    };\n  }\n  const eventsKey = {\n    target: target,\n    type: type,\n    listener: listener,\n  };\n  target.addEventListener(type, listener);\n  return eventsKey;\n}\n\n/**\n * Registers a one-off event listener on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * This function efficiently binds a `listener` as self-unregistering listener\n * to a `this` object, and returns a key for use with\n * {@link module:ol/events.unlistenByKey} in case the listener needs to be\n * unregistered before it is called.\n *\n * When {@link module:ol/events.listen} is called with the same arguments after this\n * function, the self-unregistering listener will be turned into a permanent\n * listener.\n *\n * @param {import(\"./events/Target.js\").EventTargetLike} target Event target.\n * @param {string} type Event type.\n * @param {ListenerFunction} listener Listener.\n * @param {Object} [thisArg] Object referenced by the `this` keyword in the\n *     listener. Default is the `target`.\n * @return {EventsKey} Key for unlistenByKey.\n */\nexport function listenOnce(target, type, listener, thisArg) {\n  return listen(target, type, listener, thisArg, true);\n}\n\n/**\n * Unregisters event listeners on an event target. Inspired by\n * https://google.github.io/closure-library/api/source/closure/goog/events/events.js.src.html\n *\n * The argument passed to this function is the key returned from\n * {@link module:ol/events.listen} or {@link module:ol/events.listenOnce}.\n *\n * @param {EventsKey} key The key.\n */\nexport function unlistenByKey(key) {\n  if (key && key.target) {\n    key.target.removeEventListener(key.type, key.listener);\n    clear(key);\n  }\n}\n","/**\n * @module ol/util\n */\n\n/**\n * @return {never} Any return.\n */\nexport function abstract() {\n  throw new Error('Unimplemented abstract method.');\n}\n\n/**\n * Counter for getUid.\n * @type {number}\n * @private\n */\nlet uidCounter_ = 0;\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. Unique IDs are generated\n * as a strictly increasing sequence. Adapted from goog.getUid.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {string} The unique ID for the object.\n * @api\n */\nexport function getUid(obj) {\n  return obj.ol_uid || (obj.ol_uid = String(++uidCounter_));\n}\n\n/**\n * OpenLayers version.\n * @type {string}\n */\nexport const VERSION = '8.1.0';\n","/**\n * @module ol/Collection\n */\nimport BaseObject from './Object.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport Event from './events/Event.js';\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  LENGTH: 'length',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Collection~Collection} instances are instances of this\n * type.\n * @template T\n */\nexport class CollectionEvent extends Event {\n  /**\n   * @param {import(\"./CollectionEventType.js\").default} type Type.\n   * @param {T} element Element.\n   * @param {number} index The index of the added or removed element.\n   */\n  constructor(type, element, index) {\n    super(type);\n\n    /**\n     * The element that is added to or removed from the collection.\n     * @type {T}\n     * @api\n     */\n    this.element = element;\n\n    /**\n     * The index of the added or removed element.\n     * @type {number}\n     * @api\n     */\n    this.index = index;\n  }\n}\n\n/***\n * @template T\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:length', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'add'|'remove', CollectionEvent<T>, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types|\n *     'change:length'|'add'|'remove',Return>} CollectionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [unique=false] Disallow the same item from being added to\n * the collection twice.\n */\n\n/**\n * @classdesc\n * An expanded version of standard JS Array, adding convenience methods for\n * manipulation. Add and remove changes to the Collection trigger a Collection\n * event. Note that this does not cover changes to the objects _within_ the\n * Collection; they trigger events on the appropriate object, not on the\n * Collection as a whole.\n *\n * @fires CollectionEvent\n *\n * @template T\n * @api\n */\nclass Collection extends BaseObject {\n  /**\n   * @param {Array<T>} [array] Array.\n   * @param {Options} [options] Collection options.\n   */\n  constructor(array, options) {\n    super();\n\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {CollectionOnSignature<T, import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {CollectionOnSignature<T, void>}\n     */\n    this.un;\n\n    options = options || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.unique_ = !!options.unique;\n\n    /**\n     * @private\n     * @type {!Array<T>}\n     */\n    this.array_ = array ? array : [];\n\n    if (this.unique_) {\n      for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n        this.assertUnique_(this.array_[i], i);\n      }\n    }\n\n    this.updateLength_();\n  }\n\n  /**\n   * Remove all elements from the collection.\n   * @api\n   */\n  clear() {\n    while (this.getLength() > 0) {\n      this.pop();\n    }\n  }\n\n  /**\n   * Add elements to the collection.  This pushes each item in the provided array\n   * to the end of the collection.\n   * @param {!Array<T>} arr Array.\n   * @return {Collection<T>} This collection.\n   * @api\n   */\n  extend(arr) {\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      this.push(arr[i]);\n    }\n    return this;\n  }\n\n  /**\n   * Iterate over each element, calling the provided callback.\n   * @param {function(T, number, Array<T>): *} f The function to call\n   *     for every element. This function takes 3 arguments (the element, the\n   *     index and the array). The return value is ignored.\n   * @api\n   */\n  forEach(f) {\n    const array = this.array_;\n    for (let i = 0, ii = array.length; i < ii; ++i) {\n      f(array[i], i, array);\n    }\n  }\n\n  /**\n   * Get a reference to the underlying Array object. Warning: if the array\n   * is mutated, no events will be dispatched by the collection, and the\n   * collection's \"length\" property won't be in sync with the actual length\n   * of the array.\n   * @return {!Array<T>} Array.\n   * @api\n   */\n  getArray() {\n    return this.array_;\n  }\n\n  /**\n   * Get the element at the provided index.\n   * @param {number} index Index.\n   * @return {T} Element.\n   * @api\n   */\n  item(index) {\n    return this.array_[index];\n  }\n\n  /**\n   * Get the length of this collection.\n   * @return {number} The length of the array.\n   * @observable\n   * @api\n   */\n  getLength() {\n    return this.get(Property.LENGTH);\n  }\n\n  /**\n   * Insert an element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  insertAt(index, elem) {\n    if (index < 0 || index > this.getLength()) {\n      throw new Error('Index out of bounds: ' + index);\n    }\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    this.array_.splice(index, 0, elem);\n    this.updateLength_();\n    this.dispatchEvent(\n      new CollectionEvent(CollectionEventType.ADD, elem, index)\n    );\n  }\n\n  /**\n   * Remove the last element of the collection and return it.\n   * Return `undefined` if the collection is empty.\n   * @return {T|undefined} Element.\n   * @api\n   */\n  pop() {\n    return this.removeAt(this.getLength() - 1);\n  }\n\n  /**\n   * Insert the provided element at the end of the collection.\n   * @param {T} elem Element.\n   * @return {number} New length of the collection.\n   * @api\n   */\n  push(elem) {\n    if (this.unique_) {\n      this.assertUnique_(elem);\n    }\n    const n = this.getLength();\n    this.insertAt(n, elem);\n    return this.getLength();\n  }\n\n  /**\n   * Remove the first occurrence of an element from the collection.\n   * @param {T} elem Element.\n   * @return {T|undefined} The removed element or undefined if none found.\n   * @api\n   */\n  remove(elem) {\n    const arr = this.array_;\n    for (let i = 0, ii = arr.length; i < ii; ++i) {\n      if (arr[i] === elem) {\n        return this.removeAt(i);\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Remove the element at the provided index and return it.\n   * Return `undefined` if the collection does not contain this index.\n   * @param {number} index Index.\n   * @return {T|undefined} Value.\n   * @api\n   */\n  removeAt(index) {\n    if (index < 0 || index >= this.getLength()) {\n      return undefined;\n    }\n    const prev = this.array_[index];\n    this.array_.splice(index, 1);\n    this.updateLength_();\n    this.dispatchEvent(\n      /** @type {CollectionEvent<T>} */ (\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\n      )\n    );\n    return prev;\n  }\n\n  /**\n   * Set the element at the provided index.\n   * @param {number} index Index.\n   * @param {T} elem Element.\n   * @api\n   */\n  setAt(index, elem) {\n    const n = this.getLength();\n    if (index >= n) {\n      this.insertAt(index, elem);\n      return;\n    }\n    if (index < 0) {\n      throw new Error('Index out of bounds: ' + index);\n    }\n    if (this.unique_) {\n      this.assertUnique_(elem, index);\n    }\n    const prev = this.array_[index];\n    this.array_[index] = elem;\n    this.dispatchEvent(\n      /** @type {CollectionEvent<T>} */ (\n        new CollectionEvent(CollectionEventType.REMOVE, prev, index)\n      )\n    );\n    this.dispatchEvent(\n      /** @type {CollectionEvent<T>} */ (\n        new CollectionEvent(CollectionEventType.ADD, elem, index)\n      )\n    );\n  }\n\n  /**\n   * @private\n   */\n  updateLength_() {\n    this.set(Property.LENGTH, this.array_.length);\n  }\n\n  /**\n   * @private\n   * @param {T} elem Element.\n   * @param {number} [except] Optional index to ignore.\n   */\n  assertUnique_(elem, except) {\n    for (let i = 0, ii = this.array_.length; i < ii; ++i) {\n      if (this.array_[i] === elem && i !== except) {\n        throw new Error('Duplicate item added to a unique collection');\n      }\n    }\n  }\n}\n\nexport default Collection;\n","/**\n * @module ol/CollectionEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when an item is added to the collection.\n   * @event module:ol/Collection.CollectionEvent#add\n   * @api\n   */\n  ADD: 'add',\n  /**\n   * Triggered when an item is removed from the collection.\n   * @event module:ol/Collection.CollectionEvent#remove\n   * @api\n   */\n  REMOVE: 'remove',\n};\n","/**\n * @module ol/renderer/Composite\n */\nimport MapRenderer from './Map.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RenderEvent from '../render/Event.js';\nimport RenderEventType from '../render/EventType.js';\nimport {CLASS_UNSELECTABLE} from '../css.js';\nimport {checkedFonts} from '../render/canvas.js';\nimport {inView} from '../layer/Layer.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {replaceChildren} from '../dom.js';\n\n/**\n * @classdesc\n * Canvas map renderer.\n * @api\n */\nclass CompositeMapRenderer extends MapRenderer {\n  /**\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n  constructor(map) {\n    super(map);\n\n    /**\n     * @type {import(\"../events.js\").EventsKey}\n     */\n    this.fontChangeListenerKey_ = listen(\n      checkedFonts,\n      ObjectEventType.PROPERTYCHANGE,\n      map.redrawText.bind(map)\n    );\n\n    /**\n     * @private\n     * @type {HTMLDivElement}\n     */\n    this.element_ = document.createElement('div');\n    const style = this.element_.style;\n    style.position = 'absolute';\n    style.width = '100%';\n    style.height = '100%';\n    style.zIndex = '0';\n\n    this.element_.className = CLASS_UNSELECTABLE + ' ol-layers';\n\n    const container = map.getViewport();\n    container.insertBefore(this.element_, container.firstChild || null);\n\n    /**\n     * @private\n     * @type {Array<HTMLElement>}\n     */\n    this.children_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n\n    /**\n     * @type {Array<import(\"../layer/BaseVector.js\").default>}\n     */\n    this.declutterLayers_ = [];\n  }\n\n  /**\n   * @param {import(\"../render/EventType.js\").default} type Event type.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  dispatchRenderEvent(type, frameState) {\n    const map = this.getMap();\n    if (map.hasListener(type)) {\n      const event = new RenderEvent(type, undefined, frameState);\n      map.dispatchEvent(event);\n    }\n  }\n\n  disposeInternal() {\n    unlistenByKey(this.fontChangeListenerKey_);\n    this.element_.parentNode.removeChild(this.element_);\n    super.disposeInternal();\n  }\n\n  /**\n   * Render.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  renderFrame(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element_.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    this.calculateMatrices2D(frameState);\n    this.dispatchRenderEvent(RenderEventType.PRECOMPOSE, frameState);\n\n    const layerStatesArray = frameState.layerStatesArray.sort(function (a, b) {\n      return a.zIndex - b.zIndex;\n    });\n    const viewState = frameState.viewState;\n\n    this.children_.length = 0;\n\n    const declutterLayers = this.declutterLayers_;\n    declutterLayers.length = 0;\n\n    let previousElement = null;\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layerState = layerStatesArray[i];\n      frameState.layerIndex = i;\n\n      const layer = layerState.layer;\n      const sourceState = layer.getSourceState();\n      if (\n        !inView(layerState, viewState) ||\n        (sourceState != 'ready' && sourceState != 'undefined')\n      ) {\n        layer.unrender();\n        continue;\n      }\n\n      const element = layer.render(frameState, previousElement);\n      if (!element) {\n        continue;\n      }\n      if (element !== previousElement) {\n        this.children_.push(element);\n        previousElement = element;\n      }\n      if ('getDeclutter' in layer) {\n        declutterLayers.push(\n          /** @type {import(\"../layer/BaseVector.js\").default} */ (layer)\n        );\n      }\n    }\n    this.flushDeclutterItems(frameState);\n\n    replaceChildren(this.element_, this.children_);\n\n    this.dispatchRenderEvent(RenderEventType.POSTCOMPOSE, frameState);\n\n    if (!this.renderedVisible_) {\n      this.element_.style.display = '';\n      this.renderedVisible_ = true;\n    }\n\n    this.scheduleExpireIconCache(frameState);\n  }\n\n  /**\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  flushDeclutterItems(frameState) {\n    const layers = this.declutterLayers_;\n    for (let i = layers.length - 1; i >= 0; --i) {\n      layers[i].renderDeclutter(frameState);\n    }\n    layers.length = 0;\n  }\n}\n\nexport default CompositeMapRenderer;\n","/**\n * @module ol/renderer/Map\n */\nimport Disposable from '../Disposable.js';\nimport {TRUE} from '../functions.js';\nimport {abstract} from '../util.js';\nimport {compose as composeTransform, makeInverse} from '../transform.js';\nimport {getWidth} from '../extent.js';\nimport {shared as iconImageCache} from '../style/IconImageCache.js';\nimport {inView} from '../layer/Layer.js';\nimport {wrapX} from '../coordinate.js';\n\n/**\n * @template T\n * @typedef HitMatch\n * @property {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"../layer/Layer.js\").default} layer Layer.\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} distanceSq Squared distance.\n * @property {import(\"./vector.js\").FeatureCallback<T>} callback Callback.\n */\n\n/**\n * @abstract\n */\nclass MapRenderer extends Disposable {\n  /**\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n  constructor(map) {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default}\n     */\n    this.map_ = map;\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../render/EventType.js\").default} type Event type.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  dispatchRenderEvent(type, frameState) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"../Map.js\").FrameState} frameState FrameState.\n   * @protected\n   */\n  calculateMatrices2D(frameState) {\n    const viewState = frameState.viewState;\n    const coordinateToPixelTransform = frameState.coordinateToPixelTransform;\n    const pixelToCoordinateTransform = frameState.pixelToCoordinateTransform;\n\n    composeTransform(\n      coordinateToPixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / viewState.resolution,\n      -1 / viewState.resolution,\n      -viewState.rotation,\n      -viewState.center[0],\n      -viewState.center[1]\n    );\n\n    makeInverse(pixelToCoordinateTransform, coordinateToPixelTransform);\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../Map.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {boolean} checkWrapped Check for wrapped geometries.\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {S} thisArg Value to use as `this` when executing `callback`.\n   * @param {function(this: U, import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\n   *     function, only layers which are visible and for which this function\n   *     returns `true` will be tested for features.  By default, all visible\n   *     layers will be tested.\n   * @param {U} thisArg2 Value to use as `this` when executing `layerFilter`.\n   * @return {T|undefined} Callback result.\n   * @template S,T,U\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    checkWrapped,\n    callback,\n    thisArg,\n    layerFilter,\n    thisArg2\n  ) {\n    let result;\n    const viewState = frameState.viewState;\n\n    /**\n     * @param {boolean} managed Managed layer.\n     * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../layer/Layer.js\").default} layer Layer.\n     * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */\n    function forEachFeatureAtCoordinate(managed, feature, layer, geometry) {\n      return callback.call(thisArg, feature, managed ? layer : null, geometry);\n    }\n\n    const projection = viewState.projection;\n\n    const translatedCoordinate = wrapX(coordinate.slice(), projection);\n    const offsets = [[0, 0]];\n    if (projection.canWrapX() && checkWrapped) {\n      const projectionExtent = projection.getExtent();\n      const worldWidth = getWidth(projectionExtent);\n      offsets.push([-worldWidth, 0], [worldWidth, 0]);\n    }\n\n    const layerStates = frameState.layerStatesArray;\n    const numLayers = layerStates.length;\n\n    const matches = /** @type {Array<HitMatch<T>>} */ ([]);\n    const tmpCoord = [];\n    for (let i = 0; i < offsets.length; i++) {\n      for (let j = numLayers - 1; j >= 0; --j) {\n        const layerState = layerStates[j];\n        const layer = layerState.layer;\n        if (\n          layer.hasRenderer() &&\n          inView(layerState, viewState) &&\n          layerFilter.call(thisArg2, layer)\n        ) {\n          const layerRenderer = layer.getRenderer();\n          const source = layer.getSource();\n          if (layerRenderer && source) {\n            const coordinates = source.getWrapX()\n              ? translatedCoordinate\n              : coordinate;\n            const callback = forEachFeatureAtCoordinate.bind(\n              null,\n              layerState.managed\n            );\n            tmpCoord[0] = coordinates[0] + offsets[i][0];\n            tmpCoord[1] = coordinates[1] + offsets[i][1];\n            result = layerRenderer.forEachFeatureAtCoordinate(\n              tmpCoord,\n              frameState,\n              hitTolerance,\n              callback,\n              matches\n            );\n          }\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    if (matches.length === 0) {\n      return undefined;\n    }\n    const order = 1 / matches.length;\n    matches.forEach((m, i) => (m.distanceSq += i * order));\n    matches.sort((a, b) => a.distanceSq - b.distanceSq);\n    matches.some((m) => {\n      return (result = m.callback(m.feature, m.layer, m.geometry));\n    });\n    return result;\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../Map.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {boolean} checkWrapped Check for wrapped geometries.\n   * @param {function(this: U, import(\"../layer/Layer.js\").default): boolean} layerFilter Layer filter\n   *     function, only layers which are visible and for which this function\n   *     returns `true` will be tested for features.  By default, all visible\n   *     layers will be tested.\n   * @param {U} thisArg Value to use as `this` when executing `layerFilter`.\n   * @return {boolean} Is there a feature at the given coordinate?\n   * @template U\n   */\n  hasFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    checkWrapped,\n    layerFilter,\n    thisArg\n  ) {\n    const hasFeature = this.forEachFeatureAtCoordinate(\n      coordinate,\n      frameState,\n      hitTolerance,\n      checkWrapped,\n      TRUE,\n      this,\n      layerFilter,\n      thisArg\n    );\n\n    return hasFeature !== undefined;\n  }\n\n  /**\n   * @return {import(\"../Map.js\").default} Map.\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Render.\n   * @abstract\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  renderFrame(frameState) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  flushDeclutterItems(frameState) {}\n\n  /**\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  scheduleExpireIconCache(frameState) {\n    if (iconImageCache.canExpireCache()) {\n      frameState.postRenderFunctions.push(expireIconCache);\n    }\n  }\n}\n\n/**\n * @param {import(\"../Map.js\").default} map Map.\n * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n */\nfunction expireIconCache(map, frameState) {\n  iconImageCache.expire();\n}\n\nexport default MapRenderer;\n","/**\n * @module ol/transform\n */\nimport {WORKER_OFFSCREEN_CANVAS} from './has.js';\nimport {assert} from './asserts.js';\n\n/**\n * An array representing an affine 2d transformation for use with\n * {@link module:ol/transform} functions. The array has 6 elements.\n * @typedef {!Array<number>} Transform\n * @api\n */\n\n/**\n * Collection of affine 2d transformation functions. The functions work on an\n * array of 6 elements. The element order is compatible with the [SVGMatrix\n * interface](https://developer.mozilla.org/en-US/docs/Web/API/SVGMatrix) and is\n * a subset (elements a to f) of a 3×3 matrix:\n * ```\n * [ a c e ]\n * [ b d f ]\n * [ 0 0 1 ]\n * ```\n */\n\n/**\n * @private\n * @type {Transform}\n */\nconst tmp_ = new Array(6);\n\n/**\n * Create an identity transform.\n * @return {!Transform} Identity transform.\n */\nexport function create() {\n  return [1, 0, 0, 1, 0, 0];\n}\n\n/**\n * Resets the given transform to an identity transform.\n * @param {!Transform} transform Transform.\n * @return {!Transform} Transform.\n */\nexport function reset(transform) {\n  return set(transform, 1, 0, 0, 1, 0, 0);\n}\n\n/**\n * Multiply the underlying matrices of two transforms and return the result in\n * the first transform.\n * @param {!Transform} transform1 Transform parameters of matrix 1.\n * @param {!Transform} transform2 Transform parameters of matrix 2.\n * @return {!Transform} transform1 multiplied with transform2.\n */\nexport function multiply(transform1, transform2) {\n  const a1 = transform1[0];\n  const b1 = transform1[1];\n  const c1 = transform1[2];\n  const d1 = transform1[3];\n  const e1 = transform1[4];\n  const f1 = transform1[5];\n  const a2 = transform2[0];\n  const b2 = transform2[1];\n  const c2 = transform2[2];\n  const d2 = transform2[3];\n  const e2 = transform2[4];\n  const f2 = transform2[5];\n\n  transform1[0] = a1 * a2 + c1 * b2;\n  transform1[1] = b1 * a2 + d1 * b2;\n  transform1[2] = a1 * c2 + c1 * d2;\n  transform1[3] = b1 * c2 + d1 * d2;\n  transform1[4] = a1 * e2 + c1 * f2 + e1;\n  transform1[5] = b1 * e2 + d1 * f2 + f1;\n\n  return transform1;\n}\n\n/**\n * Set the transform components a-f on a given transform.\n * @param {!Transform} transform Transform.\n * @param {number} a The a component of the transform.\n * @param {number} b The b component of the transform.\n * @param {number} c The c component of the transform.\n * @param {number} d The d component of the transform.\n * @param {number} e The e component of the transform.\n * @param {number} f The f component of the transform.\n * @return {!Transform} Matrix with transform applied.\n */\nexport function set(transform, a, b, c, d, e, f) {\n  transform[0] = a;\n  transform[1] = b;\n  transform[2] = c;\n  transform[3] = d;\n  transform[4] = e;\n  transform[5] = f;\n  return transform;\n}\n\n/**\n * Set transform on one matrix from another matrix.\n * @param {!Transform} transform1 Matrix to set transform to.\n * @param {!Transform} transform2 Matrix to set transform from.\n * @return {!Transform} transform1 with transform from transform2 applied.\n */\nexport function setFromArray(transform1, transform2) {\n  transform1[0] = transform2[0];\n  transform1[1] = transform2[1];\n  transform1[2] = transform2[2];\n  transform1[3] = transform2[3];\n  transform1[4] = transform2[4];\n  transform1[5] = transform2[5];\n  return transform1;\n}\n\n/**\n * Transforms the given coordinate with the given transform returning the\n * resulting, transformed coordinate. The coordinate will be modified in-place.\n *\n * @param {Transform} transform The transformation.\n * @param {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} coordinate The coordinate to transform.\n * @return {import(\"./coordinate.js\").Coordinate|import(\"./pixel.js\").Pixel} return coordinate so that operations can be\n *     chained together.\n */\nexport function apply(transform, coordinate) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  coordinate[0] = transform[0] * x + transform[2] * y + transform[4];\n  coordinate[1] = transform[1] * x + transform[3] * y + transform[5];\n  return coordinate;\n}\n\n/**\n * Applies rotation to the given transform.\n * @param {!Transform} transform Transform.\n * @param {number} angle Angle in radians.\n * @return {!Transform} The rotated transform.\n */\nexport function rotate(transform, angle) {\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  return multiply(transform, set(tmp_, cos, sin, -sin, cos, 0, 0));\n}\n\n/**\n * Applies scale to a given transform.\n * @param {!Transform} transform Transform.\n * @param {number} x Scale factor x.\n * @param {number} y Scale factor y.\n * @return {!Transform} The scaled transform.\n */\nexport function scale(transform, x, y) {\n  return multiply(transform, set(tmp_, x, 0, 0, y, 0, 0));\n}\n\n/**\n * Creates a scale transform.\n * @param {!Transform} target Transform to overwrite.\n * @param {number} x Scale factor x.\n * @param {number} y Scale factor y.\n * @return {!Transform} The scale transform.\n */\nexport function makeScale(target, x, y) {\n  return set(target, x, 0, 0, y, 0, 0);\n}\n\n/**\n * Applies translation to the given transform.\n * @param {!Transform} transform Transform.\n * @param {number} dx Translation x.\n * @param {number} dy Translation y.\n * @return {!Transform} The translated transform.\n */\nexport function translate(transform, dx, dy) {\n  return multiply(transform, set(tmp_, 1, 0, 0, 1, dx, dy));\n}\n\n/**\n * Creates a composite transform given an initial translation, scale, rotation, and\n * final translation (in that order only, not commutative).\n * @param {!Transform} transform The transform (will be modified in place).\n * @param {number} dx1 Initial translation x.\n * @param {number} dy1 Initial translation y.\n * @param {number} sx Scale factor x.\n * @param {number} sy Scale factor y.\n * @param {number} angle Rotation (in counter-clockwise radians).\n * @param {number} dx2 Final translation x.\n * @param {number} dy2 Final translation y.\n * @return {!Transform} The composite transform.\n */\nexport function compose(transform, dx1, dy1, sx, sy, angle, dx2, dy2) {\n  const sin = Math.sin(angle);\n  const cos = Math.cos(angle);\n  transform[0] = sx * cos;\n  transform[1] = sy * sin;\n  transform[2] = -sx * sin;\n  transform[3] = sy * cos;\n  transform[4] = dx2 * sx * cos - dy2 * sx * sin + dx1;\n  transform[5] = dx2 * sy * sin + dy2 * sy * cos + dy1;\n  return transform;\n}\n\n/**\n * Creates a composite transform given an initial translation, scale, rotation, and\n * final translation (in that order only, not commutative). The resulting transform\n * string can be applied as `transform` property of an HTMLElement's style.\n * @param {number} dx1 Initial translation x.\n * @param {number} dy1 Initial translation y.\n * @param {number} sx Scale factor x.\n * @param {number} sy Scale factor y.\n * @param {number} angle Rotation (in counter-clockwise radians).\n * @param {number} dx2 Final translation x.\n * @param {number} dy2 Final translation y.\n * @return {string} The composite css transform.\n * @api\n */\nexport function composeCssTransform(dx1, dy1, sx, sy, angle, dx2, dy2) {\n  return toString(compose(create(), dx1, dy1, sx, sy, angle, dx2, dy2));\n}\n\n/**\n * Invert the given transform.\n * @param {!Transform} source The source transform to invert.\n * @return {!Transform} The inverted (source) transform.\n */\nexport function invert(source) {\n  return makeInverse(source, source);\n}\n\n/**\n * Invert the given transform.\n * @param {!Transform} target Transform to be set as the inverse of\n *     the source transform.\n * @param {!Transform} source The source transform to invert.\n * @return {!Transform} The inverted (target) transform.\n */\nexport function makeInverse(target, source) {\n  const det = determinant(source);\n  assert(det !== 0, 'Transformation matrix cannot be inverted');\n\n  const a = source[0];\n  const b = source[1];\n  const c = source[2];\n  const d = source[3];\n  const e = source[4];\n  const f = source[5];\n\n  target[0] = d / det;\n  target[1] = -b / det;\n  target[2] = -c / det;\n  target[3] = a / det;\n  target[4] = (c * f - d * e) / det;\n  target[5] = -(a * f - b * e) / det;\n\n  return target;\n}\n\n/**\n * Returns the determinant of the given matrix.\n * @param {!Transform} mat Matrix.\n * @return {number} Determinant.\n */\nexport function determinant(mat) {\n  return mat[0] * mat[3] - mat[1] * mat[2];\n}\n\n/**\n * @type {HTMLElement}\n * @private\n */\nlet transformStringDiv;\n\n/**\n * A rounded string version of the transform.  This can be used\n * for CSS transforms.\n * @param {!Transform} mat Matrix.\n * @return {string} The transform as a string.\n */\nexport function toString(mat) {\n  const transformString = 'matrix(' + mat.join(', ') + ')';\n  if (WORKER_OFFSCREEN_CANVAS) {\n    return transformString;\n  }\n  const node =\n    transformStringDiv || (transformStringDiv = document.createElement('div'));\n  node.style.transform = transformString;\n  return node.style.transform;\n}\n","/**\n * @module ol/has\n */\n\nconst ua =\n  typeof navigator !== 'undefined' && typeof navigator.userAgent !== 'undefined'\n    ? navigator.userAgent.toLowerCase()\n    : '';\n\n/**\n * User agent string says we are dealing with Firefox as browser.\n * @type {boolean}\n */\nexport const FIREFOX = ua.includes('firefox');\n\n/**\n * User agent string says we are dealing with Safari as browser.\n * @type {boolean}\n */\nexport const SAFARI = ua.includes('safari') && !ua.includes('chrom');\n\n/**\n * https://bugs.webkit.org/show_bug.cgi?id=237906\n * @type {boolean}\n */\nexport const SAFARI_BUG_237906 =\n  SAFARI &&\n  (ua.includes('version/15.4') ||\n    /cpu (os|iphone os) 15_4 like mac os x/.test(ua));\n\n/**\n * User agent string says we are dealing with a WebKit engine.\n * @type {boolean}\n */\nexport const WEBKIT = ua.includes('webkit') && !ua.includes('edge');\n\n/**\n * User agent string says we are dealing with a Mac as platform.\n * @type {boolean}\n */\nexport const MAC = ua.includes('macintosh');\n\n/**\n * The ratio between physical pixels and device-independent pixels\n * (dips) on the device (`window.devicePixelRatio`).\n * @const\n * @type {number}\n * @api\n */\nexport const DEVICE_PIXEL_RATIO =\n  typeof devicePixelRatio !== 'undefined' ? devicePixelRatio : 1;\n\n/**\n * The execution context is a worker with OffscreenCanvas available.\n * @const\n * @type {boolean}\n */\nexport const WORKER_OFFSCREEN_CANVAS =\n  typeof WorkerGlobalScope !== 'undefined' &&\n  typeof OffscreenCanvas !== 'undefined' &&\n  self instanceof WorkerGlobalScope; //eslint-disable-line\n\n/**\n * Image.prototype.decode() is supported.\n * @type {boolean}\n */\nexport const IMAGE_DECODE =\n  typeof Image !== 'undefined' && Image.prototype.decode;\n\n/**\n * createImageBitmap() is supported.\n * @type {boolean}\n */\nexport const CREATE_IMAGE_BITMAP = typeof createImageBitmap === 'function';\n\n/**\n * @type {boolean}\n */\nexport const PASSIVE_EVENT_LISTENERS = (function () {\n  let passive = false;\n  try {\n    const options = Object.defineProperty({}, 'passive', {\n      get: function () {\n        passive = true;\n      },\n    });\n\n    window.addEventListener('_', null, options);\n    window.removeEventListener('_', null, options);\n  } catch (error) {\n    // passive not supported\n  }\n  return passive;\n})();\n","/**\n * @module ol/asserts\n */\n\n/**\n * @param {*} assertion Assertion we expected to be truthy.\n * @param {string} errorMessage Error message.\n */\nexport function assert(assertion, errorMessage) {\n  if (!assertion) {\n    throw new Error(errorMessage);\n  }\n}\n","/**\n * @module ol/extent\n */\nimport Relationship from './extent/Relationship.js';\n\n/**\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\n * @typedef {Array<number>} Extent\n * @api\n */\n\n/**\n * Extent corner.\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} Corner\n */\n\n/**\n * Build an extent that includes all given coordinates.\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Bounding extent.\n * @api\n */\nexport function boundingExtent(coordinates) {\n  const extent = createEmpty();\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Array<number>} xs Xs.\n * @param {Array<number>} ys Ys.\n * @param {Extent} [dest] Destination extent.\n * @private\n * @return {Extent} Extent.\n */\nfunction _boundingExtentXYs(xs, ys, dest) {\n  const minX = Math.min.apply(null, xs);\n  const minY = Math.min.apply(null, ys);\n  const maxX = Math.max.apply(null, xs);\n  const maxY = Math.max.apply(null, ys);\n  return createOrUpdate(minX, minY, maxX, maxY, dest);\n}\n\n/**\n * Return extent increased by the provided value.\n * @param {Extent} extent Extent.\n * @param {number} value The amount by which the extent should be buffered.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n * @api\n */\nexport function buffer(extent, value, dest) {\n  if (dest) {\n    dest[0] = extent[0] - value;\n    dest[1] = extent[1] - value;\n    dest[2] = extent[2] + value;\n    dest[3] = extent[3] + value;\n    return dest;\n  }\n  return [\n    extent[0] - value,\n    extent[1] - value,\n    extent[2] + value,\n    extent[3] + value,\n  ];\n}\n\n/**\n * Creates a clone of an extent.\n *\n * @param {Extent} extent Extent to clone.\n * @param {Extent} [dest] Extent.\n * @return {Extent} The clone.\n */\nexport function clone(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent.slice();\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {number} Closest squared distance.\n */\nexport function closestSquaredDistanceXY(extent, x, y) {\n  let dx, dy;\n  if (x < extent[0]) {\n    dx = extent[0] - x;\n  } else if (extent[2] < x) {\n    dx = x - extent[2];\n  } else {\n    dx = 0;\n  }\n  if (y < extent[1]) {\n    dy = extent[1] - y;\n  } else if (extent[3] < y) {\n    dy = y - extent[3];\n  } else {\n    dy = 0;\n  }\n  return dx * dx + dy * dy;\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @return {boolean} The coordinate is contained in the extent.\n * @api\n */\nexport function containsCoordinate(extent, coordinate) {\n  return containsXY(extent, coordinate[0], coordinate[1]);\n}\n\n/**\n * Check if one extent contains another.\n *\n * An extent is deemed contained if it lies completely within the other extent,\n * including if they share one or more edges.\n *\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The second extent is contained by or on the edge of the\n *     first.\n * @api\n */\nexport function containsExtent(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[0] &&\n    extent2[2] <= extent1[2] &&\n    extent1[1] <= extent2[1] &&\n    extent2[3] <= extent1[3]\n  );\n}\n\n/**\n * Check if the passed coordinate is contained or on the edge of the extent.\n *\n * @param {Extent} extent Extent.\n * @param {number} x X coordinate.\n * @param {number} y Y coordinate.\n * @return {boolean} The x, y values are contained in the extent.\n * @api\n */\nexport function containsXY(extent, x, y) {\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\n}\n\n/**\n * Get the relationship between a coordinate and extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate The coordinate.\n * @return {import(\"./extent/Relationship.js\").default} The relationship (bitwise compare with\n *     import(\"./extent/Relationship.js\").Relationship).\n */\nexport function coordinateRelationship(extent, coordinate) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const x = coordinate[0];\n  const y = coordinate[1];\n  let relationship = Relationship.UNKNOWN;\n  if (x < minX) {\n    relationship = relationship | Relationship.LEFT;\n  } else if (x > maxX) {\n    relationship = relationship | Relationship.RIGHT;\n  }\n  if (y < minY) {\n    relationship = relationship | Relationship.BELOW;\n  } else if (y > maxY) {\n    relationship = relationship | Relationship.ABOVE;\n  }\n  if (relationship === Relationship.UNKNOWN) {\n    relationship = Relationship.INTERSECTING;\n  }\n  return relationship;\n}\n\n/**\n * Create an empty extent.\n * @return {Extent} Empty extent.\n * @api\n */\nexport function createEmpty() {\n  return [Infinity, Infinity, -Infinity, -Infinity];\n}\n\n/**\n * Create a new extent or update the provided extent.\n * @param {number} minX Minimum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxX Maximum X.\n * @param {number} maxY Maximum Y.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdate(minX, minY, maxX, maxY, dest) {\n  if (dest) {\n    dest[0] = minX;\n    dest[1] = minY;\n    dest[2] = maxX;\n    dest[3] = maxY;\n    return dest;\n  }\n  return [minX, minY, maxX, maxY];\n}\n\n/**\n * Create a new empty extent or make the provided one empty.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateEmpty(dest) {\n  return createOrUpdate(Infinity, Infinity, -Infinity, -Infinity, dest);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinate(coordinate, dest) {\n  const x = coordinate[0];\n  const y = coordinate[1];\n  return createOrUpdate(x, y, x, y, dest);\n}\n\n/**\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromCoordinates(coordinates, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendCoordinates(extent, coordinates);\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromFlatCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  dest\n) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\n}\n\n/**\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function createOrUpdateFromRings(rings, dest) {\n  const extent = createOrUpdateEmpty(dest);\n  return extendRings(extent, rings);\n}\n\n/**\n * Determine if two extents are equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {boolean} The two extents are equivalent.\n * @api\n */\nexport function equals(extent1, extent2) {\n  return (\n    extent1[0] == extent2[0] &&\n    extent1[2] == extent2[2] &&\n    extent1[1] == extent2[1] &&\n    extent1[3] == extent2[3]\n  );\n}\n\n/**\n * Determine if two extents are approximately equivalent.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {number} tolerance Tolerance in extent coordinate units.\n * @return {boolean} The two extents differ by less than the tolerance.\n */\nexport function approximatelyEquals(extent1, extent2, tolerance) {\n  return (\n    Math.abs(extent1[0] - extent2[0]) < tolerance &&\n    Math.abs(extent1[2] - extent2[2]) < tolerance &&\n    Math.abs(extent1[1] - extent2[1]) < tolerance &&\n    Math.abs(extent1[3] - extent2[3]) < tolerance\n  );\n}\n\n/**\n * Modify an extent to include another extent.\n * @param {Extent} extent1 The extent to be modified.\n * @param {Extent} extent2 The extent that will be included in the first.\n * @return {Extent} A reference to the first (extended) extent.\n * @api\n */\nexport function extend(extent1, extent2) {\n  if (extent2[0] < extent1[0]) {\n    extent1[0] = extent2[0];\n  }\n  if (extent2[2] > extent1[2]) {\n    extent1[2] = extent2[2];\n  }\n  if (extent2[1] < extent1[1]) {\n    extent1[1] = extent2[1];\n  }\n  if (extent2[3] > extent1[3]) {\n    extent1[3] = extent2[3];\n  }\n  return extent1;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n */\nexport function extendCoordinate(extent, coordinate) {\n  if (coordinate[0] < extent[0]) {\n    extent[0] = coordinate[0];\n  }\n  if (coordinate[0] > extent[2]) {\n    extent[2] = coordinate[0];\n  }\n  if (coordinate[1] < extent[1]) {\n    extent[1] = coordinate[1];\n  }\n  if (coordinate[1] > extent[3]) {\n    extent[3] = coordinate[1];\n  }\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates Coordinates.\n * @return {Extent} Extent.\n */\nexport function extendCoordinates(extent, coordinates) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    extendCoordinate(extent, coordinates[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Extent} Extent.\n */\nexport function extendFlatCoordinates(\n  extent,\n  flatCoordinates,\n  offset,\n  end,\n  stride\n) {\n  for (; offset < end; offset += stride) {\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Array<Array<import(\"./coordinate.js\").Coordinate>>} rings Rings.\n * @return {Extent} Extent.\n */\nexport function extendRings(extent, rings) {\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\n    extendCoordinates(extent, rings[i]);\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} x X.\n * @param {number} y Y.\n */\nexport function extendXY(extent, x, y) {\n  extent[0] = Math.min(extent[0], x);\n  extent[1] = Math.min(extent[1], y);\n  extent[2] = Math.max(extent[2], x);\n  extent[3] = Math.max(extent[3], y);\n}\n\n/**\n * This function calls `callback` for each corner of the extent. If the\n * callback returns a truthy value the function returns that value\n * immediately. Otherwise the function returns `false`.\n * @param {Extent} extent Extent.\n * @param {function(import(\"./coordinate.js\").Coordinate): S} callback Callback.\n * @return {S|boolean} Value.\n * @template S\n */\nexport function forEachCorner(extent, callback) {\n  let val;\n  val = callback(getBottomLeft(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getBottomRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopRight(extent));\n  if (val) {\n    return val;\n  }\n  val = callback(getTopLeft(extent));\n  if (val) {\n    return val;\n  }\n  return false;\n}\n\n/**\n * Get the size of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Area.\n * @api\n */\nexport function getArea(extent) {\n  let area = 0;\n  if (!isEmpty(extent)) {\n    area = getWidth(extent) * getHeight(extent);\n  }\n  return area;\n}\n\n/**\n * Get the bottom left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom left coordinate.\n * @api\n */\nexport function getBottomLeft(extent) {\n  return [extent[0], extent[1]];\n}\n\n/**\n * Get the bottom right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Bottom right coordinate.\n * @api\n */\nexport function getBottomRight(extent) {\n  return [extent[2], extent[1]];\n}\n\n/**\n * Get the center coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Center.\n * @api\n */\nexport function getCenter(extent) {\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\n}\n\n/**\n * Get a corner coordinate of an extent.\n * @param {Extent} extent Extent.\n * @param {Corner} corner Corner.\n * @return {import(\"./coordinate.js\").Coordinate} Corner coordinate.\n */\nexport function getCorner(extent, corner) {\n  let coordinate;\n  if (corner === 'bottom-left') {\n    coordinate = getBottomLeft(extent);\n  } else if (corner === 'bottom-right') {\n    coordinate = getBottomRight(extent);\n  } else if (corner === 'top-left') {\n    coordinate = getTopLeft(extent);\n  } else if (corner === 'top-right') {\n    coordinate = getTopRight(extent);\n  } else {\n    throw new Error('Invalid corner');\n  }\n  return coordinate;\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Enlarged area.\n */\nexport function getEnlargedArea(extent1, extent2) {\n  const minX = Math.min(extent1[0], extent2[0]);\n  const minY = Math.min(extent1[1], extent2[1]);\n  const maxX = Math.max(extent1[2], extent2[2]);\n  const maxY = Math.max(extent1[3], extent2[3]);\n  return (maxX - minX) * (maxY - minY);\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @param {Extent} [dest] Destination extent.\n * @return {Extent} Extent.\n */\nexport function getForViewAndSize(center, resolution, rotation, size, dest) {\n  const [x0, y0, x1, y1, x2, y2, x3, y3] = getRotatedViewport(\n    center,\n    resolution,\n    rotation,\n    size\n  );\n  return createOrUpdate(\n    Math.min(x0, x1, x2, x3),\n    Math.min(y0, y1, y2, y3),\n    Math.max(x0, x1, x2, x3),\n    Math.max(y0, y1, y2, y3),\n    dest\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} center Center.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @param {import(\"./size.js\").Size} size Size.\n * @return {Array<number>} Linear ring representing the viewport.\n */\nexport function getRotatedViewport(center, resolution, rotation, size) {\n  const dx = (resolution * size[0]) / 2;\n  const dy = (resolution * size[1]) / 2;\n  const cosRotation = Math.cos(rotation);\n  const sinRotation = Math.sin(rotation);\n  const xCos = dx * cosRotation;\n  const xSin = dx * sinRotation;\n  const yCos = dy * cosRotation;\n  const ySin = dy * sinRotation;\n  const x = center[0];\n  const y = center[1];\n  return [\n    x - xCos + ySin,\n    y - xSin - yCos,\n    x - xCos - ySin,\n    y - xSin + yCos,\n    x + xCos - ySin,\n    y + xSin + yCos,\n    x + xCos + ySin,\n    y + xSin - yCos,\n    x - xCos + ySin,\n    y - xSin - yCos,\n  ];\n}\n\n/**\n * Get the height of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Height.\n * @api\n */\nexport function getHeight(extent) {\n  return extent[3] - extent[1];\n}\n\n/**\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @return {number} Intersection area.\n */\nexport function getIntersectionArea(extent1, extent2) {\n  const intersection = getIntersection(extent1, extent2);\n  return getArea(intersection);\n}\n\n/**\n * Get the intersection of two extents.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent 2.\n * @param {Extent} [dest] Optional extent to populate with intersection.\n * @return {Extent} Intersecting extent.\n * @api\n */\nexport function getIntersection(extent1, extent2, dest) {\n  const intersection = dest ? dest : createEmpty();\n  if (intersects(extent1, extent2)) {\n    if (extent1[0] > extent2[0]) {\n      intersection[0] = extent1[0];\n    } else {\n      intersection[0] = extent2[0];\n    }\n    if (extent1[1] > extent2[1]) {\n      intersection[1] = extent1[1];\n    } else {\n      intersection[1] = extent2[1];\n    }\n    if (extent1[2] < extent2[2]) {\n      intersection[2] = extent1[2];\n    } else {\n      intersection[2] = extent2[2];\n    }\n    if (extent1[3] < extent2[3]) {\n      intersection[3] = extent1[3];\n    } else {\n      intersection[3] = extent2[3];\n    }\n  } else {\n    createOrUpdateEmpty(intersection);\n  }\n  return intersection;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @return {number} Margin.\n */\nexport function getMargin(extent) {\n  return getWidth(extent) + getHeight(extent);\n}\n\n/**\n * Get the size (width, height) of an extent.\n * @param {Extent} extent The extent.\n * @return {import(\"./size.js\").Size} The extent size.\n * @api\n */\nexport function getSize(extent) {\n  return [extent[2] - extent[0], extent[3] - extent[1]];\n}\n\n/**\n * Get the top left coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top left coordinate.\n * @api\n */\nexport function getTopLeft(extent) {\n  return [extent[0], extent[3]];\n}\n\n/**\n * Get the top right coordinate of an extent.\n * @param {Extent} extent Extent.\n * @return {import(\"./coordinate.js\").Coordinate} Top right coordinate.\n * @api\n */\nexport function getTopRight(extent) {\n  return [extent[2], extent[3]];\n}\n\n/**\n * Get the width of an extent.\n * @param {Extent} extent Extent.\n * @return {number} Width.\n * @api\n */\nexport function getWidth(extent) {\n  return extent[2] - extent[0];\n}\n\n/**\n * Determine if one extent intersects another.\n * @param {Extent} extent1 Extent 1.\n * @param {Extent} extent2 Extent.\n * @return {boolean} The two extents intersect.\n * @api\n */\nexport function intersects(extent1, extent2) {\n  return (\n    extent1[0] <= extent2[2] &&\n    extent1[2] >= extent2[0] &&\n    extent1[1] <= extent2[3] &&\n    extent1[3] >= extent2[1]\n  );\n}\n\n/**\n * Determine if an extent is empty.\n * @param {Extent} extent Extent.\n * @return {boolean} Is empty.\n * @api\n */\nexport function isEmpty(extent) {\n  return extent[2] < extent[0] || extent[3] < extent[1];\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {Extent} [dest] Extent.\n * @return {Extent} Extent.\n */\nexport function returnOrUpdate(extent, dest) {\n  if (dest) {\n    dest[0] = extent[0];\n    dest[1] = extent[1];\n    dest[2] = extent[2];\n    dest[3] = extent[3];\n    return dest;\n  }\n  return extent;\n}\n\n/**\n * @param {Extent} extent Extent.\n * @param {number} value Value.\n */\nexport function scaleFromCenter(extent, value) {\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\n  extent[0] -= deltaX;\n  extent[2] += deltaX;\n  extent[1] -= deltaY;\n  extent[3] += deltaY;\n}\n\n/**\n * Determine if the segment between two coordinates intersects (crosses,\n * touches, or is contained by) the provided extent.\n * @param {Extent} extent The extent.\n * @param {import(\"./coordinate.js\").Coordinate} start Segment start coordinate.\n * @param {import(\"./coordinate.js\").Coordinate} end Segment end coordinate.\n * @return {boolean} The segment intersects the extent.\n */\nexport function intersectsSegment(extent, start, end) {\n  let intersects = false;\n  const startRel = coordinateRelationship(extent, start);\n  const endRel = coordinateRelationship(extent, end);\n  if (\n    startRel === Relationship.INTERSECTING ||\n    endRel === Relationship.INTERSECTING\n  ) {\n    intersects = true;\n  } else {\n    const minX = extent[0];\n    const minY = extent[1];\n    const maxX = extent[2];\n    const maxY = extent[3];\n    const startX = start[0];\n    const startY = start[1];\n    const endX = end[0];\n    const endY = end[1];\n    const slope = (endY - startY) / (endX - startX);\n    let x, y;\n    if (!!(endRel & Relationship.ABOVE) && !(startRel & Relationship.ABOVE)) {\n      // potentially intersects top\n      x = endX - (endY - maxY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.RIGHT) &&\n      !(startRel & Relationship.RIGHT)\n    ) {\n      // potentially intersects right\n      y = endY - (endX - maxX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.BELOW) &&\n      !(startRel & Relationship.BELOW)\n    ) {\n      // potentially intersects bottom\n      x = endX - (endY - minY) / slope;\n      intersects = x >= minX && x <= maxX;\n    }\n    if (\n      !intersects &&\n      !!(endRel & Relationship.LEFT) &&\n      !(startRel & Relationship.LEFT)\n    ) {\n      // potentially intersects left\n      y = endY - (endX - minX) * slope;\n      intersects = y >= minY && y <= maxY;\n    }\n  }\n  return intersects;\n}\n\n/**\n * Apply a transform function to the extent.\n * @param {Extent} extent Extent.\n * @param {import(\"./proj.js\").TransformFunction} transformFn Transform function.\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\n * @param {Extent} [dest] Destination extent.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {Extent} Extent.\n * @api\n */\nexport function applyTransform(extent, transformFn, dest, stops) {\n  if (isEmpty(extent)) {\n    return createOrUpdateEmpty(dest);\n  }\n  let coordinates = [];\n  if (stops > 1) {\n    const width = extent[2] - extent[0];\n    const height = extent[3] - extent[1];\n    for (let i = 0; i < stops; ++i) {\n      coordinates.push(\n        extent[0] + (width * i) / stops,\n        extent[1],\n        extent[2],\n        extent[1] + (height * i) / stops,\n        extent[2] - (width * i) / stops,\n        extent[3],\n        extent[0],\n        extent[3] - (height * i) / stops\n      );\n    }\n  } else {\n    coordinates = [\n      extent[0],\n      extent[1],\n      extent[2],\n      extent[1],\n      extent[2],\n      extent[3],\n      extent[0],\n      extent[3],\n    ];\n  }\n  transformFn(coordinates, coordinates, 2);\n  const xs = [];\n  const ys = [];\n  for (let i = 0, l = coordinates.length; i < l; i += 2) {\n    xs.push(coordinates[i]);\n    ys.push(coordinates[i + 1]);\n  }\n  return _boundingExtentXYs(xs, ys, dest);\n}\n\n/**\n * Modifies the provided extent in-place to be within the real world\n * extent.\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Extent} The extent within the real world extent.\n */\nexport function wrapX(extent, projection) {\n  const projectionExtent = projection.getExtent();\n  const center = getCenter(extent);\n  if (\n    projection.canWrapX() &&\n    (center[0] < projectionExtent[0] || center[0] >= projectionExtent[2])\n  ) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.floor(\n      (center[0] - projectionExtent[0]) / worldWidth\n    );\n    const offset = worldsAway * worldWidth;\n    extent[0] -= offset;\n    extent[2] -= offset;\n  }\n  return extent;\n}\n\n/**\n * Fits the extent to the real world\n *\n * If the extent does not cross the anti meridian, this will return the extent in an array\n * If the extent crosses the anti meridian, the extent will be sliced, so each part fits within the\n * real world\n *\n *\n * @param {Extent} extent Extent.\n * @param {import(\"./proj/Projection.js\").default} projection Projection\n * @return {Array<Extent>} The extent within the real world extent.\n */\nexport function wrapAndSliceX(extent, projection) {\n  if (projection.canWrapX()) {\n    const projectionExtent = projection.getExtent();\n\n    if (!isFinite(extent[0]) || !isFinite(extent[2])) {\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n\n    wrapX(extent, projection);\n    const worldWidth = getWidth(projectionExtent);\n\n    if (getWidth(extent) > worldWidth) {\n      // the extent wraps around on itself\n      return [[projectionExtent[0], extent[1], projectionExtent[2], extent[3]]];\n    }\n    if (extent[0] < projectionExtent[0]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0] + worldWidth, extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2], extent[3]],\n      ];\n    }\n    if (extent[2] > projectionExtent[2]) {\n      // the extent crosses the anti meridian, so it needs to be sliced\n      return [\n        [extent[0], extent[1], projectionExtent[2], extent[3]],\n        [projectionExtent[0], extent[1], extent[2] - worldWidth, extent[3]],\n      ];\n    }\n  }\n\n  return [extent];\n}\n","/**\n * @module ol/extent/Relationship\n */\n\n/**\n * Relationship to an extent.\n * @enum {number}\n */\nexport default {\n  UNKNOWN: 0,\n  INTERSECTING: 1,\n  ABOVE: 2,\n  RIGHT: 4,\n  BELOW: 8,\n  LEFT: 16,\n};\n","/**\n * @module ol/style/IconImageCache\n */\nimport {asString} from '../color.js';\n\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.\n */\nclass IconImageCache {\n  constructor() {\n    /**\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\n     * @private\n     */\n    this.cache_ = {};\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.cacheSize_ = 0;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxCacheSize_ = 32;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.cache_ = {};\n    this.cacheSize_ = 0;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.cacheSize_ > this.maxCacheSize_;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  expire() {\n    if (this.canExpireCache()) {\n      let i = 0;\n      for (const key in this.cache_) {\n        const iconImage = this.cache_[key];\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n          delete this.cache_[key];\n          --this.cacheSize_;\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @return {import(\"./IconImage.js\").default} Icon image.\n   */\n  get(src, crossOrigin, color) {\n    const key = getKey(src, crossOrigin, color);\n    return key in this.cache_ ? this.cache_[key] : null;\n  }\n\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n   */\n  set(src, crossOrigin, color, iconImage) {\n    const key = getKey(src, crossOrigin, color);\n    this.cache_[key] = iconImage;\n    ++this.cacheSize_;\n  }\n\n  /**\n   * Set the cache size of the icon cache. Default is `32`. Change this value when\n   * your map uses more than 32 different icon images and you are not caching icon\n   * styles on the application level.\n   * @param {number} maxCacheSize Cache max size.\n   * @api\n   */\n  setSize(maxCacheSize) {\n    this.maxCacheSize_ = maxCacheSize;\n    this.expire();\n  }\n}\n\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\nfunction getKey(src, crossOrigin, color) {\n  const colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\n\nexport default IconImageCache;\n\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\nexport const shared = new IconImageCache();\n","/**\n * @module ol/color\n */\nimport {clamp} from './math.js';\n\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\nconst HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\n\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\nconst NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\n\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  }\n  return toString(color);\n}\n\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\nfunction fromNamed(color) {\n  const el = document.createElement('div');\n  el.style.color = color;\n  if (el.style.color !== '') {\n    document.body.appendChild(el);\n    const rgb = getComputedStyle(el).color;\n    document.body.removeChild(el);\n    return rgb;\n  }\n  return '';\n}\n\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\nexport const fromString = (function () {\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n  // semantics, whenever the cache grows too large we simply delete an\n  // arbitrary 25% of the entries.\n\n  /**\n   * @const\n   * @type {number}\n   */\n  const MAX_CACHE_SIZE = 1024;\n\n  /**\n   * @type {Object<string, Color>}\n   */\n  const cache = {};\n\n  /**\n   * @type {number}\n   */\n  let cacheSize = 0;\n\n  return (\n    /**\n     * @param {string} s String.\n     * @return {Color} Color.\n     */\n    function (s) {\n      let color;\n      if (cache.hasOwnProperty(s)) {\n        color = cache[s];\n      } else {\n        if (cacheSize >= MAX_CACHE_SIZE) {\n          let i = 0;\n          for (const key in cache) {\n            if ((i++ & 3) === 0) {\n              delete cache[key];\n              --cacheSize;\n            }\n          }\n        }\n        color = fromStringInternal_(s);\n        cache[s] = color;\n        ++cacheSize;\n      }\n      return color;\n    }\n  );\n})();\n\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  }\n  return fromString(color);\n}\n\n/**\n * @param {string} s String.\n * @private\n * @return {Color} Color.\n */\nfunction fromStringInternal_(s) {\n  let r, g, b, a, color;\n\n  if (NAMED_COLOR_RE_.exec(s)) {\n    s = fromNamed(s);\n  }\n\n  if (HEX_COLOR_RE_.exec(s)) {\n    // hex\n    const n = s.length - 1; // number of hex digits\n    let d; // number of digits per channel\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n    const hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n    color = [r, g, b, a / 255];\n  } else if (s.startsWith('rgba(')) {\n    // rgba()\n    color = s.slice(5, -1).split(',').map(Number);\n    normalize(color);\n  } else if (s.startsWith('rgb(')) {\n    // rgb()\n    color = s.slice(4, -1).split(',').map(Number);\n    color.push(1);\n    normalize(color);\n  } else {\n    throw new Error('Invalid color');\n  }\n  return color;\n}\n\n/**\n * TODO this function is only used in the test, we probably shouldn't export it\n * @param {Color} color Color.\n * @return {Color} Clamped color.\n */\nexport function normalize(color) {\n  color[0] = clamp((color[0] + 0.5) | 0, 0, 255);\n  color[1] = clamp((color[1] + 0.5) | 0, 0, 255);\n  color[2] = clamp((color[2] + 0.5) | 0, 0, 255);\n  color[3] = clamp(color[3], 0, 1);\n  return color;\n}\n\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\nexport function toString(color) {\n  let r = color[0];\n  if (r != (r | 0)) {\n    r = (r + 0.5) | 0;\n  }\n  let g = color[1];\n  if (g != (g | 0)) {\n    g = (g + 0.5) | 0;\n  }\n  let b = color[2];\n  if (b != (b | 0)) {\n    b = (b + 0.5) | 0;\n  }\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\nexport function isStringColor(s) {\n  if (NAMED_COLOR_RE_.test(s)) {\n    s = fromNamed(s);\n  }\n  return HEX_COLOR_RE_.test(s) || s.startsWith('rgba(') || s.startsWith('rgb(');\n}\n","/**\n * @module ol/math\n */\n\n/**\n * Takes a number and clamps it to within the provided bounds.\n * @param {number} value The input number.\n * @param {number} min The minimum value to return.\n * @param {number} max The maximum value to return.\n * @return {number} The input number if it is within bounds, or the nearest\n *     number within the bounds.\n */\nexport function clamp(value, min, max) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Returns the square of the closest distance between the point (x, y) and the\n * line segment (x1, y1) to (x2, y2).\n * @param {number} x X.\n * @param {number} y Y.\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredSegmentDistance(x, y, x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  if (dx !== 0 || dy !== 0) {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      x1 = x2;\n      y1 = y2;\n    } else if (t > 0) {\n      x1 += dx * t;\n      y1 += dy * t;\n    }\n  }\n  return squaredDistance(x, y, x1, y1);\n}\n\n/**\n * Returns the square of the distance between the points (x1, y1) and (x2, y2).\n * @param {number} x1 X1.\n * @param {number} y1 Y1.\n * @param {number} x2 X2.\n * @param {number} y2 Y2.\n * @return {number} Squared distance.\n */\nexport function squaredDistance(x1, y1, x2, y2) {\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  return dx * dx + dy * dy;\n}\n\n/**\n * Solves system of linear equations using Gaussian elimination method.\n *\n * @param {Array<Array<number>>} mat Augmented matrix (n x n + 1 column)\n *                                     in row-major order.\n * @return {Array<number>} The resulting vector.\n */\nexport function solveLinearSystem(mat) {\n  const n = mat.length;\n\n  for (let i = 0; i < n; i++) {\n    // Find max in the i-th column (ignoring i - 1 first rows)\n    let maxRow = i;\n    let maxEl = Math.abs(mat[i][i]);\n    for (let r = i + 1; r < n; r++) {\n      const absValue = Math.abs(mat[r][i]);\n      if (absValue > maxEl) {\n        maxEl = absValue;\n        maxRow = r;\n      }\n    }\n\n    if (maxEl === 0) {\n      return null; // matrix is singular\n    }\n\n    // Swap max row with i-th (current) row\n    const tmp = mat[maxRow];\n    mat[maxRow] = mat[i];\n    mat[i] = tmp;\n\n    // Subtract the i-th row to make all the remaining rows 0 in the i-th column\n    for (let j = i + 1; j < n; j++) {\n      const coef = -mat[j][i] / mat[i][i];\n      for (let k = i; k < n + 1; k++) {\n        if (i == k) {\n          mat[j][k] = 0;\n        } else {\n          mat[j][k] += coef * mat[i][k];\n        }\n      }\n    }\n  }\n\n  // Solve Ax=b for upper triangular matrix A (mat)\n  const x = new Array(n);\n  for (let l = n - 1; l >= 0; l--) {\n    x[l] = mat[l][n] / mat[l][l];\n    for (let m = l - 1; m >= 0; m--) {\n      mat[m][n] -= mat[m][l] * x[l];\n    }\n  }\n  return x;\n}\n\n/**\n * Converts radians to to degrees.\n *\n * @param {number} angleInRadians Angle in radians.\n * @return {number} Angle in degrees.\n */\nexport function toDegrees(angleInRadians) {\n  return (angleInRadians * 180) / Math.PI;\n}\n\n/**\n * Converts degrees to radians.\n *\n * @param {number} angleInDegrees Angle in degrees.\n * @return {number} Angle in radians.\n */\nexport function toRadians(angleInDegrees) {\n  return (angleInDegrees * Math.PI) / 180;\n}\n\n/**\n * Returns the modulo of a / b, depending on the sign of b.\n *\n * @param {number} a Dividend.\n * @param {number} b Divisor.\n * @return {number} Modulo.\n */\nexport function modulo(a, b) {\n  const r = a % b;\n  return r * b < 0 ? r + b : r;\n}\n\n/**\n * Calculates the linearly interpolated value of x between a and b.\n *\n * @param {number} a Number\n * @param {number} b Number\n * @param {number} x Value to be interpolated.\n * @return {number} Interpolated value.\n */\nexport function lerp(a, b, x) {\n  return a + x * (b - a);\n}\n\n/**\n * Returns a number with a limited number of decimal digits.\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The input number with a limited number of decimal digits.\n */\nexport function toFixed(n, decimals) {\n  const factor = Math.pow(10, decimals);\n  return Math.round(n * factor) / factor;\n}\n\n/**\n * Rounds a number to the nearest integer value considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The nearest integer.\n */\nexport function round(n, decimals) {\n  return Math.round(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next smaller integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next smaller integer.\n */\nexport function floor(n, decimals) {\n  return Math.floor(toFixed(n, decimals));\n}\n\n/**\n * Rounds a number to the next bigger integer considering only the given number\n * of decimal digits (with rounding on the final digit).\n * @param {number} n The input number.\n * @param {number} decimals The maximum number of decimal digits.\n * @return {number} The next bigger integer.\n */\nexport function ceil(n, decimals) {\n  return Math.ceil(toFixed(n, decimals));\n}\n","/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport View from '../View.js';\nimport {assert} from '../asserts.js';\nimport {intersects} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../Map.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/**\n * @typedef {'sourceready'|'change:source'} LayerEventType\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     LayerEventType, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|LayerEventType|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../Map.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number | undefined} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * Components like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * [layer.setMap()]{@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n * A `sourceready` event is fired when the layer's source is ready.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n * @fires import(\"../events/Event.js\").BaseEvent#sourceready\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = Object.assign({}, options);\n    delete baseOptions.source;\n\n    super(baseOptions);\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {RendererType}\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.sourceReady_ = false;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.rendered = false;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    this.addChangeListener(\n      LayerProperty.SOURCE,\n      this.handleSourcePropertyChange_\n    );\n\n    const source = options.source\n      ? /** @type {SourceType} */ (options.source)\n      : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    array = array ? array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(states) {\n    states = states ? states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\n  }\n\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n  getRenderSource() {\n    return this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? 'undefined' : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n    if (this.sourceReady_ || this.getSource().getState() !== 'ready') {\n      return;\n    }\n    this.sourceReady_ = true;\n    this.dispatchEvent('sourceready');\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    this.sourceReady_ = false;\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(\n        source,\n        EventType.CHANGE,\n        this.handleSourceChange_,\n        this\n      );\n      if (source.getState() === 'ready') {\n        this.sourceReady_ = true;\n        setTimeout(() => {\n          this.dispatchEvent('sourceready');\n        }, 0);\n      }\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    if (!this.renderer_) {\n      return Promise.resolve([]);\n    }\n    return this.renderer_.getFeatures(pixel);\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n    return this.renderer_.getData(pixel);\n  }\n\n  /**\n   * The layer is visible on the map view, i.e. within its min/max resolution or zoom and\n   * extent, not set to `visible: false`, and not inside a layer group that is set\n   * to `visible: false`.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {boolean} The layer is visible in the map view.\n   * @api\n   */\n  isVisible(view) {\n    let frameState;\n    const map = this.getMapInternal();\n    if (!view && map) {\n      view = map.getView();\n    }\n    if (view instanceof View) {\n      frameState = {\n        viewState: view.getState(),\n        extent: view.calculateExtent(),\n      };\n    } else {\n      frameState = view;\n    }\n    if (!frameState.layerStatesArray && map) {\n      frameState.layerStatesArray = map.getLayerGroup().getLayerStatesArray();\n    }\n    let layerState;\n    if (frameState.layerStatesArray) {\n      layerState = frameState.layerStatesArray.find(\n        (layerState) => layerState.layer === this\n      );\n    } else {\n      layerState = this.getLayerState();\n    }\n\n    const layerExtent = this.getExtent();\n\n    return (\n      inView(layerState, frameState.viewState) &&\n      (!layerExtent || intersects(layerExtent, frameState.extent))\n    );\n  }\n\n  /**\n   * Get the attributions of the source of this layer for the given view.\n   * @param {View|import(\"../View.js\").ViewStateLayerStateExtent} [view] View or {@link import(\"../Map.js\").FrameState}.\n   * Only required when the layer is not added to a map.\n   * @return {Array<string>} Attributions for this layer at the given view.\n   * @api\n   */\n  getAttributions(view) {\n    if (!this.isVisible(view)) {\n      return [];\n    }\n    let getAttributions;\n    const source = this.getSource();\n    if (source) {\n      getAttributions = source.getAttributions();\n    }\n    if (!getAttributions) {\n      return [];\n    }\n    const frameState =\n      view instanceof View ? view.getViewStateAndExtent() : view;\n    let attributions = getAttributions(frameState);\n    if (!Array.isArray(attributions)) {\n      attributions = [attributions];\n    }\n    return attributions;\n  }\n\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement|null} The rendered element.\n   */\n  render(frameState, target) {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n    return null;\n  }\n\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n  unrender() {\n    this.rendered = false;\n  }\n\n  /**\n   * For use inside the library only.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMapInternal(map) {\n    if (!map) {\n      this.unrender();\n    }\n    this.set(LayerProperty.MAP, map);\n  }\n\n  /**\n   * For use inside the library only.\n   * @return {import(\"../Map.js\").default|null} Map.\n   */\n  getMapInternal() {\n    return this.get(LayerProperty.MAP);\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(\n        map,\n        RenderEventType.PRECOMPOSE,\n        function (evt) {\n          const renderEvent =\n            /** @type {import(\"../render/Event.js\").default} */ (evt);\n          const layerStatesArray = renderEvent.frameState.layerStatesArray;\n          const layerState = this.getLayerState(false);\n          assert(\n            !layerStatesArray.some(function (arrayLayerState) {\n              return arrayLayerState.layer === layerState.layer;\n            }),\n            'A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.'\n          );\n          layerStatesArray.push(layerState);\n        },\n        this\n      );\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */\n  getRenderer() {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  }\n\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  hasRenderer() {\n    return !!this.renderer_;\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n\n    this.setSource(null);\n    super.disposeInternal();\n  }\n}\n\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  const resolution = viewState.resolution;\n  if (\n    resolution < layerState.minResolution ||\n    resolution >= layerState.maxResolution\n  ) {\n    return false;\n  }\n  const zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\n\nexport default Layer;\n","/**\n * @module ol/layer/Base\n */\nimport BaseObject from '../Object.js';\nimport LayerProperty from './Property.js';\nimport {abstract} from '../util.js';\nimport {assert} from '../asserts.js';\nimport {clamp} from '../math.js';\n\n/**\n * A css color, or a function called with a view resolution returning a css color.\n *\n * @typedef {string|function(number):string} BackgroundColor\n * @api\n */\n\n/**\n * @typedef {import(\"../ObjectEventType\").Types|'change:extent'|'change:maxResolution'|'change:maxZoom'|\n *    'change:minResolution'|'change:minZoom'|'change:opacity'|'change:visible'|'change:zIndex'} BaseLayerObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<BaseLayerObjectEventTypes, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|BaseLayerObjectEventTypes, Return>} BaseLayerOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number | undefined} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Note that with {@link module:ol/layer/Base~BaseLayer} and all its subclasses, any property set in\n * the options is set as a {@link module:ol/Object~BaseObject} property on the layer object, so\n * is observable, and has get/set accessors.\n *\n * @api\n */\nclass BaseLayer extends BaseObject {\n  /**\n   * @param {Options} options Layer options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseLayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {BackgroundColor|false}\n     * @private\n     */\n    this.background_ = options.background;\n\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = Object.assign({}, options);\n    if (typeof options.properties === 'object') {\n      delete properties.properties;\n      Object.assign(properties, options.properties);\n    }\n\n    properties[LayerProperty.OPACITY] =\n      options.opacity !== undefined ? options.opacity : 1;\n    assert(\n      typeof properties[LayerProperty.OPACITY] === 'number',\n      'Layer opacity must be a number'\n    );\n\n    properties[LayerProperty.VISIBLE] =\n      options.visible !== undefined ? options.visible : true;\n    properties[LayerProperty.Z_INDEX] = options.zIndex;\n    properties[LayerProperty.MAX_RESOLUTION] =\n      options.maxResolution !== undefined ? options.maxResolution : Infinity;\n    properties[LayerProperty.MIN_RESOLUTION] =\n      options.minResolution !== undefined ? options.minResolution : 0;\n    properties[LayerProperty.MIN_ZOOM] =\n      options.minZoom !== undefined ? options.minZoom : -Infinity;\n    properties[LayerProperty.MAX_ZOOM] =\n      options.maxZoom !== undefined ? options.maxZoom : Infinity;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.className_ =\n      properties.className !== undefined ? properties.className : 'ol-layer';\n    delete properties.className;\n\n    this.setProperties(properties);\n\n    /**\n     * @type {import(\"./Layer.js\").State}\n     * @private\n     */\n    this.state_ = null;\n  }\n\n  /**\n   * Get the background for this layer.\n   * @return {BackgroundColor|false} Layer background.\n   */\n  getBackground() {\n    return this.background_;\n  }\n\n  /**\n   * @return {string} CSS class name.\n   */\n  getClassName() {\n    return this.className_;\n  }\n\n  /**\n   * This method is not meant to be called by layers or layer renderers because the state\n   * is incorrect if the layer is included in a layer group.\n   *\n   * @param {boolean} [managed] Layer is managed.\n   * @return {import(\"./Layer.js\").State} Layer state.\n   */\n  getLayerState(managed) {\n    /** @type {import(\"./Layer.js\").State} */\n    const state =\n      this.state_ ||\n      /** @type {?} */ ({\n        layer: this,\n        managed: managed === undefined ? true : managed,\n      });\n    const zIndex = this.getZIndex();\n    state.opacity = clamp(Math.round(this.getOpacity() * 100) / 100, 0, 1);\n    state.visible = this.getVisible();\n    state.extent = this.getExtent();\n    state.zIndex = zIndex === undefined && !state.managed ? Infinity : zIndex;\n    state.maxResolution = this.getMaxResolution();\n    state.minResolution = Math.max(this.getMinResolution(), 0);\n    state.minZoom = this.getMinZoom();\n    state.maxZoom = this.getMaxZoom();\n    this.state_ = state;\n\n    return state;\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be\n   *     modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"./Layer.js\").State>} [states] Optional list of layer\n   *     states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(states) {\n    return abstract();\n  }\n\n  /**\n   * Return the {@link module:ol/extent~Extent extent} of the layer or `undefined` if it\n   * will be visible regardless of extent.\n   * @return {import(\"../extent.js\").Extent|undefined} The layer extent.\n   * @observable\n   * @api\n   */\n  getExtent() {\n    return /** @type {import(\"../extent.js\").Extent|undefined} */ (\n      this.get(LayerProperty.EXTENT)\n    );\n  }\n\n  /**\n   * Return the maximum resolution of the layer. Returns Infinity if\n   * the layer has no maximum resolution set.\n   * @return {number} The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMaxResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum resolution of the layer. Returns 0 if\n   * the layer has no minimum resolution set.\n   * @return {number} The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  getMinResolution() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_RESOLUTION));\n  }\n\n  /**\n   * Return the minimum zoom level of the layer. Returns -Infinity if\n   * the layer has no minimum zoom set.\n   * @return {number} The minimum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MIN_ZOOM));\n  }\n\n  /**\n   * Return the maximum zoom level of the layer. Returns Infinity if\n   * the layer has no maximum zoom set.\n   * @return {number} The maximum zoom level of the layer.\n   * @observable\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (this.get(LayerProperty.MAX_ZOOM));\n  }\n\n  /**\n   * Return the opacity of the layer (between 0 and 1).\n   * @return {number} The opacity of the layer.\n   * @observable\n   * @api\n   */\n  getOpacity() {\n    return /** @type {number} */ (this.get(LayerProperty.OPACITY));\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    return abstract();\n  }\n\n  /**\n   * Return the value of this layer's `visible` property. To find out whether the layer\n   * is visible on a map, use `isVisible()` instead.\n   * @return {boolean} The value of the `visible` property of the layer.\n   * @observable\n   * @api\n   */\n  getVisible() {\n    return /** @type {boolean} */ (this.get(LayerProperty.VISIBLE));\n  }\n\n  /**\n   * Return the Z-index of the layer, which is used to order layers before\n   * rendering. Returns undefined if the layer is unmanaged.\n   * @return {number|undefined} The Z-index of the layer.\n   * @observable\n   * @api\n   */\n  getZIndex() {\n    return /** @type {number|undefined} */ (this.get(LayerProperty.Z_INDEX));\n  }\n\n  /**\n   * Sets the background color.\n   * @param {BackgroundColor} [background] Background color.\n   */\n  setBackground(background) {\n    this.background_ = background;\n    this.changed();\n  }\n\n  /**\n   * Set the extent at which the layer is visible.  If `undefined`, the layer\n   * will be visible at all extents.\n   * @param {import(\"../extent.js\").Extent|undefined} extent The extent of the layer.\n   * @observable\n   * @api\n   */\n  setExtent(extent) {\n    this.set(LayerProperty.EXTENT, extent);\n  }\n\n  /**\n   * Set the maximum resolution at which the layer is visible.\n   * @param {number} maxResolution The maximum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMaxResolution(maxResolution) {\n    this.set(LayerProperty.MAX_RESOLUTION, maxResolution);\n  }\n\n  /**\n   * Set the minimum resolution at which the layer is visible.\n   * @param {number} minResolution The minimum resolution of the layer.\n   * @observable\n   * @api\n   */\n  setMinResolution(minResolution) {\n    this.set(LayerProperty.MIN_RESOLUTION, minResolution);\n  }\n\n  /**\n   * Set the maximum zoom (exclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} maxZoom The maximum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMaxZoom(maxZoom) {\n    this.set(LayerProperty.MAX_ZOOM, maxZoom);\n  }\n\n  /**\n   * Set the minimum zoom (inclusive) at which the layer is visible.\n   * Note that the zoom levels for layer visibility are based on the\n   * view zoom level, which may be different from a tile source zoom level.\n   * @param {number} minZoom The minimum zoom of the layer.\n   * @observable\n   * @api\n   */\n  setMinZoom(minZoom) {\n    this.set(LayerProperty.MIN_ZOOM, minZoom);\n  }\n\n  /**\n   * Set the opacity of the layer, allowed values range from 0 to 1.\n   * @param {number} opacity The opacity of the layer.\n   * @observable\n   * @api\n   */\n  setOpacity(opacity) {\n    assert(typeof opacity === 'number', 'Layer opacity must be a number');\n    this.set(LayerProperty.OPACITY, opacity);\n  }\n\n  /**\n   * Set the visibility of the layer (`true` or `false`).\n   * @param {boolean} visible The visibility of the layer.\n   * @observable\n   * @api\n   */\n  setVisible(visible) {\n    this.set(LayerProperty.VISIBLE, visible);\n  }\n\n  /**\n   * Set Z-index of the layer, which is used to order layers before rendering.\n   * The default Z-index is 0.\n   * @param {number} zindex The z-index of the layer.\n   * @observable\n   * @api\n   */\n  setZIndex(zindex) {\n    this.set(LayerProperty.Z_INDEX, zindex);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.state_) {\n      this.state_.layer = null;\n      this.state_ = null;\n    }\n    super.disposeInternal();\n  }\n}\n\nexport default BaseLayer;\n","/**\n * @module ol/layer/Property\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  OPACITY: 'opacity',\n  VISIBLE: 'visible',\n  EXTENT: 'extent',\n  Z_INDEX: 'zIndex',\n  MAX_RESOLUTION: 'maxResolution',\n  MIN_RESOLUTION: 'minResolution',\n  MAX_ZOOM: 'maxZoom',\n  MIN_ZOOM: 'minZoom',\n  SOURCE: 'source',\n  MAP: 'map',\n};\n","/**\n * @module ol/render/EventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered before a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#prerender\n   * @api\n   */\n  PRERENDER: 'prerender',\n\n  /**\n   * Triggered after a layer is rendered.\n   * @event module:ol/render/Event~RenderEvent#postrender\n   * @api\n   */\n  POSTRENDER: 'postrender',\n\n  /**\n   * Triggered before layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#precompose\n   * @api\n   */\n  PRECOMPOSE: 'precompose',\n\n  /**\n   * Triggered after layers are composed.  When dispatched by the map, the event object will not have\n   * a `context` set.  When dispatched by a layer, the event object will have a `context` set.  Only\n   * WebGL layers currently dispatch this event.\n   * @event module:ol/render/Event~RenderEvent#postcompose\n   * @api\n   */\n  POSTCOMPOSE: 'postcompose',\n\n  /**\n   * Triggered when rendering is complete, i.e. all sources and tiles have\n   * finished loading for the current viewport, and all tiles are faded in.\n   * The event object will not have a `context` set.\n   * @event module:ol/render/Event~RenderEvent#rendercomplete\n   * @api\n   */\n  RENDERCOMPLETE: 'rendercomplete',\n};\n\n/**\n * @typedef {'postrender'|'precompose'|'postcompose'|'rendercomplete'} MapRenderEventTypes\n */\n\n/**\n * @typedef {'postrender'|'prerender'} LayerRenderEventTypes\n */\n","/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {\n  METERS_PER_UNIT,\n  createProjection,\n  disableCoordinateWarning,\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from './proj.js';\nimport {VOID} from './functions.js';\nimport {\n  add as addCoordinate,\n  equals as coordinatesEqual,\n  equals,\n  rotate as rotateCoordinate,\n} from './coordinate.js';\nimport {assert} from './asserts.js';\nimport {none as centerNone, createExtent} from './centerconstraint.js';\nimport {clamp, modulo} from './math.js';\nimport {\n  createMinMaxResolution,\n  createSnapToPower,\n  createSnapToResolutions,\n} from './resolutionconstraint.js';\nimport {\n  createSnapToN,\n  createSnapToZero,\n  disable,\n  none as rotationNone,\n} from './rotationconstraint.js';\nimport {easeOut, inAndOut} from './easing.js';\nimport {\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n  isEmpty,\n} from './extent.js';\nimport {linearFindNearest} from './array.js';\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter] Source center.\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter] Target center.\n * @property {number} [sourceResolution] Source resolution.\n * @property {number} [targetResolution] Target resolution.\n * @property {number} [sourceRotation] Source rotation.\n * @property {number} [targetRotation] Target rotation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Anchor.\n * @property {number} start Start.\n * @property {number} duration Duration.\n * @property {boolean} complete Complete.\n * @property {function(number):number} easing Easing.\n * @property {function(boolean):void} callback Callback.\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center Center.\n * @property {import(\"./resolutionconstraint.js\").Type} resolution Resolution.\n * @property {import(\"./rotationconstraint.js\").Type} rotation Rotation.\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions that determine the\n * zoom levels if specified. The index in the array corresponds to the zoom level,\n * therefore the resolution values have to be in descending order. It also constrains\n * the resolution by the minimum and maximum value. If set the `maxResolution`,\n * `minResolution`, `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in css pixels).\n * If the map viewport is partially covered with other content (overlays) along\n * its edges, this setting allows to shift the center of the viewport away from\n * that content. The order of the values is top, right, bottom, left.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing.inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center Center (in view projection coordinates).\n * @property {import(\"./proj/Projection.js\").default} projection Projection.\n * @property {number} resolution Resolution.\n * @property {import(\"./coordinate.js\").Coordinate} [nextCenter] The next center during an animation series.\n * @property {number} [nextResolution] The next resolution during an animation series.\n * @property {number} [nextRotation] The next rotation during an animation series.\n * @property {number} rotation Rotation.\n * @property {number} zoom Zoom.\n */\n\n/**\n * Like {@link import(\"./Map.js\").FrameState}, but just `viewState` and `extent`.\n * @typedef {Object} ViewStateLayerStateExtent\n * @property {State} viewState View state.\n * @property {import(\"./extent.js\").Extent} extent Extent (in user projection coordinates).\n * @property {Array<import(\"./layer/Layer.js\").State>} [layerStatesArray] Layer states.\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nconst DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:center'|'change:resolution'|'change:rotation'} ViewObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<ViewObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|ViewObjectEventTypes, Return>} ViewOnSignature\n */\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Web Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nclass View extends BaseObject {\n  /**\n   * @param {ViewOptions} [options] View options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ViewOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ViewOnSignature<void>}\n     */\n    this.un;\n\n    options = Object.assign({}, options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n    this.viewportSize_ = [100, 100];\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.targetCenter_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetResolution_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate}\n     */\n    this.nextCenter_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextResolution_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.nextRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.cancelAnchor_ = undefined;\n\n    if (options.projection) {\n      disableCoordinateWarning();\n    }\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, this.projection_);\n    }\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, this.projection_);\n    }\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  applyOptions_(options) {\n    const properties = Object.assign({}, options);\n    for (const key in ViewProperty) {\n      delete properties[key];\n    }\n    this.setProperties(properties, true);\n\n    const resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @type {Array<number>|undefined}\n     * @private\n     */\n    this.padding_ = options.padding;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n    const centerConstraint = createCenterConstraint(options);\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\n    const rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint,\n    };\n\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n    this.setCenterInternal(\n      options.center !== undefined ? options.center : null\n    );\n    if (options.resolution !== undefined) {\n      this.setResolution(options.resolution);\n    } else if (options.zoom !== undefined) {\n      this.setZoom(options.zoom);\n    }\n  }\n\n  /**\n   * Padding (in css pixels).\n   * If the map viewport is partially covered with other content (overlays) along\n   * its edges, this setting allows to shift the center of the viewport away from that\n   * content. The order of the values in the array is top, right, bottom, left.\n   * The default is no padding, which is equivalent to `[0, 0, 0, 0]`.\n   * @type {Array<number>|undefined}\n   * @api\n   */\n  get padding() {\n    return this.padding_;\n  }\n  set padding(padding) {\n    let oldPadding = this.padding_;\n    this.padding_ = padding;\n    const center = this.getCenterInternal();\n    if (center) {\n      const newPadding = padding || [0, 0, 0, 0];\n      oldPadding = oldPadding || [0, 0, 0, 0];\n      const resolution = this.getResolution();\n      const offsetX =\n        (resolution / 2) *\n        (newPadding[3] - oldPadding[3] + oldPadding[1] - newPadding[1]);\n      const offsetY =\n        (resolution / 2) *\n        (newPadding[0] - oldPadding[0] + oldPadding[2] - newPadding[2]);\n      this.setCenterInternal([center[0] + offsetX, center[1] - offsetY]);\n    }\n  }\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  getUpdatedOptions_(newOptions) {\n    const options = this.getProperties();\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenterInternal();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n\n    return Object.assign({}, options, newOptions);\n  }\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  animate(var_args) {\n    if (this.isDef() && !this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n    const args = new Array(arguments.length);\n    for (let i = 0; i < args.length; ++i) {\n      let options = arguments[i];\n      if (options.center) {\n        options = Object.assign({}, options);\n        options.center = fromUserCoordinate(\n          options.center,\n          this.getProjection()\n        );\n      }\n      if (options.anchor) {\n        options = Object.assign({}, options);\n        options.anchor = fromUserCoordinate(\n          options.anchor,\n          this.getProjection()\n        );\n      }\n      args[i] = options;\n    }\n    this.animateInternal.apply(this, args);\n  }\n\n  /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */\n  animateInternal(var_args) {\n    let animationCount = arguments.length;\n    let callback;\n    if (\n      animationCount > 1 &&\n      typeof arguments[animationCount - 1] === 'function'\n    ) {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n\n    let i = 0;\n    for (; i < animationCount && !this.isDef(); ++i) {\n      // if view properties are not yet set, shortcut to the final state\n      const state = arguments[i];\n      if (state.center) {\n        this.setCenterInternal(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      } else if (state.resolution) {\n        this.setResolution(state.resolution);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n    }\n    if (i === animationCount) {\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n\n    let start = Date.now();\n    let center = this.targetCenter_.slice();\n    let resolution = this.targetResolution_;\n    let rotation = this.targetRotation_;\n    const series = [];\n    for (; i < animationCount; ++i) {\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\n\n      const animation = {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut,\n        callback: callback,\n      };\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center.slice();\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        const delta =\n          modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  }\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  }\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  }\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    let anchor;\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\n      const series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n      if (!anchor) {\n        for (let j = 0, jj = series.length; j < jj; ++j) {\n          const animation = series[j];\n          if (!animation.complete) {\n            anchor = animation.anchor;\n            break;\n          }\n        }\n      }\n    }\n    this.animations_.length = 0;\n    this.cancelAnchor_ = anchor;\n    this.nextCenter_ = null;\n    this.nextResolution_ = NaN;\n    this.nextRotation_ = NaN;\n  }\n\n  /**\n   * Update all animations.\n   */\n  updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    const now = Date.now();\n    let more = false;\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\n      const series = this.animations_[i];\n      let seriesComplete = true;\n      for (let j = 0, jj = series.length; j < jj; ++j) {\n        const animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        const elapsed = now - animation.start;\n        let fraction =\n          animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        const progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          const x0 = animation.sourceCenter[0];\n          const y0 = animation.sourceCenter[1];\n          const x1 = animation.targetCenter[0];\n          const y1 = animation.targetCenter[1];\n          this.nextCenter_ = animation.targetCenter;\n          const x = x0 + progress * (x1 - x0);\n          const y = y0 + progress * (y1 - y0);\n          this.targetCenter_ = [x, y];\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          const resolution =\n            progress === 1\n              ? animation.targetResolution\n              : animation.sourceResolution +\n                progress *\n                  (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            const size = this.getViewportSize_(this.getRotation());\n            const constrainedResolution = this.constraints_.resolution(\n              resolution,\n              0,\n              size,\n              true\n            );\n            this.targetCenter_ = this.calculateCenterZoom(\n              constrainedResolution,\n              animation.anchor\n            );\n          }\n          this.nextResolution_ = animation.targetResolution;\n          this.targetResolution_ = resolution;\n          this.applyTargetState_(true);\n        }\n        if (\n          animation.sourceRotation !== undefined &&\n          animation.targetRotation !== undefined\n        ) {\n          const rotation =\n            progress === 1\n              ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -\n                Math.PI\n              : animation.sourceRotation +\n                progress *\n                  (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            const constrainedRotation = this.constraints_.rotation(\n              rotation,\n              true\n            );\n            this.targetCenter_ = this.calculateCenterRotate(\n              constrainedRotation,\n              animation.anchor\n            );\n          }\n          this.nextRotation_ = animation.targetRotation;\n          this.targetRotation_ = rotation;\n        }\n        this.applyTargetState_(true);\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        this.nextCenter_ = null;\n        this.nextResolution_ = NaN;\n        this.nextRotation_ = NaN;\n        const callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(\n        this.updateAnimations_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  calculateCenterRotate(rotation, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  }\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  calculateCenterZoom(resolution, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    const currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      const x =\n        anchor[0] -\n        (resolution * (anchor[0] - currentCenter[0])) / currentResolution;\n      const y =\n        anchor[1] -\n        (resolution * (anchor[1] - currentCenter[1])) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  }\n\n  /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  getViewportSize_(rotation) {\n    const size = this.viewportSize_;\n    if (rotation) {\n      const w = size[0];\n      const h = size[1];\n      return [\n        Math.abs(w * Math.cos(rotation)) + Math.abs(h * Math.sin(rotation)),\n        Math.abs(w * Math.sin(rotation)) + Math.abs(h * Math.cos(rotation)),\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size} [size] Viewport size; if undefined, [100, 100] is assumed\n   */\n  setViewportSize(size) {\n    this.viewportSize_ = Array.isArray(size) ? size.slice() : [100, 100];\n    if (!this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n  }\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  getCenter() {\n    const center = this.getCenterInternal();\n    if (!center) {\n      return center;\n    }\n    return toUserCoordinate(center, this.getProjection());\n  }\n\n  /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */\n  getCenterInternal() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(ViewProperty.CENTER)\n    );\n  }\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  getConstraints() {\n    return this.constraints_;\n  }\n\n  /**\n   * @return {boolean} Resolution constraint is set\n   */\n  getConstrainResolution() {\n    return this.get('constrainResolution');\n  }\n\n  /**\n   * @param {Array<number>} [hints] Destination array.\n   * @return {Array<number>} Hint.\n   */\n  getHints(hints) {\n    if (hints !== undefined) {\n      hints[0] = this.hints_[0];\n      hints[1] = this.hints_[1];\n      return hints;\n    }\n    return this.hints_.slice();\n  }\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided, the size\n   * of the map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  calculateExtent(size) {\n    const extent = this.calculateExtentInternal(size);\n    return toUserExtent(extent, this.getProjection());\n  }\n\n  /**\n   * @param {import(\"./size.js\").Size} [size] Box pixel size. If not provided,\n   * the map's last known viewport size will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  calculateExtentInternal(size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    assert(center, 'The view center is not defined');\n    const resolution = /** @type {!number} */ (this.getResolution());\n    assert(resolution !== undefined, 'The view resolution is not defined');\n    const rotation = /** @type {!number} */ (this.getRotation());\n    assert(rotation !== undefined, 'The view rotation is not defined');\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  }\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  getMaxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  getMinResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.minResolution_)\n    );\n  }\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n  }\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (\n      this.getZoomForResolution(this.maxResolution_)\n    );\n  }\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n  }\n\n  /**\n   * Set whether the view should allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */\n  setConstrainResolution(enabled) {\n    this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));\n  }\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  getResolution() {\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n  }\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  getResolutionForExtent(extent, size) {\n    return this.getResolutionForExtentInternal(\n      fromUserExtent(extent, this.getProjection()),\n      size\n    );\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size} [size] Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */\n  getResolutionForExtentInternal(extent, size) {\n    size = size || this.getViewportSizeMinusPadding_();\n    const xResolution = getWidth(extent) / size[0];\n    const yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  }\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  getResolutionForValueFunction(power) {\n    power = power || 2;\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        const resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  }\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  getRotation() {\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n  }\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number} [power] Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  getValueForResolutionFunction(power) {\n    const logPower = Math.log(power || 2);\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / logPower;\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        const value = Math.log(maxResolution / resolution) / logPower / max;\n        return value;\n      }\n    );\n  }\n\n  /**\n   * Returns the size of the viewport minus padding.\n   * @private\n   * @param {number} [rotation] Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size reduced by the padding.\n   */\n  getViewportSizeMinusPadding_(rotation) {\n    let size = this.getViewportSize_(rotation);\n    const padding = this.padding_;\n    if (padding) {\n      size = [\n        size[0] - padding[1] - padding[3],\n        size[1] - padding[0] - padding[2],\n      ];\n    }\n    return size;\n  }\n\n  /**\n   * @return {State} View state.\n   */\n  getState() {\n    const projection = this.getProjection();\n    const resolution = this.getResolution();\n    const rotation = this.getRotation();\n    let center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n      this.getCenterInternal()\n    );\n    const padding = this.padding_;\n    if (padding) {\n      const reducedSize = this.getViewportSizeMinusPadding_();\n      center = calculateCenterOn(\n        center,\n        this.getViewportSize_(),\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation\n      );\n    }\n    return {\n      center: center.slice(0),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      nextCenter: this.nextCenter_,\n      nextResolution: this.nextResolution_,\n      nextRotation: this.nextRotation_,\n      rotation: rotation,\n      zoom: this.getZoom(),\n    };\n  }\n\n  /**\n   * @return {ViewStateLayerStateExtent} Like `FrameState`, but just `viewState` and `extent`.\n   */\n  getViewStateAndExtent() {\n    return {\n      viewState: this.getState(),\n      extent: this.calculateExtent(),\n    };\n  }\n\n  /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  getZoom() {\n    let zoom;\n    const resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  }\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  getZoomForResolution(resolution) {\n    let offset = this.minZoom_ || 0;\n    let max, zoomFactor;\n    if (this.resolutions_) {\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  }\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  getResolutionForZoom(zoom) {\n    if (this.resolutions_) {\n      if (this.resolutions_.length <= 1) {\n        return 0;\n      }\n      const baseLevel = clamp(\n        Math.floor(zoom),\n        0,\n        this.resolutions_.length - 2\n      );\n      const zoomFactor =\n        this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n      return (\n        this.resolutions_[baseLevel] /\n        Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1))\n      );\n    }\n    return (\n      this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_)\n    );\n  }\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions} [options] Options.\n   * @api\n   */\n  fit(geometryOrExtent, options) {\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    let geometry;\n    assert(\n      Array.isArray(geometryOrExtent) ||\n        typeof (/** @type {?} */ (geometryOrExtent).getSimplifiedGeometry) ===\n          'function',\n      'Invalid extent or geometry provided as `geometry`'\n    );\n    if (Array.isArray(geometryOrExtent)) {\n      assert(\n        !isEmpty(geometryOrExtent),\n        'Cannot fit empty extent provided as `geometry`'\n      );\n      const extent = fromUserExtent(geometryOrExtent, this.getProjection());\n      geometry = polygonFromExtent(extent);\n    } else if (geometryOrExtent.getType() === 'Circle') {\n      const extent = fromUserExtent(\n        geometryOrExtent.getExtent(),\n        this.getProjection()\n      );\n      geometry = polygonFromExtent(extent);\n      geometry.rotate(this.getRotation(), getCenter(extent));\n    } else {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n          geometryOrExtent\n            .clone()\n            .transform(userProjection, this.getProjection())\n        );\n      } else {\n        geometry = geometryOrExtent;\n      }\n    }\n\n    this.fitInternal(geometry, options);\n  }\n\n  /**\n   * Calculate rotated extent\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @return {import(\"./extent\").Extent} The rotated extent for the geometry.\n   */\n  rotatedExtentForGeometry(geometry) {\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(rotation);\n    const sinAngle = Math.sin(-rotation);\n    const coords = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    let minRotX = +Infinity;\n    let minRotY = +Infinity;\n    let maxRotX = -Infinity;\n    let maxRotY = -Infinity;\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n    return [minRotX, minRotY, maxRotX, maxRotY];\n  }\n\n  /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions} [options] Options.\n   */\n  fitInternal(geometry, options) {\n    options = options || {};\n    let size = options.size;\n    if (!size) {\n      size = this.getViewportSizeMinusPadding_();\n    }\n    const padding =\n      options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    const nearest = options.nearest !== undefined ? options.nearest : false;\n    let minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.getResolutionForZoom(options.maxZoom);\n    } else {\n      minResolution = 0;\n    }\n\n    const rotatedExtent = this.rotatedExtentForGeometry(geometry);\n\n    // calculate resolution\n    let resolution = this.getResolutionForExtentInternal(rotatedExtent, [\n      size[0] - padding[1] - padding[3],\n      size[1] - padding[0] - padding[2],\n    ]);\n    resolution = isNaN(resolution)\n      ? minResolution\n      : Math.max(resolution, minResolution);\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n\n    // calculate center\n    const rotation = this.getRotation();\n    const sinAngle = Math.sin(rotation);\n    const cosAngle = Math.cos(rotation);\n    const centerRot = getCenter(rotatedExtent);\n    centerRot[0] += ((padding[1] - padding[3]) / 2) * resolution;\n    centerRot[1] += ((padding[0] - padding[2]) / 2) * resolution;\n    const centerX = centerRot[0] * cosAngle - centerRot[1] * sinAngle;\n    const centerY = centerRot[1] * cosAngle + centerRot[0] * sinAngle;\n    const center = this.getConstrainedCenter([centerX, centerY], resolution);\n    const callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animateInternal(\n        {\n          resolution: resolution,\n          center: center,\n          duration: options.duration,\n          easing: options.easing,\n        },\n        callback\n      );\n    } else {\n      this.targetResolution_ = resolution;\n      this.targetCenter_ = center;\n      this.applyTargetState_(false, true);\n      animationCallback(callback, true);\n    }\n  }\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  centerOn(coordinate, size, position) {\n    this.centerOnInternal(\n      fromUserCoordinate(coordinate, this.getProjection()),\n      size,\n      position\n    );\n  }\n\n  /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */\n  centerOnInternal(coordinate, size, position) {\n    this.setCenterInternal(\n      calculateCenterOn(\n        coordinate,\n        size,\n        position,\n        this.getResolution(),\n        this.getRotation()\n      )\n    );\n  }\n\n  /**\n   * Calculates the shift between map and viewport center.\n   * @param {import(\"./coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {import(\"./size.js\").Size} size Size.\n   * @return {Array<number>|undefined} Center shift.\n   */\n  calculateCenterShift(center, resolution, rotation, size) {\n    let centerShift;\n    const padding = this.padding_;\n    if (padding && center) {\n      const reducedSize = this.getViewportSizeMinusPadding_(-rotation);\n      const shiftedCenter = calculateCenterOn(\n        center,\n        size,\n        [reducedSize[0] / 2 + padding[3], reducedSize[1] / 2 + padding[0]],\n        resolution,\n        rotation\n      );\n      centerShift = [\n        center[0] - shiftedCenter[0],\n        center[1] - shiftedCenter[1],\n      ];\n    }\n    return centerShift;\n  }\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  isDef() {\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */\n  adjustCenter(deltaCoordinates) {\n    const center = toUserCoordinate(this.targetCenter_, this.getProjection());\n    this.setCenter([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */\n  adjustCenterInternal(deltaCoordinates) {\n    const center = this.targetCenter_;\n    this.setCenterInternal([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustResolution(ratio, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.adjustResolutionInternal(ratio, anchor);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  adjustResolutionInternal(ratio, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const size = this.getViewportSize_(this.getRotation());\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_ * ratio,\n      0,\n      size,\n      isMoving\n    );\n\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, anchor);\n    }\n\n    this.targetResolution_ *= ratio;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  adjustZoom(delta, anchor) {\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), anchor);\n  }\n\n  /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   * @api\n   */\n  adjustRotation(delta, anchor) {\n    if (anchor) {\n      anchor = fromUserCoordinate(anchor, this.getProjection());\n    }\n    this.adjustRotationInternal(delta, anchor);\n  }\n\n  /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The rotation center.\n   */\n  adjustRotationInternal(delta, anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_ + delta,\n      isMoving\n    );\n    if (anchor) {\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, anchor);\n    }\n    this.targetRotation_ += delta;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  setCenter(center) {\n    this.setCenterInternal(\n      center ? fromUserCoordinate(center, this.getProjection()) : center\n    );\n  }\n\n  /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */\n  setCenterInternal(center) {\n    this.targetCenter_ = center;\n    this.applyTargetState_();\n  }\n\n  /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  }\n\n  /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  setResolution(resolution) {\n    this.targetResolution_ = resolution;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  setRotation(rotation) {\n    this.targetRotation_ = rotation;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  }\n\n  /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean} [doNotCancelAnims] Do not cancel animations.\n   * @param {boolean} [forceMoving] Apply constraints as if the view is moving.\n   * @private\n   */\n  applyTargetState_(doNotCancelAnims, forceMoving) {\n    const isMoving =\n      this.getAnimating() || this.getInteracting() || forceMoving;\n\n    // compute rotation\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_,\n      isMoving\n    );\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      0,\n      size,\n      isMoving\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      isMoving,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size\n      )\n    );\n\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\n      this.set(ViewProperty.ROTATION, newRotation);\n    }\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n      this.set(ViewProperty.RESOLUTION, newResolution);\n      this.set('zoom', this.getZoom(), true);\n    }\n    if (\n      !newCenter ||\n      !this.get(ViewProperty.CENTER) ||\n      !equals(this.get(ViewProperty.CENTER), newCenter)\n    ) {\n      this.set(ViewProperty.CENTER, newCenter);\n    }\n\n    if (this.getAnimating() && !doNotCancelAnims) {\n      this.cancelAnimations();\n    }\n    this.cancelAnchor_ = undefined;\n  }\n\n  /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number} [duration] The animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  resolveConstraints(duration, resolutionDirection, anchor) {\n    duration = duration !== undefined ? duration : 200;\n    const direction = resolutionDirection || 0;\n\n    const newRotation = this.constraints_.rotation(this.targetRotation_);\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      direction,\n      size\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      false,\n      this.calculateCenterShift(\n        this.targetCenter_,\n        newResolution,\n        newRotation,\n        size\n      )\n    );\n\n    if (duration === 0 && !this.cancelAnchor_) {\n      this.targetResolution_ = newResolution;\n      this.targetRotation_ = newRotation;\n      this.targetCenter_ = newCenter;\n      this.applyTargetState_();\n      return;\n    }\n\n    anchor = anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n    this.cancelAnchor_ = undefined;\n\n    if (\n      this.getResolution() !== newResolution ||\n      this.getRotation() !== newRotation ||\n      !this.getCenterInternal() ||\n      !equals(this.getCenterInternal(), newCenter)\n    ) {\n      if (this.getAnimating()) {\n        this.cancelAnimations();\n      }\n\n      this.animateInternal({\n        rotation: newRotation,\n        center: newCenter,\n        resolution: newResolution,\n        duration: duration,\n        easing: easeOut,\n        anchor: anchor,\n      });\n    }\n  }\n\n  /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */\n  beginInteraction() {\n    this.resolveConstraints(0);\n\n    this.setHint(ViewHint.INTERACTING, 1);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   * @api\n   */\n  endInteraction(duration, resolutionDirection, anchor) {\n    anchor = anchor && fromUserCoordinate(anchor, this.getProjection());\n    this.endInteractionInternal(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number} [duration] Animation duration in ms.\n   * @param {number} [resolutionDirection] Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate} [anchor] The origin of the transformation.\n   */\n  endInteractionInternal(duration, resolutionDirection, anchor) {\n    if (!this.getInteracting()) {\n      return;\n    }\n    this.setHint(ViewHint.INTERACTING, -1);\n    this.resolveConstraints(duration, resolutionDirection, anchor);\n  }\n\n  /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number} [targetResolution] Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */\n  getConstrainedCenter(targetCenter, targetResolution) {\n    const size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.center(\n      targetCenter,\n      targetResolution || this.getResolution(),\n      size\n    );\n  }\n\n  /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */\n  getConstrainedZoom(targetZoom, direction) {\n    const targetRes = this.getResolutionForZoom(targetZoom);\n    return this.getZoomForResolution(\n      this.getConstrainedResolution(targetRes, direction)\n    );\n  }\n\n  /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number} [direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */\n  getConstrainedResolution(targetResolution, direction) {\n    direction = direction || 0;\n    const size = this.getViewportSize_(this.getRotation());\n\n    return this.constraints_.resolution(targetResolution, direction, size);\n  }\n}\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    const smooth =\n      options.smoothExtentConstraint !== undefined\n        ? options.smoothExtentConstraint\n        : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    const extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n\n  return centerNone;\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  let resolutionConstraint;\n  let maxResolution;\n  let minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  const defaultMaxZoom = 28;\n  const defaultZoomFactor = 2;\n\n  let minZoom =\n    options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n\n  let maxZoom =\n    options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n\n  const zoomFactor =\n    options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n\n  const multiWorld =\n    options.multiWorld !== undefined ? options.multiWorld : false;\n\n  const smooth =\n    options.smoothResolutionConstraint !== undefined\n      ? options.smoothResolutionConstraint\n      : true;\n\n  const showFullExtent =\n    options.showFullExtent !== undefined ? options.showFullExtent : false;\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  const projExtent = projection.getExtent();\n  let constrainOnlyCenter = options.constrainOnlyCenter;\n  let extent = options.extent;\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n\n  if (options.resolutions !== undefined) {\n    const resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution =\n      resolutions[maxZoom] !== undefined\n        ? resolutions[maxZoom]\n        : resolutions[resolutions.length - 1];\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(\n        resolutions,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    }\n  } else {\n    // calculate the default min and max resolution\n    const size = !projExtent\n      ? // use an extent that can fit the whole world if need be\n        (360 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit()\n      : Math.max(getWidth(projExtent), getHeight(projExtent));\n\n    const defaultMaxResolution =\n      size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n\n    const defaultMinResolution =\n      defaultMaxResolution /\n      Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom =\n      minZoom +\n      Math.floor(\n        Math.log(maxResolution / minResolution) / Math.log(zoomFactor)\n      );\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(\n        zoomFactor,\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    }\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor,\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  const enableRotation =\n    options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    const constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    }\n    if (constrainRotation === false) {\n      return rotationNone;\n    }\n    if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    }\n    return rotationNone;\n  }\n  return disable;\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {import(\"./size.js\").Size} size Box pixel size.\n * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {import(\"./coordinate.js\").Coordinate} Shifted center.\n */\nfunction calculateCenterOn(coordinate, size, position, resolution, rotation) {\n  // calculate rotated position\n  const cosAngle = Math.cos(-rotation);\n  let sinAngle = Math.sin(-rotation);\n  let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  rotX += (size[0] / 2 - position[0]) * resolution;\n  rotY += (position[1] - size[1] / 2) * resolution;\n\n  // go back to original angle\n  sinAngle = -sinAngle; // go back to original rotation\n  const centerX = rotX * cosAngle - rotY * sinAngle;\n  const centerY = rotY * cosAngle + rotX * sinAngle;\n\n  return [centerX, centerY];\n}\n\nexport default View;\n","/**\n * @module ol/ViewHint\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  ANIMATING: 0,\n  INTERACTING: 1,\n};\n","/**\n * @module ol/ViewProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  CENTER: 'center',\n  RESOLUTION: 'resolution',\n  ROTATION: 'rotation',\n};\n","/**\n * @module ol/tilegrid/common\n */\n\n/**\n * Default maximum zoom for default tile grids.\n * @type {number}\n */\nexport const DEFAULT_MAX_ZOOM = 42;\n\n/**\n * Default tile size.\n * @type {number}\n */\nexport const DEFAULT_TILE_SIZE = 256;\n","/**\n * @module ol/proj\n */\n\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection~Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport Projection from './proj/Projection.js';\nimport {\n  PROJECTIONS as EPSG3857_PROJECTIONS,\n  fromEPSG4326,\n  toEPSG4326,\n} from './proj/epsg3857.js';\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\nimport {METERS_PER_UNIT} from './proj/Units.js';\nimport {\n  add as addProj,\n  clear as clearProj,\n  get as getProj,\n} from './proj/projections.js';\nimport {\n  add as addTransformFunc,\n  clear as clearTransformFuncs,\n  get as getTransformFunc,\n} from './proj/transforms.js';\nimport {applyTransform, getWidth} from './extent.js';\nimport {clamp, modulo} from './math.js';\nimport {equals, getWorldsAway} from './coordinate.js';\nimport {getDistance} from './sphere.js';\nimport {warn} from './console.js';\n\n/**\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */\n\nexport {METERS_PER_UNIT};\n\nexport {Projection};\n\nlet showCoordinateWarning = true;\n\n/**\n * @param {boolean} [disable = true] Disable console info about `useGeographic()`\n */\nexport function disableCoordinateWarning(disable) {\n  const hide = disable === undefined ? true : disable;\n  showCoordinateWarning = !hide;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, output) {\n  if (output !== undefined) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      output[i] = input[i];\n    }\n    output = output;\n  } else {\n    output = input.slice();\n  }\n  return output;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, output) {\n  if (output !== undefined && input !== output) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      output[i] = input[i];\n    }\n    input = output;\n  }\n  return input;\n}\n\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n  addProj(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection|null} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n  return typeof projectionLike === 'string'\n    ? getProj(/** @type {string} */ (projectionLike))\n    : /** @type {Projection} */ (projectionLike) || null;\n}\n\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the `point` pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").Units} [units] Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, units) {\n  projection = get(projection);\n  let pointResolution;\n  const getter = projection.getPointResolutionFunc();\n  if (getter) {\n    pointResolution = getter(resolution, point);\n    if (units && units !== projection.getUnits()) {\n      const metersPerUnit = projection.getMetersPerUnit();\n      if (metersPerUnit) {\n        pointResolution =\n          (pointResolution * metersPerUnit) / METERS_PER_UNIT[units];\n      }\n    }\n  } else {\n    const projUnits = projection.getUnits();\n    if ((projUnits == 'degrees' && !units) || units == 'degrees') {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      const toEPSG4326 = getTransformFromProjections(\n        projection,\n        get('EPSG:4326')\n      );\n      if (toEPSG4326 === identityTransform && projUnits !== 'degrees') {\n        // no transform is available\n        pointResolution = resolution * projection.getMetersPerUnit();\n      } else {\n        let vertices = [\n          point[0] - resolution / 2,\n          point[1],\n          point[0] + resolution / 2,\n          point[1],\n          point[0],\n          point[1] - resolution / 2,\n          point[0],\n          point[1] + resolution / 2,\n        ];\n        vertices = toEPSG4326(vertices, vertices, 2);\n        const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n        const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n        pointResolution = (width + height) / 2;\n      }\n      const metersPerUnit = units\n        ? METERS_PER_UNIT[units]\n        : projection.getMetersPerUnit();\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n  return pointResolution;\n}\n\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function (source) {\n    projections.forEach(function (destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(\n  projections1,\n  projections2,\n  forwardTransform,\n  inverseTransform\n) {\n  projections1.forEach(function (projection1) {\n    projections2.forEach(function (projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n  clearProj();\n  clearTransformFuncs();\n}\n\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  }\n  if (typeof projection === 'string') {\n    return get(projection);\n  }\n  return /** @type {Projection} */ (projection);\n}\n\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [output] Output.\n     * @param {number} [dimension] Dimension.\n     * @return {Array<number>} Output.\n     */\n    function (input, output, dimension) {\n      const length = input.length;\n      dimension = dimension !== undefined ? dimension : 2;\n      output = output !== undefined ? output : new Array(length);\n      for (let i = 0; i < length; i += dimension) {\n        const point = coordTransform(input.slice(i, i + dimension));\n        const pointLength = point.length;\n        for (let j = 0, jj = dimension; j < jj; ++j) {\n          output[i + j] = j >= pointLength ? input[i + j] : point[j];\n        }\n      }\n      return output;\n    }\n  );\n}\n\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\n *     source.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  const sourceProj = get(source);\n  const destProj = get(destination);\n  addTransformFunc(\n    sourceProj,\n    destProj,\n    createTransformFromCoordinateTransform(forward)\n  );\n  addTransformFunc(\n    destProj,\n    sourceProj,\n    createTransformFromCoordinateTransform(inverse)\n  );\n}\n\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike} [projection] Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, projection) {\n  disableCoordinateWarning();\n  return transform(\n    coordinate,\n    'EPSG:4326',\n    projection !== undefined ? projection : 'EPSG:3857'\n  );\n}\n\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike} [projection] Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, projection) {\n  const lonLat = transform(\n    coordinate,\n    projection !== undefined ? projection : 'EPSG:3857',\n    'EPSG:4326'\n  );\n  const lon = lonLat[0];\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n  return lonLat;\n}\n\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  }\n  const transformFunc = getTransformFromProjections(projection1, projection2);\n  return transformFunc === cloneTransform && equalUnits;\n}\n\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */\nexport function getTransformFromProjections(\n  sourceProjection,\n  destinationProjection\n) {\n  const sourceCode = sourceProjection.getCode();\n  const destinationCode = destinationProjection.getCode();\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\n  if (!transformFunc) {\n    transformFunc = identityTransform;\n  }\n  return transformFunc;\n}\n\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n  const sourceProjection = get(source);\n  const destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj.transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n  const transformFunc = getTransform(source, destination);\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number} [stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination, stops) {\n  const transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc, undefined, stops);\n}\n\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(\n  point,\n  sourceProjection,\n  destinationProjection\n) {\n  const transformFunc = getTransformFromProjections(\n    sourceProjection,\n    destinationProjection\n  );\n  return transformFunc(point);\n}\n\n/**\n * @type {Projection|null}\n */\nlet userProjection = null;\n\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * This includes all API methods except for those interacting with tile grids,\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\n * @param {ProjectionLike} projection The user projection.\n * @api\n */\nexport function setUserProjection(projection) {\n  userProjection = get(projection);\n}\n\n/**\n * Clear the user projection if set.\n * @api\n */\nexport function clearUserProjection() {\n  userProjection = null;\n}\n\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * @return {Projection|null} The user projection (or null if not set).\n * @api\n */\nexport function getUserProjection() {\n  return userProjection;\n}\n\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.\n * This includes all API methods except for those interacting with tile grids,\n * plus {@link import(\"./Map.js\").FrameState} and {@link import(\"./View.js\").State}.\n * @api\n */\nexport function useGeographic() {\n  setUserProjection('EPSG:4326');\n}\n\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @return {Array<number>} The input coordinate in the user projection.\n */\nexport function toUserCoordinate(coordinate, sourceProjection) {\n  if (!userProjection) {\n    return coordinate;\n  }\n  return transform(coordinate, sourceProjection, userProjection);\n}\n\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {Array<number>} The input coordinate transformed.\n */\nexport function fromUserCoordinate(coordinate, destProjection) {\n  if (!userProjection) {\n    if (\n      showCoordinateWarning &&\n      !equals(coordinate, [0, 0]) &&\n      coordinate[0] >= -180 &&\n      coordinate[0] <= 180 &&\n      coordinate[1] >= -90 &&\n      coordinate[1] <= 90\n    ) {\n      showCoordinateWarning = false;\n      warn(\n        'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.'\n      );\n    }\n    return coordinate;\n  }\n  return transform(coordinate, userProjection, destProjection);\n}\n\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\n */\nexport function toUserExtent(extent, sourceProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, sourceProjection, userProjection);\n}\n\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\n */\nexport function fromUserExtent(extent, destProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, userProjection, destProjection);\n}\n\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in input projection units per pixel.\n * @param {ProjectionLike} sourceProjection The input projection.\n * @return {number} Resolution in user projection units per pixel.\n */\nexport function toUserResolution(resolution, sourceProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const sourceUnits = get(sourceProjection).getUnits();\n  const userUnits = userProjection.getUnits();\n  return sourceUnits && userUnits\n    ? (resolution * METERS_PER_UNIT[sourceUnits]) / METERS_PER_UNIT[userUnits]\n    : resolution;\n}\n\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in user projection units per pixel.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {number} Resolution in destination projection units per pixel.\n */\nexport function fromUserResolution(resolution, destProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const sourceUnits = get(destProjection).getUnits();\n  const userUnits = userProjection.getUnits();\n  return sourceUnits && userUnits\n    ? (resolution * METERS_PER_UNIT[userUnits]) / METERS_PER_UNIT[sourceUnits]\n    : resolution;\n}\n\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destination).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destination).\n */\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n  return function (coord) {\n    let transformed, worldsAway;\n    if (sourceProj.canWrapX()) {\n      const sourceExtent = sourceProj.getExtent();\n      const sourceExtentWidth = getWidth(sourceExtent);\n      coord = coord.slice(0);\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n      if (worldsAway) {\n        // Move x to the real world\n        coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n      }\n      coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);\n      coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);\n      transformed = transform(coord);\n    } else {\n      transformed = transform(coord);\n    }\n    if (worldsAway && destProj.canWrapX()) {\n      // Move transformed coordinate back to the offset world\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\n    }\n    return transformed;\n  };\n}\n\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n  addEquivalentTransforms(\n    EPSG4326_PROJECTIONS,\n    EPSG3857_PROJECTIONS,\n    fromEPSG4326,\n    toEPSG4326\n  );\n}\n\naddCommon();\n","/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\nexport const HALF_SIZE = Math.PI * RADIUS;\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nclass EPSG3857Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: 'm',\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / Math.cosh(point[1] / RADIUS);\n      },\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, output, dimension) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = (HALF_SIZE * input[i]) / 180;\n    let y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [output] Output array of coordinate values.\n * @param {number} [dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, output, dimension) {\n  const length = input.length;\n  dimension = dimension > 1 ? dimension : 2;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = (180 * input[i]) / HALF_SIZE;\n    output[i + 1] =\n      (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n  }\n  return output;\n}\n","/**\n * @module ol/proj/Projection\n */\nimport {METERS_PER_UNIT} from './Units.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\n * @property {import(\"./Units.js\").Units} [units] Units. Required unless a\n * proj4 projection is defined for `code`.\n * @property {import(\"../extent.js\").Extent} [extent] The validity extent for the SRS.\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\n * If not provided, the `units` are used to get the meters per unit from the {@link METERS_PER_UNIT}\n * lookup table.\n * @property {import(\"../extent.js\").Extent} [worldExtent] The world extent for the SRS.\n * @property {function(number, import(\"../coordinate.js\").Coordinate):number} [getPointResolution]\n * Function to determine resolution at a point. The function is called with a\n * `number` view resolution and a {@link module:ol/coordinate~Coordinate} as arguments, and returns\n * the `number` resolution in projection units at the passed coordinate. If this is `undefined`,\n * the default {@link module:ol/proj.getPointResolution} function will be used.\n */\n\n/**\n * @classdesc\n * Projection definition class. One of these is created for each projection\n * supported in the application and stored in the {@link module:ol/proj} namespace.\n * You can use these in applications, but this is not required, as API params\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\n * code will suffice.\n *\n * You can use {@link module:ol/proj.get} to retrieve the object for a particular\n * projection.\n *\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\n * with the following aliases:\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\n *     urn:x-ogc:def:crs:EPSG:4326\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\n *\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\n * be added using `proj4.defs()`. After all required projection definitions are\n * added, call the {@link module:ol/proj/proj4.register} function.\n *\n * @api\n */\nclass Projection {\n  /**\n   * @param {Options} options Projection options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {string}\n     */\n    this.code_ = options.code;\n\n    /**\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\n     * tile.\n     * @private\n     * @type {import(\"./Units.js\").Units}\n     */\n    this.units_ = /** @type {import(\"./Units.js\").Units} */ (options.units);\n\n    /**\n     * Validity extent of the projection in projected coordinates. For projections\n     * with `TILE_PIXELS` units, this is the extent of the tile in\n     * tile pixel space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = options.extent !== undefined ? options.extent : null;\n\n    /**\n     * Extent of the world in EPSG:4326. For projections with\n     * `TILE_PIXELS` units, this is the extent of the tile in\n     * projected coordinate space.\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.worldExtent_ =\n      options.worldExtent !== undefined ? options.worldExtent : null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.axisOrientation_ =\n      options.axisOrientation !== undefined ? options.axisOrientation : 'enu';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.global_ = options.global !== undefined ? options.global : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.canWrapX_ = !!(this.global_ && this.extent_);\n\n    /**\n     * @private\n     * @type {function(number, import(\"../coordinate.js\").Coordinate):number|undefined}\n     */\n    this.getPointResolutionFunc_ = options.getPointResolution;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.defaultTileGrid_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.metersPerUnit_ = options.metersPerUnit;\n  }\n\n  /**\n   * @return {boolean} The projection is suitable for wrapping the x-axis\n   */\n  canWrapX() {\n    return this.canWrapX_;\n  }\n\n  /**\n   * Get the code for this projection, e.g. 'EPSG:4326'.\n   * @return {string} Code.\n   * @api\n   */\n  getCode() {\n    return this.code_;\n  }\n\n  /**\n   * Get the validity extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the units of this projection.\n   * @return {import(\"./Units.js\").Units} Units.\n   * @api\n   */\n  getUnits() {\n    return this.units_;\n  }\n\n  /**\n   * Get the amount of meters per unit of this projection.  If the projection is\n   * not configured with `metersPerUnit` or a units identifier, the return is\n   * `undefined`.\n   * @return {number|undefined} Meters.\n   * @api\n   */\n  getMetersPerUnit() {\n    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\n  }\n\n  /**\n   * Get the world extent for this projection.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getWorldExtent() {\n    return this.worldExtent_;\n  }\n\n  /**\n   * Get the axis orientation of this projection.\n   * Example values are:\n   * enu - the default easting, northing, elevation.\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\n   *     or south orientated transverse mercator.\n   * wnu - westing, northing, up - some planetary coordinate systems have\n   *     \"west positive\" coordinate systems\n   * @return {string} Axis orientation.\n   * @api\n   */\n  getAxisOrientation() {\n    return this.axisOrientation_;\n  }\n\n  /**\n   * Is this projection a global projection which spans the whole world?\n   * @return {boolean} Whether the projection is global.\n   * @api\n   */\n  isGlobal() {\n    return this.global_;\n  }\n\n  /**\n   * Set if the projection is a global projection which spans the whole world\n   * @param {boolean} global Whether the projection is global.\n   * @api\n   */\n  setGlobal(global) {\n    this.global_ = global;\n    this.canWrapX_ = !!(global && this.extent_);\n  }\n\n  /**\n   * @return {import(\"../tilegrid/TileGrid.js\").default} The default tile grid.\n   */\n  getDefaultTileGrid() {\n    return this.defaultTileGrid_;\n  }\n\n  /**\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tileGrid The default tile grid.\n   */\n  setDefaultTileGrid(tileGrid) {\n    this.defaultTileGrid_ = tileGrid;\n  }\n\n  /**\n   * Set the validity extent for this projection.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  setExtent(extent) {\n    this.extent_ = extent;\n    this.canWrapX_ = !!(this.global_ && extent);\n  }\n\n  /**\n   * Set the world extent for this projection.\n   * @param {import(\"../extent.js\").Extent} worldExtent World extent\n   *     [minlon, minlat, maxlon, maxlat].\n   * @api\n   */\n  setWorldExtent(worldExtent) {\n    this.worldExtent_ = worldExtent;\n  }\n\n  /**\n   * Set the getPointResolution function (see {@link module:ol/proj.getPointResolution}\n   * for this projection.\n   * @param {function(number, import(\"../coordinate.js\").Coordinate):number} func Function\n   * @api\n   */\n  setGetPointResolution(func) {\n    this.getPointResolutionFunc_ = func;\n  }\n\n  /**\n   * Get the custom point resolution function for this projection (if set).\n   * @return {function(number, import(\"../coordinate.js\").Coordinate):number|undefined} The custom point\n   * resolution function (if set).\n   */\n  getPointResolutionFunc() {\n    return this.getPointResolutionFunc_;\n  }\n}\n\nexport default Projection;\n","/**\n * @module ol/proj/Units\n */\n\n/**\n * @typedef {'radians' | 'degrees' | 'ft' | 'm' | 'pixels' | 'tile-pixels' | 'us-ft'} Units\n * Projection units.\n */\n\n/**\n * See http://duff.ess.washington.edu/data/raster/drg/docs/geotiff.txt\n * @type {Object<number, Units>}\n */\nconst unitByCode = {\n  '9001': 'm',\n  '9002': 'ft',\n  '9003': 'us-ft',\n  '9101': 'radians',\n  '9102': 'degrees',\n};\n\n/**\n * @param {number} code Unit code.\n * @return {Units} Units.\n */\nexport function fromCode(code) {\n  return unitByCode[code];\n}\n\n/**\n * @typedef {Object} MetersPerUnitLookup\n * @property {number} radians Radians\n * @property {number} degrees Degrees\n * @property {number} ft  Feet\n * @property {number} m Meters\n * @property {number} us-ft US feet\n */\n\n/**\n * Meters per unit lookup table.\n * @const\n * @type {MetersPerUnitLookup}\n * @api\n */\nexport const METERS_PER_UNIT = {\n  // use the radius of the Normal sphere\n  'radians': 6370997 / (2 * Math.PI),\n  'degrees': (2 * Math.PI * 6370997) / 360,\n  'ft': 0.3048,\n  'm': 1,\n  'us-ft': 1200 / 3937,\n};\n","/**\n * @module ol/proj/epsg4326\n */\nimport Projection from './Projection.js';\n\n/**\n * Semi-major radius of the WGS84 ellipsoid.\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * Extent of the EPSG:4326 projection which is the whole world.\n *\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-180, -90, 180, 90];\n\n/**\n * @const\n * @type {number}\n */\nexport const METERS_PER_UNIT = (Math.PI * RADIUS) / 180;\n\n/**\n * @classdesc\n * Projection object for WGS84 geographic coordinates (EPSG:4326).\n *\n * Note that OpenLayers does not strictly comply with the EPSG definition.\n * The EPSG registry defines 4326 as a CRS for Latitude,Longitude (y,x).\n * OpenLayers treats EPSG:4326 as a pseudo-projection, with x,y coordinates.\n */\nclass EPSG4326Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   * @param {string} [axisOrientation] Axis orientation.\n   */\n  constructor(code, axisOrientation) {\n    super({\n      code: code,\n      units: 'degrees',\n      extent: EXTENT,\n      axisOrientation: axisOrientation,\n      global: true,\n      metersPerUnit: METERS_PER_UNIT,\n      worldExtent: EXTENT,\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:4326.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG4326Projection('CRS:84'),\n  new EPSG4326Projection('EPSG:4326', 'neu'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:1.3:CRS84'),\n  new EPSG4326Projection('urn:ogc:def:crs:OGC:2:84'),\n  new EPSG4326Projection('http://www.opengis.net/def/crs/OGC/1.3/CRS84'),\n  new EPSG4326Projection('http://www.opengis.net/gml/srs/epsg.xml#4326', 'neu'),\n  new EPSG4326Projection('http://www.opengis.net/def/crs/EPSG/0/4326', 'neu'),\n];\n","/**\n * @module ol/proj/projections\n */\n\n/**\n * @type {Object<string, import(\"./Projection.js\").default>}\n */\nlet cache = {};\n\n/**\n * Clear the projections cache.\n */\nexport function clear() {\n  cache = {};\n}\n\n/**\n * Get a cached projection by code.\n * @param {string} code The code for the projection.\n * @return {import(\"./Projection.js\").default} The projection (if cached).\n */\nexport function get(code) {\n  return (\n    cache[code] ||\n    cache[code.replace(/urn:(x-)?ogc:def:crs:EPSG:(.*:)?(\\w+)$/, 'EPSG:$3')] ||\n    null\n  );\n}\n\n/**\n * Add a projection to the cache.\n * @param {string} code The projection code.\n * @param {import(\"./Projection.js\").default} projection The projection to cache.\n */\nexport function add(code, projection) {\n  cache[code] = projection;\n}\n","/**\n * @module ol/proj/transforms\n */\nimport {isEmpty} from '../obj.js';\n\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nlet transforms = {};\n\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n  transforms = {};\n}\n\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  const transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n}\n\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n  let transform;\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n  return transform;\n}\n","/**\n * @module ol/coordinate\n */\nimport {getWidth} from './extent.js';\nimport {modulo, toFixed} from './math.js';\nimport {padNumber} from './string.js';\n\n/**\n * An array of numbers representing an `xy`, `xyz` or `xyzm` coordinate.\n * Example: `[16, 48]`.\n * @typedef {Array<number>} Coordinate\n * @api\n */\n\n/**\n * A function that takes a {@link module:ol/coordinate~Coordinate} and\n * transforms it into a `{string}`.\n *\n * @typedef {function((Coordinate|undefined)): string} CoordinateFormat\n * @api\n */\n\n/**\n * Add `delta` to `coordinate`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {add} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     add(coord, [-2, 4]);\n *     // coord is now [5.85, 51.983333]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {Coordinate} delta Delta.\n * @return {Coordinate} The input coordinate adjusted by\n * the given delta.\n * @api\n */\nexport function add(coordinate, delta) {\n  coordinate[0] += +delta[0];\n  coordinate[1] += +delta[1];\n  return coordinate;\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed circle.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {import(\"./geom/Circle.js\").default} circle The circle.\n * @return {Coordinate} Closest point on the circumference.\n */\nexport function closestOnCircle(coordinate, circle) {\n  const r = circle.getRadius();\n  const center = circle.getCenter();\n  const x0 = center[0];\n  const y0 = center[1];\n  const x1 = coordinate[0];\n  const y1 = coordinate[1];\n\n  let dx = x1 - x0;\n  const dy = y1 - y0;\n  if (dx === 0 && dy === 0) {\n    dx = 1;\n  }\n  const d = Math.sqrt(dx * dx + dy * dy);\n\n  const x = x0 + (r * dx) / d;\n  const y = y0 + (r * dy) / d;\n\n  return [x, y];\n}\n\n/**\n * Calculates the point closest to the passed coordinate on the passed segment.\n * This is the foot of the perpendicular of the coordinate to the segment when\n * the foot is on the segment, or the closest segment coordinate when the foot\n * is outside the segment.\n *\n * @param {Coordinate} coordinate The coordinate.\n * @param {Array<Coordinate>} segment The two coordinates\n * of the segment.\n * @return {Coordinate} The foot of the perpendicular of\n * the coordinate to the segment.\n */\nexport function closestOnSegment(coordinate, segment) {\n  const x0 = coordinate[0];\n  const y0 = coordinate[1];\n  const start = segment[0];\n  const end = segment[1];\n  const x1 = start[0];\n  const y1 = start[1];\n  const x2 = end[0];\n  const y2 = end[1];\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const along =\n    dx === 0 && dy === 0\n      ? 0\n      : (dx * (x0 - x1) + dy * (y0 - y1)) / (dx * dx + dy * dy || 0);\n  let x, y;\n  if (along <= 0) {\n    x = x1;\n    y = y1;\n  } else if (along >= 1) {\n    x = x2;\n    y = y2;\n  } else {\n    x = x1 + along * dx;\n    y = y1 + along * dy;\n  }\n  return [x, y];\n}\n\n/**\n * Returns a {@link module:ol/coordinate~CoordinateFormat} function that can be\n * used to format\n * a {Coordinate} to a string.\n *\n * Example without specifying the fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY();\n *     const out = stringifyFunc(coord);\n *     // out is now '8, 48'\n *\n * Example with explicitly specifying 2 fractional digits:\n *\n *     import {createStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const stringifyFunc = createStringXY(2);\n *     const out = stringifyFunc(coord);\n *     // out is now '7.85, 47.98'\n *\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {CoordinateFormat} Coordinate format.\n * @api\n */\nexport function createStringXY(fractionDigits) {\n  return (\n    /**\n     * @param {Coordinate} coordinate Coordinate.\n     * @return {string} String XY.\n     */\n    function (coordinate) {\n      return toStringXY(coordinate, fractionDigits);\n    }\n  );\n}\n\n/**\n * @param {string} hemispheres Hemispheres.\n * @param {number} degrees Degrees.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} String.\n */\nexport function degreesToStringHDMS(hemispheres, degrees, fractionDigits) {\n  const normalizedDegrees = modulo(degrees + 180, 360) - 180;\n  const x = Math.abs(3600 * normalizedDegrees);\n  const decimals = fractionDigits || 0;\n\n  let deg = Math.floor(x / 3600);\n  let min = Math.floor((x - deg * 3600) / 60);\n  let sec = toFixed(x - deg * 3600 - min * 60, decimals);\n\n  if (sec >= 60) {\n    sec = 0;\n    min += 1;\n  }\n\n  if (min >= 60) {\n    min = 0;\n    deg += 1;\n  }\n\n  let hdms = deg + '\\u00b0';\n  if (min !== 0 || sec !== 0) {\n    hdms += ' ' + padNumber(min, 2) + '\\u2032';\n  }\n  if (sec !== 0) {\n    hdms += ' ' + padNumber(sec, 2, decimals) + '\\u2033';\n  }\n  if (normalizedDegrees !== 0) {\n    hdms += ' ' + hemispheres.charAt(normalizedDegrees < 0 ? 1 : 0);\n  }\n\n  return hdms;\n}\n\n/**\n * Transforms the given {@link module:ol/coordinate~Coordinate} to a string\n * using the given string template. The strings `{x}` and `{y}` in the template\n * will be replaced with the first and second coordinate values respectively.\n *\n * Example without specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template);\n *     // out is now 'Coordinate is (8|48).'\n *\n * Example explicitly specifying the fractional digits:\n *\n *     import {format} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const template = 'Coordinate is ({x}|{y}).';\n *     const out = format(coord, template, 2);\n *     // out is now 'Coordinate is (7.85|47.98).'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {string} template A template string with `{x}` and `{y}` placeholders\n *     that will be replaced by first and second coordinate values.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Formatted coordinate.\n * @api\n */\nexport function format(coordinate, template, fractionDigits) {\n  if (coordinate) {\n    return template\n      .replace('{x}', coordinate[0].toFixed(fractionDigits))\n      .replace('{y}', coordinate[1].toFixed(fractionDigits));\n  }\n  return '';\n}\n\n/**\n * @param {Coordinate} coordinate1 First coordinate.\n * @param {Coordinate} coordinate2 Second coordinate.\n * @return {boolean} The two coordinates are equal.\n */\nexport function equals(coordinate1, coordinate2) {\n  let equals = true;\n  for (let i = coordinate1.length - 1; i >= 0; --i) {\n    if (coordinate1[i] != coordinate2[i]) {\n      equals = false;\n      break;\n    }\n  }\n  return equals;\n}\n\n/**\n * Rotate `coordinate` by `angle`. `coordinate` is modified in place and\n * returned by the function.\n *\n * Example:\n *\n *     import {rotate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const rotateRadians = Math.PI / 2; // 90 degrees\n *     rotate(coord, rotateRadians);\n *     // coord is now [-47.983333, 7.85]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} angle Angle in radian.\n * @return {Coordinate} Coordinate.\n * @api\n */\nexport function rotate(coordinate, angle) {\n  const cosAngle = Math.cos(angle);\n  const sinAngle = Math.sin(angle);\n  const x = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n  const y = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n  coordinate[0] = x;\n  coordinate[1] = y;\n  return coordinate;\n}\n\n/**\n * Scale `coordinate` by `scale`. `coordinate` is modified in place and returned\n * by the function.\n *\n * Example:\n *\n *     import {scale as scaleCoordinate} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const scale = 1.2;\n *     scaleCoordinate(coord, scale);\n *     // coord is now [9.42, 57.5799996]\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} scale Scale factor.\n * @return {Coordinate} Coordinate.\n */\nexport function scale(coordinate, scale) {\n  coordinate[0] *= scale;\n  coordinate[1] *= scale;\n  return coordinate;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Squared distance between coord1 and coord2.\n */\nexport function squaredDistance(coord1, coord2) {\n  const dx = coord1[0] - coord2[0];\n  const dy = coord1[1] - coord2[1];\n  return dx * dx + dy * dy;\n}\n\n/**\n * @param {Coordinate} coord1 First coordinate.\n * @param {Coordinate} coord2 Second coordinate.\n * @return {number} Distance between coord1 and coord2.\n */\nexport function distance(coord1, coord2) {\n  return Math.sqrt(squaredDistance(coord1, coord2));\n}\n\n/**\n * Calculate the squared distance from a coordinate to a line segment.\n *\n * @param {Coordinate} coordinate Coordinate of the point.\n * @param {Array<Coordinate>} segment Line segment (2\n * coordinates).\n * @return {number} Squared distance from the point to the line segment.\n */\nexport function squaredDistanceToSegment(coordinate, segment) {\n  return squaredDistance(coordinate, closestOnSegment(coordinate, segment));\n}\n\n/**\n * Format a geographic coordinate with the hemisphere, degrees, minutes, and\n * seconds.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord);\n *     // out is now '47° 58′ 60″ N 7° 50′ 60″ E'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringHDMS} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringHDMS(coord, 1);\n *     // out is now '47° 58′ 60.0″ N 7° 50′ 60.0″ E'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} Hemisphere, degrees, minutes and seconds.\n * @api\n */\nexport function toStringHDMS(coordinate, fractionDigits) {\n  if (coordinate) {\n    return (\n      degreesToStringHDMS('NS', coordinate[1], fractionDigits) +\n      ' ' +\n      degreesToStringHDMS('EW', coordinate[0], fractionDigits)\n    );\n  }\n  return '';\n}\n\n/**\n * Format a coordinate as a comma delimited string.\n *\n * Example without specifying fractional digits:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord);\n *     // out is now '8, 48'\n *\n * Example explicitly specifying 1 fractional digit:\n *\n *     import {toStringXY} from 'ol/coordinate.js';\n *\n *     const coord = [7.85, 47.983333];\n *     const out = toStringXY(coord, 1);\n *     // out is now '7.8, 48.0'\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {number} [fractionDigits] The number of digits to include\n *    after the decimal point. Default is `0`.\n * @return {string} XY.\n * @api\n */\nexport function toStringXY(coordinate, fractionDigits) {\n  return format(coordinate, '{x}, {y}', fractionDigits);\n}\n\n/**\n * Modifies the provided coordinate in-place to be within the real world\n * extent. The lower projection extent boundary is inclusive, the upper one\n * exclusive.\n *\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {Coordinate} The coordinate within the real world extent.\n */\nexport function wrapX(coordinate, projection) {\n  if (projection.canWrapX()) {\n    const worldWidth = getWidth(projection.getExtent());\n    const worldsAway = getWorldsAway(coordinate, projection, worldWidth);\n    if (worldsAway) {\n      coordinate[0] -= worldsAway * worldWidth;\n    }\n  }\n  return coordinate;\n}\n/**\n * @param {Coordinate} coordinate Coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {number} [sourceExtentWidth] Width of the source extent.\n * @return {number} Offset in world widths.\n */\nexport function getWorldsAway(coordinate, projection, sourceExtentWidth) {\n  const projectionExtent = projection.getExtent();\n  let worldsAway = 0;\n  if (\n    projection.canWrapX() &&\n    (coordinate[0] < projectionExtent[0] || coordinate[0] > projectionExtent[2])\n  ) {\n    sourceExtentWidth = sourceExtentWidth || getWidth(projectionExtent);\n    worldsAway = Math.floor(\n      (coordinate[0] - projectionExtent[0]) / sourceExtentWidth\n    );\n  }\n  return worldsAway;\n}\n","/**\n * @module ol/string\n */\n\n/**\n * @param {number} number Number to be formatted\n * @param {number} width The desired width\n * @param {number} [precision] Precision of the output string (i.e. number of decimal places)\n * @return {string} Formatted string\n */\nexport function padNumber(number, width, precision) {\n  const numberString =\n    precision !== undefined ? number.toFixed(precision) : '' + number;\n  let decimal = numberString.indexOf('.');\n  decimal = decimal === -1 ? numberString.length : decimal;\n  return decimal > width\n    ? numberString\n    : new Array(1 + width - decimal).join('0') + numberString;\n}\n\n/**\n * Adapted from https://github.com/omichelsen/compare-versions/blob/master/index.js\n * @param {string|number} v1 First version\n * @param {string|number} v2 Second version\n * @return {number} Value\n */\nexport function compareVersions(v1, v2) {\n  const s1 = ('' + v1).split('.');\n  const s2 = ('' + v2).split('.');\n\n  for (let i = 0; i < Math.max(s1.length, s2.length); i++) {\n    const n1 = parseInt(s1[i] || '0', 10);\n    const n2 = parseInt(s2[i] || '0', 10);\n\n    if (n1 > n2) {\n      return 1;\n    }\n    if (n2 > n1) {\n      return -1;\n    }\n  }\n\n  return 0;\n}\n","/**\n * @module ol/sphere\n */\nimport {toDegrees, toRadians} from './math.js';\n\n/**\n * Object literal with options for the {@link getLength} or {@link getArea}\n * functions.\n * @typedef {Object} SphereMetricOptions\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857']\n * Projection of the  geometry.  By default, the geometry is assumed to be in\n * Web Mercator.\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the\n * [mean Earth radius](https://en.wikipedia.org/wiki/Earth_radius#Mean_radius)\n * for the WGS84 ellipsoid is used.\n */\n\n/**\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\n * @type {number}\n */\nexport const DEFAULT_RADIUS = 6371008.8;\n\n/**\n * Get the great circle distance (in meters) between two geographic coordinates.\n * @param {Array} c1 Starting coordinate.\n * @param {Array} c2 Ending coordinate.\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {number} The great circle distance between the points (in meters).\n * @api\n */\nexport function getDistance(c1, c2, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lat2 = toRadians(c2[1]);\n  const deltaLatBy2 = (lat2 - lat1) / 2;\n  const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\n  const a =\n    Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\n    Math.sin(deltaLonBy2) *\n      Math.sin(deltaLonBy2) *\n      Math.cos(lat1) *\n      Math.cos(lat2);\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n}\n\n/**\n * Get the cumulative great circle length of linestring coordinates (geographic).\n * @param {Array} coordinates Linestring coordinates.\n * @param {number} radius The sphere radius to use.\n * @return {number} The length (in meters).\n */\nfunction getLengthInternal(coordinates, radius) {\n  let length = 0;\n  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\n  }\n  return length;\n}\n\n/**\n * Get the spherical length of a geometry.  This length is the sum of the\n * great circle distances between coordinates.  For polygons, the length is\n * the sum of all rings.  For points, the length is zero.  For multi-part\n * geometries, the length is the sum of the length of each part.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n * You can change this by providing a `projection` option.\n * @return {number} The spherical length (in meters).\n * @api\n */\nexport function getLength(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let length = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint': {\n      break;\n    }\n    case 'LineString':\n    case 'LinearRing': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      length = getLengthInternal(coordinates, radius);\n      break;\n    }\n    case 'MultiLineString':\n    case 'Polygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        length += getLengthInternal(coordinates[i], radius);\n      }\n      break;\n    }\n    case 'MultiPolygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        for (j = 0, jj = coords.length; j < jj; ++j) {\n          length += getLengthInternal(coords[j], radius);\n        }\n      }\n      break;\n    }\n    case 'GeometryCollection': {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        length += getLength(geometries[i], options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return length;\n}\n\n/**\n * Returns the spherical area for a list of coordinates.\n *\n * [Reference](https://trs.jpl.nasa.gov/handle/2014/40409)\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\n * Laboratory, Pasadena, CA, June 2007\n *\n * @param {Array<import(\"./coordinate.js\").Coordinate>} coordinates List of coordinates of a linear\n * ring. If the ring is oriented clockwise, the area will be positive,\n * otherwise it will be negative.\n * @param {number} radius The sphere radius.\n * @return {number} Area (in square meters).\n */\nfunction getAreaInternal(coordinates, radius) {\n  let area = 0;\n  const len = coordinates.length;\n  let x1 = coordinates[len - 1][0];\n  let y1 = coordinates[len - 1][1];\n  for (let i = 0; i < len; i++) {\n    const x2 = coordinates[i][0];\n    const y2 = coordinates[i][1];\n    area +=\n      toRadians(x2 - x1) *\n      (2 + Math.sin(toRadians(y1)) + Math.sin(toRadians(y2)));\n    x1 = x2;\n    y1 = y2;\n  }\n  return (area * radius * radius) / 2.0;\n}\n\n/**\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\n * that polygon edges are segments of great circles on a sphere.\n * @param {import(\"./geom/Geometry.js\").default} geometry A geometry.\n * @param {SphereMetricOptions} [options] Options for the area\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\n *     You can change this by providing a `projection` option.\n * @return {number} The spherical area (in square meters).\n * @api\n */\nexport function getArea(geometry, options) {\n  options = options || {};\n  const radius = options.radius || DEFAULT_RADIUS;\n  const projection = options.projection || 'EPSG:3857';\n  const type = geometry.getType();\n  if (type !== 'GeometryCollection') {\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\n  }\n  let area = 0;\n  let coordinates, coords, i, ii, j, jj;\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n    case 'LineString':\n    case 'MultiLineString':\n    case 'LinearRing': {\n      break;\n    }\n    case 'Polygon': {\n      coordinates = /** @type {import(\"./geom/Polygon.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      area = Math.abs(getAreaInternal(coordinates[0], radius));\n      for (i = 1, ii = coordinates.length; i < ii; ++i) {\n        area -= Math.abs(getAreaInternal(coordinates[i], radius));\n      }\n      break;\n    }\n    case 'MultiPolygon': {\n      coordinates = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (\n        geometry\n      ).getCoordinates();\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\n        coords = coordinates[i];\n        area += Math.abs(getAreaInternal(coords[0], radius));\n        for (j = 1, jj = coords.length; j < jj; ++j) {\n          area -= Math.abs(getAreaInternal(coords[j], radius));\n        }\n      }\n      break;\n    }\n    case 'GeometryCollection': {\n      const geometries =\n        /** @type {import(\"./geom/GeometryCollection.js\").default} */ (\n          geometry\n        ).getGeometries();\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\n        area += getArea(geometries[i], options);\n      }\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return area;\n}\n\n/**\n * Returns the coordinate at the given distance and bearing from `c1`.\n *\n * @param {import(\"./coordinate.js\").Coordinate} c1 The origin point (`[lon, lat]` in degrees).\n * @param {number} distance The great-circle distance between the origin\n *     point and the target point.\n * @param {number} bearing The bearing (in radians).\n * @param {number} [radius] The sphere radius to use.  Defaults to the Earth's\n *     mean radius using the WGS84 ellipsoid.\n * @return {import(\"./coordinate.js\").Coordinate} The target point.\n */\nexport function offset(c1, distance, bearing, radius) {\n  radius = radius || DEFAULT_RADIUS;\n  const lat1 = toRadians(c1[1]);\n  const lon1 = toRadians(c1[0]);\n  const dByR = distance / radius;\n  const lat = Math.asin(\n    Math.sin(lat1) * Math.cos(dByR) +\n      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing)\n  );\n  const lon =\n    lon1 +\n    Math.atan2(\n      Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\n      Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat)\n    );\n  return [toDegrees(lon), toDegrees(lat)];\n}\n","/**\n * @module ol/console\n */\n\n/**\n * @typedef {'info'|'warn'|'error'|'none'} Level\n */\n\n/**\n * @type {Object<Level, number>}\n */\nconst levels = {\n  info: 1,\n  warn: 2,\n  error: 3,\n  none: 4,\n};\n\n/**\n * @type {number}\n */\nlet level = levels.info;\n\n/**\n * Set the logging level.  By default, the level is set to 'info' and all\n * messages will be logged.  Set to 'warn' to only display warnings and errors.\n * Set to 'error' to only display errors.  Set to 'none' to silence all messages.\n *\n * @param {Level} l The new level.\n */\nexport function setLevel(l) {\n  level = levels[l];\n}\n\nexport function log(...args) {\n  if (level > levels.info) {\n    return;\n  }\n  console.log(...args); // eslint-disable-line no-console\n}\n\nexport function warn(...args) {\n  if (level > levels.warn) {\n    return;\n  }\n  console.warn(...args); // eslint-disable-line no-console\n}\n\nexport function error(...args) {\n  if (level > levels.error) {\n    return;\n  }\n  console.error(...args); // eslint-disable-line no-console\n}\n","/**\n * @module ol/centerconstraint\n */\nimport {clamp} from './math.js';\n\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=, Array<number>=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\nexport function createExtent(extent, onlyCenter, smooth) {\n  return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number|undefined} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @param {Array<number>} [centerShift] Shift between map center and viewport center.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, isMoving, centerShift) {\n      if (!center) {\n        return undefined;\n      }\n      if (!resolution && !onlyCenter) {\n        return center;\n      }\n      const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n      const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n      const shiftX = centerShift ? centerShift[0] : 0;\n      const shiftY = centerShift ? centerShift[1] : 0;\n      let minX = extent[0] + viewWidth / 2 + shiftX;\n      let maxX = extent[2] - viewWidth / 2 + shiftX;\n      let minY = extent[1] + viewHeight / 2 + shiftY;\n      let maxY = extent[3] - viewHeight / 2 + shiftY;\n\n      // note: when zooming out of bounds, min and max values for x and y may\n      // end up inverted (min > max); this has to be accounted for\n      if (minX > maxX) {\n        minX = (maxX + minX) / 2;\n        maxX = minX;\n      }\n      if (minY > maxY) {\n        minY = (maxY + minY) / 2;\n        maxY = minY;\n      }\n\n      let x = clamp(center[0], minX, maxX);\n      let y = clamp(center[1], minY, maxY);\n\n      // during an interaction, allow some overscroll\n      if (isMoving && smooth && resolution) {\n        const ratio = 30 * resolution;\n        x +=\n          -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +\n          ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n        y +=\n          -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +\n          ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n      }\n\n      return [x, y];\n    }\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate} [center] Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\nexport function none(center) {\n  return center;\n}\n","/**\n * @module ol/resolutionconstraint\n */\nimport {clamp} from './math.js';\nimport {getHeight, getWidth} from './extent.js';\nimport {linearFindNearest} from './array.js';\n\n/**\n * @typedef {function((number|undefined), number, import(\"./size.js\").Size, boolean=): (number|undefined)} Type\n */\n\n/**\n * Returns a modified resolution taking into account the viewport size and maximum\n * allowed extent.\n * @param {number} resolution Resolution\n * @param {import(\"./extent.js\").Extent} maxExtent Maximum allowed extent.\n * @param {import(\"./size.js\").Size} viewportSize Viewport size.\n * @param {boolean} showFullExtent Whether to show the full extent.\n * @return {number} Capped resolution.\n */\nfunction getViewportClampedResolution(\n  resolution,\n  maxExtent,\n  viewportSize,\n  showFullExtent\n) {\n  const xResolution = getWidth(maxExtent) / viewportSize[0];\n  const yResolution = getHeight(maxExtent) / viewportSize[1];\n\n  if (showFullExtent) {\n    return Math.min(resolution, Math.max(xResolution, yResolution));\n  }\n  return Math.min(resolution, Math.min(xResolution, yResolution));\n}\n\n/**\n * Returns a modified resolution to be between maxResolution and minResolution while\n * still allowing the value to be slightly out of bounds.\n * Note: the computation is based on the logarithm function (ln):\n *  - at 1, ln(x) is 0\n *  - above 1, ln(x) keeps increasing but at a much slower pace than x\n * The final result is clamped to prevent getting too far away from bounds.\n * @param {number} resolution Resolution.\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @return {number} Smoothed resolution.\n */\nfunction getSmoothClampedResolution(resolution, maxResolution, minResolution) {\n  let result = Math.min(resolution, maxResolution);\n  const ratio = 50;\n\n  result *=\n    Math.log(1 + ratio * Math.max(0, resolution / maxResolution - 1)) / ratio +\n    1;\n  if (minResolution) {\n    result = Math.max(result, minResolution);\n    result /=\n      Math.log(1 + ratio * Math.max(0, minResolution / resolution - 1)) /\n        ratio +\n      1;\n  }\n  return clamp(result, minResolution / 2, maxResolution * 2);\n}\n\n/**\n * @param {Array<number>} resolutions Resolutions.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createSnapToResolutions(\n  resolutions,\n  smooth,\n  maxExtent,\n  showFullExtent\n) {\n  smooth = smooth !== undefined ? smooth : true;\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const maxResolution = resolutions[0];\n        const minResolution = resolutions[resolutions.length - 1];\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent\n            )\n          : maxResolution;\n\n        // during interacting or animating, allow intermediary values\n        if (isMoving) {\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n          return getSmoothClampedResolution(\n            resolution,\n            cappedMaxRes,\n            minResolution\n          );\n        }\n\n        const capped = Math.min(cappedMaxRes, resolution);\n        const z = Math.floor(linearFindNearest(resolutions, capped, direction));\n        if (resolutions[z] > cappedMaxRes && z < resolutions.length - 1) {\n          return resolutions[z + 1];\n        }\n        return resolutions[z];\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} power Power.\n * @param {number} maxResolution Maximum resolution.\n * @param {number} [minResolution] Minimum resolution.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createSnapToPower(\n  power,\n  maxResolution,\n  minResolution,\n  smooth,\n  maxExtent,\n  showFullExtent\n) {\n  smooth = smooth !== undefined ? smooth : true;\n  minResolution = minResolution !== undefined ? minResolution : 0;\n\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent\n            )\n          : maxResolution;\n\n        // during interacting or animating, allow intermediary values\n        if (isMoving) {\n          if (!smooth) {\n            return clamp(resolution, minResolution, cappedMaxRes);\n          }\n          return getSmoothClampedResolution(\n            resolution,\n            cappedMaxRes,\n            minResolution\n          );\n        }\n\n        const tolerance = 1e-9;\n        const minZoomLevel = Math.ceil(\n          Math.log(maxResolution / cappedMaxRes) / Math.log(power) - tolerance\n        );\n        const offset = -direction * (0.5 - tolerance) + 0.5;\n        const capped = Math.min(cappedMaxRes, resolution);\n        const cappedZoomLevel = Math.floor(\n          Math.log(maxResolution / capped) / Math.log(power) + offset\n        );\n        const zoomLevel = Math.max(minZoomLevel, cappedZoomLevel);\n        const newResolution = maxResolution / Math.pow(power, zoomLevel);\n        return clamp(newResolution, minResolution, cappedMaxRes);\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} maxResolution Max resolution.\n * @param {number} minResolution Min resolution.\n * @param {boolean} [smooth] If true, the view will be able to slightly exceed resolution limits. Default: true.\n * @param {import(\"./extent.js\").Extent} [maxExtent] Maximum allowed extent.\n * @param {boolean} [showFullExtent] If true, allows us to show the full extent. Default: false.\n * @return {Type} Zoom function.\n */\nexport function createMinMaxResolution(\n  maxResolution,\n  minResolution,\n  smooth,\n  maxExtent,\n  showFullExtent\n) {\n  smooth = smooth !== undefined ? smooth : true;\n\n  return (\n    /**\n     * @param {number|undefined} resolution Resolution.\n     * @param {number} direction Direction.\n     * @param {import(\"./size.js\").Size} size Viewport size.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Resolution.\n     */\n    function (resolution, direction, size, isMoving) {\n      if (resolution !== undefined) {\n        const cappedMaxRes = maxExtent\n          ? getViewportClampedResolution(\n              maxResolution,\n              maxExtent,\n              size,\n              showFullExtent\n            )\n          : maxResolution;\n\n        if (!smooth || !isMoving) {\n          return clamp(resolution, minResolution, cappedMaxRes);\n        }\n        return getSmoothClampedResolution(\n          resolution,\n          cappedMaxRes,\n          minResolution\n        );\n      }\n      return undefined;\n    }\n  );\n}\n","/**\n * @module ol/rotationconstraint\n */\nimport {toRadians} from './math.js';\n\n/**\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\n */\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation) {\n  if (rotation !== undefined) {\n    return 0;\n  }\n  return undefined;\n}\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation) {\n  if (rotation !== undefined) {\n    return rotation;\n  }\n  return undefined;\n}\n\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  const theta = (2 * Math.PI) / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\n        return rotation;\n      }\n      return undefined;\n    }\n  );\n}\n\n/**\n * @param {number} [tolerance] Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(tolerance) {\n  tolerance = tolerance || toRadians(5);\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, isMoving) {\n      if (isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        if (Math.abs(rotation) <= tolerance) {\n          return 0;\n        }\n        return rotation;\n      }\n      return undefined;\n    }\n  );\n}\n","/**\n * @module ol/easing\n */\n\n/**\n * Start slow and speed up.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function easeIn(t) {\n  return Math.pow(t, 3);\n}\n\n/**\n * Start fast and slow down.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function easeOut(t) {\n  return 1 - easeIn(1 - t);\n}\n\n/**\n * Start slow, speed up, and then slow down again.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function inAndOut(t) {\n  return 3 * t * t - 2 * t * t * t;\n}\n\n/**\n * Maintain a constant speed over time.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function linear(t) {\n  return t;\n}\n\n/**\n * Start slow, speed up, and at the very end slow down again.  This has the\n * same general behavior as {@link module:ol/easing.inAndOut}, but the final\n * slowdown is delayed.\n * @param {number} t Input between 0 and 1.\n * @return {number} Output between 0 and 1.\n * @api\n */\nexport function upAndDown(t) {\n  if (t < 0.5) {\n    return inAndOut(2 * t);\n  }\n  return 1 - inAndOut(2 * (t - 0.5));\n}\n","/**\n * @module ol/geom/Polygon\n */\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY, getCenter, isEmpty} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {modulo} from '../math.js';\nimport {quantizeArray} from './flat/simplify.js';\nimport {offset as sphereOffset} from '../sphere.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = ends;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n  clone() {\n    const polygon = new Polygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n    polygon.applyProperties(this);\n    return polygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.ends_,\n        this.stride,\n        flatCenter,\n        0\n      );\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), 'XYM');\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing|null} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(\n          this.orientedFlatCoordinates_,\n          0,\n          this.ends_,\n          this.stride\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new Polygon(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Polygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices in meters.\n * @param {number} [n] Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number} [sphereRadius] Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, n, sphereRadius) {\n  n = n ? n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(\n      flatCoordinates,\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, sphereRadius)\n    );\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  if (isEmpty(extent)) {\n    throw new Error('Cannot create polygon from empty extent');\n  }\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [\n    minX,\n    minY,\n    minX,\n    maxY,\n    maxX,\n    maxY,\n    maxX,\n    minY,\n    minX,\n    minY,\n  ];\n  return new Polygon(flatCoordinates, 'XY', [flatCoordinates.length]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number} [sides] Number of sides of the polygon. Default is 32.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, sides, angle) {\n  sides = sides ? sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number} [angle] Start angle for the first vertex of the polygon in\n *     counter-clockwise radians. 0 means East. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = angle ? angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}\n","/**\n * @module ol/geom/LinearRing\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {linearRing as linearRingArea} from './flat/area.js';\n\n/**\n * @classdesc\n * Linear ring geometry. Only used as part of polygon; cannot be rendered\n * on its own.\n *\n * @api\n */\nclass LinearRing extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LinearRing} Clone.\n   * @api\n   */\n  clone() {\n    return new LinearRing(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Return the area of the linear ring on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingArea(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the coordinates of the linear ring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LinearRing} Simplified LinearRing.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    return new LinearRing(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'LinearRing';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the linear ring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default LinearRing;\n","/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport {abstract} from '../util.js';\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nclass SimpleGeometry extends Geometry {\n  constructor() {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./Geometry.js\").GeometryLayout}\n     */\n    this.layout = 'XY';\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.stride = 2;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.flatCoordinates = null;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */\n  getCoordinates() {\n    return abstract();\n  }\n\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  getFlatCoordinates() {\n    return this.flatCoordinates;\n  }\n\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  getLastCoordinate() {\n    return this.flatCoordinates.slice(\n      this.flatCoordinates.length - this.stride\n    );\n  }\n\n  /**\n   * Return the {@link import(\"./Geometry.js\").GeometryLayout layout} of the geometry.\n   * @return {import(\"./Geometry.js\").GeometryLayout} Layout.\n   * @api\n   */\n  getLayout() {\n    return this.layout;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometry =\n      this.getSimplifiedGeometryInternal(squaredTolerance);\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    }\n    // Simplification did not actually remove any coordinates.  We now know\n    // that any calls to getSimplifiedGeometry with a squaredTolerance less\n    // than or equal to the current squaredTolerance will also not have any\n    // effect.  This allows us to short circuit simplification (saving CPU\n    // cycles) and prevents the cache of simplified geometries from filling\n    // up with useless identical copies of this geometry (saving memory).\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  }\n\n  /**\n   * @return {number} Stride.\n   */\n  getStride() {\n    return this.stride;\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  }\n\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  setCoordinates(coordinates, layout) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"./Geometry.js\").GeometryLayout|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  setLayout(layout, coordinates, nesting) {\n    /** @type {number} */\n    let stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (let i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = 'XY';\n          this.stride = 2;\n          return;\n        }\n        coordinates = /** @type {Array} */ (coordinates[0]);\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      rotate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        angle,\n        anchor,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    if (sy === undefined) {\n      sy = sx;\n    }\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      scale(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        sx,\n        sy,\n        anchor,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      translate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        deltaX,\n        deltaY,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n}\n\n/**\n * @param {number} stride Stride.\n * @return {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n  let layout;\n  if (stride == 2) {\n    layout = 'XY';\n  } else if (stride == 3) {\n    layout = 'XYZ';\n  } else if (stride == 4) {\n    layout = 'XYZM';\n  }\n  return /** @type {import(\"./Geometry.js\").GeometryLayout} */ (layout);\n}\n\n/**\n * @param {import(\"./Geometry.js\").GeometryLayout} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  let stride;\n  if (layout == 'XY') {\n    stride = 2;\n  } else if (layout == 'XYZ' || layout == 'XYM') {\n    stride = 3;\n  } else if (layout == 'XYZM') {\n    stride = 4;\n  }\n  return /** @type {number} */ (stride);\n}\n\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  }\n  const stride = simpleGeometry.getStride();\n  return transform2D(\n    flatCoordinates,\n    0,\n    flatCoordinates.length,\n    stride,\n    transform,\n    dest\n  );\n}\n\nexport default SimpleGeometry;\n","/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport {abstract} from '../util.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {\n  createEmpty,\n  createOrUpdateEmpty,\n  getHeight,\n  returnOrUpdate,\n} from '../extent.js';\nimport {get as getProjection, getTransform} from '../proj.js';\nimport {memoizeOne} from '../functions.js';\nimport {transform2D} from './flat/transform.js';\n\n/**\n * @typedef {'XY' | 'XYZ' | 'XYM' | 'XYZM'} GeometryLayout\n * The coordinate layout for geometries, indicating whether a 3rd or 4th z ('Z')\n * or measure ('M') coordinate is available.\n */\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nclass Geometry extends BaseObject {\n  constructor() {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryRevision = 0;\n\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    this.simplifyTransformedInternal = memoizeOne(function (\n      revision,\n      squaredTolerance,\n      transform\n    ) {\n      if (!transform) {\n        return this.getSimplifiedGeometry(squaredTolerance);\n      }\n      const clone = this.clone();\n      clone.applyTransform(transform);\n      return clone.getSimplifiedGeometry(squaredTolerance);\n    });\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, transform) {\n    return this.simplifyTransformedInternal(\n      this.getRevision(),\n      squaredTolerance,\n      transform\n    );\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  clone() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  }\n\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  getClosestPoint(point, closestPoint) {\n    closestPoint = closestPoint ? closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  getExtent(extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      const extent = this.computeExtent(this.extent_);\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, extent);\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    abstract();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    abstract();\n  }\n\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n  applyTransform(transformFn) {\n    abstract();\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  intersectsExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {Geometry} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn =\n      sourceProj.getUnits() == 'tile-pixels'\n        ? function (inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n            composeTransform(\n              tmpTransform,\n              projectedExtent[0],\n              projectedExtent[3],\n              scale,\n              -scale,\n              0,\n              0,\n              0\n            );\n            transform2D(\n              inCoordinates,\n              0,\n              inCoordinates.length,\n              stride,\n              tmpTransform,\n              outCoordinates\n            );\n            return getTransform(sourceProj, destination)(\n              inCoordinates,\n              outCoordinates,\n              stride\n            );\n          }\n        : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n}\n\nexport default Geometry;\n","/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  transform,\n  dest\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  angle,\n  anchor,\n  dest\n) {\n  dest = dest ? dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  sx,\n  sy,\n  anchor,\n  dest\n) {\n  dest = dest ? dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  deltaX,\n  deltaY,\n  dest\n) {\n  dest = dest ? dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n","/**\n * @module ol/geom/flat/closest\n */\nimport {lerp, squaredDistance as squaredDx} from '../../math.js';\n\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\nfunction assignClosest(\n  flatCoordinates,\n  offset1,\n  offset2,\n  stride,\n  x,\n  y,\n  closestPoint\n) {\n  const x1 = flatCoordinates[offset1];\n  const y1 = flatCoordinates[offset1 + 1];\n  const dx = flatCoordinates[offset2] - x1;\n  const dy = flatCoordinates[offset2 + 1] - y1;\n  let offset;\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = lerp(\n          flatCoordinates[offset1 + i],\n          flatCoordinates[offset2 + i],\n          t\n        );\n      }\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n  for (let i = 0; i < stride; ++i) {\n    closestPoint[i] = flatCoordinates[offset + i];\n  }\n  closestPoint.length = stride;\n}\n\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  for (offset += stride; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    const squaredDelta = squaredDx(x1, y1, x2, y2);\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function arrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  max\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function multiArrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  max\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestPoint(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint\n) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n  let i, squaredDistance;\n  if (maxDelta === 0) {\n    // All points are identical, so just test the first point.\n    squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[offset],\n      flatCoordinates[offset + 1]\n    );\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  let index = offset + stride;\n  while (index < end) {\n    assignClosest(\n      flatCoordinates,\n      index - stride,\n      index,\n      stride,\n      x,\n      y,\n      tmpPoint\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      // Skip ahead multiple points, because we know that all the skipped\n      // points cannot be any closer than the closest point we have found so\n      // far.  We know this because we know how close the current point is, how\n      // close the closest point we have found so far is, and the maximum\n      // distance between consecutive points.  For example, if we're currently\n      // at distance 10, the best we've found so far is 3, and that the maximum\n      // distance between consecutive points is 2, then we'll need to skip at\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\n      // always advance at least one point, to avoid an infinite loop.\n      index +=\n        stride *\n        Math.max(\n          ((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /\n            maxDelta) |\n            0,\n          1\n        );\n    }\n  }\n  if (isRing) {\n    // Check the closing segment.\n    assignClosest(\n      flatCoordinates,\n      end - stride,\n      offset,\n      stride,\n      x,\n      y,\n      tmpPoint\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestArrayPoint(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint\n) {\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    minSquaredDistance = assignClosestPoint(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint\n    );\n    offset = end;\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestMultiArrayPoint(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  tmpPoint\n) {\n  tmpPoint = tmpPoint ? tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint\n    );\n    offset = ends[ends.length - 1];\n  }\n  return minSquaredDistance;\n}\n","/**\n * @module ol/geom/flat/deflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinate(flatCoordinates, offset, coordinate, stride) {\n  for (let i = 0, ii = coordinate.length; i < ii; ++i) {\n    flatCoordinates[offset++] = coordinate[i];\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} coordinates Coordinates.\n * @param {number} stride Stride.\n * @return {number} offset Offset.\n */\nexport function deflateCoordinates(\n  flatCoordinates,\n  offset,\n  coordinates,\n  stride\n) {\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n    const coordinate = coordinates[i];\n    for (let j = 0; j < stride; ++j) {\n      flatCoordinates[offset++] = coordinate[j];\n    }\n  }\n  return offset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} coordinatess Coordinatess.\n * @param {number} stride Stride.\n * @param {Array<number>} [ends] Ends.\n * @return {Array<number>} Ends.\n */\nexport function deflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatess,\n  stride,\n  ends\n) {\n  ends = ends ? ends : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatess.length; j < jj; ++j) {\n    const end = deflateCoordinates(\n      flatCoordinates,\n      offset,\n      coordinatess[j],\n      stride\n    );\n    ends[i++] = end;\n    offset = end;\n  }\n  ends.length = i;\n  return ends;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} coordinatesss Coordinatesss.\n * @param {number} stride Stride.\n * @param {Array<Array<number>>} [endss] Endss.\n * @return {Array<Array<number>>} Endss.\n */\nexport function deflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  coordinatesss,\n  stride,\n  endss\n) {\n  endss = endss ? endss : [];\n  let i = 0;\n  for (let j = 0, jj = coordinatesss.length; j < jj; ++j) {\n    const ends = deflateCoordinatesArray(\n      flatCoordinates,\n      offset,\n      coordinatesss[j],\n      stride,\n      endss[i]\n    );\n    if (ends.length === 0) {\n      ends[0] = offset;\n    }\n    endss[i++] = ends;\n    offset = ends[ends.length - 1];\n  }\n  endss.length = i;\n  return endss;\n}\n","/**\n * @module ol/geom/flat/simplify\n */\n// Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nimport {squaredDistance, squaredSegmentDistance} from '../../math.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {boolean} highQuality Highest quality.\n * @param {Array<number>} [simplifiedFlatCoordinates] Simplified flat\n *     coordinates.\n * @return {Array<number>} Simplified line string.\n */\nexport function simplifyLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  highQuality,\n  simplifiedFlatCoordinates\n) {\n  simplifiedFlatCoordinates =\n    simplifiedFlatCoordinates !== undefined ? simplifiedFlatCoordinates : [];\n  if (!highQuality) {\n    end = radialDistance(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    flatCoordinates = simplifiedFlatCoordinates;\n    offset = 0;\n    stride = 2;\n  }\n  simplifiedFlatCoordinates.length = douglasPeucker(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    squaredTolerance,\n    simplifiedFlatCoordinates,\n    0\n  );\n  return simplifiedFlatCoordinates;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function douglasPeucker(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset\n) {\n  const n = (end - offset) / stride;\n  if (n < 3) {\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  /** @type {Array<number>} */\n  const markers = new Array(n);\n  markers[0] = 1;\n  markers[n - 1] = 1;\n  /** @type {Array<number>} */\n  const stack = [offset, end - stride];\n  let index = 0;\n  while (stack.length > 0) {\n    const last = stack.pop();\n    const first = stack.pop();\n    let maxSquaredDistance = 0;\n    const x1 = flatCoordinates[first];\n    const y1 = flatCoordinates[first + 1];\n    const x2 = flatCoordinates[last];\n    const y2 = flatCoordinates[last + 1];\n    for (let i = first + stride; i < last; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      const squaredDistance = squaredSegmentDistance(x, y, x1, y1, x2, y2);\n      if (squaredDistance > maxSquaredDistance) {\n        index = i;\n        maxSquaredDistance = squaredDistance;\n      }\n    }\n    if (maxSquaredDistance > squaredTolerance) {\n      markers[(index - offset) / stride] = 1;\n      if (first + stride < index) {\n        stack.push(first, index);\n      }\n      if (index + stride < last) {\n        stack.push(index, last);\n      }\n    }\n  }\n  for (let i = 0; i < n; ++i) {\n    if (markers[i]) {\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + i * stride];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + i * stride + 1];\n    }\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEnds\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = douglasPeucker(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset\n    );\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function douglasPeuckerMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEndss\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    const simplifiedEnds = [];\n    simplifiedOffset = douglasPeuckerArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n      simplifiedEnds\n    );\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function radialDistance(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  squaredTolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset\n) {\n  if (end <= offset + stride) {\n    // zero or one point, no simplification possible, so copy and return\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n        flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  // copy first point\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  let x2 = x1;\n  let y2 = y1;\n  for (offset += stride; offset < end; offset += stride) {\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    if (squaredDistance(x1, y1, x2, y2) > squaredTolerance) {\n      // copy point at offset\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  if (x2 != x1 || y2 != y1) {\n    // copy last point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {number} value Value.\n * @param {number} tolerance Tolerance.\n * @return {number} Rounded value.\n */\nexport function snap(value, tolerance) {\n  return tolerance * Math.round(value / tolerance);\n}\n\n/**\n * Simplifies a line string using an algorithm designed by Tim Schaub.\n * Coordinates are snapped to the nearest value in a virtual grid and\n * consecutive duplicate coordinates are discarded.  This effectively preserves\n * topology as the simplification of any subsection of a line string is\n * independent of the rest of the line string.  This means that, for examples,\n * the common edge between two polygons will be simplified to the same line\n * string independently in both polygons.  This implementation uses a single\n * pass over the coordinates and eliminates intermediate collinear points.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\nexport function quantize(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset\n) {\n  // do nothing if the line is empty\n  if (offset == end) {\n    return simplifiedOffset;\n  }\n  // snap the first coordinate (P1)\n  let x1 = snap(flatCoordinates[offset], tolerance);\n  let y1 = snap(flatCoordinates[offset + 1], tolerance);\n  offset += stride;\n  // add the first coordinate to the output\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  // find the next coordinate that does not snap to the same value as the first\n  // coordinate (P2)\n  let x2, y2;\n  do {\n    x2 = snap(flatCoordinates[offset], tolerance);\n    y2 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    if (offset == end) {\n      // all coordinates snap to the same value, the line collapses to a point\n      // push the last snapped value anyway to ensure that the output contains\n      // at least two points\n      // FIXME should we really return at least two points anyway?\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      return simplifiedOffset;\n    }\n  } while (x2 == x1 && y2 == y1);\n  while (offset < end) {\n    // snap the next coordinate (P3)\n    const x3 = snap(flatCoordinates[offset], tolerance);\n    const y3 = snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    // skip P3 if it is equal to P2\n    if (x3 == x2 && y3 == y2) {\n      continue;\n    }\n    // calculate the delta between P1 and P2\n    const dx1 = x2 - x1;\n    const dy1 = y2 - y1;\n    // calculate the delta between P3 and P1\n    const dx2 = x3 - x1;\n    const dy2 = y3 - y1;\n    // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n    // P1 in the same direction then P2 is on the straight line between P1 and\n    // P3\n    if (\n      dx1 * dy2 == dy1 * dx2 &&\n      ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&\n      ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))\n    ) {\n      // discard P2 and set P2 = P3\n      x2 = x3;\n      y2 = y3;\n      continue;\n    }\n    // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n    // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n    // and continue with P1 = P2 and P2 = P3\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    x1 = x2;\n    y1 = y2;\n    x2 = x3;\n    y2 = y3;\n  }\n  // add the last point (P2)\n  simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\nexport function quantizeArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEnds\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    simplifiedOffset = quantize(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      tolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset\n    );\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array<Array<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\nexport function quantizeMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  tolerance,\n  simplifiedFlatCoordinates,\n  simplifiedOffset,\n  simplifiedEndss\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    const simplifiedEnds = [];\n    simplifiedOffset = quantizeArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      tolerance,\n      simplifiedFlatCoordinates,\n      simplifiedOffset,\n      simplifiedEnds\n    );\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n}\n","/**\n * @module ol/geom/flat/inflate\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {Array<import(\"../../coordinate.js\").Coordinate>} [coordinates] Coordinates.\n * @return {Array<import(\"../../coordinate.js\").Coordinate>} Coordinates.\n */\nexport function inflateCoordinates(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  coordinates\n) {\n  coordinates = coordinates !== undefined ? coordinates : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    coordinates[i++] = flatCoordinates.slice(j, j + stride);\n  }\n  coordinates.length = i;\n  return coordinates;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<Array<import(\"../../coordinate.js\").Coordinate>>} [coordinatess] Coordinatess.\n * @return {Array<Array<import(\"../../coordinate.js\").Coordinate>>} Coordinatess.\n */\nexport function inflateCoordinatesArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  coordinatess\n) {\n  coordinatess = coordinatess !== undefined ? coordinatess : [];\n  let i = 0;\n  for (let j = 0, jj = ends.length; j < jj; ++j) {\n    const end = ends[j];\n    coordinatess[i++] = inflateCoordinates(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      coordinatess[i]\n    );\n    offset = end;\n  }\n  coordinatess.length = i;\n  return coordinatess;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} [coordinatesss]\n *     Coordinatesss.\n * @return {Array<Array<Array<import(\"../../coordinate.js\").Coordinate>>>} Coordinatesss.\n */\nexport function inflateMultiCoordinatesArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  coordinatesss\n) {\n  coordinatesss = coordinatesss !== undefined ? coordinatesss : [];\n  let i = 0;\n  for (let j = 0, jj = endss.length; j < jj; ++j) {\n    const ends = endss[j];\n    coordinatesss[i++] =\n      ends.length === 1 && ends[0] === offset\n        ? []\n        : inflateCoordinatesArray(\n            flatCoordinates,\n            offset,\n            ends,\n            stride,\n            coordinatesss[i]\n          );\n    offset = ends[ends.length - 1];\n  }\n  coordinatesss.length = i;\n  return coordinatesss;\n}\n","/**\n * @module ol/geom/flat/area\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRing(flatCoordinates, offset, end, stride) {\n  let twiceArea = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    twiceArea += y1 * x2 - x1 * y2;\n    x1 = x2;\n    y1 = y2;\n  }\n  return twiceArea / 2;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRings(flatCoordinates, offset, ends, stride) {\n  let area = 0;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    area += linearRing(flatCoordinates, offset, end, stride);\n    offset = end;\n  }\n  return area;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {number} Area.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n  let area = 0;\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    area += linearRings(flatCoordinates, offset, ends, stride);\n    offset = ends[ends.length - 1];\n  }\n  return area;\n}\n","/**\n * @module ol/geom/Point\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {containsXY, createOrUpdateFromCoordinate} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Point geometry.\n *\n * @api\n */\nclass Point extends SimpleGeometry {\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    this.setCoordinates(coordinates, layout);\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Point} Clone.\n   * @api\n   */\n  clone() {\n    const point = new Point(this.flatCoordinates.slice(), this.layout);\n    point.applyProperties(this);\n    return point;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[0],\n      flatCoordinates[1]\n    );\n    if (squaredDistance < minSquaredDistance) {\n      const stride = this.stride;\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinate of the point.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return !this.flatCoordinates ? [] : this.flatCoordinates.slice();\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromCoordinate(this.flatCoordinates, extent);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Point';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return containsXY(extent, this.flatCoordinates[0], this.flatCoordinates[1]);\n  }\n\n  /**\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinate(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default Point;\n","/**\n * @module ol/geom/flat/interiorpoint\n */\nimport {ascending} from '../../array.js';\nimport {linearRingsContainsXY} from './contains.js';\n\n/**\n * Calculates a point that is likely to lie in the interior of the linear rings.\n * Inspired by JTS's com.vividsolutions.jts.geom.Geometry#getInteriorPoint.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @param {number} flatCentersOffset Flat center offset.\n * @param {Array<number>} [dest] Destination.\n * @return {Array<number>} Destination point as XYM coordinate, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointOfArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  flatCenters,\n  flatCentersOffset,\n  dest\n) {\n  let i, ii, x, x1, x2, y1, y2;\n  const y = flatCenters[flatCentersOffset + 1];\n  /** @type {Array<number>} */\n  const intersections = [];\n  // Calculate intersections with the horizontal line\n  for (let r = 0, rr = ends.length; r < rr; ++r) {\n    const end = ends[r];\n    x1 = flatCoordinates[end - stride];\n    y1 = flatCoordinates[end - stride + 1];\n    for (i = offset; i < end; i += stride) {\n      x2 = flatCoordinates[i];\n      y2 = flatCoordinates[i + 1];\n      if ((y <= y1 && y2 <= y) || (y1 <= y && y <= y2)) {\n        x = ((y - y1) / (y2 - y1)) * (x2 - x1) + x1;\n        intersections.push(x);\n      }\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  // Find the longest segment of the horizontal line that has its center point\n  // inside the linear ring.\n  let pointX = NaN;\n  let maxSegmentLength = -Infinity;\n  intersections.sort(ascending);\n  x1 = intersections[0];\n  for (i = 1, ii = intersections.length; i < ii; ++i) {\n    x2 = intersections[i];\n    const segmentLength = Math.abs(x2 - x1);\n    if (segmentLength > maxSegmentLength) {\n      x = (x1 + x2) / 2;\n      if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n        pointX = x;\n        maxSegmentLength = segmentLength;\n      }\n    }\n    x1 = x2;\n  }\n  if (isNaN(pointX)) {\n    // There is no horizontal line that has its center point inside the linear\n    // ring.  Use the center of the the linear ring's extent.\n    pointX = flatCenters[flatCentersOffset];\n  }\n  if (dest) {\n    dest.push(pointX, y, maxSegmentLength);\n    return dest;\n  }\n  return [pointX, y, maxSegmentLength];\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {Array<number>} flatCenters Flat centers.\n * @return {Array<number>} Interior points as XYM coordinates, where M is the\n * length of the horizontal intersection that the point belongs to.\n */\nexport function getInteriorPointsOfMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  flatCenters\n) {\n  let interiorPoints = [];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    interiorPoints = getInteriorPointOfArray(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      flatCenters,\n      2 * i,\n      interiorPoints\n    );\n    offset = ends[ends.length - 1];\n  }\n  return interiorPoints;\n}\n","/**\n * @module ol/geom/flat/contains\n */\nimport {forEachCorner} from '../../extent.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} Contains extent.\n */\nexport function linearRingContainsExtent(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  const outside = forEachCorner(\n    extent,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n     * @return {boolean} Contains (x, y).\n     */\n    function (coordinate) {\n      return !linearRingContainsXY(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        coordinate[0],\n        coordinate[1]\n      );\n    }\n  );\n  return !outside;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingContainsXY(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  x,\n  y\n) {\n  // https://geomalgorithms.com/a03-_inclusion.html\n  // Copyright 2000 softSurfer, 2012 Dan Sunday\n  // This code may be freely used and modified for any purpose\n  // providing that this copyright notice is included with it.\n  // SoftSurfer makes no warranty for this code, and cannot be held\n  // liable for any real or imagined damage resulting from its use.\n  // Users of this code must verify correctness for their application.\n  let wn = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    if (y1 <= y) {\n      if (y2 > y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) > 0) {\n        wn++;\n      }\n    } else if (y2 <= y && (x2 - x1) * (y - y1) - (x - x1) * (y2 - y1) < 0) {\n      wn--;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return wn !== 0;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingsContainsXY(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  x,\n  y\n) {\n  if (ends.length === 0) {\n    return false;\n  }\n  if (!linearRingContainsXY(flatCoordinates, offset, ends[0], stride, x, y)) {\n    return false;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsXY(flatCoordinates, ends[i - 1], ends[i], stride, x, y)\n    ) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {boolean} Contains (x, y).\n */\nexport function linearRingssContainsXY(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  x,\n  y\n) {\n  if (endss.length === 0) {\n    return false;\n  }\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (linearRingsContainsXY(flatCoordinates, offset, ends, stride, x, y)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/intersectsextent\n */\nimport {\n  containsExtent,\n  createEmpty,\n  extendFlatCoordinates,\n  intersects,\n  intersectsSegment,\n} from '../../extent.js';\nimport {forEach as forEachSegment} from './segments.js';\nimport {linearRingContainsExtent, linearRingContainsXY} from './contains.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  const coordinatesExtent = extendFlatCoordinates(\n    createEmpty(),\n    flatCoordinates,\n    offset,\n    end,\n    stride\n  );\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return forEachSegment(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */\n    function (point1, point2) {\n      return intersectsSegment(extent, point1, point2);\n    }\n  );\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    if (\n      intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[1]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[3]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[1]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[3]\n    )\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent\n) {\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsExtent(\n        flatCoordinates,\n        ends[i - 1],\n        ends[i],\n        stride,\n        extent\n      )\n    ) {\n      if (\n        !intersectsLineString(\n          flatCoordinates,\n          ends[i - 1],\n          ends[i],\n          stride,\n          extent\n        )\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  extent\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (\n      intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/segments\n */\n\n/**\n * This function calls `callback` for each segment of the flat coordinates\n * array. If the callback returns a truthy value the function returns that\n * value immediately. Otherwise the function returns `false`.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {function(import(\"../../coordinate.js\").Coordinate, import(\"../../coordinate.js\").Coordinate): T} callback Function\n *     called for each segment.\n * @return {T|boolean} Value.\n * @template T\n */\nexport function forEach(flatCoordinates, offset, end, stride, callback) {\n  let ret;\n  offset += stride;\n  for (; offset < end; offset += stride) {\n    ret = callback(\n      flatCoordinates.slice(offset - stride, offset),\n      flatCoordinates.slice(offset, offset + stride)\n    );\n    if (ret) {\n      return ret;\n    }\n  }\n  return false;\n}\n","/**\n * @module ol/geom/flat/orient\n */\nimport {coordinates as reverseCoordinates} from './reverse.js';\n\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n  let edge = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge === 0 ? undefined : edge > 0;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride\n    );\n    if (i === 0) {\n      if ((right && isClockwise) || (!right && !isClockwise)) {\n        return false;\n      }\n    } else {\n      if ((right && !isClockwise) || (!right && isClockwise)) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingssAreOriented(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, right)) {\n      return false;\n    }\n    if (ends.length) {\n      offset = ends[ends.length - 1];\n    }\n  }\n  return true;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  right\n) {\n  right = right !== undefined ? right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride\n    );\n    const reverse =\n      i === 0\n        ? (right && isClockwise) || (!right && !isClockwise)\n        : (right && !isClockwise) || (!right && isClockwise);\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  right\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(\n      flatCoordinates,\n      offset,\n      endss[i],\n      stride,\n      right\n    );\n  }\n  return offset;\n}\n\n/**\n * Return a two-dimensional endss\n * @param {Array<number>} flatCoordinates Flat coordinates\n * @param {Array<number>} ends Linear ring end indexes\n * @return {Array<Array<number>>} Two dimensional endss array that can\n * be used to construct a MultiPolygon\n */\nexport function inflateEnds(flatCoordinates, ends) {\n  const endss = [];\n  let offset = 0;\n  let prevEndIndex = 0;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    // classifies an array of rings into polygons with outer rings and holes\n    if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {\n      endss.push(ends.slice(prevEndIndex, i + 1));\n    } else {\n      if (endss.length === 0) {\n        continue;\n      }\n      endss[endss.length - 1].push(ends[prevEndIndex]);\n    }\n    prevEndIndex = i + 1;\n    offset = end;\n  }\n  return endss;\n}\n","/**\n * @module ol/geom/flat/reverse\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n */\nexport function coordinates(flatCoordinates, offset, end, stride) {\n  while (offset < end - stride) {\n    for (let i = 0; i < stride; ++i) {\n      const tmp = flatCoordinates[offset + i];\n      flatCoordinates[offset + i] = flatCoordinates[end - stride + i];\n      flatCoordinates[end - stride + i] = tmp;\n    }\n    offset += stride;\n    end -= stride;\n  }\n}\n","/**\n * @module ol/render/Event\n */\n\nimport Event from '../events/Event.js';\n\nclass RenderEvent extends Event {\n  /**\n   * @param {import(\"./EventType.js\").default} type Type.\n   * @param {import(\"../transform.js\").Transform} [inversePixelTransform] Transform for\n   *     CSS pixels to rendered pixels.\n   * @param {import(\"../Map.js\").FrameState} [frameState] Frame state.\n   * @param {?(CanvasRenderingContext2D|WebGLRenderingContext)} [context] Context.\n   */\n  constructor(type, inversePixelTransform, frameState, context) {\n    super(type);\n\n    /**\n     * Transform from CSS pixels (relative to the top-left corner of the map viewport)\n     * to rendered pixels on this event's `context`. Only available when a Canvas renderer is used, null otherwise.\n     * @type {import(\"../transform.js\").Transform|undefined}\n     * @api\n     */\n    this.inversePixelTransform = inversePixelTransform;\n\n    /**\n     * An object representing the current render frame state.\n     * @type {import(\"../Map.js\").FrameState|undefined}\n     * @api\n     */\n    this.frameState = frameState;\n\n    /**\n     * Canvas context. Not available when the event is dispatched by the map. For Canvas 2D layers,\n     * the context will be the 2D rendering context.  For WebGL layers, the context will be the WebGL\n     * context.\n     * @type {CanvasRenderingContext2D|WebGLRenderingContext|undefined}\n     * @api\n     */\n    this.context = context;\n  }\n}\n\nexport default RenderEvent;\n","/**\n * @module ol/css\n */\n\n/**\n * @typedef {Object} FontParameters\n * @property {string} style Style.\n * @property {string} variant Variant.\n * @property {string} weight Weight.\n * @property {string} size Size.\n * @property {string} lineHeight LineHeight.\n * @property {string} family Family.\n * @property {Array<string>} families Families.\n */\n\n/**\n * The CSS class for hidden feature.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_HIDDEN = 'ol-hidden';\n\n/**\n * The CSS class that we'll give the DOM elements to have them selectable.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_SELECTABLE = 'ol-selectable';\n\n/**\n * The CSS class that we'll give the DOM elements to have them unselectable.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_UNSELECTABLE = 'ol-unselectable';\n\n/**\n * The CSS class for unsupported feature.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_UNSUPPORTED = 'ol-unsupported';\n\n/**\n * The CSS class for controls.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_CONTROL = 'ol-control';\n\n/**\n * The CSS class that we'll give the DOM elements that are collapsed, i.e.\n * to those elements which usually can be expanded.\n *\n * @const\n * @type {string}\n */\nexport const CLASS_COLLAPSED = 'ol-collapsed';\n\n/**\n * From https://stackoverflow.com/questions/10135697/regex-to-parse-any-css-font\n * @type {RegExp}\n */\nconst fontRegEx = new RegExp(\n  [\n    '^\\\\s*(?=(?:(?:[-a-z]+\\\\s*){0,2}(italic|oblique))?)',\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(small-caps))?)',\n    '(?=(?:(?:[-a-z]+\\\\s*){0,2}(bold(?:er)?|lighter|[1-9]00 ))?)',\n    '(?:(?:normal|\\\\1|\\\\2|\\\\3)\\\\s*){0,3}((?:xx?-)?',\n    '(?:small|large)|medium|smaller|larger|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx]))',\n    '(?:\\\\s*\\\\/\\\\s*(normal|[\\\\.\\\\d]+(?:\\\\%|in|[cem]m|ex|p[ctx])?))',\n    '?\\\\s*([-,\\\\\"\\\\\\'\\\\sa-z]+?)\\\\s*$',\n  ].join(''),\n  'i'\n);\nconst fontRegExMatchIndex = [\n  'style',\n  'variant',\n  'weight',\n  'size',\n  'lineHeight',\n  'family',\n];\n\n/**\n * Get the list of font families from a font spec.  Note that this doesn't work\n * for font families that have commas in them.\n * @param {string} fontSpec The CSS font property.\n * @return {FontParameters|null} The font parameters (or null if the input spec is invalid).\n */\nexport const getFontParameters = function (fontSpec) {\n  const match = fontSpec.match(fontRegEx);\n  if (!match) {\n    return null;\n  }\n  const style = /** @type {FontParameters} */ ({\n    lineHeight: 'normal',\n    size: '1.2em',\n    style: 'normal',\n    weight: 'normal',\n    variant: 'normal',\n  });\n  for (let i = 0, ii = fontRegExMatchIndex.length; i < ii; ++i) {\n    const value = match[i + 1];\n    if (value !== undefined) {\n      style[fontRegExMatchIndex[i]] = value;\n    }\n  }\n  style.families = style.family.split(/,\\s?/);\n  return style;\n};\n","/**\n * @module ol/render/canvas\n */\nimport BaseObject from '../Object.js';\nimport {WORKER_OFFSCREEN_CANVAS} from '../has.js';\nimport {clear} from '../obj.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {getFontParameters} from '../css.js';\n\n/**\n * @typedef {'Circle' | 'Image' | 'LineString' | 'Polygon' | 'Text' | 'Default'} BuilderType\n */\n\n/**\n * @typedef {Object} FillState\n * @property {import(\"../colorlike.js\").ColorLike} fillStyle FillStyle.\n */\n\n/**\n * @typedef Label\n * @property {number} width Width.\n * @property {number} height Height.\n * @property {Array<string|number>} contextInstructions ContextInstructions.\n */\n\n/**\n * @typedef {Object} FillStrokeState\n * @property {import(\"../colorlike.js\").ColorLike} [currentFillStyle] Current FillStyle.\n * @property {import(\"../colorlike.js\").ColorLike} [currentStrokeStyle] Current StrokeStyle.\n * @property {CanvasLineCap} [currentLineCap] Current LineCap.\n * @property {Array<number>} currentLineDash Current LineDash.\n * @property {number} [currentLineDashOffset] Current LineDashOffset.\n * @property {CanvasLineJoin} [currentLineJoin] Current LineJoin.\n * @property {number} [currentLineWidth] Current LineWidth.\n * @property {number} [currentMiterLimit] Current MiterLimit.\n * @property {number} [lastStroke] Last stroke.\n * @property {import(\"../colorlike.js\").ColorLike} [fillStyle] FillStyle.\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {CanvasLineCap} [lineCap] LineCap.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} [lineDashOffset] LineDashOffset.\n * @property {CanvasLineJoin} [lineJoin] LineJoin.\n * @property {number} [lineWidth] LineWidth.\n * @property {number} [miterLimit] MiterLimit.\n */\n\n/**\n * @typedef {Object} StrokeState\n * @property {CanvasLineCap} lineCap LineCap.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} lineWidth LineWidth.\n * @property {number} miterLimit MiterLimit.\n * @property {import(\"../colorlike.js\").ColorLike} strokeStyle StrokeStyle.\n */\n\n/**\n * @typedef {Object} TextState\n * @property {string} font Font.\n * @property {CanvasTextAlign} [textAlign] TextAlign.\n * @property {number} [repeat] Repeat.\n * @property {import(\"../style/Text.js\").TextJustify} [justify] Justify.\n * @property {CanvasTextBaseline} textBaseline TextBaseline.\n * @property {import(\"../style/Text.js\").TextPlacement} [placement] Placement.\n * @property {number} [maxAngle] MaxAngle.\n * @property {boolean} [overflow] Overflow.\n * @property {import(\"../style/Fill.js\").default} [backgroundFill] BackgroundFill.\n * @property {import(\"../style/Stroke.js\").default} [backgroundStroke] BackgroundStroke.\n * @property {import(\"../size.js\").Size} [scale] Scale.\n * @property {Array<number>} [padding] Padding.\n */\n\n/**\n * @typedef {Object} SerializableInstructions\n * @property {Array<*>} instructions The rendering instructions.\n * @property {Array<*>} hitDetectionInstructions The rendering hit detection instructions.\n * @property {Array<number>} coordinates The array of all coordinates.\n * @property {!Object<string, TextState>} [textStates] The text states (decluttering).\n * @property {!Object<string, FillState>} [fillStates] The fill states (decluttering).\n * @property {!Object<string, StrokeState>} [strokeStates] The stroke states (decluttering).\n */\n\n/**\n * @typedef {Object<number, import(\"./canvas/Executor.js\").ReplayImageOrLabelArgs>} DeclutterImageWithText\n */\n\n/**\n * @const\n * @type {string}\n */\nexport const defaultFont = '10px sans-serif';\n\n/**\n * @const\n * @type {string}\n */\nexport const defaultFillStyle = '#000';\n\n/**\n * @const\n * @type {CanvasLineCap}\n */\nexport const defaultLineCap = 'round';\n\n/**\n * @const\n * @type {Array<number>}\n */\nexport const defaultLineDash = [];\n\n/**\n * @const\n * @type {number}\n */\nexport const defaultLineDashOffset = 0;\n\n/**\n * @const\n * @type {CanvasLineJoin}\n */\nexport const defaultLineJoin = 'round';\n\n/**\n * @const\n * @type {number}\n */\nexport const defaultMiterLimit = 10;\n\n/**\n * @const\n * @type {import(\"../colorlike.js\").ColorLike}\n */\nexport const defaultStrokeStyle = '#000';\n\n/**\n * @const\n * @type {CanvasTextAlign}\n */\nexport const defaultTextAlign = 'center';\n\n/**\n * @const\n * @type {CanvasTextBaseline}\n */\nexport const defaultTextBaseline = 'middle';\n\n/**\n * @const\n * @type {Array<number>}\n */\nexport const defaultPadding = [0, 0, 0, 0];\n\n/**\n * @const\n * @type {number}\n */\nexport const defaultLineWidth = 1;\n\n/**\n * @type {BaseObject}\n */\nexport const checkedFonts = new BaseObject();\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet measureContext = null;\n\n/**\n * @type {string}\n */\nlet measureFont;\n\n/**\n * @type {!Object<string, number>}\n */\nexport const textHeights = {};\n\n/**\n * Clears the label cache when a font becomes available.\n * @param {string} fontSpec CSS font spec.\n */\nexport const registerFont = (function () {\n  const retries = 100;\n  const size = '32px ';\n  const referenceFonts = ['monospace', 'serif'];\n  const len = referenceFonts.length;\n  const text = 'wmytzilWMYTZIL@#/&?$%10\\uF013';\n  let interval, referenceWidth;\n\n  /**\n   * @param {string} fontStyle Css font-style\n   * @param {string} fontWeight Css font-weight\n   * @param {*} fontFamily Css font-family\n   * @return {boolean} Font with style and weight is available\n   */\n  function isAvailable(fontStyle, fontWeight, fontFamily) {\n    let available = true;\n    for (let i = 0; i < len; ++i) {\n      const referenceFont = referenceFonts[i];\n      referenceWidth = measureTextWidth(\n        fontStyle + ' ' + fontWeight + ' ' + size + referenceFont,\n        text\n      );\n      if (fontFamily != referenceFont) {\n        const width = measureTextWidth(\n          fontStyle +\n            ' ' +\n            fontWeight +\n            ' ' +\n            size +\n            fontFamily +\n            ',' +\n            referenceFont,\n          text\n        );\n        // If width and referenceWidth are the same, then the fallback was used\n        // instead of the font we wanted, so the font is not available.\n        available = available && width != referenceWidth;\n      }\n    }\n    if (available) {\n      return true;\n    }\n    return false;\n  }\n\n  function check() {\n    let done = true;\n    const fonts = checkedFonts.getKeys();\n    for (let i = 0, ii = fonts.length; i < ii; ++i) {\n      const font = fonts[i];\n      if (checkedFonts.get(font) < retries) {\n        if (isAvailable.apply(this, font.split('\\n'))) {\n          clear(textHeights);\n          // Make sure that loaded fonts are picked up by Safari\n          measureContext = null;\n          measureFont = undefined;\n          checkedFonts.set(font, retries);\n        } else {\n          checkedFonts.set(font, checkedFonts.get(font) + 1, true);\n          done = false;\n        }\n      }\n    }\n    if (done) {\n      clearInterval(interval);\n      interval = undefined;\n    }\n  }\n\n  return function (fontSpec) {\n    const font = getFontParameters(fontSpec);\n    if (!font) {\n      return;\n    }\n    const families = font.families;\n    for (let i = 0, ii = families.length; i < ii; ++i) {\n      const family = families[i];\n      const key = font.style + '\\n' + font.weight + '\\n' + family;\n      if (checkedFonts.get(key) === undefined) {\n        checkedFonts.set(key, retries, true);\n        if (!isAvailable(font.style, font.weight, family)) {\n          checkedFonts.set(key, 0, true);\n          if (interval === undefined) {\n            interval = setInterval(check, 32);\n          }\n        }\n      }\n    }\n  };\n})();\n\n/**\n * @param {string} font Font to use for measuring.\n * @return {import(\"../size.js\").Size} Measurement.\n */\nexport const measureTextHeight = (function () {\n  /**\n   * @type {HTMLDivElement}\n   */\n  let measureElement;\n  return function (fontSpec) {\n    let height = textHeights[fontSpec];\n    if (height == undefined) {\n      if (WORKER_OFFSCREEN_CANVAS) {\n        const font = getFontParameters(fontSpec);\n        const metrics = measureText(fontSpec, 'Žg');\n        const lineHeight = isNaN(Number(font.lineHeight))\n          ? 1.2\n          : Number(font.lineHeight);\n        height =\n          lineHeight *\n          (metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent);\n      } else {\n        if (!measureElement) {\n          measureElement = document.createElement('div');\n          measureElement.innerHTML = 'M';\n          measureElement.style.minHeight = '0';\n          measureElement.style.maxHeight = 'none';\n          measureElement.style.height = 'auto';\n          measureElement.style.padding = '0';\n          measureElement.style.border = 'none';\n          measureElement.style.position = 'absolute';\n          measureElement.style.display = 'block';\n          measureElement.style.left = '-99999px';\n        }\n        measureElement.style.font = fontSpec;\n        document.body.appendChild(measureElement);\n        height = measureElement.offsetHeight;\n        document.body.removeChild(measureElement);\n      }\n      textHeights[fontSpec] = height;\n    }\n    return height;\n  };\n})();\n\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {TextMetrics} Text metrics.\n */\nfunction measureText(font, text) {\n  if (!measureContext) {\n    measureContext = createCanvasContext2D(1, 1);\n  }\n  if (font != measureFont) {\n    measureContext.font = font;\n    measureFont = measureContext.font;\n  }\n  return measureContext.measureText(text);\n}\n\n/**\n * @param {string} font Font.\n * @param {string} text Text.\n * @return {number} Width.\n */\nexport function measureTextWidth(font, text) {\n  return measureText(font, text).width;\n}\n\n/**\n * Measure text width using a cache.\n * @param {string} font The font.\n * @param {string} text The text to measure.\n * @param {Object<string, number>} cache A lookup of cached widths by text.\n * @return {number} The text width.\n */\nexport function measureAndCacheTextWidth(font, text, cache) {\n  if (text in cache) {\n    return cache[text];\n  }\n  const width = text\n    .split('\\n')\n    .reduce((prev, curr) => Math.max(prev, measureTextWidth(font, curr)), 0);\n  cache[text] = width;\n  return width;\n}\n\n/**\n * @param {TextState} baseStyle Base style.\n * @param {Array<string>} chunks Text chunks to measure.\n * @return {{width: number, height: number, widths: Array<number>, heights: Array<number>, lineWidths: Array<number>}}} Text metrics.\n */\nexport function getTextDimensions(baseStyle, chunks) {\n  const widths = [];\n  const heights = [];\n  const lineWidths = [];\n  let width = 0;\n  let lineWidth = 0;\n  let height = 0;\n  let lineHeight = 0;\n  for (let i = 0, ii = chunks.length; i <= ii; i += 2) {\n    const text = chunks[i];\n    if (text === '\\n' || i === ii) {\n      width = Math.max(width, lineWidth);\n      lineWidths.push(lineWidth);\n      lineWidth = 0;\n      height += lineHeight;\n      continue;\n    }\n    const font = chunks[i + 1] || baseStyle.font;\n    const currentWidth = measureTextWidth(font, text);\n    widths.push(currentWidth);\n    lineWidth += currentWidth;\n    const currentHeight = measureTextHeight(font);\n    heights.push(currentHeight);\n    lineHeight = Math.max(lineHeight, currentHeight);\n  }\n  return {width, height, widths, heights, lineWidths};\n}\n\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {number} rotation Rotation.\n * @param {number} offsetX X offset.\n * @param {number} offsetY Y offset.\n */\nexport function rotateAtOffset(context, rotation, offsetX, offsetY) {\n  if (rotation !== 0) {\n    context.translate(offsetX, offsetY);\n    context.rotate(rotation);\n    context.translate(-offsetX, -offsetY);\n  }\n}\n\n/**\n * @param {CanvasRenderingContext2D} context Context.\n * @param {import(\"../transform.js\").Transform|null} transform Transform.\n * @param {number} opacity Opacity.\n * @param {Label|HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} labelOrImage Label.\n * @param {number} originX Origin X.\n * @param {number} originY Origin Y.\n * @param {number} w Width.\n * @param {number} h Height.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {import(\"../size.js\").Size} scale Scale.\n */\nexport function drawImageOrLabel(\n  context,\n  transform,\n  opacity,\n  labelOrImage,\n  originX,\n  originY,\n  w,\n  h,\n  x,\n  y,\n  scale\n) {\n  context.save();\n\n  if (opacity !== 1) {\n    context.globalAlpha *= opacity;\n  }\n  if (transform) {\n    context.transform.apply(context, transform);\n  }\n\n  if (/** @type {*} */ (labelOrImage).contextInstructions) {\n    // label\n    context.translate(x, y);\n    context.scale(scale[0], scale[1]);\n    executeLabelInstructions(/** @type {Label} */ (labelOrImage), context);\n  } else if (scale[0] < 0 || scale[1] < 0) {\n    // flipped image\n    context.translate(x, y);\n    context.scale(scale[0], scale[1]);\n    context.drawImage(\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\n        labelOrImage\n      ),\n      originX,\n      originY,\n      w,\n      h,\n      0,\n      0,\n      w,\n      h\n    );\n  } else {\n    // if image not flipped translate and scale can be avoided\n    context.drawImage(\n      /** @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} */ (\n        labelOrImage\n      ),\n      originX,\n      originY,\n      w,\n      h,\n      x,\n      y,\n      w * scale[0],\n      h * scale[1]\n    );\n  }\n\n  context.restore();\n}\n\n/**\n * @param {Label} label Label.\n * @param {CanvasRenderingContext2D} context Context.\n */\nfunction executeLabelInstructions(label, context) {\n  const contextInstructions = label.contextInstructions;\n  for (let i = 0, ii = contextInstructions.length; i < ii; i += 2) {\n    if (Array.isArray(contextInstructions[i + 1])) {\n      context[contextInstructions[i]].apply(\n        context,\n        contextInstructions[i + 1]\n      );\n    } else {\n      context[contextInstructions[i]] = contextInstructions[i + 1];\n    }\n  }\n}\n","import {WORKER_OFFSCREEN_CANVAS} from './has.js';\n\n/**\n * @module ol/dom\n */\n\n//FIXME Move this function to the canvas module\n/**\n * Create an html canvas element and returns its 2d context.\n * @param {number} [width] Canvas width.\n * @param {number} [height] Canvas height.\n * @param {Array<HTMLCanvasElement>} [canvasPool] Canvas pool to take existing canvas from.\n * @param {CanvasRenderingContext2DSettings} [settings] CanvasRenderingContext2DSettings\n * @return {CanvasRenderingContext2D} The context.\n */\nexport function createCanvasContext2D(width, height, canvasPool, settings) {\n  /** @type {HTMLCanvasElement|OffscreenCanvas} */\n  let canvas;\n  if (canvasPool && canvasPool.length) {\n    canvas = canvasPool.shift();\n  } else if (WORKER_OFFSCREEN_CANVAS) {\n    canvas = new OffscreenCanvas(width || 300, height || 300);\n  } else {\n    canvas = document.createElement('canvas');\n  }\n  if (width) {\n    canvas.width = width;\n  }\n  if (height) {\n    canvas.height = height;\n  }\n  //FIXME Allow OffscreenCanvasRenderingContext2D as return type\n  return /** @type {CanvasRenderingContext2D} */ (\n    canvas.getContext('2d', settings)\n  );\n}\n\n/**\n * Releases canvas memory to avoid exceeding memory limits in Safari.\n * See https://pqina.nl/blog/total-canvas-memory-use-exceeds-the-maximum-limit/\n * @param {CanvasRenderingContext2D} context Context.\n */\nexport function releaseCanvas(context) {\n  const canvas = context.canvas;\n  canvas.width = 1;\n  canvas.height = 1;\n  context.clearRect(0, 0, 1, 1);\n}\n\n/**\n * Get the current computed width for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The width.\n */\nexport function outerWidth(element) {\n  let width = element.offsetWidth;\n  const style = getComputedStyle(element);\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\n\n  return width;\n}\n\n/**\n * Get the current computed height for the given element including margin,\n * padding and border.\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\n * @param {!HTMLElement} element Element.\n * @return {number} The height.\n */\nexport function outerHeight(element) {\n  let height = element.offsetHeight;\n  const style = getComputedStyle(element);\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\n\n  return height;\n}\n\n/**\n * @param {Node} newNode Node to replace old node\n * @param {Node} oldNode The node to be replaced\n */\nexport function replaceNode(newNode, oldNode) {\n  const parent = oldNode.parentNode;\n  if (parent) {\n    parent.replaceChild(newNode, oldNode);\n  }\n}\n\n/**\n * @param {Node} node The node to remove.\n * @return {Node|null} The node that was removed or null.\n */\nexport function removeNode(node) {\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\n}\n\n/**\n * @param {Node} node The node to remove the children from.\n */\nexport function removeChildren(node) {\n  while (node.lastChild) {\n    node.removeChild(node.lastChild);\n  }\n}\n\n/**\n * Transform the children of a parent node so they match the\n * provided list of children.  This function aims to efficiently\n * remove, add, and reorder child nodes while maintaining a simple\n * implementation (it is not guaranteed to minimize DOM operations).\n * @param {Node} node The parent node whose children need reworking.\n * @param {Array<Node>} children The desired children.\n */\nexport function replaceChildren(node, children) {\n  const oldChildren = node.childNodes;\n\n  for (let i = 0; true; ++i) {\n    const oldChild = oldChildren[i];\n    const newChild = children[i];\n\n    // check if our work is done\n    if (!oldChild && !newChild) {\n      break;\n    }\n\n    // check if children match\n    if (oldChild === newChild) {\n      continue;\n    }\n\n    // check if a new child needs to be added\n    if (!oldChild) {\n      node.appendChild(newChild);\n      continue;\n    }\n\n    // check if an old child needs to be removed\n    if (!newChild) {\n      node.removeChild(oldChild);\n      --i;\n      continue;\n    }\n\n    // reorder\n    node.insertBefore(newChild, oldChild);\n  }\n}\n","/**\n * @module ol/layer/Group\n */\nimport BaseLayer from './Base.js';\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport {assert} from '../asserts.js';\nimport {clear} from '../obj.js';\nimport {getIntersection} from '../extent.js';\nimport {getUid} from '../util.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {'addlayer'|'removelayer'} EventType\n */\n\n/**\n * @classdesc\n * A layer group triggers 'addlayer' and 'removelayer' events when layers are added to or removed from\n * the group or one of its child groups.  When a layer group is added to or removed from another layer group,\n * a single event will be triggered (instead of one per layer in the group added or removed).\n */\nexport class GroupEvent extends Event {\n  /**\n   * @param {EventType} type The event type.\n   * @param {BaseLayer} layer The layer.\n   */\n  constructor(type, layer) {\n    super(type);\n\n    /**\n     * The added or removed layer.\n     * @type {BaseLayer}\n     * @api\n     */\n    this.layer = layer;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:layers', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:layers', Return>} GroupOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<import(\"./Base.js\").default>|Collection<import(\"./Base.js\").default>} [layers] Child layers.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  LAYERS: 'layers',\n};\n\n/**\n * @classdesc\n * A {@link module:ol/Collection~Collection} of layers that are handled together.\n *\n * A generic `change` event is triggered when the group/Collection changes.\n *\n * @api\n */\nclass LayerGroup extends BaseLayer {\n  /**\n   * @param {Options} [options] Layer options.\n   */\n  constructor(options) {\n    options = options || {};\n    const baseOptions = /** @type {Options} */ (Object.assign({}, options));\n    delete baseOptions.layers;\n\n    let layers = options.layers;\n\n    super(baseOptions);\n\n    /***\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {GroupOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {GroupOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.layersListenerKeys_ = [];\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.listenerKeys_ = {};\n\n    this.addChangeListener(Property.LAYERS, this.handleLayersChanged_);\n\n    if (layers) {\n      if (Array.isArray(layers)) {\n        layers = new Collection(layers.slice(), {unique: true});\n      } else {\n        assert(\n          typeof (/** @type {?} */ (layers).getArray) === 'function',\n          'Expected `layers` to be an array or a `Collection`'\n        );\n      }\n    } else {\n      layers = new Collection(undefined, {unique: true});\n    }\n\n    this.setLayers(layers);\n  }\n\n  /**\n   * @private\n   */\n  handleLayerChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleLayersChanged_() {\n    this.layersListenerKeys_.forEach(unlistenByKey);\n    this.layersListenerKeys_.length = 0;\n\n    const layers = this.getLayers();\n    this.layersListenerKeys_.push(\n      listen(layers, CollectionEventType.ADD, this.handleLayersAdd_, this),\n      listen(layers, CollectionEventType.REMOVE, this.handleLayersRemove_, this)\n    );\n\n    for (const id in this.listenerKeys_) {\n      this.listenerKeys_[id].forEach(unlistenByKey);\n    }\n    clear(this.listenerKeys_);\n\n    const layersArray = layers.getArray();\n    for (let i = 0, ii = layersArray.length; i < ii; i++) {\n      const layer = layersArray[i];\n      this.registerLayerListeners_(layer);\n      this.dispatchEvent(new GroupEvent('addlayer', layer));\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {BaseLayer} layer The layer.\n   */\n  registerLayerListeners_(layer) {\n    const listenerKeys = [\n      listen(\n        layer,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleLayerChange_,\n        this\n      ),\n      listen(layer, EventType.CHANGE, this.handleLayerChange_, this),\n    ];\n\n    if (layer instanceof LayerGroup) {\n      listenerKeys.push(\n        listen(layer, 'addlayer', this.handleLayerGroupAdd_, this),\n        listen(layer, 'removelayer', this.handleLayerGroupRemove_, this)\n      );\n    }\n\n    this.listenerKeys_[getUid(layer)] = listenerKeys;\n  }\n\n  /**\n   * @param {GroupEvent} event The layer group event.\n   */\n  handleLayerGroupAdd_(event) {\n    this.dispatchEvent(new GroupEvent('addlayer', event.layer));\n  }\n\n  /**\n   * @param {GroupEvent} event The layer group event.\n   */\n  handleLayerGroupRemove_(event) {\n    this.dispatchEvent(new GroupEvent('removelayer', event.layer));\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<import(\"./Base.js\").default>} collectionEvent CollectionEvent.\n   * @private\n   */\n  handleLayersAdd_(collectionEvent) {\n    const layer = collectionEvent.element;\n    this.registerLayerListeners_(layer);\n    this.dispatchEvent(new GroupEvent('addlayer', layer));\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent<import(\"./Base.js\").default>} collectionEvent CollectionEvent.\n   * @private\n   */\n  handleLayersRemove_(collectionEvent) {\n    const layer = collectionEvent.element;\n    const key = getUid(layer);\n    this.listenerKeys_[key].forEach(unlistenByKey);\n    delete this.listenerKeys_[key];\n    this.dispatchEvent(new GroupEvent('removelayer', layer));\n    this.changed();\n  }\n\n  /**\n   * Returns the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}\n   * in this group.\n   * @return {!Collection<import(\"./Base.js\").default>} Collection of\n   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.\n   * @observable\n   * @api\n   */\n  getLayers() {\n    return /** @type {!Collection<import(\"./Base.js\").default>} */ (\n      this.get(Property.LAYERS)\n    );\n  }\n\n  /**\n   * Set the {@link module:ol/Collection~Collection collection} of {@link module:ol/layer/Layer~Layer layers}\n   * in this group.\n   * @param {!Collection<import(\"./Base.js\").default>} layers Collection of\n   *   {@link module:ol/layer/Base~BaseLayer layers} that are part of this group.\n   * @observable\n   * @api\n   */\n  setLayers(layers) {\n    const collection = this.getLayers();\n    if (collection) {\n      const currentLayers = collection.getArray();\n      for (let i = 0, ii = currentLayers.length; i < ii; ++i) {\n        this.dispatchEvent(new GroupEvent('removelayer', currentLayers[i]));\n      }\n    }\n\n    this.set(Property.LAYERS, layers);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(array) {\n    array = array !== undefined ? array : [];\n    this.getLayers().forEach(function (layer) {\n      layer.getLayersArray(array);\n    });\n    return array;\n  }\n\n  /**\n   * Get the layer states list and use this groups z-index as the default\n   * for all layers in this and nested groups, if it is unset at this point.\n   * If dest is not provided and this group's z-index is undefined\n   * 0 is used a the default z-index.\n   * @param {Array<import(\"./Layer.js\").State>} [dest] Optional list\n   * of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(dest) {\n    const states = dest !== undefined ? dest : [];\n    const pos = states.length;\n\n    this.getLayers().forEach(function (layer) {\n      layer.getLayerStatesArray(states);\n    });\n\n    const ownLayerState = this.getLayerState();\n    let defaultZIndex = ownLayerState.zIndex;\n    if (!dest && ownLayerState.zIndex === undefined) {\n      defaultZIndex = 0;\n    }\n    for (let i = pos, ii = states.length; i < ii; i++) {\n      const layerState = states[i];\n      layerState.opacity *= ownLayerState.opacity;\n      layerState.visible = layerState.visible && ownLayerState.visible;\n      layerState.maxResolution = Math.min(\n        layerState.maxResolution,\n        ownLayerState.maxResolution\n      );\n      layerState.minResolution = Math.max(\n        layerState.minResolution,\n        ownLayerState.minResolution\n      );\n      layerState.minZoom = Math.max(layerState.minZoom, ownLayerState.minZoom);\n      layerState.maxZoom = Math.min(layerState.maxZoom, ownLayerState.maxZoom);\n      if (ownLayerState.extent !== undefined) {\n        if (layerState.extent !== undefined) {\n          layerState.extent = getIntersection(\n            layerState.extent,\n            ownLayerState.extent\n          );\n        } else {\n          layerState.extent = ownLayerState.extent;\n        }\n      }\n      if (layerState.zIndex === undefined) {\n        layerState.zIndex = defaultZIndex;\n      }\n    }\n\n    return states;\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    return 'ready';\n  }\n}\n\nexport default LayerGroup;\n","/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/Map~Map} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */\nclass MapBrowserEvent extends MapEvent {\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./Map.js\").default} map Map.\n   * @param {EVENT} originalEvent Original event.\n   * @param {boolean} [dragging] Is the map currently being dragged?\n   * @param {import(\"./Map.js\").FrameState} [frameState] Frame state.\n   * @param {Array<PointerEvent>} [activePointers] Active pointers.\n   */\n  constructor(type, map, originalEvent, dragging, frameState, activePointers) {\n    super(type, map, frameState);\n\n    /**\n     * The original browser event.\n     * @const\n     * @type {EVENT}\n     * @api\n     */\n    this.originalEvent = originalEvent;\n\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     */\n    this.pixel_ = null;\n\n    /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    this.coordinate_ = null;\n\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n    this.dragging = dragging !== undefined ? dragging : false;\n\n    /**\n     * @type {Array<PointerEvent>|undefined}\n     */\n    this.activePointers = activePointers;\n  }\n\n  /**\n   * The map pixel relative to the viewport corresponding to the original event.\n   * @type {import(\"./pixel.js\").Pixel}\n   * @api\n   */\n  get pixel() {\n    if (!this.pixel_) {\n      this.pixel_ = this.map.getEventPixel(this.originalEvent);\n    }\n    return this.pixel_;\n  }\n  set pixel(pixel) {\n    this.pixel_ = pixel;\n  }\n\n  /**\n   * The coordinate corresponding to the original browser event.  This will be in the user\n   * projection if one is set.  Otherwise it will be in the view projection.\n   * @type {import(\"./coordinate.js\").Coordinate}\n   * @api\n   */\n  get coordinate() {\n    if (!this.coordinate_) {\n      this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n    }\n    return this.coordinate_;\n  }\n  set coordinate(coordinate) {\n    this.coordinate_ = coordinate;\n  }\n\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @api\n   */\n  preventDefault() {\n    super.preventDefault();\n    if ('preventDefault' in this.originalEvent) {\n      /** @type {UIEvent} */ (this.originalEvent).preventDefault();\n    }\n  }\n\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @api\n   */\n  stopPropagation() {\n    super.stopPropagation();\n    if ('stopPropagation' in this.originalEvent) {\n      /** @type {UIEvent} */ (this.originalEvent).stopPropagation();\n    }\n  }\n}\n\nexport default MapBrowserEvent;\n","/**\n * @module ol/MapEvent\n */\nimport Event from './events/Event.js';\n\n/**\n * @classdesc\n * Events emitted as map events are instances of this type.\n * See {@link module:ol/Map~Map} for which events trigger a map event.\n */\nclass MapEvent extends Event {\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./Map.js\").default} map Map.\n   * @param {?import(\"./Map.js\").FrameState} [frameState] Frame state.\n   */\n  constructor(type, map, frameState) {\n    super(type);\n\n    /**\n     * The map where the event occurred.\n     * @type {import(\"./Map.js\").default}\n     * @api\n     */\n    this.map = map;\n\n    /**\n     * The frame state at the time of the event.\n     * @type {?import(\"./Map.js\").FrameState}\n     * @api\n     */\n    this.frameState = frameState !== undefined ? frameState : null;\n  }\n}\n\nexport default MapEvent;\n","/**\n * @module ol/MapBrowserEventHandler\n */\n\nimport EventType from './events/EventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport Target from './events/Target.js';\nimport {PASSIVE_EVENT_LISTENERS} from './has.js';\nimport {listen, unlistenByKey} from './events.js';\n\nclass MapBrowserEventHandler extends Target {\n  /**\n   * @param {import(\"./Map.js\").default} map The map with the viewport to listen to events on.\n   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.\n   */\n  constructor(map, moveTolerance) {\n    super(map);\n\n    /**\n     * This is the element that we will listen to the real events on.\n     * @type {import(\"./Map.js\").default}\n     * @private\n     */\n    this.map_ = map;\n\n    /**\n     * @type {ReturnType<typeof setTimeout>}\n     * @private\n     */\n    this.clickTimeoutId_;\n\n    /**\n     * Emulate dblclick and singleclick. Will be true when only one pointer is active.\n     * @type {boolean}\n     */\n    this.emulateClicks_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dragging_ = false;\n\n    /**\n     * @type {!Array<import(\"./events.js\").EventsKey>}\n     * @private\n     */\n    this.dragListenerKeys_ = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;\n\n    /**\n     * The most recent \"down\" type event (or null if none have occurred).\n     * Set on pointerdown.\n     * @type {PointerEvent|null}\n     * @private\n     */\n    this.down_ = null;\n\n    const element = this.map_.getViewport();\n\n    /**\n     * @type {Array<PointerEvent>}\n     * @private\n     */\n    this.activePointers_ = [];\n\n    /**\n     * @type {!Object<number, Event>}\n     * @private\n     */\n    this.trackedTouches_ = {};\n\n    this.element_ = element;\n\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n    this.pointerdownListenerKey_ = listen(\n      element,\n      PointerEventType.POINTERDOWN,\n      this.handlePointerDown_,\n      this\n    );\n\n    /**\n     * @type {PointerEvent}\n     * @private\n     */\n    this.originalPointerMoveEvent_;\n\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n    this.relayedListenerKey_ = listen(\n      element,\n      PointerEventType.POINTERMOVE,\n      this.relayMoveEvent_,\n      this\n    );\n\n    /**\n     * @private\n     */\n    this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this);\n\n    this.element_.addEventListener(\n      EventType.TOUCHMOVE,\n      this.boundHandleTouchMove_,\n      PASSIVE_EVENT_LISTENERS ? {passive: false} : false\n    );\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  emulateClick_(pointerEvent) {\n    let newEvent = new MapBrowserEvent(\n      MapBrowserEventType.CLICK,\n      this.map_,\n      pointerEvent\n    );\n    this.dispatchEvent(newEvent);\n    if (this.clickTimeoutId_ !== undefined) {\n      // double-click\n      clearTimeout(this.clickTimeoutId_);\n      this.clickTimeoutId_ = undefined;\n      newEvent = new MapBrowserEvent(\n        MapBrowserEventType.DBLCLICK,\n        this.map_,\n        pointerEvent\n      );\n      this.dispatchEvent(newEvent);\n    } else {\n      // click\n      this.clickTimeoutId_ = setTimeout(() => {\n        this.clickTimeoutId_ = undefined;\n        const newEvent = new MapBrowserEvent(\n          MapBrowserEventType.SINGLECLICK,\n          this.map_,\n          pointerEvent\n        );\n        this.dispatchEvent(newEvent);\n      }, 250);\n    }\n  }\n\n  /**\n   * Keeps track on how many pointers are currently active.\n   *\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  updateActivePointers_(pointerEvent) {\n    const event = pointerEvent;\n    const id = event.pointerId;\n\n    if (\n      event.type == MapBrowserEventType.POINTERUP ||\n      event.type == MapBrowserEventType.POINTERCANCEL\n    ) {\n      delete this.trackedTouches_[id];\n      for (const pointerId in this.trackedTouches_) {\n        if (this.trackedTouches_[pointerId].target !== event.target) {\n          // Some platforms assign a new pointerId when the target changes.\n          // If this happens, delete one tracked pointer. If there is more\n          // than one tracked pointer for the old target, it will be cleared\n          // by subsequent POINTERUP events from other pointers.\n          delete this.trackedTouches_[pointerId];\n          break;\n        }\n      }\n    } else if (\n      event.type == MapBrowserEventType.POINTERDOWN ||\n      event.type == MapBrowserEventType.POINTERMOVE\n    ) {\n      this.trackedTouches_[id] = event;\n    }\n    this.activePointers_ = Object.values(this.trackedTouches_);\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  handlePointerUp_(pointerEvent) {\n    this.updateActivePointers_(pointerEvent);\n    const newEvent = new MapBrowserEvent(\n      MapBrowserEventType.POINTERUP,\n      this.map_,\n      pointerEvent,\n      undefined,\n      undefined,\n      this.activePointers_\n    );\n    this.dispatchEvent(newEvent);\n\n    // We emulate click events on left mouse button click, touch contact, and pen\n    // contact. isMouseActionButton returns true in these cases (evt.button is set\n    // to 0).\n    // See http://www.w3.org/TR/pointerevents/#button-states\n    // We only fire click, singleclick, and doubleclick if nobody has called\n    // event.preventDefault().\n    if (\n      this.emulateClicks_ &&\n      !newEvent.defaultPrevented &&\n      !this.dragging_ &&\n      this.isMouseActionButton_(pointerEvent)\n    ) {\n      this.emulateClick_(this.down_);\n    }\n\n    if (this.activePointers_.length === 0) {\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n      this.dragging_ = false;\n      this.down_ = null;\n    }\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} If the left mouse button was pressed.\n   * @private\n   */\n  isMouseActionButton_(pointerEvent) {\n    return pointerEvent.button === 0;\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  handlePointerDown_(pointerEvent) {\n    this.emulateClicks_ = this.activePointers_.length === 0;\n    this.updateActivePointers_(pointerEvent);\n    const newEvent = new MapBrowserEvent(\n      MapBrowserEventType.POINTERDOWN,\n      this.map_,\n      pointerEvent,\n      undefined,\n      undefined,\n      this.activePointers_\n    );\n    this.dispatchEvent(newEvent);\n\n    this.down_ = new PointerEvent(pointerEvent.type, pointerEvent);\n    Object.defineProperty(this.down_, 'target', {\n      writable: false,\n      value: pointerEvent.target,\n    });\n\n    if (this.dragListenerKeys_.length === 0) {\n      const doc = this.map_.getOwnerDocument();\n      this.dragListenerKeys_.push(\n        listen(\n          doc,\n          MapBrowserEventType.POINTERMOVE,\n          this.handlePointerMove_,\n          this\n        ),\n        listen(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this),\n        /* Note that the listener for `pointercancel is set up on\n         * `pointerEventHandler_` and not `documentPointerEventHandler_` like\n         * the `pointerup` and `pointermove` listeners.\n         *\n         * The reason for this is the following: `TouchSource.vacuumTouches_()`\n         * issues `pointercancel` events, when there was no `touchend` for a\n         * `touchstart`. Now, let's say a first `touchstart` is registered on\n         * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\n         * But `documentPointerEventHandler_` doesn't know about the first\n         * `touchstart`. If there is no `touchend` for the `touchstart`, we can\n         * only receive a `touchcancel` from `pointerEventHandler_`, because it is\n         * only registered there.\n         */\n        listen(\n          this.element_,\n          MapBrowserEventType.POINTERCANCEL,\n          this.handlePointerUp_,\n          this\n        )\n      );\n      if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {\n        this.dragListenerKeys_.push(\n          listen(\n            this.element_.getRootNode(),\n            MapBrowserEventType.POINTERUP,\n            this.handlePointerUp_,\n            this\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  handlePointerMove_(pointerEvent) {\n    // Between pointerdown and pointerup, pointermove events are triggered.\n    // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n    // moved a significant distance.\n    if (this.isMoving_(pointerEvent)) {\n      this.updateActivePointers_(pointerEvent);\n      this.dragging_ = true;\n      const newEvent = new MapBrowserEvent(\n        MapBrowserEventType.POINTERDRAG,\n        this.map_,\n        pointerEvent,\n        this.dragging_,\n        undefined,\n        this.activePointers_\n      );\n      this.dispatchEvent(newEvent);\n    }\n  }\n\n  /**\n   * Wrap and relay a pointermove event.\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  relayMoveEvent_(pointerEvent) {\n    this.originalPointerMoveEvent_ = pointerEvent;\n    const dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n    this.dispatchEvent(\n      new MapBrowserEvent(\n        MapBrowserEventType.POINTERMOVE,\n        this.map_,\n        pointerEvent,\n        dragging\n      )\n    );\n  }\n\n  /**\n   * Flexible handling of a `touch-action: none` css equivalent: because calling\n   * `preventDefault()` on a `pointermove` event does not stop native page scrolling\n   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it\n   * when an interaction (currently `DragPan` handles the event.\n   * @param {TouchEvent} event Event.\n   * @private\n   */\n  handleTouchMove_(event) {\n    // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`\n    // may not be initialized yet when we get here on a platform without native pointer events,\n    // when elm-pep is used as pointer events polyfill.\n    const originalEvent = this.originalPointerMoveEvent_;\n    if (\n      (!originalEvent || originalEvent.defaultPrevented) &&\n      (typeof event.cancelable !== 'boolean' || event.cancelable === true)\n    ) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} Is moving.\n   * @private\n   */\n  isMoving_(pointerEvent) {\n    return (\n      this.dragging_ ||\n      Math.abs(pointerEvent.clientX - this.down_.clientX) >\n        this.moveTolerance_ ||\n      Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_\n    );\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.relayedListenerKey_) {\n      unlistenByKey(this.relayedListenerKey_);\n      this.relayedListenerKey_ = null;\n    }\n    this.element_.removeEventListener(\n      EventType.TOUCHMOVE,\n      this.boundHandleTouchMove_\n    );\n\n    if (this.pointerdownListenerKey_) {\n      unlistenByKey(this.pointerdownListenerKey_);\n      this.pointerdownListenerKey_ = null;\n    }\n\n    this.dragListenerKeys_.forEach(unlistenByKey);\n    this.dragListenerKeys_.length = 0;\n\n    this.element_ = null;\n    super.disposeInternal();\n  }\n}\n\nexport default MapBrowserEventHandler;\n","/**\n * @module ol/MapBrowserEventType\n */\nimport EventType from './events/EventType.js';\n\n/**\n * Constants for event names.\n * @enum {string}\n */\nexport default {\n  /**\n   * A true single click with no dragging and no double click. Note that this\n   * event is delayed by 250 ms to ensure that it is not a double click.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#singleclick\n   * @api\n   */\n  SINGLECLICK: 'singleclick',\n\n  /**\n   * A click with no dragging. A double click will fire two of this.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#click\n   * @api\n   */\n  CLICK: EventType.CLICK,\n\n  /**\n   * A true double click, with no dragging.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#dblclick\n   * @api\n   */\n  DBLCLICK: EventType.DBLCLICK,\n\n  /**\n   * Triggered when a pointer is dragged.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointerdrag\n   * @api\n   */\n  POINTERDRAG: 'pointerdrag',\n\n  /**\n   * Triggered when a pointer is moved. Note that on touch devices this is\n   * triggered when the map is panned, so is not the same as mousemove.\n   * @event module:ol/MapBrowserEvent~MapBrowserEvent#pointermove\n   * @api\n   */\n  POINTERMOVE: 'pointermove',\n\n  POINTERDOWN: 'pointerdown',\n  POINTERUP: 'pointerup',\n  POINTEROVER: 'pointerover',\n  POINTEROUT: 'pointerout',\n  POINTERENTER: 'pointerenter',\n  POINTERLEAVE: 'pointerleave',\n  POINTERCANCEL: 'pointercancel',\n};\n\n/***\n * @typedef {'singleclick'|'click'|'dblclick'|'pointerdrag'|'pointermove'} Types\n */\n","/**\n * @module ol/pointer/EventType\n */\n\n/**\n * Constants for event names.\n * @enum {string}\n */\nexport default {\n  POINTERMOVE: 'pointermove',\n  POINTERDOWN: 'pointerdown',\n  POINTERUP: 'pointerup',\n  POINTEROVER: 'pointerover',\n  POINTEROUT: 'pointerout',\n  POINTERENTER: 'pointerenter',\n  POINTERLEAVE: 'pointerleave',\n  POINTERCANCEL: 'pointercancel',\n};\n","/**\n * @module ol/MapEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered after a map frame is rendered.\n   * @event module:ol/MapEvent~MapEvent#postrender\n   * @api\n   */\n  POSTRENDER: 'postrender',\n\n  /**\n   * Triggered when the map starts moving.\n   * @event module:ol/MapEvent~MapEvent#movestart\n   * @api\n   */\n  MOVESTART: 'movestart',\n\n  /**\n   * Triggered after the map is moved.\n   * @event module:ol/MapEvent~MapEvent#moveend\n   * @api\n   */\n  MOVEEND: 'moveend',\n\n  /**\n   * Triggered when loading of additional map data (tiles, images, features) starts.\n   * @event module:ol/MapEvent~MapEvent#loadstart\n   * @api\n   */\n  LOADSTART: 'loadstart',\n\n  /**\n   * Triggered when loading of additional map data has completed.\n   * @event module:ol/MapEvent~MapEvent#loadend\n   * @api\n   */\n  LOADEND: 'loadend',\n};\n\n/***\n * @typedef {'postrender'|'movestart'|'moveend'|'loadstart'|'loadend'} Types\n */\n","/**\n * @module ol/MapProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  LAYERGROUP: 'layergroup',\n  SIZE: 'size',\n  TARGET: 'target',\n  VIEW: 'view',\n};\n","/**\n * @module ol/TileQueue\n */\nimport EventType from './events/EventType.js';\nimport PriorityQueue, {DROP} from './structs/PriorityQueue.js';\nimport TileState from './TileState.js';\n\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import(\"./coordinate.js\").Coordinate, number): number} PriorityFunction\n */\n\nclass TileQueue extends PriorityQueue {\n  /**\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n   */\n  constructor(tilePriorityFunction, tileChangeCallback) {\n    super(\n      /**\n       * @param {Array} element Element.\n       * @return {number} Priority.\n       */\n      function (element) {\n        return tilePriorityFunction.apply(null, element);\n      },\n      /**\n       * @param {Array} element Element.\n       * @return {string} Key.\n       */\n      function (element) {\n        return /** @type {import(\"./Tile.js\").default} */ (element[0]).getKey();\n      }\n    );\n\n    /** @private */\n    this.boundHandleTileChange_ = this.handleTileChange.bind(this);\n\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n    this.tileChangeCallback_ = tileChangeCallback;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilesLoading_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string,boolean>}\n     */\n    this.tilesLoadingKeys_ = {};\n  }\n\n  /**\n   * @param {Array} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  enqueue(element) {\n    const added = super.enqueue(element);\n    if (added) {\n      const tile = element[0];\n      tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n    }\n    return added;\n  }\n\n  /**\n   * @return {number} Number of tiles loading.\n   */\n  getTilesLoading() {\n    return this.tilesLoading_;\n  }\n\n  /**\n   * @param {import(\"./events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"./Tile.js\").default} */ (event.target);\n    const state = tile.getState();\n    if (\n      state === TileState.LOADED ||\n      state === TileState.ERROR ||\n      state === TileState.EMPTY\n    ) {\n      if (state !== TileState.ERROR) {\n        tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n      }\n      const tileKey = tile.getKey();\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n      this.tileChangeCallback_();\n    }\n  }\n\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n  loadMoreTiles(maxTotalLoading, maxNewLoads) {\n    let newLoads = 0;\n    let state, tile, tileKey;\n    while (\n      this.tilesLoading_ < maxTotalLoading &&\n      newLoads < maxNewLoads &&\n      this.getCount() > 0\n    ) {\n      tile = /** @type {import(\"./Tile.js\").default} */ (this.dequeue()[0]);\n      tileKey = tile.getKey();\n      state = tile.getState();\n      if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n        this.tilesLoadingKeys_[tileKey] = true;\n        ++this.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n  }\n}\n\nexport default TileQueue;\n\n/**\n * @param {import('./Map.js').FrameState} frameState Frame state.\n * @param {import(\"./Tile.js\").default} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\nexport function getTilePriority(\n  frameState,\n  tile,\n  tileSourceKey,\n  tileCenter,\n  tileResolution\n) {\n  // Filter out tiles at higher zoom levels than the current zoom level, or that\n  // are outside the visible extent.\n  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n    return DROP;\n  }\n  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n    return DROP;\n  }\n  // Prioritize the highest zoom level tiles closest to the focus.\n  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n  // Within a zoom level, tiles are prioritized by the distance in pixels between\n  // the center of the tile and the center of the viewport.  The factor of 65536\n  // means that the prioritization should behave as desired for tiles up to\n  // 65536 * Math.log(2) = 45426 pixels from the focus.\n  const center = frameState.viewState.center;\n  const deltaX = tileCenter[0] - center[0];\n  const deltaY = tileCenter[1] - center[1];\n  return (\n    65536 * Math.log(tileResolution) +\n    Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution\n  );\n}\n","/**\n * @module ol/structs/PriorityQueue\n */\nimport {assert} from '../asserts.js';\nimport {clear} from '../obj.js';\n\n/**\n * @type {number}\n */\nexport const DROP = Infinity;\n\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nclass PriorityQueue {\n  /**\n   * @param {function(T): number} priorityFunction Priority function.\n   * @param {function(T): string} keyFunction Key function.\n   */\n  constructor(priorityFunction, keyFunction) {\n    /**\n     * @type {function(T): number}\n     * @private\n     */\n    this.priorityFunction_ = priorityFunction;\n\n    /**\n     * @type {function(T): string}\n     * @private\n     */\n    this.keyFunction_ = keyFunction;\n\n    /**\n     * @type {Array<T>}\n     * @private\n     */\n    this.elements_ = [];\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.priorities_ = [];\n\n    /**\n     * @type {!Object<string, boolean>}\n     * @private\n     */\n    this.queuedElements_ = {};\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.elements_.length = 0;\n    this.priorities_.length = 0;\n    clear(this.queuedElements_);\n  }\n\n  /**\n   * Remove and return the highest-priority element. O(log N).\n   * @return {T} Element.\n   */\n  dequeue() {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[0];\n    if (elements.length == 1) {\n      elements.length = 0;\n      priorities.length = 0;\n    } else {\n      elements[0] = elements.pop();\n      priorities[0] = priorities.pop();\n      this.siftUp_(0);\n    }\n    const elementKey = this.keyFunction_(element);\n    delete this.queuedElements_[elementKey];\n    return element;\n  }\n\n  /**\n   * Enqueue an element. O(log N).\n   * @param {T} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  enqueue(element) {\n    assert(\n      !(this.keyFunction_(element) in this.queuedElements_),\n      'Tried to enqueue an `element` that was already added to the queue'\n    );\n    const priority = this.priorityFunction_(element);\n    if (priority != DROP) {\n      this.elements_.push(element);\n      this.priorities_.push(priority);\n      this.queuedElements_[this.keyFunction_(element)] = true;\n      this.siftDown_(0, this.elements_.length - 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.elements_.length;\n  }\n\n  /**\n   * Gets the index of the left child of the node at the given index.\n   * @param {number} index The index of the node to get the left child for.\n   * @return {number} The index of the left child.\n   * @private\n   */\n  getLeftChildIndex_(index) {\n    return index * 2 + 1;\n  }\n\n  /**\n   * Gets the index of the right child of the node at the given index.\n   * @param {number} index The index of the node to get the right child for.\n   * @return {number} The index of the right child.\n   * @private\n   */\n  getRightChildIndex_(index) {\n    return index * 2 + 2;\n  }\n\n  /**\n   * Gets the index of the parent of the node at the given index.\n   * @param {number} index The index of the node to get the parent for.\n   * @return {number} The index of the parent.\n   * @private\n   */\n  getParentIndex_(index) {\n    return (index - 1) >> 1;\n  }\n\n  /**\n   * Make this a heap. O(N).\n   * @private\n   */\n  heapify_() {\n    let i;\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n      this.siftUp_(i);\n    }\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.elements_.length === 0;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Is key queued.\n   */\n  isKeyQueued(key) {\n    return key in this.queuedElements_;\n  }\n\n  /**\n   * @param {T} element Element.\n   * @return {boolean} Is queued.\n   */\n  isQueued(element) {\n    return this.isKeyQueued(this.keyFunction_(element));\n  }\n\n  /**\n   * @param {number} index The index of the node to move down.\n   * @private\n   */\n  siftUp_(index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const count = elements.length;\n    const element = elements[index];\n    const priority = priorities[index];\n    const startIndex = index;\n\n    while (index < count >> 1) {\n      const lIndex = this.getLeftChildIndex_(index);\n      const rIndex = this.getRightChildIndex_(index);\n\n      const smallerChildIndex =\n        rIndex < count && priorities[rIndex] < priorities[lIndex]\n          ? rIndex\n          : lIndex;\n\n      elements[index] = elements[smallerChildIndex];\n      priorities[index] = priorities[smallerChildIndex];\n      index = smallerChildIndex;\n    }\n\n    elements[index] = element;\n    priorities[index] = priority;\n    this.siftDown_(startIndex, index);\n  }\n\n  /**\n   * @param {number} startIndex The index of the root.\n   * @param {number} index The index of the node to move up.\n   * @private\n   */\n  siftDown_(startIndex, index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[index];\n    const priority = priorities[index];\n\n    while (index > startIndex) {\n      const parentIndex = this.getParentIndex_(index);\n      if (priorities[parentIndex] > priority) {\n        elements[index] = elements[parentIndex];\n        priorities[index] = priorities[parentIndex];\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  reprioritize() {\n    const priorityFunction = this.priorityFunction_;\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    let index = 0;\n    const n = elements.length;\n    let element, i, priority;\n    for (i = 0; i < n; ++i) {\n      element = elements[i];\n      priority = priorityFunction(element);\n      if (priority == DROP) {\n        delete this.queuedElements_[this.keyFunction_(element)];\n      } else {\n        priorities[index] = priority;\n        elements[index++] = element;\n      }\n    }\n    elements.length = index;\n    priorities.length = index;\n    this.heapify_();\n  }\n}\n\nexport default PriorityQueue;\n","/**\n * @module ol/TileState\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  IDLE: 0,\n  LOADING: 1,\n  LOADED: 2,\n  /**\n   * Indicates that tile loading failed\n   * @type {number}\n   */\n  ERROR: 3,\n  EMPTY: 4,\n};\n","/**\n * @module ol/control/defaults\n */\nimport Attribution from './Attribution.js';\nimport Collection from '../Collection.js';\nimport Rotate from './Rotate.js';\nimport Zoom from './Zoom.js';\n\n/**\n * @typedef {Object} DefaultsOptions\n * @property {boolean} [attribution=true] Include\n * {@link module:ol/control/Attribution~Attribution}.\n * @property {import(\"./Attribution.js\").Options} [attributionOptions]\n * Options for {@link module:ol/control/Attribution~Attribution}.\n * @property {boolean} [rotate=true] Include\n * {@link module:ol/control/Rotate~Rotate}.\n * @property {import(\"./Rotate.js\").Options} [rotateOptions] Options\n * for {@link module:ol/control/Rotate~Rotate}.\n * @property {boolean} [zoom] Include {@link module:ol/control/Zoom~Zoom}.\n * @property {import(\"./Zoom.js\").Options} [zoomOptions] Options for\n * {@link module:ol/control/Zoom~Zoom}.\n */\n\n/**\n * Set of controls included in maps by default. Unless configured otherwise,\n * this returns a collection containing an instance of each of the following\n * controls:\n * * {@link module:ol/control/Zoom~Zoom}\n * * {@link module:ol/control/Rotate~Rotate}\n * * {@link module:ol/control/Attribution~Attribution}\n *\n * @param {DefaultsOptions} [options] Options for the default controls.\n * @return {Collection<import(\"./Control.js\").default>} A collection of controls\n * to be used with the {@link module:ol/Map~Map} constructor's `controls` option.\n * @api\n */\nexport function defaults(options) {\n  options = options ? options : {};\n\n  /** @type {Collection<import(\"./Control.js\").default>} */\n  const controls = new Collection();\n\n  const zoomControl = options.zoom !== undefined ? options.zoom : true;\n  if (zoomControl) {\n    controls.push(new Zoom(options.zoomOptions));\n  }\n\n  const rotateControl = options.rotate !== undefined ? options.rotate : true;\n  if (rotateControl) {\n    controls.push(new Rotate(options.rotateOptions));\n  }\n\n  const attributionControl =\n    options.attribution !== undefined ? options.attribution : true;\n  if (attributionControl) {\n    controls.push(new Attribution(options.attributionOptions));\n  }\n\n  return controls;\n}\n","/**\n * @module ol/control/Attribution\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {equals} from '../array.js';\nimport {removeChildren, replaceNode} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string|HTMLElement} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [expandClassName=className + '-expand'] CSS class name for the\n * collapsed attributions button.\n * @property {string|HTMLElement} [collapseLabel='›'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [collapseClassName=className + '-collapse'] CSS class name for the\n * expanded attributions button.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nclass Attribution extends Control {\n  /**\n   * @param {Options} [options] Attribution options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.ulElement_ = document.createElement('ul');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsed_ =\n      options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.userCollapsed_ = this.collapsed_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overrideCollapsible_ = options.collapsible !== undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ =\n      options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-attribution';\n\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n\n    const expandClassName =\n      options.expandClassName !== undefined\n        ? options.expandClassName\n        : className + '-expand';\n\n    const collapseLabel =\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u203A';\n\n    const collapseClassName =\n      options.collapseClassName !== undefined\n        ? options.collapseClassName\n        : className + '-collapse';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n      this.collapseLabel_.className = collapseClassName;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n      this.label_.className = expandClassName;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel =\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.toggleButton_ = document.createElement('button');\n    this.toggleButton_.setAttribute('type', 'button');\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n    this.toggleButton_.title = tipLabel;\n    this.toggleButton_.appendChild(activeLabel);\n\n    this.toggleButton_.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    const cssClasses =\n      className +\n      ' ' +\n      CLASS_UNSELECTABLE +\n      ' ' +\n      CLASS_CONTROL +\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.toggleButton_);\n    element.appendChild(this.ulElement_);\n\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n    this.renderedAttributions_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n  }\n\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n  collectSourceAttributions_(frameState) {\n    const visibleAttributions = Array.from(\n      new Set(\n        this.getMap()\n          .getAllLayers()\n          .flatMap((layer) => layer.getAttributions(frameState))\n      )\n    );\n\n    const collapsible = !this.getMap()\n      .getAllLayers()\n      .some(\n        (layer) =>\n          layer.getSource() &&\n          layer.getSource().getAttributionsCollapsible() === false\n      );\n    if (!this.overrideCollapsible_) {\n      this.setCollapsible(collapsible);\n    }\n    return visibleAttributions;\n  }\n\n  /**\n   * @private\n   * @param {?import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  updateElement_(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const attributions = this.collectSourceAttributions_(frameState);\n\n    const visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_);\n\n    // append the attributions\n    for (let i = 0, ii = attributions.length; i < ii; ++i) {\n      const element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n    this.userCollapsed_ = this.collapsed_;\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n    this.toggleButton_.setAttribute('aria-expanded', String(!this.collapsed_));\n  }\n\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (this.userCollapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    this.userCollapsed_ = collapsed;\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Update the attribution element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.updateElement_(mapEvent.frameState);\n  }\n}\n\nexport default Attribution;\n","/**\n * @module ol/control/Control\n */\nimport BaseObject from '../Object.js';\nimport MapEventType from '../MapEventType.js';\nimport {VOID} from '../functions.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {removeNode} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * const myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nclass Control extends BaseObject {\n  /**\n   * @param {Options} options Control options.\n   */\n  constructor(options) {\n    super();\n\n    const element = options.element;\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = element ? element : null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    this.map_ = null;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n    this.listenerKeys = [];\n\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.target) {\n      this.setTarget(options.target);\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    removeNode(this.element);\n    super.disposeInternal();\n  }\n\n  /**\n   * Get the map associated with this control.\n   * @return {import(\"../Map.js\").default|null} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.map_) {\n      removeNode(this.element);\n    }\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n    if (map) {\n      const target = this.target_\n        ? this.target_\n        : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n      if (this.render !== VOID) {\n        this.listenerKeys.push(\n          listen(map, MapEventType.POSTRENDER, this.render, this)\n        );\n      }\n      map.render();\n    }\n  }\n\n  /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */\n  render(mapEvent) {}\n\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n  setTarget(target) {\n    this.target_ =\n      typeof target === 'string' ? document.getElementById(target) : target;\n  }\n}\n\nexport default Control;\n","/**\n * @module ol/control/Rotate\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport {CLASS_CONTROL, CLASS_HIDDEN, CLASS_UNSELECTABLE} from '../css.js';\nimport {easeOut} from '../easing.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-rotate'] CSS class name.\n * @property {string|HTMLElement} [label='⇧'] Text label to use for the rotate button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Reset rotation'] Text label to use for the rotate tip.\n * @property {string} [compassClassName='ol-compass'] CSS class name for the compass.\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {boolean} [autoHide=true] Hide the control when rotation is 0.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control should\n * be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {function():void} [resetNorth] Function called when the control is clicked.\n * This will override the default `resetNorth`.\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\n * rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A button control to reset rotation to 0.\n * To style this control use css selector `.ol-rotate`. A `.ol-hidden` css\n * selector is added to the button when the rotation is 0.\n *\n * @api\n */\nclass Rotate extends Control {\n  /**\n   * @param {Options} [options] Rotate options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-rotate';\n\n    const label = options.label !== undefined ? options.label : '\\u21E7';\n\n    const compassClassName =\n      options.compassClassName !== undefined\n        ? options.compassClassName\n        : 'ol-compass';\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    this.label_ = null;\n\n    if (typeof label === 'string') {\n      this.label_ = document.createElement('span');\n      this.label_.className = compassClassName;\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n      this.label_.classList.add(compassClassName);\n    }\n\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Reset rotation';\n\n    const button = document.createElement('button');\n    button.className = className + '-reset';\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(this.label_);\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    const cssClasses =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n\n    this.callResetNorth_ = options.resetNorth ? options.resetNorth : undefined;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.autoHide_ = options.autoHide !== undefined ? options.autoHide : true;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = undefined;\n\n    if (this.autoHide_) {\n      this.element.classList.add(CLASS_HIDDEN);\n    }\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    if (this.callResetNorth_ !== undefined) {\n      this.callResetNorth_();\n    } else {\n      this.resetNorth_();\n    }\n  }\n\n  /**\n   * @private\n   */\n  resetNorth_() {\n    const map = this.getMap();\n    const view = map.getView();\n    if (!view) {\n      // the map does not have a view, so we can't act\n      // upon it\n      return;\n    }\n    const rotation = view.getRotation();\n    if (rotation !== undefined) {\n      if (this.duration_ > 0 && rotation % (2 * Math.PI) !== 0) {\n        view.animate({\n          rotation: 0,\n          duration: this.duration_,\n          easing: easeOut,\n        });\n      } else {\n        view.setRotation(0);\n      }\n    }\n  }\n\n  /**\n   * Update the rotate control element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      return;\n    }\n    const rotation = frameState.viewState.rotation;\n    if (rotation != this.rotation_) {\n      const transform = 'rotate(' + rotation + 'rad)';\n      if (this.autoHide_) {\n        const contains = this.element.classList.contains(CLASS_HIDDEN);\n        if (!contains && rotation === 0) {\n          this.element.classList.add(CLASS_HIDDEN);\n        } else if (contains && rotation !== 0) {\n          this.element.classList.remove(CLASS_HIDDEN);\n        }\n      }\n      this.label_.style.transform = transform;\n    }\n    this.rotation_ = rotation;\n  }\n}\n\nexport default Rotate;\n","/**\n * @module ol/control/Zoom\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {easeOut} from '../easing.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {string} [className='ol-zoom'] CSS class name.\n * @property {string} [zoomInClassName=className + '-in'] CSS class name for the zoom-in button.\n * @property {string} [zoomOutClassName=className + '-out'] CSS class name for the zoom-out button.\n * @property {string|HTMLElement} [zoomInLabel='+'] Text label to use for the zoom-in\n * button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|HTMLElement} [zoomOutLabel='–'] Text label to use for the zoom-out button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [zoomInTipLabel='Zoom in'] Text label to use for the button tip.\n * @property {string} [zoomOutTipLabel='Zoom out'] Text label to use for the button tip.\n * @property {number} [delta=1] The zoom delta applied on each click.\n * @property {HTMLElement|string} [target] Specify a target if you want the control to be\n * rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control with 2 buttons, one for zoom in and one for zoom out.\n * This control is one of the default controls of a map. To style this control\n * use css selectors `.ol-zoom-in` and `.ol-zoom-out`.\n *\n * @api\n */\nclass Zoom extends Control {\n  /**\n   * @param {Options} [options] Zoom options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-zoom';\n\n    const delta = options.delta !== undefined ? options.delta : 1;\n\n    const zoomInClassName =\n      options.zoomInClassName !== undefined\n        ? options.zoomInClassName\n        : className + '-in';\n\n    const zoomOutClassName =\n      options.zoomOutClassName !== undefined\n        ? options.zoomOutClassName\n        : className + '-out';\n\n    const zoomInLabel =\n      options.zoomInLabel !== undefined ? options.zoomInLabel : '+';\n    const zoomOutLabel =\n      options.zoomOutLabel !== undefined ? options.zoomOutLabel : '\\u2013';\n\n    const zoomInTipLabel =\n      options.zoomInTipLabel !== undefined ? options.zoomInTipLabel : 'Zoom in';\n    const zoomOutTipLabel =\n      options.zoomOutTipLabel !== undefined\n        ? options.zoomOutTipLabel\n        : 'Zoom out';\n\n    const inElement = document.createElement('button');\n    inElement.className = zoomInClassName;\n    inElement.setAttribute('type', 'button');\n    inElement.title = zoomInTipLabel;\n    inElement.appendChild(\n      typeof zoomInLabel === 'string'\n        ? document.createTextNode(zoomInLabel)\n        : zoomInLabel\n    );\n\n    inElement.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this, delta),\n      false\n    );\n\n    const outElement = document.createElement('button');\n    outElement.className = zoomOutClassName;\n    outElement.setAttribute('type', 'button');\n    outElement.title = zoomOutTipLabel;\n    outElement.appendChild(\n      typeof zoomOutLabel === 'string'\n        ? document.createTextNode(zoomOutLabel)\n        : zoomOutLabel\n    );\n\n    outElement.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this, -delta),\n      false\n    );\n\n    const cssClasses =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(inElement);\n    element.appendChild(outElement);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * @param {number} delta Zoom delta.\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(delta, event) {\n    event.preventDefault();\n    this.zoomByDelta_(delta);\n  }\n\n  /**\n   * @param {number} delta Zoom delta.\n   * @private\n   */\n  zoomByDelta_(delta) {\n    const map = this.getMap();\n    const view = map.getView();\n    if (!view) {\n      // the map does not have a view, so we can't act\n      // upon it\n      return;\n    }\n    const currentZoom = view.getZoom();\n    if (currentZoom !== undefined) {\n      const newZoom = view.getConstrainedZoom(currentZoom + delta);\n      if (this.duration_ > 0) {\n        if (view.getAnimating()) {\n          view.cancelAnimations();\n        }\n        view.animate({\n          zoom: newZoom,\n          duration: this.duration_,\n          easing: easeOut,\n        });\n      } else {\n        view.setZoom(newZoom);\n      }\n    }\n  }\n}\n\nexport default Zoom;\n","/**\n * @module ol/interaction/defaults\n */\nimport Collection from '../Collection.js';\nimport DoubleClickZoom from './DoubleClickZoom.js';\nimport DragPan from './DragPan.js';\nimport DragRotate from './DragRotate.js';\nimport DragZoom from './DragZoom.js';\nimport KeyboardPan from './KeyboardPan.js';\nimport KeyboardZoom from './KeyboardZoom.js';\nimport Kinetic from '../Kinetic.js';\nimport MouseWheelZoom from './MouseWheelZoom.js';\nimport PinchRotate from './PinchRotate.js';\nimport PinchZoom from './PinchZoom.js';\n\n/**\n * @typedef {Object} DefaultsOptions\n * @property {boolean} [altShiftDragRotate=true] Whether Alt-Shift-drag rotate is\n * desired.\n * @property {boolean} [onFocusOnly=false] Interact only when the map has the\n * focus. This affects the `MouseWheelZoom` and `DragPan` interactions and is\n * useful when page scroll is desired for maps that do not have the browser's\n * focus.\n * @property {boolean} [doubleClickZoom=true] Whether double click zoom is\n * desired.\n * @property {boolean} [keyboard=true] Whether keyboard interaction is desired.\n * @property {boolean} [mouseWheelZoom=true] Whether mousewheel zoom is desired.\n * @property {boolean} [shiftDragZoom=true] Whether Shift-drag zoom is desired.\n * @property {boolean} [dragPan=true] Whether drag pan is desired.\n * @property {boolean} [pinchRotate=true] Whether pinch rotate is desired.\n * @property {boolean} [pinchZoom=true] Whether pinch zoom is desired.\n * @property {number} [zoomDelta] Zoom level delta when using keyboard or double click zoom.\n * @property {number} [zoomDuration] Duration of the zoom animation in\n * milliseconds.\n */\n\n/**\n * Set of interactions included in maps by default. Specific interactions can be\n * excluded by setting the appropriate option to false in the constructor\n * options, but the order of the interactions is fixed.  If you want to specify\n * a different order for interactions, you will need to create your own\n * {@link module:ol/interaction/Interaction~Interaction} instances and insert\n * them into a {@link module:ol/Collection~Collection} in the order you want\n * before creating your {@link module:ol/Map~Map} instance. Changing the order can\n * be of interest if the event propagation needs to be stopped at a point.\n * The default set of interactions, in sequence, is:\n * * {@link module:ol/interaction/DragRotate~DragRotate}\n * * {@link module:ol/interaction/DoubleClickZoom~DoubleClickZoom}\n * * {@link module:ol/interaction/DragPan~DragPan}\n * * {@link module:ol/interaction/PinchRotate~PinchRotate}\n * * {@link module:ol/interaction/PinchZoom~PinchZoom}\n * * {@link module:ol/interaction/KeyboardPan~KeyboardPan}\n * * {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}\n * * {@link module:ol/interaction/MouseWheelZoom~MouseWheelZoom}\n * * {@link module:ol/interaction/DragZoom~DragZoom}\n *\n * @param {DefaultsOptions} [options] Defaults options.\n * @return {Collection<import(\"./Interaction.js\").default>}\n * A collection of interactions to be used with the {@link module:ol/Map~Map}\n * constructor's `interactions` option.\n * @api\n */\nexport function defaults(options) {\n  options = options ? options : {};\n\n  /** @type {Collection<import(\"./Interaction.js\").default>} */\n  const interactions = new Collection();\n\n  const kinetic = new Kinetic(-0.005, 0.05, 100);\n\n  const altShiftDragRotate =\n    options.altShiftDragRotate !== undefined\n      ? options.altShiftDragRotate\n      : true;\n  if (altShiftDragRotate) {\n    interactions.push(new DragRotate());\n  }\n\n  const doubleClickZoom =\n    options.doubleClickZoom !== undefined ? options.doubleClickZoom : true;\n  if (doubleClickZoom) {\n    interactions.push(\n      new DoubleClickZoom({\n        delta: options.zoomDelta,\n        duration: options.zoomDuration,\n      })\n    );\n  }\n\n  const dragPan = options.dragPan !== undefined ? options.dragPan : true;\n  if (dragPan) {\n    interactions.push(\n      new DragPan({\n        onFocusOnly: options.onFocusOnly,\n        kinetic: kinetic,\n      })\n    );\n  }\n\n  const pinchRotate =\n    options.pinchRotate !== undefined ? options.pinchRotate : true;\n  if (pinchRotate) {\n    interactions.push(new PinchRotate());\n  }\n\n  const pinchZoom = options.pinchZoom !== undefined ? options.pinchZoom : true;\n  if (pinchZoom) {\n    interactions.push(\n      new PinchZoom({\n        duration: options.zoomDuration,\n      })\n    );\n  }\n\n  const keyboard = options.keyboard !== undefined ? options.keyboard : true;\n  if (keyboard) {\n    interactions.push(new KeyboardPan());\n    interactions.push(\n      new KeyboardZoom({\n        delta: options.zoomDelta,\n        duration: options.zoomDuration,\n      })\n    );\n  }\n\n  const mouseWheelZoom =\n    options.mouseWheelZoom !== undefined ? options.mouseWheelZoom : true;\n  if (mouseWheelZoom) {\n    interactions.push(\n      new MouseWheelZoom({\n        onFocusOnly: options.onFocusOnly,\n        duration: options.zoomDuration,\n      })\n    );\n  }\n\n  const shiftDragZoom =\n    options.shiftDragZoom !== undefined ? options.shiftDragZoom : true;\n  if (shiftDragZoom) {\n    interactions.push(\n      new DragZoom({\n        duration: options.zoomDuration,\n      })\n    );\n  }\n\n  return interactions;\n}\n","/**\n * @module ol/interaction/DoubleClickZoom\n */\nimport Interaction, {zoomByDelta} from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {number} [delta=1] The zoom delta applied on each double click.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom by double-clicking on the map.\n * @api\n */\nclass DoubleClickZoom extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a\n   * doubleclick) and eventually zooms the map.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (mapBrowserEvent.type == MapBrowserEventType.DBLCLICK) {\n      const browserEvent = /** @type {MouseEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const map = mapBrowserEvent.map;\n      const anchor = mapBrowserEvent.coordinate;\n      const delta = browserEvent.shiftKey ? -this.delta_ : this.delta_;\n      const view = map.getView();\n      zoomByDelta(view, delta, anchor, this.duration_);\n      browserEvent.preventDefault();\n      stopEvent = true;\n    }\n    return !stopEvent;\n  }\n}\n\nexport default DoubleClickZoom;\n","/**\n * @module ol/interaction/Interaction\n */\nimport BaseObject from '../Object.js';\nimport InteractionProperty from './Property.js';\nimport {easeOut, linear} from '../easing.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active', Return>} InteractionOnSignature\n */\n\n/**\n * Object literal with config options for interactions.\n * @typedef {Object} InteractionOptions\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} handleEvent\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. If the function returns a falsy value, propagation of\n * the event to other interactions in the map's interactions chain will be\n * prevented (this includes functions with no explicit return). The interactions\n * are traversed in reverse order of the interactions collection of the map.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * User actions that change the state of the map. Some are similar to controls,\n * but are not associated with a DOM element.\n * For example, {@link module:ol/interaction/KeyboardZoom~KeyboardZoom} is\n * functionally the same as {@link module:ol/control/Zoom~Zoom}, but triggered\n * by a keyboard event not a button element event.\n * Although interactions do not have a DOM element, some of them do render\n * vectors and so are visible on the screen.\n * @api\n */\nclass Interaction extends BaseObject {\n  /**\n   * @param {InteractionOptions} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {InteractionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {InteractionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {InteractionOnSignature<void>}\n     */\n    this.un;\n\n    if (options && options.handleEvent) {\n      this.handleEvent = options.handleEvent;\n    }\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    this.map_ = null;\n\n    this.setActive(true);\n  }\n\n  /**\n   * Return whether the interaction is currently active.\n   * @return {boolean} `true` if the interaction is active, `false` otherwise.\n   * @observable\n   * @api\n   */\n  getActive() {\n    return /** @type {boolean} */ (this.get(InteractionProperty.ACTIVE));\n  }\n\n  /**\n   * Get the map associated with this interaction.\n   * @return {import(\"../Map.js\").default|null} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event}.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(mapBrowserEvent) {\n    return true;\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  setActive(active) {\n    this.set(InteractionProperty.ACTIVE, active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMap(map) {\n    this.map_ = map;\n  }\n}\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {import(\"../coordinate.js\").Coordinate} delta Delta.\n * @param {number} [duration] Duration.\n */\nexport function pan(view, delta, duration) {\n  const currentCenter = view.getCenterInternal();\n  if (currentCenter) {\n    const center = [currentCenter[0] + delta[0], currentCenter[1] + delta[1]];\n    view.animateInternal({\n      duration: duration !== undefined ? duration : 250,\n      easing: linear,\n      center: view.getConstrainedCenter(center),\n    });\n  }\n}\n\n/**\n * @param {import(\"../View.js\").default} view View.\n * @param {number} delta Delta from previous zoom level.\n * @param {import(\"../coordinate.js\").Coordinate} [anchor] Anchor coordinate in the user projection.\n * @param {number} [duration] Duration.\n */\nexport function zoomByDelta(view, delta, anchor, duration) {\n  const currentZoom = view.getZoom();\n\n  if (currentZoom === undefined) {\n    return;\n  }\n\n  const newZoom = view.getConstrainedZoom(currentZoom + delta);\n  const newResolution = view.getResolutionForZoom(newZoom);\n\n  if (view.getAnimating()) {\n    view.cancelAnimations();\n  }\n  view.animate({\n    resolution: newResolution,\n    anchor: anchor,\n    duration: duration !== undefined ? duration : 250,\n    easing: easeOut,\n  });\n}\n\nexport default Interaction;\n","/**\n * @module ol/interaction/Property\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  ACTIVE: 'active',\n};\n","/**\n * @module ol/interaction/DragPan\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {\n  all,\n  focusWithTabindex,\n  noModifierKeys,\n  primaryAction,\n} from '../events/condition.js';\nimport {easeOut} from '../easing.js';\nimport {\n  rotate as rotateCoordinate,\n  scale as scaleCoordinate,\n} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\nclass DragPan extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super({\n      stopDown: FALSE,\n    });\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n    this.kinetic_ = options.kinetic;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.lastCentroid = null;\n\n    /**\n     * @type {number}\n     */\n    this.lastPointersCount_;\n\n    /**\n     * @type {boolean}\n     */\n    this.panning_ = false;\n\n    const condition = options.condition\n      ? options.condition\n      : all(noModifierKeys, primaryAction);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.onFocusOnly\n      ? all(focusWithTabindex, condition)\n      : condition;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.noKinetic_ = false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    const map = mapBrowserEvent.map;\n    if (!this.panning_) {\n      this.panning_ = true;\n      map.getView().beginInteraction();\n    }\n    const targetPointers = this.targetPointers;\n    const centroid = map.getEventPixel(centroidFromPointers(targetPointers));\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n      if (this.lastCentroid) {\n        const delta = [\n          this.lastCentroid[0] - centroid[0],\n          centroid[1] - this.lastCentroid[1],\n        ];\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        scaleCoordinate(delta, view.getResolution());\n        rotateCoordinate(delta, view.getRotation());\n        view.adjustCenterInternal(delta);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n    mapBrowserEvent.originalEvent.preventDefault();\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        const distance = this.kinetic_.getDistance();\n        const angle = this.kinetic_.getAngle();\n        const center = view.getCenterInternal();\n        const centerpx = map.getPixelFromCoordinateInternal(center);\n        const dest = map.getCoordinateFromPixelInternal([\n          centerpx[0] - distance * Math.cos(angle),\n          centerpx[1] - distance * Math.sin(angle),\n        ]);\n        view.animateInternal({\n          center: view.getConstrainedCenter(dest),\n          duration: 500,\n          easing: easeOut,\n        });\n      }\n      if (this.panning_) {\n        this.panning_ = false;\n        view.endInteraction();\n      }\n      return false;\n    }\n    if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger up, tiny drag, second finger up\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = null;\n    return true;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      this.lastCentroid = null;\n      // stop any current animation\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      }\n      // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    }\n    return false;\n  }\n}\n\nexport default DragPan;\n","/**\n * @module ol/interaction/Pointer\n */\nimport Interaction from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\n\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nclass PointerInteraction extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options)\n    );\n\n    if (options.handleDownEvent) {\n      this.handleDownEvent = options.handleDownEvent;\n    }\n\n    if (options.handleDragEvent) {\n      this.handleDragEvent = options.handleDragEvent;\n    }\n\n    if (options.handleMoveEvent) {\n      this.handleMoveEvent = options.handleMoveEvent;\n    }\n\n    if (options.handleUpEvent) {\n      this.handleUpEvent = options.handleUpEvent;\n    }\n\n    if (options.stopDown) {\n      this.stopDown = options.stopDown;\n    }\n\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    this.handlingDownUpSequence = false;\n\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n    this.targetPointers = [];\n  }\n\n  /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */\n  getPointerCount() {\n    return this.targetPointers.length;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleDownEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleDragEvent(mapBrowserEvent) {}\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    let stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n        // prevent page scrolling during dragging\n        mapBrowserEvent.originalEvent.preventDefault();\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence =\n          handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        const handled = this.handleDownEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n    return !stopEvent;\n  }\n\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleMoveEvent(mapBrowserEvent) {}\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleUpEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n  stopDown(handled) {\n    return handled;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n  updateTrackedPointers_(mapBrowserEvent) {\n    if (mapBrowserEvent.activePointers) {\n      this.targetPointers = mapBrowserEvent.activePointers;\n    }\n  }\n}\n\n/**\n * @param {Array<PointerEvent>} pointerEvents List of events.\n * @return {{clientX: number, clientY: number}} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  const length = pointerEvents.length;\n  let clientX = 0;\n  let clientY = 0;\n  for (let i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return {clientX: clientX / length, clientY: clientY / length};\n}\n\nexport default PointerInteraction;\n","/**\n * @module ol/events/condition\n */\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {FALSE, TRUE} from '../functions.js';\nimport {MAC, WEBKIT} from '../has.js';\nimport {assert} from '../asserts.js';\n\n/**\n * A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * `{boolean}`. If the condition is met, true should be returned.\n *\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default): boolean} Condition\n */\n\n/**\n * Creates a condition function that passes when all provided conditions pass.\n * @param {...Condition} var_args Conditions to check.\n * @return {Condition} Condition function.\n */\nexport function all(var_args) {\n  const conditions = arguments;\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} All conditions passed.\n   */\n  return function (event) {\n    let pass = true;\n    for (let i = 0, ii = conditions.length; i < ii; ++i) {\n      pass = pass && conditions[i](event);\n      if (!pass) {\n        break;\n      }\n    }\n    return pass;\n  };\n}\n\n/**\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\n * additionally the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt key is pressed.\n * @api\n */\nexport const altKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\n * (e.g. when additionally the platform-modifier-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the alt and shift keys are pressed.\n * @api\n */\nexport const altShiftKeysOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if the map has the focus. This condition requires a map target\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map has the focus.\n * @api\n */\nexport const focus = function (event) {\n  const targetElement = event.map.getTargetElement();\n  const activeElement = event.map.getOwnerDocument().activeElement;\n  return targetElement.contains(activeElement);\n};\n\n/**\n * Return `true` if the map has the focus or no 'tabindex' attribute set.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n * @return {boolean} The map container has the focus or no 'tabindex' attribute.\n */\nexport const focusWithTabindex = function (event) {\n  return event.map.getTargetElement().hasAttribute('tabindex')\n    ? focus(event)\n    : true;\n};\n\n/**\n * Return always true.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True.\n * @api\n */\nexport const always = TRUE;\n\n/**\n * Return `true` if the event is a `click` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `click` event.\n * @api\n */\nexport const click = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\n};\n\n/**\n * Return `true` if the event has an \"action\"-producing mouse button.\n *\n * By definition, this includes left-click on windows/linux, and left-click\n * without the ctrl key on Macs.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} The result.\n */\nexport const mouseActionButton = function (mapBrowserEvent) {\n  const originalEvent = /** @type {MouseEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return originalEvent.button == 0 && !(WEBKIT && MAC && originalEvent.ctrlKey);\n};\n\n/**\n * Return always false.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} False.\n * @api\n */\nexport const never = FALSE;\n\n/**\n * Return `true` if the browser event is a `pointermove` event, `false`\n * otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the browser event is a `pointermove` event.\n * @api\n */\nexport const pointerMove = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == 'pointermove';\n};\n\n/**\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `singleclick` event.\n * @api\n */\nexport const singleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\n};\n\n/**\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event is a map `dblclick` event.\n * @api\n */\nexport const doubleClick = function (mapBrowserEvent) {\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\n};\n\n/**\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\n * pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if there no modifier keys are pressed.\n * @api\n */\nexport const noModifierKeys = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    !originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\n * the shift-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the platform modifier key is pressed.\n * @api\n */\nexport const platformModifierKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    !originalEvent.altKey &&\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\n    !originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if the platform-modifier-key (the meta-key on Mac,\n * ctrl-key otherwise) is pressed.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the platform modifier key is pressed.\n * @api\n */\nexport const platformModifierKey = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return MAC ? originalEvent.metaKey : originalEvent.ctrlKey;\n};\n\n/**\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\n * additionally the alt-key is pressed).\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if only the shift key is pressed.\n * @api\n */\nexport const shiftKeyOnly = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  return (\n    !originalEvent.altKey &&\n    !(originalEvent.metaKey || originalEvent.ctrlKey) &&\n    originalEvent.shiftKey\n  );\n};\n\n/**\n * Return `true` if the target element is not editable, i.e. not an `input`,\n * `select`, or `textarea` element and no `contenteditable` attribute is\n * set or inherited, `false` otherwise.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True only if the target element is not editable.\n * @api\n */\nexport const targetNotEditable = function (mapBrowserEvent) {\n  const originalEvent = /** @type {KeyboardEvent|MouseEvent|TouchEvent} */ (\n    mapBrowserEvent.originalEvent\n  );\n  const tagName = /** @type {Element} */ (originalEvent.target).tagName;\n  return (\n    tagName !== 'INPUT' &&\n    tagName !== 'SELECT' &&\n    tagName !== 'TEXTAREA' &&\n    // `isContentEditable` is only available on `HTMLElement`, but it may also be a\n    // different type like `SVGElement`.\n    // @ts-ignore\n    !originalEvent.target.isContentEditable\n  );\n};\n\n/**\n * Return `true` if the event originates from a mouse device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a mouse device.\n * @api\n */\nexport const mouseOnly = function (mapBrowserEvent) {\n  const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (\n    mapBrowserEvent\n  ).originalEvent;\n  assert(\n    pointerEvent !== undefined,\n    'mapBrowserEvent must originate from a pointer event'\n  );\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvent.pointerType == 'mouse';\n};\n\n/**\n * Return `true` if the event originates from a touchable device.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a touchable device.\n * @api\n */\nexport const touchOnly = function (mapBrowserEvent) {\n  const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (\n    mapBrowserEvent\n  ).originalEvent;\n  assert(\n    pointerEvt !== undefined,\n    'mapBrowserEvent must originate from a pointer event'\n  );\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvt.pointerType === 'touch';\n};\n\n/**\n * Return `true` if the event originates from a digital pen.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a digital pen.\n * @api\n */\nexport const penOnly = function (mapBrowserEvent) {\n  const pointerEvt = /** @type {import(\"../MapBrowserEvent\").default} */ (\n    mapBrowserEvent\n  ).originalEvent;\n  assert(\n    pointerEvt !== undefined,\n    'mapBrowserEvent must originate from a pointer event'\n  );\n  // see https://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\n  return pointerEvt.pointerType === 'pen';\n};\n\n/**\n * Return `true` if the event originates from a primary pointer in\n * contact with the surface or if the left mouse button is pressed.\n * See https://www.w3.org/TR/pointerevents/#button-states.\n *\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n * @return {boolean} True if the event originates from a primary pointer.\n * @api\n */\nexport const primaryAction = function (mapBrowserEvent) {\n  const pointerEvent = /** @type {import(\"../MapBrowserEvent\").default} */ (\n    mapBrowserEvent\n  ).originalEvent;\n  assert(\n    pointerEvent !== undefined,\n    'mapBrowserEvent must originate from a pointer event'\n  );\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\n};\n","/**\n * @module ol/interaction/DragRotate\n */\nimport PointerInteraction from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {\n  altShiftKeysOnly,\n  mouseActionButton,\n  mouseOnly,\n} from '../events/condition.js';\nimport {disable} from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nclass DragRotate extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super({\n      stopDown: FALSE,\n    });\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n    const size = map.getSize();\n    const offset = mapBrowserEvent.pixel;\n    const theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n    if (this.lastAngle_ !== undefined) {\n      const delta = theta - this.lastAngle_;\n      view.adjustRotationInternal(-delta);\n    }\n    this.lastAngle_ = theta;\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    view.endInteraction(this.duration_);\n    return false;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n\n    if (\n      mouseActionButton(mapBrowserEvent) &&\n      this.condition_(mapBrowserEvent)\n    ) {\n      const map = mapBrowserEvent.map;\n      map.getView().beginInteraction();\n      this.lastAngle_ = undefined;\n      return true;\n    }\n    return false;\n  }\n}\n\nexport default DragRotate;\n","/**\n * @module ol/interaction/DragZoom\n */\nimport DragBox from './DragBox.js';\nimport {easeOut} from '../easing.js';\nimport {shiftKeyOnly} from '../events/condition.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-dragzoom'] CSS class name for styling the\n * box.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.shiftKeyOnly}.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {boolean} [out=false] Use interaction for zooming out.\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the parent default\n * `boxEndCondition` function.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when a key, shift by default, is held down.\n *\n * To change the style of the box, use CSS and the `.ol-dragzoom` selector, or\n * your custom one configured with `className`.\n * @api\n */\nclass DragZoom extends DragBox {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const condition = options.condition ? options.condition : shiftKeyOnly;\n\n    super({\n      condition: condition,\n      className: options.className || 'ol-dragzoom',\n      minArea: options.minArea,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 200;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.out_ = options.out !== undefined ? options.out : false;\n  }\n\n  /**\n   * Function to execute just before `onboxend` is fired\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   */\n  onBoxEnd(event) {\n    const map = this.getMap();\n    const view = /** @type {!import(\"../View.js\").default} */ (map.getView());\n    let geometry = this.getGeometry();\n\n    if (this.out_) {\n      const rotatedExtent = view.rotatedExtentForGeometry(geometry);\n      const resolution = view.getResolutionForExtentInternal(rotatedExtent);\n      const factor = view.getResolution() / resolution;\n      geometry = geometry.clone();\n      geometry.scale(factor * factor);\n    }\n\n    view.fitInternal(geometry, {\n      duration: this.duration_,\n      easing: easeOut,\n    });\n  }\n}\n\nexport default DragZoom;\n","/**\n * @module ol/interaction/DragBox\n */\n// FIXME draw drag box\nimport Event from '../events/Event.js';\nimport PointerInteraction from './Pointer.js';\nimport RenderBox from '../render/Box.js';\nimport {mouseActionButton} from '../events/condition.js';\n\n/**\n * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,\n * true should be returned.\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default, import(\"../pixel.js\").Pixel, import(\"../pixel.js\").Pixel):boolean} EndCondition\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-dragbox'] CSS class name for styling the box.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link ol/events/condition~mouseActionButton}.\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default\n * `boxEndCondition` function.\n * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.\n * Default is `true` if the area of the box is bigger than the `minArea` option.\n * @property {function(this:DragBox, import(\"../MapBrowserEvent.js\").default):void} [onBoxEnd] Code to execute just\n * before `boxend` is fired.\n */\n\n/**\n * @enum {string}\n */\nconst DragBoxEventType = {\n  /**\n   * Triggered upon drag box start.\n   * @event DragBoxEvent#boxstart\n   * @api\n   */\n  BOXSTART: 'boxstart',\n\n  /**\n   * Triggered on drag when box is active.\n   * @event DragBoxEvent#boxdrag\n   * @api\n   */\n  BOXDRAG: 'boxdrag',\n\n  /**\n   * Triggered upon drag box end.\n   * @event DragBoxEvent#boxend\n   * @api\n   */\n  BOXEND: 'boxend',\n\n  /**\n   * Triggered upon drag box canceled.\n   * @event DragBoxEvent#boxcancel\n   * @api\n   */\n  BOXCANCEL: 'boxcancel',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of\n * this type.\n */\nexport class DragBoxEvent extends Event {\n  /**\n   * @param {string} type The event type.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Originating event.\n   */\n  constructor(type, coordinate, mapBrowserEvent) {\n    super(type);\n\n    /**\n     * The coordinate of the drag event.\n     * @const\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @api\n     */\n    this.coordinate = coordinate;\n\n    /**\n     * @const\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserEvent;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature\n */\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the shift or other key is held down. This is used, for example,\n * for zooming to a specific area of the map\n * (see {@link module:ol/interaction/DragZoom~DragZoom} and\n * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).\n *\n * @fires DragBoxEvent\n * @api\n */\nclass DragBox extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {DragBoxOnSignature<void>}\n     */\n    this.un;\n\n    options = options ? options : {};\n\n    /**\n     * @type {import(\"../render/Box.js\").default}\n     * @private\n     */\n    this.box_ = new RenderBox(options.className || 'ol-dragbox');\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minArea_ = options.minArea !== undefined ? options.minArea : 64;\n\n    if (options.onBoxEnd) {\n      this.onBoxEnd = options.onBoxEnd;\n    }\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.startPixel_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : mouseActionButton;\n\n    /**\n     * @private\n     * @type {EndCondition}\n     */\n    this.boxEndCondition_ = options.boxEndCondition\n      ? options.boxEndCondition\n      : this.defaultBoxEndCondition;\n  }\n\n  /**\n   * The default condition for determining whether the boxend event\n   * should fire.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent The originating MapBrowserEvent\n   *     leading to the box end.\n   * @param {import(\"../pixel.js\").Pixel} startPixel The starting pixel of the box.\n   * @param {import(\"../pixel.js\").Pixel} endPixel The end pixel of the box.\n   * @return {boolean} Whether or not the boxend condition should be fired.\n   */\n  defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {\n    const width = endPixel[0] - startPixel[0];\n    const height = endPixel[1] - startPixel[1];\n    return width * width + height * height >= this.minArea_;\n  }\n\n  /**\n   * Returns geometry of last drawn box.\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   * @api\n   */\n  getGeometry() {\n    return this.box_.getGeometry();\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);\n\n    this.dispatchEvent(\n      new DragBoxEvent(\n        DragBoxEventType.BOXDRAG,\n        mapBrowserEvent.coordinate,\n        mapBrowserEvent\n      )\n    );\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    this.box_.setMap(null);\n\n    const completeBox = this.boxEndCondition_(\n      mapBrowserEvent,\n      this.startPixel_,\n      mapBrowserEvent.pixel\n    );\n    if (completeBox) {\n      this.onBoxEnd(mapBrowserEvent);\n    }\n    this.dispatchEvent(\n      new DragBoxEvent(\n        completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL,\n        mapBrowserEvent.coordinate,\n        mapBrowserEvent\n      )\n    );\n    return false;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.condition_(mapBrowserEvent)) {\n      this.startPixel_ = mapBrowserEvent.pixel;\n      this.box_.setMap(mapBrowserEvent.map);\n      this.box_.setPixels(this.startPixel_, this.startPixel_);\n      this.dispatchEvent(\n        new DragBoxEvent(\n          DragBoxEventType.BOXSTART,\n          mapBrowserEvent.coordinate,\n          mapBrowserEvent\n        )\n      );\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Function to execute just before `onboxend` is fired\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   */\n  onBoxEnd(event) {}\n}\n\nexport default DragBox;\n","/**\n * @module ol/render/Box\n */\n\nimport Disposable from '../Disposable.js';\nimport Polygon from '../geom/Polygon.js';\n\nclass RenderBox extends Disposable {\n  /**\n   * @param {string} className CSS class name.\n   */\n  constructor(className) {\n    super();\n\n    /**\n     * @type {import(\"../geom/Polygon.js\").default}\n     * @private\n     */\n    this.geometry_ = null;\n\n    /**\n     * @type {HTMLDivElement}\n     * @private\n     */\n    this.element_ = document.createElement('div');\n    this.element_.style.position = 'absolute';\n    this.element_.style.pointerEvents = 'auto';\n    this.element_.className = 'ol-box ' + className;\n\n    /**\n     * @private\n     * @type {import(\"../Map.js\").default|null}\n     */\n    this.map_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.startPixel_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.endPixel_ = null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.setMap(null);\n  }\n\n  /**\n   * @private\n   */\n  render_() {\n    const startPixel = this.startPixel_;\n    const endPixel = this.endPixel_;\n    const px = 'px';\n    const style = this.element_.style;\n    style.left = Math.min(startPixel[0], endPixel[0]) + px;\n    style.top = Math.min(startPixel[1], endPixel[1]) + px;\n    style.width = Math.abs(endPixel[0] - startPixel[0]) + px;\n    style.height = Math.abs(endPixel[1] - startPixel[1]) + px;\n  }\n\n  /**\n   * @param {import(\"../Map.js\").default|null} map Map.\n   */\n  setMap(map) {\n    if (this.map_) {\n      this.map_.getOverlayContainer().removeChild(this.element_);\n      const style = this.element_.style;\n      style.left = 'inherit';\n      style.top = 'inherit';\n      style.width = 'inherit';\n      style.height = 'inherit';\n    }\n    this.map_ = map;\n    if (this.map_) {\n      this.map_.getOverlayContainer().appendChild(this.element_);\n    }\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} startPixel Start pixel.\n   * @param {import(\"../pixel.js\").Pixel} endPixel End pixel.\n   */\n  setPixels(startPixel, endPixel) {\n    this.startPixel_ = startPixel;\n    this.endPixel_ = endPixel;\n    this.createOrUpdateGeometry();\n    this.render_();\n  }\n\n  /**\n   * Creates or updates the cached geometry.\n   */\n  createOrUpdateGeometry() {\n    const startPixel = this.startPixel_;\n    const endPixel = this.endPixel_;\n    const pixels = [\n      startPixel,\n      [startPixel[0], endPixel[1]],\n      endPixel,\n      [endPixel[0], startPixel[1]],\n    ];\n    const coordinates = pixels.map(\n      this.map_.getCoordinateFromPixelInternal,\n      this.map_\n    );\n    // close the polygon\n    coordinates[4] = coordinates[0].slice();\n    if (!this.geometry_) {\n      this.geometry_ = new Polygon([coordinates]);\n    } else {\n      this.geometry_.setCoordinates([coordinates]);\n    }\n  }\n\n  /**\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n}\n\nexport default RenderBox;\n","/**\n * @module ol/interaction/KeyboardPan\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {pan} from './Interaction.js';\nimport Key from '../events/Key.js';\nimport {noModifierKeys, targetNotEditable} from '../events/condition.js';\nimport {rotate as rotateCoordinate} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.noModifierKeys} and\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\nclass KeyboardPan extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options || {};\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultCondition_ = function (mapBrowserEvent) {\n      return (\n        noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent)\n      );\n    };\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ =\n      options.condition !== undefined\n        ? options.condition\n        : this.defaultCondition_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelDelta_ =\n      options.pixelDelta !== undefined ? options.pixelDelta : 128;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n   * pressed).\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (mapBrowserEvent.type == EventType.KEYDOWN) {\n      const keyEvent = /** @type {KeyboardEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const key = keyEvent.key;\n      if (\n        this.condition_(mapBrowserEvent) &&\n        (key == Key.DOWN ||\n          key == Key.LEFT ||\n          key == Key.RIGHT ||\n          key == Key.UP)\n      ) {\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n        let deltaX = 0,\n          deltaY = 0;\n        if (key == Key.DOWN) {\n          deltaY = -mapUnitsDelta;\n        } else if (key == Key.LEFT) {\n          deltaX = -mapUnitsDelta;\n        } else if (key == Key.RIGHT) {\n          deltaX = mapUnitsDelta;\n        } else {\n          deltaY = mapUnitsDelta;\n        }\n        const delta = [deltaX, deltaY];\n        rotateCoordinate(delta, view.getRotation());\n        pan(view, delta, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\n\nexport default KeyboardPan;\n","/**\n * @module ol/events/Key\n */\n\n/**\n * @enum {string}\n * @const\n */\nexport default {\n  LEFT: 'ArrowLeft',\n  UP: 'ArrowUp',\n  RIGHT: 'ArrowRight',\n  DOWN: 'ArrowDown',\n};\n","/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {zoomByDelta} from './Interaction.js';\nimport {platformModifierKey, targetNotEditable} from '../events/condition.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. The default condition is\n * that {@link module:ol/events/condition.targetNotEditable} is fulfilled and that\n * the platform modifier key isn't pressed\n * (!{@link module:ol/events/condition.platformModifierKey}).\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nclass KeyboardZoom extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition\n      ? options.condition\n      : function (mapBrowserEvent) {\n          return (\n            !platformModifierKey(mapBrowserEvent) &&\n            targetNotEditable(mapBrowserEvent)\n          );\n        };\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (\n      mapBrowserEvent.type == EventType.KEYDOWN ||\n      mapBrowserEvent.type == EventType.KEYPRESS\n    ) {\n      const keyEvent = /** @type {KeyboardEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const key = keyEvent.key;\n      if (this.condition_(mapBrowserEvent) && (key === '+' || key === '-')) {\n        const map = mapBrowserEvent.map;\n        const delta = key === '+' ? this.delta_ : -this.delta_;\n        const view = map.getView();\n        zoomByDelta(view, delta, undefined, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\n\nexport default KeyboardZoom;\n","/**\n * @module ol/Kinetic\n */\n\n/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @api\n */\nclass Kinetic {\n  /**\n   * @param {number} decay Rate of decay (must be negative).\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n   * @param {number} delay Delay to consider to calculate the kinetic\n   *     initial values (milliseconds).\n   */\n  constructor(decay, minVelocity, delay) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.decay_ = decay;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minVelocity_ = minVelocity;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delay_ = delay;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.points_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.initialVelocity_ = 0;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  begin() {\n    this.points_.length = 0;\n    this.angle_ = 0;\n    this.initialVelocity_ = 0;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   */\n  update(x, y) {\n    this.points_.push(x, y, Date.now());\n  }\n\n  /**\n   * @return {boolean} Whether we should do kinetic animation.\n   */\n  end() {\n    if (this.points_.length < 6) {\n      // at least 2 points are required (i.e. there must be at least 6 elements\n      // in the array)\n      return false;\n    }\n    const delay = Date.now() - this.delay_;\n    const lastIndex = this.points_.length - 3;\n    if (this.points_[lastIndex + 2] < delay) {\n      // the last tracked point is too old, which means that the user stopped\n      // panning before releasing the map\n      return false;\n    }\n\n    // get the first point which still falls into the delay time\n    let firstIndex = lastIndex - 3;\n    while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n      firstIndex -= 3;\n    }\n\n    const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];\n    // we don't want a duration of 0 (divide by zero)\n    // we also make sure the user panned for a duration of at least one frame\n    // (1/60s) to compute sane displacement values\n    if (duration < 1000 / 60) {\n      return false;\n    }\n\n    const dx = this.points_[lastIndex] - this.points_[firstIndex];\n    const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n    this.angle_ = Math.atan2(dy, dx);\n    this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n    return this.initialVelocity_ > this.minVelocity_;\n  }\n\n  /**\n   * @return {number} Total distance travelled (pixels).\n   */\n  getDistance() {\n    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n  }\n\n  /**\n   * @return {number} Angle of the kinetic panning animation (radians).\n   */\n  getAngle() {\n    return this.angle_;\n  }\n}\n\nexport default Kinetic;\n","/**\n * @module ol/interaction/MouseWheelZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {zoomByDelta} from './Interaction.js';\nimport {DEVICE_PIXEL_RATIO, FIREFOX} from '../has.js';\nimport {all, always, focusWithTabindex} from '../events/condition.js';\nimport {clamp} from '../math.js';\n\n/**\n * @typedef {'trackpad' | 'wheel'} Mode\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.always}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {number} [maxDelta=1] Maximum mouse wheel delta.\n * @property {number} [duration=250] Animation duration in milliseconds.\n * @property {number} [timeout=80] Mouse wheel timeout duration in milliseconds.\n * @property {boolean} [useAnchor=true] Enable zooming using the mouse's\n * location as the anchor. When set to `false`, zooming in and out will zoom to\n * the center of the screen instead of zooming on the mouse's location.\n * @property {boolean} [constrainResolution=false] If true, the mouse wheel zoom\n * event will always animate to the closest zoom level after an interaction;\n * false means intermediary zoom levels are allowed.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by scrolling the mouse wheel.\n * @api\n */\nclass MouseWheelZoom extends Interaction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super(\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options)\n    );\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.totalDelta_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastDelta_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = options.maxDelta !== undefined ? options.maxDelta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.timeout_ = options.timeout !== undefined ? options.timeout : 80;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.useAnchor_ =\n      options.useAnchor !== undefined ? options.useAnchor : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.constrainResolution_ =\n      options.constrainResolution !== undefined\n        ? options.constrainResolution\n        : false;\n\n    const condition = options.condition ? options.condition : always;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.onFocusOnly\n      ? all(focusWithTabindex, condition)\n      : condition;\n\n    /**\n     * @private\n     * @type {?import(\"../coordinate.js\").Coordinate}\n     */\n    this.lastAnchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.startTime_ = undefined;\n\n    /**\n     * @private\n     * @type {ReturnType<typeof setTimeout>}\n     */\n    this.timeoutId_;\n\n    /**\n     * @private\n     * @type {Mode|undefined}\n     */\n    this.mode_ = undefined;\n\n    /**\n     * Trackpad events separated by this delay will be considered separate\n     * interactions.\n     * @private\n     * @type {number}\n     */\n    this.trackpadEventGap_ = 400;\n\n    /**\n     * @private\n     * @type {ReturnType<typeof setTimeout>}\n     */\n    this.trackpadTimeoutId_;\n\n    /**\n     * The number of delta values per zoom level\n     * @private\n     * @type {number}\n     */\n    this.deltaPerZoom_ = 300;\n  }\n\n  /**\n   * @private\n   */\n  endInteraction_() {\n    this.trackpadTimeoutId_ = undefined;\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const view = map.getView();\n    view.endInteraction(\n      undefined,\n      this.lastDelta_ ? (this.lastDelta_ > 0 ? 1 : -1) : 0,\n      this.lastAnchor_\n    );\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} (if it was a mousewheel-event) and eventually\n   * zooms the map.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!this.condition_(mapBrowserEvent)) {\n      return true;\n    }\n    const type = mapBrowserEvent.type;\n    if (type !== EventType.WHEEL) {\n      return true;\n    }\n\n    const map = mapBrowserEvent.map;\n    const wheelEvent = /** @type {WheelEvent} */ (\n      mapBrowserEvent.originalEvent\n    );\n    wheelEvent.preventDefault();\n\n    if (this.useAnchor_) {\n      this.lastAnchor_ = mapBrowserEvent.coordinate;\n    }\n\n    // Delta normalisation inspired by\n    // https://github.com/mapbox/mapbox-gl-js/blob/001c7b9/js/ui/handler/scroll_zoom.js\n    let delta;\n    if (mapBrowserEvent.type == EventType.WHEEL) {\n      delta = wheelEvent.deltaY;\n      if (FIREFOX && wheelEvent.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n        delta /= DEVICE_PIXEL_RATIO;\n      }\n      if (wheelEvent.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n        delta *= 40;\n      }\n    }\n\n    if (delta === 0) {\n      return false;\n    }\n    this.lastDelta_ = delta;\n\n    const now = Date.now();\n\n    if (this.startTime_ === undefined) {\n      this.startTime_ = now;\n    }\n\n    if (!this.mode_ || now - this.startTime_ > this.trackpadEventGap_) {\n      this.mode_ = Math.abs(delta) < 4 ? 'trackpad' : 'wheel';\n    }\n\n    const view = map.getView();\n    if (\n      this.mode_ === 'trackpad' &&\n      !(view.getConstrainResolution() || this.constrainResolution_)\n    ) {\n      if (this.trackpadTimeoutId_) {\n        clearTimeout(this.trackpadTimeoutId_);\n      } else {\n        if (view.getAnimating()) {\n          view.cancelAnimations();\n        }\n        view.beginInteraction();\n      }\n      this.trackpadTimeoutId_ = setTimeout(\n        this.endInteraction_.bind(this),\n        this.timeout_\n      );\n      view.adjustZoom(-delta / this.deltaPerZoom_, this.lastAnchor_);\n      this.startTime_ = now;\n      return false;\n    }\n\n    this.totalDelta_ += delta;\n\n    const timeLeft = Math.max(this.timeout_ - (now - this.startTime_), 0);\n\n    clearTimeout(this.timeoutId_);\n    this.timeoutId_ = setTimeout(\n      this.handleWheelZoom_.bind(this, map),\n      timeLeft\n    );\n\n    return false;\n  }\n\n  /**\n   * @private\n   * @param {import(\"../Map.js\").default} map Map.\n   */\n  handleWheelZoom_(map) {\n    const view = map.getView();\n    if (view.getAnimating()) {\n      view.cancelAnimations();\n    }\n    let delta =\n      -clamp(\n        this.totalDelta_,\n        -this.maxDelta_ * this.deltaPerZoom_,\n        this.maxDelta_ * this.deltaPerZoom_\n      ) / this.deltaPerZoom_;\n    if (view.getConstrainResolution() || this.constrainResolution_) {\n      // view has a zoom constraint, zoom by 1\n      delta = delta ? (delta > 0 ? 1 : -1) : 0;\n    }\n    zoomByDelta(view, delta, this.lastAnchor_, this.duration_);\n\n    this.mode_ = undefined;\n    this.totalDelta_ = 0;\n    this.lastAnchor_ = null;\n    this.startTime_ = undefined;\n    this.timeoutId_ = undefined;\n  }\n\n  /**\n   * Enable or disable using the mouse's location as an anchor when zooming\n   * @param {boolean} useAnchor true to zoom to the mouse's location, false\n   * to zoom to the center of the map\n   * @api\n   */\n  setMouseAnchor(useAnchor) {\n    this.useAnchor_ = useAnchor;\n    if (!useAnchor) {\n      this.lastAnchor_ = null;\n    }\n  }\n}\n\nexport default MouseWheelZoom;\n","/**\n * @module ol/interaction/PinchRotate\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {disable} from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchRotate extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotating_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotationDelta_ = 0.0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let rotationDelta = 0.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n\n    // angle between touches\n    const angle = Math.atan2(\n      touch1.clientY - touch0.clientY,\n      touch1.clientX - touch0.clientX\n    );\n\n    if (this.lastAngle_ !== undefined) {\n      const delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n      rotationDelta = delta;\n    }\n    this.lastAngle_ = angle;\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n    this.anchor_ = map.getCoordinateFromPixelInternal(\n      map.getEventPixel(centroidFromPointers(this.targetPointers))\n    );\n\n    // rotate\n    if (this.rotating_) {\n      map.render();\n      view.adjustRotationInternal(rotationDelta, this.anchor_);\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      view.endInteraction(this.duration_);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    }\n    return false;\n  }\n}\n\nexport default PinchRotate;\n","/**\n * @module ol/interaction/PinchZoom\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=400] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map by pinching with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchZoom extends PointerInteraction {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 400;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastDistance_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.lastScaleDelta_ = 1;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let scaleDelta = 1.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n    const dx = touch0.clientX - touch1.clientX;\n    const dy = touch0.clientY - touch1.clientY;\n\n    // distance between touches\n    const distance = Math.sqrt(dx * dx + dy * dy);\n\n    if (this.lastDistance_ !== undefined) {\n      scaleDelta = this.lastDistance_ / distance;\n    }\n    this.lastDistance_ = distance;\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n\n    if (scaleDelta != 1.0) {\n      this.lastScaleDelta_ = scaleDelta;\n    }\n\n    // scale anchor point.\n    this.anchor_ = map.getCoordinateFromPixelInternal(\n      map.getEventPixel(centroidFromPointers(this.targetPointers))\n    );\n\n    // scale, bypass the resolution constraint\n    map.render();\n    view.adjustResolutionInternal(scaleDelta, this.anchor_);\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      const direction = this.lastScaleDelta_ > 1 ? 1 : -1;\n      view.endInteraction(this.duration_, direction);\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastDistance_ = undefined;\n      this.lastScaleDelta_ = 1;\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    }\n    return false;\n  }\n}\n\nexport default PinchZoom;\n","/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = size[0] + 2 * num;\n  dest[1] = size[1] + 2 * num;\n  return dest;\n}\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, dest) {\n  if (dest === undefined) {\n    dest = [0, 0];\n  }\n  dest[0] = (size[0] * ratio + 0.5) | 0;\n  dest[1] = (size[1] * ratio + 0.5) | 0;\n  return dest;\n}\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [dest] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, dest) {\n  if (Array.isArray(size)) {\n    return size;\n  }\n  if (dest === undefined) {\n    dest = [size, size];\n  } else {\n    dest[0] = size;\n    dest[1] = size;\n  }\n  return dest;\n}\n","/**\n * @module ol/layer/Tile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\n * @api\n */\nclass TileLayer extends BaseTileLayer {\n  /**\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  createRenderer() {\n    return new CanvasTileLayerRenderer(this);\n  }\n}\n\nexport default TileLayer;\n","/**\n * @module ol/layer/BaseTile\n */\nimport Layer from './Layer.js';\nimport TileProperty from './TileProperty.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\n *   import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\n * means no preloading.\n * @property {TileSourceType} [source] Source for this layer.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Tile.js\").default} TileSourceType\n * @template {import(\"../renderer/Layer.js\").default} RendererType\n * @extends {Layer<TileSourceType, RendererType>}\n * @api\n */\nclass BaseTileLayer extends Layer {\n  /**\n   * @param {Options<TileSourceType>} [options] Tile layer options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    delete baseOptions.preload;\n    delete baseOptions.useInterimTilesOnError;\n    super(baseOptions);\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {BaseTileLayerOnSignature<void>}\n     */\n    this.un;\n\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\n    this.setUseInterimTilesOnError(\n      options.useInterimTilesOnError !== undefined\n        ? options.useInterimTilesOnError\n        : true\n    );\n  }\n\n  /**\n   * Return the level as number to which we will preload tiles up to.\n   * @return {number} The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  getPreload() {\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\n  }\n\n  /**\n   * Set the level as number to which we will preload tiles up to.\n   * @param {number} preload The level to preload tiles up to.\n   * @observable\n   * @api\n   */\n  setPreload(preload) {\n    this.set(TileProperty.PRELOAD, preload);\n  }\n\n  /**\n   * Whether we use interim tiles on error.\n   * @return {boolean} Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  getUseInterimTilesOnError() {\n    return /** @type {boolean} */ (\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\n    );\n  }\n\n  /**\n   * Set whether we use interim tiles on error.\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\n   * @observable\n   * @api\n   */\n  setUseInterimTilesOnError(useInterimTilesOnError) {\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\n  }\n\n  /**\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\n   *\n   * ```js\n   * // display layer data on every pointer move\n   * map.on('pointermove', (event) => {\n   *   console.log(layer.getData(event.pixel));\n   * });\n   * ```\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   * @api\n   */\n  getData(pixel) {\n    return super.getData(pixel);\n  }\n}\n\nexport default BaseTileLayer;\n","/**\n * @module ol/layer/TileProperty\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  PRELOAD: 'preload',\n  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',\n};\n","/**\n * @module ol/renderer/canvas/TileLayer\n */\nimport CanvasLayerRenderer from './Layer.js';\nimport ImageTile from '../../ImageTile.js';\nimport ReprojTile from '../../reproj/Tile.js';\nimport TileRange from '../../TileRange.js';\nimport TileState from '../../TileState.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  makeInverse,\n  toString as toTransformString,\n} from '../../transform.js';\nimport {ascending} from '../../array.js';\nimport {\n  containsCoordinate,\n  createEmpty,\n  equals,\n  getHeight,\n  getIntersection,\n  getRotatedViewport,\n  getTopLeft,\n  getWidth,\n  intersects,\n} from '../../extent.js';\nimport {fromUserExtent} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {toSize} from '../../size.js';\n\n/**\n * @classdesc\n * Canvas renderer for tile layers.\n * @api\n * @template {import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\n * @extends {CanvasLayerRenderer<LayerType>}\n */\nclass CanvasTileLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {LayerType} tileLayer Tile layer.\n   */\n  constructor(tileLayer) {\n    super(tileLayer);\n\n    /**\n     * Rendered extent has changed since the previous `renderFrame()` call\n     * @type {boolean}\n     */\n    this.extentChanged = true;\n\n    /**\n     * @private\n     * @type {?import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedPixelRatio;\n\n    /**\n     * @protected\n     * @type {import(\"../../proj/Projection.js\").default}\n     */\n    this.renderedProjection = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedRevision;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../../Tile.js\").default>}\n     */\n    this.renderedTiles = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.newTiles_ = false;\n\n    /**\n     * @protected\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.tmpExtent = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../TileRange.js\").default}\n     */\n    this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean} Tile is drawable.\n   */\n  isDrawableTile(tile) {\n    const tileLayer = this.getLayer();\n    const tileState = tile.getState();\n    const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\n    return (\n      tileState == TileState.LOADED ||\n      tileState == TileState.EMPTY ||\n      (tileState == TileState.ERROR && !useInterimTilesOnError)\n    );\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {!import(\"../../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, frameState) {\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    let tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n    if (tile.getState() == TileState.ERROR) {\n      if (tileLayer.getUseInterimTilesOnError() && tileLayer.getPreload() > 0) {\n        // Preloaded tiles for lower resolutions might have finished loading.\n        this.newTiles_ = true;\n      }\n    }\n    if (!this.isDrawableTile(tile)) {\n      tile = tile.getInterimTile();\n    }\n    return tile;\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray} Data at the pixel location.\n   */\n  getData(pixel) {\n    const frameState = this.frameState;\n    if (!frameState) {\n      return null;\n    }\n\n    const layer = this.getLayer();\n    const coordinate = applyTransform(\n      frameState.pixelToCoordinateTransform,\n      pixel.slice()\n    );\n\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      if (!containsCoordinate(layerExtent, coordinate)) {\n        return null;\n      }\n    }\n\n    const pixelRatio = frameState.pixelRatio;\n    const projection = frameState.viewState.projection;\n    const viewState = frameState.viewState;\n    const source = layer.getRenderSource();\n    const tileGrid = source.getTileGridForProjection(viewState.projection);\n    const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\n\n    for (\n      let z = tileGrid.getZForResolution(viewState.resolution);\n      z >= tileGrid.getMinZoom();\n      --z\n    ) {\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = source.getTile(\n        z,\n        tileCoord[1],\n        tileCoord[2],\n        pixelRatio,\n        projection\n      );\n      if (\n        !(tile instanceof ImageTile || tile instanceof ReprojTile) ||\n        (tile instanceof ReprojTile && tile.getState() === TileState.EMPTY)\n      ) {\n        return null;\n      }\n\n      if (tile.getState() !== TileState.LOADED) {\n        continue;\n      }\n\n      const tileOrigin = tileGrid.getOrigin(z);\n      const tileSize = toSize(tileGrid.getTileSize(z));\n      const tileResolution = tileGrid.getResolution(z);\n\n      const col = Math.floor(\n        tilePixelRatio *\n          ((coordinate[0] - tileOrigin[0]) / tileResolution -\n            tileCoord[1] * tileSize[0])\n      );\n\n      const row = Math.floor(\n        tilePixelRatio *\n          ((tileOrigin[1] - coordinate[1]) / tileResolution -\n            tileCoord[2] * tileSize[1])\n      );\n\n      const gutter = Math.round(\n        tilePixelRatio * source.getGutterForProjection(viewState.projection)\n      );\n\n      return this.getImageData(tile.getImage(), col + gutter, row + gutter);\n    }\n\n    return null;\n  }\n\n  /**\n   * @param {Object<number, Object<string, import(\"../../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import(\"../../Tile.js\").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */\n  loadedTileCallback(tiles, zoom, tile) {\n    if (this.isDrawableTile(tile)) {\n      return super.loadedTileCallback(tiles, zoom, tile);\n    }\n    return false;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return !!this.getLayer().getSource();\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const viewResolution = viewState.resolution;\n    const viewCenter = viewState.center;\n    const rotation = viewState.rotation;\n    const pixelRatio = frameState.pixelRatio;\n\n    const tileLayer = this.getLayer();\n    const tileSource = tileLayer.getSource();\n    const sourceRevision = tileSource.getRevision();\n    const tileGrid = tileSource.getTileGridForProjection(projection);\n    const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\n    const tileResolution = tileGrid.getResolution(z);\n\n    let extent = frameState.extent;\n    const resolution = frameState.viewState.resolution;\n    const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\n    // desired dimensions of the canvas in pixels\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\n\n    const layerExtent =\n      layerState.extent && fromUserExtent(layerState.extent, projection);\n    if (layerExtent) {\n      extent = getIntersection(\n        extent,\n        fromUserExtent(layerState.extent, projection)\n      );\n    }\n\n    const dx = (tileResolution * width) / 2 / tilePixelRatio;\n    const dy = (tileResolution * height) / 2 / tilePixelRatio;\n    const canvasExtent = [\n      viewCenter[0] - dx,\n      viewCenter[1] - dy,\n      viewCenter[0] + dx,\n      viewCenter[1] + dy,\n    ];\n\n    const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n\n    /**\n     * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\n     */\n    const tilesToDrawByZ = {};\n    tilesToDrawByZ[z] = {};\n\n    const findLoadedTiles = this.createLoadedTileFinder(\n      tileSource,\n      projection,\n      tilesToDrawByZ\n    );\n\n    const tmpExtent = this.tmpExtent;\n    const tmpTileRange = this.tmpTileRange_;\n    this.newTiles_ = false;\n    const viewport = rotation\n      ? getRotatedViewport(\n          viewState.center,\n          resolution,\n          rotation,\n          frameState.size\n        )\n      : undefined;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        if (\n          rotation &&\n          !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\n        ) {\n          continue;\n        }\n        const tile = this.getTile(z, x, y, frameState);\n        if (this.isDrawableTile(tile)) {\n          const uid = getUid(this);\n          if (tile.getState() == TileState.LOADED) {\n            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\n            let inTransition = tile.inTransition(uid);\n            if (inTransition && layerState.opacity !== 1) {\n              // Skipping transition when layer is not fully opaque avoids visual artifacts.\n              tile.endTransition(uid);\n              inTransition = false;\n            }\n            if (\n              !this.newTiles_ &&\n              (inTransition || !this.renderedTiles.includes(tile))\n            ) {\n              this.newTiles_ = true;\n            }\n          }\n          if (tile.getAlpha(uid, frameState.time) === 1) {\n            // don't look for alt tiles if alpha is 1\n            continue;\n          }\n        }\n\n        const childTileRange = tileGrid.getTileCoordChildTileRange(\n          tile.tileCoord,\n          tmpTileRange,\n          tmpExtent\n        );\n\n        let covered = false;\n        if (childTileRange) {\n          covered = findLoadedTiles(z + 1, childTileRange);\n        }\n        if (!covered) {\n          tileGrid.forEachTileCoordParentTileRange(\n            tile.tileCoord,\n            findLoadedTiles,\n            tmpTileRange,\n            tmpExtent\n          );\n        }\n      }\n    }\n\n    const canvasScale =\n      ((tileResolution / viewResolution) * pixelRatio) / tilePixelRatio;\n\n    // set forward and inverse pixel transforms\n    composeTransform(\n      this.pixelTransform,\n      frameState.size[0] / 2,\n      frameState.size[1] / 2,\n      1 / pixelRatio,\n      1 / pixelRatio,\n      rotation,\n      -width / 2,\n      -height / 2\n    );\n\n    const canvasTransform = toTransformString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    // set scale transform for calculating tile positions on the canvas\n    composeTransform(\n      this.tempTransform,\n      width / 2,\n      height / 2,\n      canvasScale,\n      canvasScale,\n      0,\n      -width / 2,\n      -height / 2\n    );\n\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    if (layerExtent) {\n      this.clipUnrotated(context, frameState, layerExtent);\n    }\n\n    if (!tileSource.getInterpolate()) {\n      context.imageSmoothingEnabled = false;\n    }\n\n    this.preRender(context, frameState);\n\n    this.renderedTiles.length = 0;\n    /** @type {Array<number>} */\n    let zs = Object.keys(tilesToDrawByZ).map(Number);\n    zs.sort(ascending);\n\n    let clips, clipZs, currentClip;\n    if (\n      layerState.opacity === 1 &&\n      (!this.containerReused ||\n        tileSource.getOpaque(frameState.viewState.projection))\n    ) {\n      zs = zs.reverse();\n    } else {\n      clips = [];\n      clipZs = [];\n    }\n    for (let i = zs.length - 1; i >= 0; --i) {\n      const currentZ = zs[i];\n      const currentTilePixelSize = tileSource.getTilePixelSize(\n        currentZ,\n        pixelRatio,\n        projection\n      );\n      const currentResolution = tileGrid.getResolution(currentZ);\n      const currentScale = currentResolution / tileResolution;\n      const dx = currentTilePixelSize[0] * currentScale * canvasScale;\n      const dy = currentTilePixelSize[1] * currentScale * canvasScale;\n      const originTileCoord = tileGrid.getTileCoordForCoordAndZ(\n        getTopLeft(canvasExtent),\n        currentZ\n      );\n      const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\n      const origin = applyTransform(this.tempTransform, [\n        (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /\n          tileResolution,\n        (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /\n          tileResolution,\n      ]);\n      const tileGutter =\n        tilePixelRatio * tileSource.getGutterForProjection(projection);\n      const tilesToDraw = tilesToDrawByZ[currentZ];\n      for (const tileCoordKey in tilesToDraw) {\n        const tile = /** @type {import(\"../../ImageTile.js\").default} */ (\n          tilesToDraw[tileCoordKey]\n        );\n        const tileCoord = tile.tileCoord;\n\n        // Calculate integer positions and sizes so that tiles align\n        const xIndex = originTileCoord[1] - tileCoord[1];\n        const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\n        const yIndex = originTileCoord[2] - tileCoord[2];\n        const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\n        const x = Math.round(origin[0] - xIndex * dx);\n        const y = Math.round(origin[1] - yIndex * dy);\n        const w = nextX - x;\n        const h = nextY - y;\n        const transition = z === currentZ;\n\n        const inTransition =\n          transition && tile.getAlpha(getUid(this), frameState.time) !== 1;\n        let contextSaved = false;\n        if (!inTransition) {\n          if (clips) {\n            // Clip mask for regions in this tile that already filled by a higher z tile\n            currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\n            for (let i = 0, ii = clips.length; i < ii; ++i) {\n              if (z !== currentZ && currentZ < clipZs[i]) {\n                const clip = clips[i];\n                if (\n                  intersects(\n                    [x, y, x + w, y + h],\n                    [clip[0], clip[3], clip[4], clip[7]]\n                  )\n                ) {\n                  if (!contextSaved) {\n                    context.save();\n                    contextSaved = true;\n                  }\n                  context.beginPath();\n                  // counter-clockwise (outer ring) for current tile\n                  context.moveTo(currentClip[0], currentClip[1]);\n                  context.lineTo(currentClip[2], currentClip[3]);\n                  context.lineTo(currentClip[4], currentClip[5]);\n                  context.lineTo(currentClip[6], currentClip[7]);\n                  // clockwise (inner ring) for higher z tile\n                  context.moveTo(clip[6], clip[7]);\n                  context.lineTo(clip[4], clip[5]);\n                  context.lineTo(clip[2], clip[3]);\n                  context.lineTo(clip[0], clip[1]);\n                  context.clip();\n                }\n              }\n            }\n            clips.push(currentClip);\n            clipZs.push(currentZ);\n          } else {\n            context.clearRect(x, y, w, h);\n          }\n        }\n        this.drawTileImage(\n          tile,\n          frameState,\n          x,\n          y,\n          w,\n          h,\n          tileGutter,\n          transition\n        );\n        if (clips && !inTransition) {\n          if (contextSaved) {\n            context.restore();\n          }\n          this.renderedTiles.unshift(tile);\n        } else {\n          this.renderedTiles.push(tile);\n        }\n        this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\n      }\n    }\n\n    this.renderedRevision = sourceRevision;\n    this.renderedResolution = tileResolution;\n    this.extentChanged =\n      !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\n    this.renderedExtent_ = canvasExtent;\n    this.renderedPixelRatio = pixelRatio;\n    this.renderedProjection = projection;\n\n    this.manageTilePyramid(\n      frameState,\n      tileSource,\n      tileGrid,\n      pixelRatio,\n      projection,\n      extent,\n      z,\n      tileLayer.getPreload()\n    );\n    this.scheduleExpireCache(frameState, tileSource);\n\n    this.postRender(context, frameState);\n\n    if (layerState.extent) {\n      context.restore();\n    }\n    context.imageSmoothingEnabled = true;\n\n    if (canvasTransform !== canvas.style.transform) {\n      canvas.style.transform = canvasTransform;\n    }\n\n    return this.container;\n  }\n\n  /**\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} x Left of the tile.\n   * @param {number} y Top of the tile.\n   * @param {number} w Width of the tile.\n   * @param {number} h Height of the tile.\n   * @param {number} gutter Tile gutter.\n   * @param {boolean} transition Apply an alpha transition.\n   */\n  drawTileImage(tile, frameState, x, y, w, h, gutter, transition) {\n    const image = this.getTileImage(tile);\n    if (!image) {\n      return;\n    }\n    const uid = getUid(this);\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n    const alpha =\n      layerState.opacity *\n      (transition ? tile.getAlpha(uid, frameState.time) : 1);\n    const alphaChanged = alpha !== this.context.globalAlpha;\n    if (alphaChanged) {\n      this.context.save();\n      this.context.globalAlpha = alpha;\n    }\n    this.context.drawImage(\n      image,\n      gutter,\n      gutter,\n      image.width - 2 * gutter,\n      image.height - 2 * gutter,\n      x,\n      y,\n      w,\n      h\n    );\n\n    if (alphaChanged) {\n      this.context.restore();\n    }\n    if (alpha !== layerState.opacity) {\n      frameState.animate = true;\n    } else if (transition) {\n      tile.endTransition(uid);\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image\n   */\n  getImage() {\n    const context = this.context;\n    return context ? context.canvas : null;\n  }\n\n  /**\n   * Get the image from a tile.\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @protected\n   */\n  getTileImage(tile) {\n    return tile.getImage();\n  }\n\n  /**\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @protected\n   */\n  scheduleExpireCache(frameState, tileSource) {\n    if (tileSource.canExpireCache()) {\n      /**\n       * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n       * @param {import(\"../../Map.js\").default} map Map.\n       * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n       */\n      const postRenderFunction = function (tileSource, map, frameState) {\n        const tileSourceKey = getUid(tileSource);\n        if (tileSourceKey in frameState.usedTiles) {\n          tileSource.expireCache(\n            frameState.viewState.projection,\n            frameState.usedTiles[tileSourceKey]\n          );\n        }\n      }.bind(null, tileSource);\n\n      frameState.postRenderFunctions.push(\n        /** @type {import(\"../../Map.js\").PostRenderFunction} */ (\n          postRenderFunction\n        )\n      );\n    }\n  }\n\n  /**\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import('../../Tile.js').default} tile Tile.\n   * @protected\n   */\n  updateUsedTiles(usedTiles, tileSource, tile) {\n    // FIXME should we use tilesToDrawByZ instead?\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in usedTiles)) {\n      usedTiles[tileSourceKey] = {};\n    }\n    usedTiles[tileSourceKey][tile.getKey()] = true;\n  }\n\n  /**\n   * Manage tile pyramid.\n   * This function performs a number of functions related to the tiles at the\n   * current zoom and lower zoom levels:\n   * - registers idle tiles in frameState.wantedTiles so that they are not\n   *   discarded by the tile queue\n   * - enqueues missing tiles\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {number} currentZ Current Z.\n   * @param {number} preload Load low resolution tiles up to `preload` levels.\n   * @param {function(import(\"../../Tile.js\").default):void} [tileCallback] Tile callback.\n   * @protected\n   */\n  manageTilePyramid(\n    frameState,\n    tileSource,\n    tileGrid,\n    pixelRatio,\n    projection,\n    extent,\n    currentZ,\n    preload,\n    tileCallback\n  ) {\n    const tileSourceKey = getUid(tileSource);\n    if (!(tileSourceKey in frameState.wantedTiles)) {\n      frameState.wantedTiles[tileSourceKey] = {};\n    }\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\n    const tileQueue = frameState.tileQueue;\n    const minZoom = tileGrid.getMinZoom();\n    const rotation = frameState.viewState.rotation;\n    const viewport = rotation\n      ? getRotatedViewport(\n          frameState.viewState.center,\n          frameState.viewState.resolution,\n          rotation,\n          frameState.size\n        )\n      : undefined;\n    let tileCount = 0;\n    let tile, tileRange, tileResolution, x, y, z;\n    for (z = minZoom; z <= currentZ; ++z) {\n      tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\n      tileResolution = tileGrid.getResolution(z);\n      for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\n        for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\n          if (\n            rotation &&\n            !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\n          ) {\n            continue;\n          }\n          if (currentZ - z <= preload) {\n            ++tileCount;\n            tile = tileSource.getTile(z, x, y, pixelRatio, projection);\n            if (tile.getState() == TileState.IDLE) {\n              wantedTiles[tile.getKey()] = true;\n              if (!tileQueue.isKeyQueued(tile.getKey())) {\n                tileQueue.enqueue([\n                  tile,\n                  tileSourceKey,\n                  tileGrid.getTileCoordCenter(tile.tileCoord),\n                  tileResolution,\n                ]);\n              }\n            }\n            if (tileCallback !== undefined) {\n              tileCallback(tile);\n            }\n          } else {\n            tileSource.useTile(z, x, y, projection);\n          }\n        }\n      }\n    }\n    tileSource.updateCacheSize(tileCount, projection);\n  }\n}\n\nexport default CanvasTileLayerRenderer;\n","/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {asArray} from '../../color.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {equals} from '../../array.js';\nimport {\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../../extent.js';\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\n    willReadFrequently: true,\n  });\n}\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.pixelContext_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"../../Map.js\").FrameState|null}\n     */\n    this.frameState = null;\n  }\n\n  /**\n   * @param {import('../../DataTile.js').ImageLike} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    let data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [backgroundColor] Background color.\n   */\n  useContainer(target, transform, backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.className === layerClassName &&\n      (!backgroundColor ||\n        (target &&\n          target.style.backgroundColor &&\n          equals(\n            asArray(target.style.backgroundColor),\n            asArray(backgroundColor)\n          )))\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    } else if (this.container) {\n      this.container.style.backgroundColor = null;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n    if (\n      !this.containerReused &&\n      backgroundColor &&\n      !this.container.style.backgroundColor\n    ) {\n      this.container.style.backgroundColor = backgroundColor;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.frameState = frameState;\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2\n    );\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n}\n\nexport default CanvasLayerRenderer;\n","/**\n * @module ol/renderer/Layer\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport Observable from '../Observable.js';\nimport {abstract} from '../util.js';\n\n/**\n * @template {import(\"../layer/Layer.js\").default} LayerType\n */\nclass LayerRenderer extends Observable {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super();\n\n    /**\n     * The renderer is initialized and ready to render.\n     * @type {boolean}\n     */\n    this.ready = true;\n\n    /** @private */\n    this.boundHandleImageChange_ = this.handleImageChange_.bind(this);\n\n    /**\n     * @protected\n     * @type {LayerType}\n     */\n    this.layer_ = layer;\n\n    /**\n     * @type {import(\"../render/canvas/ExecutorGroup\").default}\n     */\n    this.declutterExecutorGroup = null;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    return abstract();\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    return null;\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @abstract\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    return abstract();\n  }\n\n  /**\n   * Render the layer.\n   * @abstract\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement|null} target Target that may be used to render content to.\n   * @return {HTMLElement|null} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    return abstract();\n  }\n\n  /**\n   * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @param {number} zoom Zoom level.\n   * @param {import(\"../Tile.js\").default} tile Tile.\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\n   */\n  loadedTileCallback(tiles, zoom, tile) {\n    if (!tiles[zoom]) {\n      tiles[zoom] = {};\n    }\n    tiles[zoom][tile.tileCoord.toString()] = tile;\n    return undefined;\n  }\n\n  /**\n   * Create a function that adds loaded tiles to the tile lookup.\n   * @param {import(\"../source/Tile.js\").default} source Tile source.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection of the tiles.\n   * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\n   * @return {function(number, import(\"../TileRange.js\").default):boolean} A function that can be\n   *     called with a zoom level and a tile range to add loaded tiles to the lookup.\n   * @protected\n   */\n  createLoadedTileFinder(source, projection, tiles) {\n    return (\n      /**\n       * @param {number} zoom Zoom level.\n       * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n       * @return {boolean} The tile range is fully loaded.\n       */\n      (zoom, tileRange) => {\n        const callback = this.loadedTileCallback.bind(this, tiles, zoom);\n        return source.forEachLoadedTile(projection, zoom, tileRange, callback);\n      }\n    );\n  }\n  /**\n   * @abstract\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"./Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    return undefined;\n  }\n\n  /**\n   * @return {LayerType} Layer.\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   * @abstract\n   */\n  handleFontsChanged() {}\n\n  /**\n   * Handle changes in image state.\n   * @param {import(\"../events/Event.js\").default} event Image change event.\n   * @private\n   */\n  handleImageChange_(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    if (\n      image.getState() === ImageState.LOADED ||\n      image.getState() === ImageState.ERROR\n    ) {\n      this.renderIfReadyAndVisible();\n    }\n  }\n\n  /**\n   * Load the image if not already loaded, and register the image change\n   * listener if needed.\n   * @param {import(\"../Image.js\").default} image Image.\n   * @return {boolean} `true` if the image is already loaded, `false` otherwise.\n   * @protected\n   */\n  loadImage(image) {\n    let imageState = image.getState();\n    if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {\n      image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);\n    }\n    if (imageState == ImageState.IDLE) {\n      image.load();\n      imageState = image.getState();\n    }\n    return imageState == ImageState.LOADED;\n  }\n\n  /**\n   * @protected\n   */\n  renderIfReadyAndVisible() {\n    const layer = this.getLayer();\n    if (layer && layer.getVisible() && layer.getSourceState() === 'ready') {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    delete this.layer_;\n    super.disposeInternal();\n  }\n}\n\nexport default LayerRenderer;\n","/**\n * @module ol/ImageState\n */\n\n/**\n * @enum {number}\n */\nexport default {\n  IDLE: 0,\n  LOADING: 1,\n  LOADED: 2,\n  ERROR: 3,\n  EMPTY: 4,\n};\n","/**\n * @module ol/ImageTile\n */\nimport Tile from './Tile.js';\nimport TileState from './TileState.js';\nimport {createCanvasContext2D} from './dom.js';\nimport {listenImage} from './Image.js';\n\nclass ImageTile extends Tile {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\n   */\n  constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, options) {\n    super(tileCoord, state, options);\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ = crossOrigin;\n\n    /**\n     * Image URI\n     *\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    this.key = src;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction_ = tileLoadFunction;\n  }\n\n  /**\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).\n   * @param {HTMLCanvasElement|HTMLImageElement} element Element.\n   */\n  setImage(element) {\n    this.image_ = element;\n    this.state = TileState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = TileState.ERROR;\n    this.unlistenImage_();\n    this.image_ = getBlankImage();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    const image = /** @type {HTMLImageElement} */ (this.image_);\n    if (image.naturalWidth && image.naturalHeight) {\n      this.state = TileState.LOADED;\n    } else {\n      this.state = TileState.EMPTY;\n    }\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   *\n   * To retry loading tiles on failed requests, use a custom `tileLoadFunction`\n   * that checks for error status codes and reloads only when the status code is\n   * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been\n   * made already:\n   *\n   * ```js\n   * const retryCodes = [408, 429, 500, 502, 503, 504];\n   * const retries = {};\n   * source.setTileLoadFunction((tile, src) => {\n   *   const image = tile.getImage();\n   *   fetch(src)\n   *     .then((response) => {\n   *       if (retryCodes.includes(response.status)) {\n   *         retries[src] = (retries[src] || 0) + 1;\n   *         if (retries[src] <= 3) {\n   *           setTimeout(() => tile.load(), retries[src] * 1000);\n   *         }\n   *         return Promise.reject();\n   *       }\n   *       return response.blob();\n   *     })\n   *     .then((blob) => {\n   *       const imageUrl = URL.createObjectURL(blob);\n   *       image.src = imageUrl;\n   *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);\n   *     })\n   *     .catch(() => tile.setState(3)); // error\n   * });\n   * ```\n   *\n   * @api\n   */\n  load() {\n    if (this.state == TileState.ERROR) {\n      this.state = TileState.IDLE;\n      this.image_ = new Image();\n      if (this.crossOrigin_ !== null) {\n        this.image_.crossOrigin = this.crossOrigin_;\n      }\n    }\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n      this.tileLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * Get a 1-pixel blank image.\n * @return {HTMLCanvasElement} Blank image.\n */\nfunction getBlankImage() {\n  const ctx = createCanvasContext2D(1, 1);\n  ctx.fillStyle = 'rgba(0,0,0,0)';\n  ctx.fillRect(0, 0, 1, 1);\n  return ctx.canvas;\n}\n\nexport default ImageTile;\n","/**\n * @module ol/Tile\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport TileState from './TileState.js';\nimport {abstract} from './util.js';\nimport {easeIn} from './easing.js';\n\n/**\n * A function that takes an {@link module:ol/Tile~Tile} for the tile and a\n * `{string}` for the url as arguments. The default is\n * ```js\n * source.setTileLoadFunction(function(tile, src) {\n *   tile.getImage().src = src;\n * });\n * ```\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\n * error handling:\n *\n * ```js\n * import TileState from 'ol/TileState.js';\n *\n * source.setTileLoadFunction(function(tile, src) {\n *   const xhr = new XMLHttpRequest();\n *   xhr.responseType = 'blob';\n *   xhr.addEventListener('loadend', function (evt) {\n *     const data = this.response;\n *     if (data !== undefined) {\n *       tile.getImage().src = URL.createObjectURL(data);\n *     } else {\n *       tile.setState(TileState.ERROR);\n *     }\n *   });\n *   xhr.addEventListener('error', function () {\n *     tile.setState(TileState.ERROR);\n *   });\n *   xhr.open('GET', src);\n *   xhr.send();\n * });\n * ```\n *\n * @typedef {function(Tile, string): void} LoadFunction\n * @api\n */\n\n/**\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\n * the url that provides a tile for a given tile coordinate.\n *\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\n * coordinate, a `{number}` representing the pixel ratio and a\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\n * and returns a `{string}` representing the tile URL, or undefined if no tile\n * should be requested for the passed tile coordinate.\n *\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\n * @api\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [transition=250] A duration for tile opacity\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n * @api\n */\n\n/**\n * @classdesc\n * Base class for tiles.\n *\n * @abstract\n */\nclass Tile extends EventTarget {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {Options} [options] Tile options.\n   */\n  constructor(tileCoord, state, options) {\n    super();\n\n    options = options ? options : {};\n\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n    this.tileCoord = tileCoord;\n\n    /**\n     * @protected\n     * @type {import(\"./TileState.js\").default}\n     */\n    this.state = state;\n\n    /**\n     * An \"interim\" tile for this tile. The interim tile may be used while this\n     * one is loading, for \"smooth\" transitions when changing params/dimensions\n     * on the source.\n     * @type {Tile}\n     */\n    this.interimTile = null;\n\n    /**\n     * A key assigned to the tile. This is used by the tile source to determine\n     * if this tile can effectively be used, or if a new tile should be created\n     * and this one be used as an interim tile for this new tile.\n     * @type {string}\n     */\n    this.key = '';\n\n    /**\n     * The duration for the opacity transition.\n     * @type {number}\n     */\n    this.transition_ =\n      options.transition === undefined ? 250 : options.transition;\n\n    /**\n     * Lookup of start times for rendering transitions.  If the start time is\n     * equal to -1, the transition is complete.\n     * @type {Object<string, number>}\n     */\n    this.transitionStarts_ = {};\n\n    /**\n     * @type {boolean}\n     */\n    this.interpolate = !!options.interpolate;\n  }\n\n  /**\n   * @protected\n   */\n  changed() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Called by the tile cache when the tile is removed from the cache due to expiry\n   */\n  release() {\n    if (this.state === TileState.ERROR) {\n      // to remove the `change` listener on this tile in `ol/TileQueue#handleTileChange`\n      this.setState(TileState.EMPTY);\n    }\n  }\n\n  /**\n   * @return {string} Key.\n   */\n  getKey() {\n    return this.key + '/' + this.tileCoord;\n  }\n\n  /**\n   * Get the interim tile most suitable for rendering using the chain of interim\n   * tiles. This corresponds to the  most recent tile that has been loaded, if no\n   * such tile exists, the original tile is returned.\n   * @return {!Tile} Best tile for rendering.\n   */\n  getInterimTile() {\n    if (!this.interimTile) {\n      //empty chain\n      return this;\n    }\n    let tile = this.interimTile;\n\n    // find the first loaded tile and return it. Since the chain is sorted in\n    // decreasing order of creation time, there is no need to search the remainder\n    // of the list (all those tiles correspond to older requests and will be\n    // cleaned up by refreshInterimChain)\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        // Show tile immediately instead of fading it in after loading, because\n        // the interim tile is in place already\n        this.transition_ = 0;\n        return tile;\n      }\n      tile = tile.interimTile;\n    } while (tile);\n\n    // we can not find a better tile\n    return this;\n  }\n\n  /**\n   * Goes through the chain of interim tiles and discards sections of the chain\n   * that are no longer relevant.\n   */\n  refreshInterimChain() {\n    if (!this.interimTile) {\n      return;\n    }\n\n    let tile = this.interimTile;\n\n    /**\n     * @type {Tile}\n     */\n    let prev = this;\n\n    do {\n      if (tile.getState() == TileState.LOADED) {\n        //we have a loaded tile, we can discard the rest of the list\n        //we would could abort any LOADING tile request\n        //older than this tile (i.e. any LOADING tile following this entry in the chain)\n        tile.interimTile = null;\n        break;\n      } else if (tile.getState() == TileState.LOADING) {\n        //keep this LOADING tile any loaded tiles later in the chain are\n        //older than this tile, so we're still interested in the request\n        prev = tile;\n      } else if (tile.getState() == TileState.IDLE) {\n        //the head of the list is the most current tile, we don't need\n        //to start any other requests for this chain\n        prev.interimTile = tile.interimTile;\n      } else {\n        prev = tile;\n      }\n      tile = prev.interimTile;\n    } while (tile);\n  }\n\n  /**\n   * Get the tile coordinate for this tile.\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\n   * @api\n   */\n  getTileCoord() {\n    return this.tileCoord;\n  }\n\n  /**\n   * @return {import(\"./TileState.js\").default} State.\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\n   * the tile queue and will block other requests.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @api\n   */\n  setState(state) {\n    if (this.state !== TileState.ERROR && this.state > state) {\n      throw new Error('Tile load sequence violation');\n    }\n    this.state = state;\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @abstract\n   * @api\n   */\n  load() {\n    abstract();\n  }\n\n  /**\n   * Get the alpha value for rendering.\n   * @param {string} id An id for the renderer.\n   * @param {number} time The render frame time.\n   * @return {number} A number between 0 and 1.\n   */\n  getAlpha(id, time) {\n    if (!this.transition_) {\n      return 1;\n    }\n\n    let start = this.transitionStarts_[id];\n    if (!start) {\n      start = time;\n      this.transitionStarts_[id] = start;\n    } else if (start === -1) {\n      return 1;\n    }\n\n    const delta = time - start + 1000 / 60; // avoid rendering at 0\n    if (delta >= this.transition_) {\n      return 1;\n    }\n    return easeIn(delta / this.transition_);\n  }\n\n  /**\n   * Determine if a tile is in an alpha transition.  A tile is considered in\n   * transition if tile.getAlpha() has not yet been called or has been called\n   * and returned 1.\n   * @param {string} id An id for the renderer.\n   * @return {boolean} The tile is in transition.\n   */\n  inTransition(id) {\n    if (!this.transition_) {\n      return false;\n    }\n    return this.transitionStarts_[id] !== -1;\n  }\n\n  /**\n   * Mark a transition as complete.\n   * @param {string} id An id for the renderer.\n   */\n  endTransition(id) {\n    if (this.transition_) {\n      this.transitionStarts_[id] = -1;\n    }\n  }\n}\n\nexport default Tile;\n","/**\n * @module ol/Image\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport ImageState from './ImageState.js';\nimport {CREATE_IMAGE_BITMAP, IMAGE_DECODE} from './has.js';\nimport {listenOnce, unlistenByKey} from './events.js';\nimport {toPromise} from './functions.js';\n\n/**\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(import(\"./Image.js\").default, string): void} LoadFunction\n * @api\n */\n\n/**\n * @typedef {Object} ImageObject\n * @property {import(\"./extent.js\").Extent} [extent] Extent, if different from the requested one.\n * @property {import(\"./resolution.js\").ResolutionLike} [resolution] Resolution, if different from the requested one.\n * When x and y resolution are different, use the array type (`[xResolution, yResolution]`).\n * @property {number} [pixelRatio] Pixel ratio, if different from the requested one.\n * @property {import('./DataTile.js').ImageLike} image Image.\n */\n\n/**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * For images that cover any extent and resolution (static images), the loader function should not accept\n * any arguments. The function returns an {@link import(\"./DataTile.js\").ImageLike image}, an\n * {@link import(\"./Image.js\").ImageObject image object}, or a promise for the same.\n * For loaders that generate images, the promise should not resolve until the image is loaded.\n * If the returned image does not match the extent, resolution or pixel ratio passed to the loader,\n * it has to return an {@link import(\"./Image.js\").ImageObject image object} with the `image` and the\n * correct `extent`, `resolution` and `pixelRatio`.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} Loader\n * @api\n */\n\n/**\n * Loader function used for image sources. Receives extent, resolution and pixel ratio as arguments.\n * The function returns a promise for an  {@link import(\"./Image.js\").ImageObject image object}.\n *\n * @typedef {function(import(\"./extent.js\").Extent, number, number, (function(HTMLImageElement, string): void)=): import(\"./DataTile.js\").ImageLike|ImageObject|Promise<import(\"./DataTile.js\").ImageLike|ImageObject>} ImageObjectPromiseLoader\n */\n\nclass ImageWrapper extends EventTarget {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|Array<number>|undefined} resolution Resolution. If provided as array, x and y\n   * resolution will be assumed.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"./ImageState.js\").default|import(\"./Image.js\").Loader} stateOrLoader State.\n   */\n  constructor(extent, resolution, pixelRatio, stateOrLoader) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.extent = extent;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number|Array<number>|undefined}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state =\n      typeof stateOrLoader === 'function' ? ImageState.IDLE : stateOrLoader;\n\n    /**\n     * @private\n     * @type {import('./DataTile.js').ImageLike|null}\n     */\n    this.image_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./Image.js\").Loader}\n     */\n    this.loader = typeof stateOrLoader === 'function' ? stateOrLoader : null;\n  }\n\n  /**\n   * @protected\n   */\n  changed() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  getExtent() {\n    return this.extent;\n  }\n\n  /**\n   * @return {import('./DataTile.js').ImageLike} Image.\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * @return {number} PixelRatio.\n   */\n  getPixelRatio() {\n    return this.pixelRatio_;\n  }\n\n  /**\n   * @return {number|Array<number>} Resolution.\n   */\n  getResolution() {\n    return /** @type {number} */ (this.resolution);\n  }\n\n  /**\n   * @return {import(\"./ImageState.js\").default} State.\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      if (this.loader) {\n        this.state = ImageState.LOADING;\n        this.changed();\n        const resolution = this.getResolution();\n        const requestResolution = Array.isArray(resolution)\n          ? resolution[0]\n          : resolution;\n        toPromise(() =>\n          this.loader(this.getExtent(), requestResolution, this.getPixelRatio())\n        )\n          .then((image) => {\n            if ('image' in image) {\n              this.image_ = image.image;\n            }\n            if ('extent' in image) {\n              this.extent = image.extent;\n            }\n            if ('resolution' in image) {\n              this.resolution = image.resolution;\n            }\n            if ('pixelRatio' in image) {\n              this.pixelRatio_ = image.pixelRatio;\n            }\n            if (\n              image instanceof HTMLImageElement ||\n              image instanceof ImageBitmap ||\n              image instanceof HTMLCanvasElement ||\n              image instanceof HTMLVideoElement\n            ) {\n              this.image_ = image;\n            }\n            this.state = ImageState.LOADED;\n          })\n          .catch((error) => {\n            this.state = ImageState.ERROR;\n            console.error(error); // eslint-disable-line no-console\n          })\n          .finally(() => this.changed());\n      }\n    }\n  }\n\n  /**\n   * @param {import('./DataTile.js').ImageLike} image The image.\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * @param {number|Array<number>} resolution Resolution.\n   */\n  setResolution(resolution) {\n    this.resolution = resolution;\n  }\n}\n\n/**\n * @param {import('./DataTile.js').ImageLike} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */ (image);\n  let listening = true;\n  let decoding = false;\n  let loaded = false;\n\n  const listenerKeys = [\n    listenOnce(img, EventType.LOAD, function () {\n      loaded = true;\n      if (!decoding) {\n        loadHandler();\n      }\n    }),\n  ];\n\n  if (img.src && IMAGE_DECODE) {\n    decoding = true;\n    img\n      .decode()\n      .then(function () {\n        if (listening) {\n          loadHandler();\n        }\n      })\n      .catch(function (error) {\n        if (listening) {\n          if (loaded) {\n            loadHandler();\n          } else {\n            errorHandler();\n          }\n        }\n      });\n  } else {\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\n  }\n\n  return function unlisten() {\n    listening = false;\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\n\n/**\n * Loads an image.\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\n * @api\n */\nexport function load(image, src) {\n  return new Promise((resolve, reject) => {\n    function handleLoad() {\n      unlisten();\n      resolve(image);\n    }\n    function handleError() {\n      unlisten();\n      reject(new Error('Image load error'));\n    }\n    function unlisten() {\n      image.removeEventListener('load', handleLoad);\n      image.removeEventListener('error', handleError);\n    }\n    image.addEventListener('load', handleLoad);\n    image.addEventListener('error', handleError);\n    if (src) {\n      image.src = src;\n    }\n  });\n}\n\n/**\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<HTMLImageElement>} Promise resolving to an `HTMLImageElement`.\n */\nexport function decodeFallback(image, src) {\n  if (src) {\n    image.src = src;\n  }\n  return IMAGE_DECODE\n    ? new Promise((resolve, reject) =>\n        image.decode().then(() => resolve(image), reject)\n      )\n    : load(image);\n}\n\n/**\n * Loads an image and decodes it to an `ImageBitmap` if `createImageBitmap()` is supported. Returns\n * the loaded image otherwise.\n * @param {HTMLImageElement} image Image, not yet loaded.\n * @param {string} [src] `src` attribute of the image. Optional, not required if already present.\n * @return {Promise<ImageBitmap|HTMLImageElement>} Promise resolving to an `ImageBitmap` or an\n * `HTMLImageElement` if `createImageBitmap()` is not supported.\n * @api\n */\nexport function decode(image, src) {\n  if (src) {\n    image.src = src;\n  }\n  return IMAGE_DECODE && CREATE_IMAGE_BITMAP\n    ? image.decode().then(() => createImageBitmap(image))\n    : decodeFallback(image);\n}\n\nexport default ImageWrapper;\n","/**\n * @module ol/reproj/Tile\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport Triangulation from './Triangulation.js';\nimport {\n  calculateSourceExtentResolution,\n  canvasPool,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {clamp} from '../math.js';\nimport {getArea, getIntersection} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {releaseCanvas} from '../dom.js';\n\n/**\n * @typedef {function(number, number, number, number) : (import(\"../ImageTile.js\").default)} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected tile.\n * See {@link module:ol/source/TileImage~TileImage}.\n *\n */\nclass ReprojTile extends Tile {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} gutter Gutter of the source tiles.\n   * @param {FunctionType} getTileFunction\n   *     Function returning source tiles (z, x, y, pixelRatio).\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\n   * @param {boolean} [renderEdges] Render reprojection edges.\n   * @param {boolean} [interpolate] Use linear interpolation when resampling.\n   */\n  constructor(\n    sourceProj,\n    sourceTileGrid,\n    targetProj,\n    targetTileGrid,\n    tileCoord,\n    wrappedTileCoord,\n    pixelRatio,\n    gutter,\n    getTileFunction,\n    errorThreshold,\n    renderEdges,\n    interpolate\n  ) {\n    super(tileCoord, TileState.IDLE, {interpolate: !!interpolate});\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = gutter;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.sourceTileGrid_ = sourceTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\n     */\n    this.targetTileGrid_ = targetTileGrid;\n\n    /**\n     * @private\n     * @type {import(\"../tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\n\n    /**\n     * @private\n     * @type {!Array<import(\"../ImageTile.js\").default>}\n     */\n    this.sourceTiles_ = [];\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.sourcesListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourceZ_ = 0;\n\n    const targetExtent = targetTileGrid.getTileCoordExtent(\n      this.wrappedTileCoord_\n    );\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    if (getArea(limitedTargetExtent) === 0) {\n      // Tile is completely outside range -> EMPTY\n      // TODO: is it actually correct that the source even creates the tile ?\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const sourceProjExtent = sourceProj.getExtent();\n    if (sourceProjExtent) {\n      if (!maxSourceExtent) {\n        maxSourceExtent = sourceProjExtent;\n      } else {\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\n      }\n    }\n\n    const targetResolution = targetTileGrid.getResolution(\n      this.wrappedTileCoord_[0]\n    );\n\n    const sourceResolution = calculateSourceExtentResolution(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      targetResolution\n    );\n\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n      // invalid sourceResolution -> EMPTY\n      // probably edges of the projections when no extent is defined\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    const errorThresholdInPixels =\n      errorThreshold !== undefined ? errorThreshold : ERROR_THRESHOLD;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution\n    );\n\n    if (this.triangulation_.getTriangles().length === 0) {\n      // no valid triangles -> EMPTY\n      this.state = TileState.EMPTY;\n      return;\n    }\n\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\n\n    if (maxSourceExtent) {\n      if (sourceProj.canWrapX()) {\n        sourceExtent[1] = clamp(\n          sourceExtent[1],\n          maxSourceExtent[1],\n          maxSourceExtent[3]\n        );\n        sourceExtent[3] = clamp(\n          sourceExtent[3],\n          maxSourceExtent[1],\n          maxSourceExtent[3]\n        );\n      } else {\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\n      }\n    }\n\n    if (!getArea(sourceExtent)) {\n      this.state = TileState.EMPTY;\n    } else {\n      const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(\n        sourceExtent,\n        this.sourceZ_\n      );\n\n      for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\n        for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\n          const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\n          if (tile) {\n            this.sourceTiles_.push(tile);\n          }\n        }\n      }\n\n      if (this.sourceTiles_.length === 0) {\n        this.state = TileState.EMPTY;\n      }\n    }\n  }\n\n  /**\n   * Get the HTML Canvas element for this tile.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sources = [];\n    this.sourceTiles_.forEach((tile) => {\n      if (tile && tile.getState() == TileState.LOADED) {\n        sources.push({\n          extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),\n          image: tile.getImage(),\n        });\n      }\n    });\n    this.sourceTiles_.length = 0;\n\n    if (sources.length === 0) {\n      this.state = TileState.ERROR;\n    } else {\n      const z = this.wrappedTileCoord_[0];\n      const size = this.targetTileGrid_.getTileSize(z);\n      const width = typeof size === 'number' ? size : size[0];\n      const height = typeof size === 'number' ? size : size[1];\n      const targetResolution = this.targetTileGrid_.getResolution(z);\n      const sourceResolution = this.sourceTileGrid_.getResolution(\n        this.sourceZ_\n      );\n\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(\n        this.wrappedTileCoord_\n      );\n\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.pixelRatio_,\n        sourceResolution,\n        this.sourceTileGrid_.getExtent(),\n        targetResolution,\n        targetExtent,\n        this.triangulation_,\n        sources,\n        this.gutter_,\n        this.renderEdges_,\n        this.interpolate\n      );\n\n      this.state = TileState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      this.changed();\n\n      let leftToLoad = 0;\n\n      this.sourcesListenerKeys_ = [];\n      this.sourceTiles_.forEach((tile) => {\n        const state = tile.getState();\n        if (state == TileState.IDLE || state == TileState.LOADING) {\n          leftToLoad++;\n\n          const sourceListenKey = listen(\n            tile,\n            EventType.CHANGE,\n            function (e) {\n              const state = tile.getState();\n              if (\n                state == TileState.LOADED ||\n                state == TileState.ERROR ||\n                state == TileState.EMPTY\n              ) {\n                unlistenByKey(sourceListenKey);\n                leftToLoad--;\n                if (leftToLoad === 0) {\n                  this.unlistenSources_();\n                  this.reproject_();\n                }\n              }\n            },\n            this\n          );\n          this.sourcesListenerKeys_.push(sourceListenKey);\n        }\n      });\n\n      if (leftToLoad === 0) {\n        setTimeout(this.reproject_.bind(this), 0);\n      } else {\n        this.sourceTiles_.forEach(function (tile, i, arr) {\n          const state = tile.getState();\n          if (state == TileState.IDLE) {\n            tile.load();\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSources_() {\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\n    this.sourcesListenerKeys_ = null;\n  }\n\n  /**\n   * Remove from the cache due to expiry\n   */\n  release() {\n    if (this.canvas_) {\n      releaseCanvas(this.canvas_.getContext('2d'));\n      canvasPool.push(this.canvas_);\n      this.canvas_ = null;\n    }\n    super.release();\n  }\n}\n\nexport default ReprojTile;\n","/**\n * @module ol/reproj/common\n */\n\n/**\n * Default maximum allowed threshold  (in pixels) for reprojection\n * triangulation.\n * @type {number}\n */\nexport const ERROR_THRESHOLD = 0.5;\n","/**\n * @module ol/reproj/Triangulation\n */\nimport {\n  boundingExtent,\n  createEmpty,\n  extendCoordinate,\n  getArea,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n  getWidth,\n  intersects,\n} from '../extent.js';\nimport {getTransform} from '../proj.js';\nimport {modulo} from '../math.js';\n\n/**\n * Single triangle; consists of 3 source points and 3 target points.\n * @typedef {Object} Triangle\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source Source.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target Target.\n */\n\n/**\n * Maximum number of subdivision steps during raster reprojection triangulation.\n * Prevents high memory usage and large number of proj4 calls (for certain\n * transformations and areas). At most `2*(2^this)` triangles are created for\n * each triangulated extent (tile/image).\n * @type {number}\n */\nconst MAX_SUBDIVISION = 10;\n\n/**\n * Maximum allowed size of triangle relative to world width. When transforming\n * corners of world extent between certain projections, the resulting\n * triangulation seems to have zero error and no subdivision is performed. If\n * the triangle width is more than this (relative to world width; 0-1),\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\n * @type {number}\n */\nconst MAX_TRIANGLE_WIDTH = 0.25;\n\n/**\n * @classdesc\n * Class containing triangulation of the given target extent.\n * Used for determining source data and the reprojection itself.\n */\nclass Triangulation {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\n   * @param {number} errorThreshold Acceptable error (in source units).\n   * @param {?number} destinationResolution The (optional) resolution of the destination.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    maxSourceExtent,\n    errorThreshold,\n    destinationResolution\n  ) {\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n    this.sourceProj_ = sourceProj;\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     * @private\n     */\n    this.targetProj_ = targetProj;\n\n    /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */\n    let transformInvCache = {};\n    const transformInv = getTransform(this.targetProj_, this.sourceProj_);\n\n    /**\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\n     * @private\n     */\n    this.transformInv_ = function (c) {\n      const key = c[0] + '/' + c[1];\n      if (!transformInvCache[key]) {\n        transformInvCache[key] = transformInv(c);\n      }\n      return transformInvCache[key];\n    };\n\n    /**\n     * @type {import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.errorThresholdSquared_ = errorThreshold * errorThreshold;\n\n    /**\n     * @type {Array<Triangle>}\n     * @private\n     */\n    this.triangles_ = [];\n\n    /**\n     * Indicates that the triangulation crosses edge of the source projection.\n     * @type {boolean}\n     * @private\n     */\n    this.wrapsXInSource_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.canWrapXInSource_ =\n      this.sourceProj_.canWrapX() &&\n      !!maxSourceExtent &&\n      !!this.sourceProj_.getExtent() &&\n      getWidth(maxSourceExtent) >= getWidth(this.sourceProj_.getExtent());\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.sourceWorldWidth_ = this.sourceProj_.getExtent()\n      ? getWidth(this.sourceProj_.getExtent())\n      : null;\n\n    /**\n     * @type {?number}\n     * @private\n     */\n    this.targetWorldWidth_ = this.targetProj_.getExtent()\n      ? getWidth(this.targetProj_.getExtent())\n      : null;\n\n    const destinationTopLeft = getTopLeft(targetExtent);\n    const destinationTopRight = getTopRight(targetExtent);\n    const destinationBottomRight = getBottomRight(targetExtent);\n    const destinationBottomLeft = getBottomLeft(targetExtent);\n    const sourceTopLeft = this.transformInv_(destinationTopLeft);\n    const sourceTopRight = this.transformInv_(destinationTopRight);\n    const sourceBottomRight = this.transformInv_(destinationBottomRight);\n    const sourceBottomLeft = this.transformInv_(destinationBottomLeft);\n\n    /*\n     * The maxSubdivision controls how many splittings of the target area can\n     * be done. The idea here is to do a linear mapping of the target areas\n     * but the actual overall reprojection (can be) extremely non-linear. The\n     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\n     * tile size. However this function is also called to remap canvas rendered\n     * layers which can be much larger. This calculation increases the maxSubdivision\n     * value by the right factor so that each 256x256 pixel area has\n     * MAX_SUBDIVISION divisions.\n     */\n    const maxSubdivision =\n      MAX_SUBDIVISION +\n      (destinationResolution\n        ? Math.max(\n            0,\n            Math.ceil(\n              Math.log2(\n                getArea(targetExtent) /\n                  (destinationResolution * destinationResolution * 256 * 256)\n              )\n            )\n          )\n        : 0);\n\n    this.addQuad_(\n      destinationTopLeft,\n      destinationTopRight,\n      destinationBottomRight,\n      destinationBottomLeft,\n      sourceTopLeft,\n      sourceTopRight,\n      sourceBottomRight,\n      sourceBottomLeft,\n      maxSubdivision\n    );\n\n    if (this.wrapsXInSource_) {\n      let leftBound = Infinity;\n      this.triangles_.forEach(function (triangle, i, arr) {\n        leftBound = Math.min(\n          leftBound,\n          triangle.source[0][0],\n          triangle.source[1][0],\n          triangle.source[2][0]\n        );\n      });\n\n      // Shift triangles to be as close to `leftBound` as possible\n      // (if the distance is more than `worldWidth / 2` it can be closer.\n      this.triangles_.forEach((triangle) => {\n        if (\n          Math.max(\n            triangle.source[0][0],\n            triangle.source[1][0],\n            triangle.source[2][0]\n          ) -\n            leftBound >\n          this.sourceWorldWidth_ / 2\n        ) {\n          const newTriangle = [\n            [triangle.source[0][0], triangle.source[0][1]],\n            [triangle.source[1][0], triangle.source[1][1]],\n            [triangle.source[2][0], triangle.source[2][1]],\n          ];\n          if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) {\n            newTriangle[0][0] -= this.sourceWorldWidth_;\n          }\n          if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) {\n            newTriangle[1][0] -= this.sourceWorldWidth_;\n          }\n          if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) {\n            newTriangle[2][0] -= this.sourceWorldWidth_;\n          }\n\n          // Rarely (if the extent contains both the dateline and prime meridian)\n          // the shift can in turn break some triangles.\n          // Detect this here and don't shift in such cases.\n          const minX = Math.min(\n            newTriangle[0][0],\n            newTriangle[1][0],\n            newTriangle[2][0]\n          );\n          const maxX = Math.max(\n            newTriangle[0][0],\n            newTriangle[1][0],\n            newTriangle[2][0]\n          );\n          if (maxX - minX < this.sourceWorldWidth_ / 2) {\n            triangle.source = newTriangle;\n          }\n        }\n      });\n    }\n\n    transformInvCache = {};\n  }\n\n  /**\n   * Adds triangle to the triangulation.\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @private\n   */\n  addTriangle_(a, b, c, aSrc, bSrc, cSrc) {\n    this.triangles_.push({\n      source: [aSrc, bSrc, cSrc],\n      target: [a, b, c],\n    });\n  }\n\n  /**\n   * Adds quad (points in clock-wise order) to the triangulation\n   * (and reprojects the vertices) if valid.\n   * Performs quad subdivision if needed to increase precision.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\n   * @private\n   */\n  addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\n    const sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);\n    const sourceCoverageX = this.sourceWorldWidth_\n      ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_\n      : null;\n    const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);\n\n    // when the quad is wrapped in the source projection\n    // it covers most of the projection extent, but not fully\n    const wrapsX =\n      this.sourceProj_.canWrapX() &&\n      sourceCoverageX > 0.5 &&\n      sourceCoverageX < 1;\n\n    let needsSubdivision = false;\n\n    if (maxSubdivision > 0) {\n      if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\n        const targetQuadExtent = boundingExtent([a, b, c, d]);\n        const targetCoverageX =\n          getWidth(targetQuadExtent) / this.targetWorldWidth_;\n        needsSubdivision =\n          targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n      }\n      if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {\n        needsSubdivision =\n          sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\n      }\n    }\n\n    if (!needsSubdivision && this.maxSourceExtent_) {\n      if (\n        isFinite(sourceQuadExtent[0]) &&\n        isFinite(sourceQuadExtent[1]) &&\n        isFinite(sourceQuadExtent[2]) &&\n        isFinite(sourceQuadExtent[3])\n      ) {\n        if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {\n          // whole quad outside source projection extent -> ignore\n          return;\n        }\n      }\n    }\n\n    let isNotFinite = 0;\n\n    if (!needsSubdivision) {\n      if (\n        !isFinite(aSrc[0]) ||\n        !isFinite(aSrc[1]) ||\n        !isFinite(bSrc[0]) ||\n        !isFinite(bSrc[1]) ||\n        !isFinite(cSrc[0]) ||\n        !isFinite(cSrc[1]) ||\n        !isFinite(dSrc[0]) ||\n        !isFinite(dSrc[1])\n      ) {\n        if (maxSubdivision > 0) {\n          needsSubdivision = true;\n        } else {\n          // It might be the case that only 1 of the points is infinite. In this case\n          // we can draw a single triangle with the other three points\n          isNotFinite =\n            (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +\n            (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +\n            (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +\n            (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\n          if (\n            isNotFinite != 1 &&\n            isNotFinite != 2 &&\n            isNotFinite != 4 &&\n            isNotFinite != 8\n          ) {\n            return;\n          }\n        }\n      }\n    }\n\n    if (maxSubdivision > 0) {\n      if (!needsSubdivision) {\n        const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];\n        const centerSrc = this.transformInv_(center);\n\n        let dx;\n        if (wrapsX) {\n          const centerSrcEstimX =\n            (modulo(aSrc[0], sourceWorldWidth) +\n              modulo(cSrc[0], sourceWorldWidth)) /\n            2;\n          dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);\n        } else {\n          dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\n        }\n        const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\n        const centerSrcErrorSquared = dx * dx + dy * dy;\n        needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\n      }\n      if (needsSubdivision) {\n        if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\n          // split horizontally (top & bottom)\n          const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\n          const bcSrc = this.transformInv_(bc);\n          const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];\n          const daSrc = this.transformInv_(da);\n\n          this.addQuad_(\n            a,\n            b,\n            bc,\n            da,\n            aSrc,\n            bSrc,\n            bcSrc,\n            daSrc,\n            maxSubdivision - 1\n          );\n          this.addQuad_(\n            da,\n            bc,\n            c,\n            d,\n            daSrc,\n            bcSrc,\n            cSrc,\n            dSrc,\n            maxSubdivision - 1\n          );\n        } else {\n          // split vertically (left & right)\n          const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\n          const abSrc = this.transformInv_(ab);\n          const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\n          const cdSrc = this.transformInv_(cd);\n\n          this.addQuad_(\n            a,\n            ab,\n            cd,\n            d,\n            aSrc,\n            abSrc,\n            cdSrc,\n            dSrc,\n            maxSubdivision - 1\n          );\n          this.addQuad_(\n            ab,\n            b,\n            c,\n            cd,\n            abSrc,\n            bSrc,\n            cSrc,\n            cdSrc,\n            maxSubdivision - 1\n          );\n        }\n        return;\n      }\n    }\n\n    if (wrapsX) {\n      if (!this.canWrapXInSource_) {\n        return;\n      }\n      this.wrapsXInSource_ = true;\n    }\n\n    // Exactly zero or one of *Src is not finite\n    // The triangles must have the diagonal line as the first side\n    // This is to allow easy code in reproj.s to make it straight for broken\n    // browsers that can't handle diagonal clipping\n    if ((isNotFinite & 0xb) == 0) {\n      this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\n    }\n    if ((isNotFinite & 0xe) == 0) {\n      this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\n    }\n    if (isNotFinite) {\n      // Try the other two triangles\n      if ((isNotFinite & 0xd) == 0) {\n        this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\n      }\n      if ((isNotFinite & 0x7) == 0) {\n        this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\n      }\n    }\n  }\n\n  /**\n   * Calculates extent of the `source` coordinates from all the triangles.\n   *\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\n   */\n  calculateSourceExtent() {\n    const extent = createEmpty();\n\n    this.triangles_.forEach(function (triangle, i, arr) {\n      const src = triangle.source;\n      extendCoordinate(extent, src[0]);\n      extendCoordinate(extent, src[1]);\n      extendCoordinate(extent, src[2]);\n    });\n\n    return extent;\n  }\n\n  /**\n   * @return {Array<Triangle>} Array of the calculated triangles.\n   */\n  getTriangles() {\n    return this.triangles_;\n  }\n}\n\nexport default Triangulation;\n","/**\n * @module ol/reproj\n */\nimport {\n  containsCoordinate,\n  createEmpty,\n  extend,\n  forEachCorner,\n  getCenter,\n  getHeight,\n  getTopLeft,\n  getWidth,\n} from './extent.js';\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\nimport {getPointResolution, transform} from './proj.js';\nimport {solveLinearSystem} from './math.js';\n\nlet brokenDiagonalRendering_;\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * This draws a small triangle into a canvas by setting the triangle as the clip region\n * and then drawing a (too large) rectangle\n *\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\n * @param {number} v1 The y-coordinate of the second point.\n * @param {number} u2 The x-coordinate of the third point.\n * @param {number} v2 The y-coordinate of the third point.\n */\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\n  ctx.beginPath();\n  ctx.moveTo(0, 0);\n  ctx.lineTo(u1, v1);\n  ctx.lineTo(u2, v2);\n  ctx.closePath();\n  ctx.save();\n  ctx.clip();\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\n  ctx.restore();\n}\n\n/**\n * Given the data from getImageData, see if the right values appear at the provided offset.\n * Returns true if either the color or transparency is off\n *\n * @param {Uint8ClampedArray} data The data returned from getImageData\n * @param {number} offset The pixel offset from the start of data.\n * @return {boolean} true if the diagonal rendering is broken\n */\nfunction verifyBrokenDiagonalRendering(data, offset) {\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\n  return (\n    Math.abs(data[offset * 4] - 210) > 2 ||\n    Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2\n  );\n}\n\n/**\n * Determines if the current browser configuration can render triangular clip regions correctly.\n * This value is cached so the function is only expensive the first time called.\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\n * running, but lets hope not.\n *\n * @return {boolean} true if the Diagonal Rendering is broken.\n */\nfunction isBrokenDiagonalRendering() {\n  if (brokenDiagonalRendering_ === undefined) {\n    const ctx = createCanvasContext2D(6, 6, canvasPool);\n    ctx.globalCompositeOperation = 'lighter';\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\n    drawTestTriangle(ctx, 4, 5, 4, 0);\n    drawTestTriangle(ctx, 4, 5, 0, 5);\n    const data = ctx.getImageData(0, 0, 3, 3).data;\n    brokenDiagonalRendering_ =\n      verifyBrokenDiagonalRendering(data, 0) ||\n      verifyBrokenDiagonalRendering(data, 4) ||\n      verifyBrokenDiagonalRendering(data, 8);\n    releaseCanvas(ctx);\n    canvasPool.push(ctx.canvas);\n  }\n\n  return brokenDiagonalRendering_;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceResolution(\n  sourceProj,\n  targetProj,\n  targetCenter,\n  targetResolution\n) {\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\n\n  // calculate the ideal resolution of the source data\n  let sourceResolution = getPointResolution(\n    targetProj,\n    targetResolution,\n    targetCenter\n  );\n\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\n  if (targetMetersPerUnit !== undefined) {\n    sourceResolution *= targetMetersPerUnit;\n  }\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\n  if (sourceMetersPerUnit !== undefined) {\n    sourceResolution /= sourceMetersPerUnit;\n  }\n\n  // Based on the projection properties, the point resolution at the specified\n  // coordinates may be slightly different. We need to reverse-compensate this\n  // in order to achieve optimal results.\n\n  const sourceExtent = sourceProj.getExtent();\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\n    const compensationFactor =\n      getPointResolution(sourceProj, sourceResolution, sourceCenter) /\n      sourceResolution;\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\n      sourceResolution /= compensationFactor;\n    }\n  }\n\n  return sourceResolution;\n}\n\n/**\n * Calculates ideal resolution to use from the source in order to achieve\n * pixel mapping as close as possible to 1:1 during reprojection.\n * The resolution is calculated regardless of what resolutions\n * are actually available in the dataset (TileGrid, Image, ...).\n *\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\n * @param {number} targetResolution Target resolution.\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\n */\nexport function calculateSourceExtentResolution(\n  sourceProj,\n  targetProj,\n  targetExtent,\n  targetResolution\n) {\n  const targetCenter = getCenter(targetExtent);\n  let sourceResolution = calculateSourceResolution(\n    sourceProj,\n    targetProj,\n    targetCenter,\n    targetResolution\n  );\n\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\n    forEachCorner(targetExtent, function (corner) {\n      sourceResolution = calculateSourceResolution(\n        sourceProj,\n        targetProj,\n        corner,\n        targetResolution\n      );\n      return isFinite(sourceResolution) && sourceResolution > 0;\n    });\n  }\n\n  return sourceResolution;\n}\n\n/**\n * @typedef {Object} ImageExtent\n * @property {import(\"./extent.js\").Extent} extent Extent.\n * @property {import('./DataTile.js').ImageLike} image Image.\n */\n\n/**\n * Renders the source data into new canvas based on the triangulation.\n *\n * @param {number} width Width of the canvas.\n * @param {number} height Height of the canvas.\n * @param {number} pixelRatio Pixel ratio.\n * @param {number} sourceResolution Source resolution.\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\n * @param {number} targetResolution Target resolution.\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\n * @param {Array<ImageExtent>} sources Array of sources.\n * @param {number} gutter Gutter of the sources.\n * @param {boolean} [renderEdges] Render reprojection edges.\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\n * @return {HTMLCanvasElement} Canvas with reprojected data.\n */\nexport function render(\n  width,\n  height,\n  pixelRatio,\n  sourceResolution,\n  sourceExtent,\n  targetResolution,\n  targetExtent,\n  triangulation,\n  sources,\n  gutter,\n  renderEdges,\n  interpolate\n) {\n  const context = createCanvasContext2D(\n    Math.round(pixelRatio * width),\n    Math.round(pixelRatio * height),\n    canvasPool\n  );\n\n  if (!interpolate) {\n    context.imageSmoothingEnabled = false;\n  }\n\n  if (sources.length === 0) {\n    return context.canvas;\n  }\n\n  context.scale(pixelRatio, pixelRatio);\n\n  function pixelRound(value) {\n    return Math.round(value * pixelRatio) / pixelRatio;\n  }\n\n  context.globalCompositeOperation = 'lighter';\n\n  const sourceDataExtent = createEmpty();\n  sources.forEach(function (src, i, arr) {\n    extend(sourceDataExtent, src.extent);\n  });\n\n  const canvasWidthInUnits = getWidth(sourceDataExtent);\n  const canvasHeightInUnits = getHeight(sourceDataExtent);\n  const stitchContext = createCanvasContext2D(\n    Math.round((pixelRatio * canvasWidthInUnits) / sourceResolution),\n    Math.round((pixelRatio * canvasHeightInUnits) / sourceResolution),\n    canvasPool\n  );\n\n  if (!interpolate) {\n    stitchContext.imageSmoothingEnabled = false;\n  }\n\n  const stitchScale = pixelRatio / sourceResolution;\n\n  sources.forEach(function (src, i, arr) {\n    const xPos = src.extent[0] - sourceDataExtent[0];\n    const yPos = -(src.extent[3] - sourceDataExtent[3]);\n    const srcWidth = getWidth(src.extent);\n    const srcHeight = getHeight(src.extent);\n\n    // This test should never fail -- but it does. Need to find a fix the upstream condition\n    if (src.image.width > 0 && src.image.height > 0) {\n      stitchContext.drawImage(\n        src.image,\n        gutter,\n        gutter,\n        src.image.width - 2 * gutter,\n        src.image.height - 2 * gutter,\n        xPos * stitchScale,\n        yPos * stitchScale,\n        srcWidth * stitchScale,\n        srcHeight * stitchScale\n      );\n    }\n  });\n\n  const targetTopLeft = getTopLeft(targetExtent);\n\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\n    /* Calculate affine transform (src -> dst)\n     * Resulting matrix can be used to transform coordinate\n     * from `sourceProjection` to destination pixels.\n     *\n     * To optimize number of context calls and increase numerical stability,\n     * we also do the following operations:\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\n     *\n     * Src points: xi, yi\n     * Dst points: ui, vi\n     * Affine coefficients: aij\n     *\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\n     */\n    const source = triangle.source;\n    const target = triangle.target;\n    let x0 = source[0][0],\n      y0 = source[0][1];\n    let x1 = source[1][0],\n      y1 = source[1][1];\n    let x2 = source[2][0],\n      y2 = source[2][1];\n    // Make sure that everything is on pixel boundaries\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\n    const v0 = pixelRound(\n      -(target[0][1] - targetTopLeft[1]) / targetResolution\n    );\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\n    const v1 = pixelRound(\n      -(target[1][1] - targetTopLeft[1]) / targetResolution\n    );\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\n    const v2 = pixelRound(\n      -(target[2][1] - targetTopLeft[1]) / targetResolution\n    );\n\n    // Shift all the source points to improve numerical stability\n    // of all the subsequent calculations. The [x0, y0] is used here.\n    // This is also used to simplify the linear system.\n    const sourceNumericalShiftX = x0;\n    const sourceNumericalShiftY = y0;\n    x0 = 0;\n    y0 = 0;\n    x1 -= sourceNumericalShiftX;\n    y1 -= sourceNumericalShiftY;\n    x2 -= sourceNumericalShiftX;\n    y2 -= sourceNumericalShiftY;\n\n    const augmentedMatrix = [\n      [x1, y1, 0, 0, u1 - u0],\n      [x2, y2, 0, 0, u2 - u0],\n      [0, 0, x1, y1, v1 - v0],\n      [0, 0, x2, y2, v2 - v0],\n    ];\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\n    if (!affineCoefs) {\n      return;\n    }\n\n    context.save();\n    context.beginPath();\n\n    if (isBrokenDiagonalRendering() || !interpolate) {\n      // Make sure that all lines are horizontal or vertical\n      context.moveTo(u1, v1);\n      // This is the diagonal line. Do it in 4 steps\n      const steps = 4;\n      const ud = u0 - u1;\n      const vd = v0 - v1;\n      for (let step = 0; step < steps; step++) {\n        // Go horizontally\n        context.lineTo(\n          u1 + pixelRound(((step + 1) * ud) / steps),\n          v1 + pixelRound((step * vd) / (steps - 1))\n        );\n        // Go vertically\n        if (step != steps - 1) {\n          context.lineTo(\n            u1 + pixelRound(((step + 1) * ud) / steps),\n            v1 + pixelRound(((step + 1) * vd) / (steps - 1))\n          );\n        }\n      }\n      // We are almost at u0r, v0r\n      context.lineTo(u2, v2);\n    } else {\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n    }\n\n    context.clip();\n\n    context.transform(\n      affineCoefs[0],\n      affineCoefs[2],\n      affineCoefs[1],\n      affineCoefs[3],\n      u0,\n      v0\n    );\n\n    context.translate(\n      sourceDataExtent[0] - sourceNumericalShiftX,\n      sourceDataExtent[3] - sourceNumericalShiftY\n    );\n\n    context.scale(\n      sourceResolution / pixelRatio,\n      -sourceResolution / pixelRatio\n    );\n\n    context.drawImage(stitchContext.canvas, 0, 0);\n    context.restore();\n  });\n\n  releaseCanvas(stitchContext);\n  canvasPool.push(stitchContext.canvas);\n\n  if (renderEdges) {\n    context.save();\n\n    context.globalCompositeOperation = 'source-over';\n    context.strokeStyle = 'black';\n    context.lineWidth = 1;\n\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\n      const target = triangle.target;\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\n\n      context.beginPath();\n      context.moveTo(u1, v1);\n      context.lineTo(u0, v0);\n      context.lineTo(u2, v2);\n      context.closePath();\n      context.stroke();\n    });\n\n    context.restore();\n  }\n  return context.canvas;\n}\n","/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nclass TileRange {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  constructor(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  contains(tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  containsTileRange(tileRange) {\n    return (\n      this.minX <= tileRange.minX &&\n      tileRange.maxX <= this.maxX &&\n      this.minY <= tileRange.minY &&\n      tileRange.maxY <= this.maxY\n    );\n  }\n\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  containsXY(x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  equals(tileRange) {\n    return (\n      this.minX == tileRange.minX &&\n      this.minY == tileRange.minY &&\n      this.maxX == tileRange.maxX &&\n      this.maxY == tileRange.maxY\n    );\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  extend(tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  }\n\n  /**\n   * @return {number} Height.\n   */\n  getHeight() {\n    return this.maxY - this.minY + 1;\n  }\n\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  getSize() {\n    return [this.getWidth(), this.getHeight()];\n  }\n\n  /**\n   * @return {number} Width.\n   */\n  getWidth() {\n    return this.maxX - this.minX + 1;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  intersects(tileRange) {\n    return (\n      this.minX <= tileRange.maxX &&\n      this.maxX >= tileRange.minX &&\n      this.minY <= tileRange.maxY &&\n      this.maxY >= tileRange.minY\n    );\n  }\n}\n\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  }\n  return new TileRange(minX, maxX, minY, maxY);\n}\n\nexport default TileRange;\n","/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport {CLASS_SELECTABLE} from './css.js';\nimport {containsExtent} from './extent.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {outerHeight, outerWidth, removeChildren, removeNode} from './dom.js';\n\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n\n/**\n * @enum {string}\n * @protected\n */\nconst Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning',\n};\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay.js';\n *\n *     // ...\n *     const popup = new Overlay({\n *       element: document.getElementById('popup'),\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nclass Overlay extends BaseObject {\n  /**\n   * @param {Options} options Overlay options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {Options}\n     */\n    this.options = options;\n\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n    this.id = options.id;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.insertFirst =\n      options.insertFirst !== undefined ? options.insertFirst : true;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = document.createElement('div');\n    this.element.className =\n      options.className !== undefined\n        ? options.className\n        : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    this.element.style.position = 'absolute';\n    this.element.style.pointerEvents = 'auto';\n\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|undefined}\n     */\n    this.autoPan = options.autoPan === true ? {} : options.autoPan || undefined;\n\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n    this.rendered = {\n      transform_: '',\n      visible: true,\n    };\n\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.mapPostrenderListenerKey = null;\n\n    this.addChangeListener(Property.ELEMENT, this.handleElementChanged);\n    this.addChangeListener(Property.MAP, this.handleMapChanged);\n    this.addChangeListener(Property.OFFSET, this.handleOffsetChanged);\n    this.addChangeListener(Property.POSITION, this.handlePositionChanged);\n    this.addChangeListener(Property.POSITIONING, this.handlePositioningChanged);\n\n    if (options.element !== undefined) {\n      this.setElement(options.element);\n    }\n\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n\n    this.setPositioning(options.positioning || 'top-left');\n\n    if (options.position !== undefined) {\n      this.setPosition(options.position);\n    }\n  }\n\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  getElement() {\n    return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n  }\n\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./Map.js\").default|null} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n  getMap() {\n    return /** @type {import(\"./Map.js\").default|null} */ (\n      this.get(Property.MAP) || null\n    );\n  }\n\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n  getOffset() {\n    return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n  }\n\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\n   * Get the current positioning of this overlay.\n   * @return {Positioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n  getPositioning() {\n    return /** @type {Positioning} */ (this.get(Property.POSITIONING));\n  }\n\n  /**\n   * @protected\n   */\n  handleElementChanged() {\n    removeChildren(this.element);\n    const element = this.getElement();\n    if (element) {\n      this.element.appendChild(element);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleMapChanged() {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n    const map = this.getMap();\n    if (map) {\n      this.mapPostrenderListenerKey = listen(\n        map,\n        MapEventType.POSTRENDER,\n        this.render,\n        this\n      );\n      this.updatePixelPosition();\n      const container = this.stopEvent\n        ? map.getOverlayContainerStopEvent()\n        : map.getOverlayContainer();\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n      this.performAutoPan();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handleOffsetChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositionChanged() {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositioningChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  setElement(element) {\n    this.set(Property.ELEMENT, element);\n  }\n\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./Map.js\").default|null} map The map that the\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\n   * @observable\n   * @api\n   */\n  setMap(map) {\n    this.set(Property.MAP, map);\n  }\n\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n  setOffset(offset) {\n    this.set(Property.OFFSET, offset);\n  }\n\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n  setPosition(position) {\n    this.set(Property.POSITION, position);\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n  performAutoPan() {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [panIntoViewOptions] Options for the pan action\n   * @api\n   */\n  panIntoView(panIntoViewOptions) {\n    const map = this.getMap();\n\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n\n    const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    const element = this.getElement();\n    const overlayRect = this.getRect(element, [\n      outerWidth(element),\n      outerHeight(element),\n    ]);\n\n    panIntoViewOptions = panIntoViewOptions || {};\n\n    const myMargin =\n      panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      const offsetLeft = overlayRect[0] - mapRect[0];\n      const offsetRight = mapRect[2] - overlayRect[2];\n      const offsetTop = overlayRect[1] - mapRect[1];\n      const offsetBottom = mapRect[3] - overlayRect[3];\n\n      const delta = [0, 0];\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n          map.getView().getCenterInternal()\n        );\n        const centerPx = map.getPixelFromCoordinateInternal(center);\n        if (!centerPx) {\n          return;\n        }\n        const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n\n        const panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing,\n        });\n      }\n    }\n  }\n\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n  getRect(element, size) {\n    const box = element.getBoundingClientRect();\n    const offsetX = box.left + window.pageXOffset;\n    const offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  }\n\n  /**\n   * Set the positioning for this overlay.\n   * @param {Positioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n  setPositioning(positioning) {\n    this.set(Property.POSITIONING, positioning);\n  }\n\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n  setVisible(visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  }\n\n  /**\n   * Update pixel position.\n   * @protected\n   */\n  updatePixelPosition() {\n    const map = this.getMap();\n    const position = this.getPosition();\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    const pixel = map.getPixelFromCoordinate(position);\n    const mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  }\n\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n  updateRenderedPosition(pixel, mapSize) {\n    const style = this.element.style;\n    const offset = this.getOffset();\n\n    const positioning = this.getPositioning();\n\n    this.setVisible(true);\n\n    const x = Math.round(pixel[0] + offset[0]) + 'px';\n    const y = Math.round(pixel[1] + offset[1]) + 'px';\n    let posX = '0%';\n    let posY = '0%';\n    if (\n      positioning == 'bottom-right' ||\n      positioning == 'center-right' ||\n      positioning == 'top-right'\n    ) {\n      posX = '-100%';\n    } else if (\n      positioning == 'bottom-center' ||\n      positioning == 'center-center' ||\n      positioning == 'top-center'\n    ) {\n      posX = '-50%';\n    }\n    if (\n      positioning == 'bottom-left' ||\n      positioning == 'bottom-center' ||\n      positioning == 'bottom-right'\n    ) {\n      posY = '-100%';\n    } else if (\n      positioning == 'center-left' ||\n      positioning == 'center-center' ||\n      positioning == 'center-right'\n    ) {\n      posY = '-50%';\n    }\n    const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform;\n    }\n  }\n\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n  getOptions() {\n    return this.options;\n  }\n}\n\nexport default Overlay;\n","/**\n * @module ol/source/WMTS\n */\n\nimport TileImage from './TileImage.js';\nimport {appendParams} from '../uri.js';\nimport {containsExtent} from '../extent.js';\nimport {createFromCapabilitiesMatrixSet} from '../tilegrid/WMTS.js';\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\nimport {equivalent, get as getProjection, transformExtent} from '../proj.js';\n\n/**\n * Request encoding. One of 'KVP', 'REST'.\n * @typedef {'KVP' | 'REST'} RequestEncoding\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {RequestEncoding} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nclass WMTS extends TileImage {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    // TODO: add support for TileMatrixLimits\n\n    const requestEncoding =\n      options.requestEncoding !== undefined ? options.requestEncoding : 'KVP';\n\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    const tileGrid = options.tileGrid;\n\n    let urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      interpolate: options.interpolate,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.dimensions_ =\n      options.dimensions !== undefined ? options.dimensions : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layer_ = options.layer;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.matrixSet_ = options.matrixSet;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.style_ = options.style;\n\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {RequestEncoding}\n     */\n    this.requestEncoding_ = requestEncoding;\n\n    this.setKey(this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      this.tileUrlFunction = createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      );\n    }\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    this.setTileUrlFunction(\n      createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      ),\n      key\n    );\n  }\n\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  getDimensions() {\n    return this.dimensions_;\n  }\n\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  getMatrixSet() {\n    return this.matrixSet_;\n  }\n\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {RequestEncoding} Request encoding.\n   * @api\n   */\n  getRequestEncoding() {\n    return this.requestEncoding_;\n  }\n\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  getVersion() {\n    return this.version_;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  getKeyForDimensions_() {\n    const res = this.urls ? this.urls.slice(0) : [];\n    for (const key in this.dimensions_) {\n      res.push(key + '-' + this.dimensions_[key]);\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  updateDimensions(dimensions) {\n    Object.assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  }\n\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  createFromWMTSTemplate(template) {\n    const requestEncoding = this.requestEncoding_;\n\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    const context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_,\n    };\n\n    if (requestEncoding == 'KVP') {\n      Object.assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_,\n      });\n    }\n\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n    template =\n      requestEncoding == 'KVP'\n        ? appendParams(template, context)\n        : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n          });\n\n    const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ (\n      this.tileGrid\n    );\n    const dimensions = this.dimensions_;\n\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        }\n        const localContext = {\n          'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n          'TileCol': tileCoord[1],\n          'TileRow': tileCoord[2],\n        };\n        Object.assign(localContext, dimensions);\n        let url = template;\n        if (requestEncoding == 'KVP') {\n          url = appendParams(url, localContext);\n        } else {\n          url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return localContext[p];\n          });\n        }\n        return url;\n      }\n    );\n  }\n}\n\nexport default WMTS;\n\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {Options|null} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  const layers = wmtsCap['Contents']['Layer'];\n  const l = layers.find(function (elt) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (!l) {\n    return null;\n  }\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  let idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        const tileMatrixSet = tileMatrixSets.find(function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\n        const proj1 = getProjection(supportedCRS);\n        const proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        }\n        return supportedCRS == config['projection'];\n      });\n    } else {\n      idx = l['TileMatrixSetLink'].findIndex(function (elt) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  const matrixSet =\n    /** @type {string} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSet']);\n  const matrixLimits =\n    /** @type {Array<Object>} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);\n\n  let format = /** @type {string} */ (l['Format'][0]);\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = l['Style'].findIndex(function (elt) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    }\n    return elt['isDefault'];\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  const style = /** @type {string} */ (l['Style'][idx]['Identifier']);\n\n  const dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      const key = elt['Identifier'];\n      let value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  const matrixSetObj = matrixSets.find(function (elt) {\n    return elt['Identifier'] == matrixSet;\n  });\n\n  let projection;\n  const code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection = getProjection(code);\n  }\n  if ('projection' in config) {\n    const projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  let wrapX = false;\n  const switchXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  let matrix = matrixSetObj.TileMatrix[0];\n\n  // create default matrixLimit\n  let selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // subtract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1,\n  };\n\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    const m = matrixSetObj.TileMatrix.find(\n      (tileMatrixValue) =>\n        tileMatrixValue.Identifier === selectedMatrixLimit.TileMatrix ||\n        matrixSetObj.Identifier + ':' + tileMatrixValue.Identifier ===\n          selectedMatrixLimit.TileMatrix\n    );\n    if (m) {\n      matrix = m;\n    }\n  }\n\n  const resolution =\n    (matrix.ScaleDenominator * 0.00028) / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  const origin = switchXY\n    ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]]\n    : matrix.TopLeftCorner;\n  const tileSpanX = matrix.TileWidth * resolution;\n  const tileSpanY = matrix.TileHeight * resolution;\n  let matrixSetExtent = matrixSetObj['BoundingBox'];\n  if (matrixSetExtent && switchXY) {\n    matrixSetExtent = [\n      matrixSetExtent[1],\n      matrixSetExtent[0],\n      matrixSetExtent[3],\n      matrixSetExtent[2],\n    ];\n  }\n  let extent = [\n    origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n    // add one to get proper bottom/right coordinate\n    origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\n    origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\n    origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow,\n  ];\n\n  if (\n    matrixSetExtent !== undefined &&\n    !containsExtent(matrixSetExtent, extent)\n  ) {\n    const wgs84BoundingBox = l['WGS84BoundingBox'];\n    const wgs84ProjectionExtent = getProjection('EPSG:4326').getExtent();\n    extent = matrixSetExtent;\n    if (wgs84BoundingBox) {\n      wrapX =\n        wgs84BoundingBox[0] === wgs84ProjectionExtent[0] &&\n        wgs84BoundingBox[2] === wgs84ProjectionExtent[2];\n    } else {\n      const wgs84MatrixSetExtent = transformExtent(\n        matrixSetExtent,\n        matrixSetObj['SupportedCRS'],\n        'EPSG:4326'\n      );\n      // Ignore slight deviation from the correct x limits\n      wrapX =\n        wgs84MatrixSetExtent[0] - 1e-10 <= wgs84ProjectionExtent[0] &&\n        wgs84MatrixSetExtent[2] + 1e-10 >= wgs84ProjectionExtent[2];\n    }\n  }\n\n  const tileGrid = createFromCapabilitiesMatrixSet(\n    matrixSetObj,\n    extent,\n    matrixLimits\n  );\n\n  /** @type {!Array<string>} */\n  const urls = [];\n  let requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if (\n    'OperationsMetadata' in wmtsCap &&\n    'GetTile' in wmtsCap['OperationsMetadata']\n  ) {\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        const constraint = gets[i]['Constraint'].find(function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        const encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === 'KVP') {\n          if (encodings.includes('KVP')) {\n            urls.push(/** @type {string} */ (gets[i]['href']));\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = 'KVP';\n        urls.push(/** @type {string} */ (gets[i]['href']));\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = 'REST';\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(/** @type {string} */ (element['template']));\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin'],\n  };\n}\n","/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport {getKey, getKeyZXY} from '../tilecoord.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate:\n        options.interpolate !== undefined ? options.interpolate : true,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    }\n    for (const key in this.tileCacheForProjection) {\n      if (this.tileCacheForProjection[key].canExpireCache()) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const usedTileCache = this.getTileCacheForProjection(projection);\n\n    this.tileCache.expireCache(\n      this.tileCache == usedTileCache ? usedTiles : {}\n    );\n    for (const id in this.tileCacheForProjection) {\n      const tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    }\n    return this.getGutter();\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    if (\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return false;\n    }\n    return super.getOpaque(projection);\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileGridForProjection)) {\n      this.tileGridForProjection[projKey] =\n        getTileGridForProjection(projection);\n    }\n    return this.tileGridForProjection[projKey];\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n  getTileCacheForProjection(projection) {\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    }\n    const projKey = getUid(projection);\n    if (!(projKey in this.tileCacheForProjection)) {\n      this.tileCacheForProjection[projKey] = new TileCache(\n        this.tileCache.highWaterMark\n      );\n    }\n    return this.tileCacheForProjection[projKey];\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection\n      );\n    }\n    const cache = this.getTileCacheForProjection(projection);\n    const tileCoord = [z, x, y];\n    let tile;\n    const tileCoordKey = getKey(tileCoord);\n    if (cache.containsKey(tileCoordKey)) {\n      tile = cache.get(tileCoordKey);\n    }\n    const key = this.getKey();\n    if (tile && tile.key == key) {\n      return tile;\n    }\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n    const targetTileGrid = this.getTileGridForProjection(projection);\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const newTile = new ReprojTile(\n      sourceProjection,\n      sourceTileGrid,\n      projection,\n      targetTileGrid,\n      tileCoord,\n      wrappedTileCoord,\n      this.getTilePixelRatio(pixelRatio),\n      this.getGutter(),\n      (z, x, y, pixelRatio) =>\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\n      this.reprojectionErrorThreshold_,\n      this.renderReprojectionEdges_,\n      this.getInterpolate()\n    );\n    newTile.key = key;\n\n    if (tile) {\n      newTile.interimTile = tile;\n      newTile.refreshInterimChain();\n      cache.replace(tileCoordKey, newTile);\n    } else {\n      cache.set(tileCoordKey, newTile);\n    }\n    return newTile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!ImageTile} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    let tile = null;\n    const tileCoordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        const interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    const proj = getProjection(projection);\n    if (proj) {\n      const projKey = getUid(proj);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = tilegrid;\n      }\n    }\n  }\n\n  clear() {\n    super.clear();\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n","/**\n * @module ol/TileCache\n */\nimport LRUCache from './structs/LRUCache.js';\nimport {fromKey, getKey} from './tilecoord.js';\n\nclass TileCache extends LRUCache {\n  clear() {\n    while (this.getCount() > 0) {\n      this.pop().release();\n    }\n    super.clear();\n  }\n\n  /**\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(usedTiles) {\n    while (this.canExpireCache()) {\n      const tile = this.peekLast();\n      if (tile.getKey() in usedTiles) {\n        break;\n      } else {\n        this.pop().release();\n      }\n    }\n  }\n\n  /**\n   * Prune all tiles from the cache that don't have the same z as the newest tile.\n   */\n  pruneExceptNewestZ() {\n    if (this.getCount() === 0) {\n      return;\n    }\n    const key = this.peekFirstKey();\n    const tileCoord = fromKey(key);\n    const z = tileCoord[0];\n    this.forEach((tile) => {\n      if (tile.tileCoord[0] !== z) {\n        this.remove(getKey(tile.tileCoord));\n        tile.release();\n      }\n    });\n  }\n}\n\nexport default TileCache;\n","/**\n * @module ol/structs/LRUCache\n */\n\nimport {assert} from '../asserts.js';\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_ Key.\n * @property {Object} newer Newer.\n * @property {Object} older Older.\n * @property {*} value_ Value.\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nclass LRUCache {\n  /**\n   * @param {number} [highWaterMark] High water mark.\n   */\n  constructor(highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  }\n\n  /**\n   * Expire the cache.\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\n   */\n  expireCache(keep) {\n    while (this.canExpireCache()) {\n      this.pop();\n    }\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  forEach(f) {\n    let entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {*} [options] Options (reserved for subclasses).\n   * @return {T} Value.\n   */\n  get(key, options) {\n    const entry = this.entries_[key];\n    assert(\n      entry !== undefined,\n      'Tried to get a value for a key that does not exist in the cache'\n    );\n    if (entry === this.newest_) {\n      return entry.value_;\n    }\n    if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(\n      entry !== undefined,\n      'Tried to get a value for a key that does not exist in the cache'\n    );\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n  /**\n   * Return an entry without updating least recently used time.\n   * @param {string} key Key.\n   * @return {T} Value.\n   */\n  peek(key) {\n    if (!this.containsKey(key)) {\n      return undefined;\n    }\n    return this.entries_[key].value_;\n  }\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(\n      !(key in this.entries_),\n      'Tried to set a value for a key that is used already'\n    );\n    const entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value,\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n}\n\nexport default LRUCache;\n","/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord} [tileCoord] Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, tileCoord) {\n  if (tileCoord !== undefined) {\n    tileCoord[0] = z;\n    tileCoord[1] = x;\n    tileCoord[2] = y;\n    return tileCoord;\n  }\n  return [z, x, y];\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\n * @param {string} tileKey The tile key.\n * @return {string} The cache key.\n */\nexport function getCacheKeyForTileKey(tileKey) {\n  const [z, x, y] = tileKey\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\n    .split(',')\n    .map(Number);\n  return getKeyZXY(z, x, y);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const tileRange = tileGrid.getFullTileRange(z);\n  if (!tileRange) {\n    return true;\n  }\n  return tileRange.containsXY(x, y);\n}\n","/**\n * @module ol/source/UrlTile\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileState from '../TileState.js';\nimport {createFromTemplates, expandUrl} from '../tileurlfunction.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Cache size.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\n * @property {string} [url] Url.\n * @property {Array<string>} [urls] Urls.\n * @property {boolean} [wrapX=true] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: options.interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction;\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\n      ? this.tileUrlFunction.bind(this)\n      : this.tileUrlFunction;\n  }\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n          ? TileEventType.TILELOADEND\n          : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string} [key] Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\nexport default UrlTile;\n","/**\n * @module ol/source/TileEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a tile starts loading.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\n   * @api\n   */\n  TILELOADSTART: 'tileloadstart',\n\n  /**\n   * Triggered when a tile finishes loading, either when its data is loaded,\n   * or when loading was aborted because the tile is no longer needed.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\n   * @api\n   */\n  TILELOADEND: 'tileloadend',\n\n  /**\n   * Triggered if tile loading results in an error. Note that this is not the\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\n   * for details.\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\n   * @api\n   */\n  TILELOADERROR: 'tileloaderror',\n};\n\n/**\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\n */\n","/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport {abstract} from '../util.js';\nimport {assert} from '../asserts.js';\nimport {equivalent} from '../proj.js';\nimport {getKeyZXY, withinExtentAndZ} from '../tilecoord.js';\nimport {\n  getForProjection as getTileGridForProjection,\n  wrapX,\n} from '../tilegrid.js';\nimport {scale as scaleSize, toSize} from '../size.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] CacheSize.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nclass TileSource extends Source {\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate,\n    });\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ =\n      options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    const tileSize = [256, 256];\n    if (this.tileGrid) {\n      toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\n    }\n\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n    this.tileCache = new TileCache(options.cacheSize || 0);\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = options.key || '';\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate,\n    };\n\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection ? options.zDirection : 0;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.tileCache.canExpireCache();\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n  forEachLoadedTile(projection, z, tileRange, callback) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (!tileCache) {\n      return false;\n    }\n\n    let covered = true;\n    let tile, tileCoordKey, loaded;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = /** @type {!import(\"../Tile.js\").default} */ (\n            tileCache.get(tileCoordKey)\n          );\n          loaded = tile.getState() === TileState.LOADED;\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    return this.opaque_;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions(projection) {\n    const tileGrid = projection\n      ? this.getTileGridForProjection(projection)\n      : this.tileGrid;\n    if (!tileGrid) {\n      return null;\n    }\n    return tileGrid.getResolutions();\n  }\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n   * @api\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    }\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n  getTileCacheForProjection(projection) {\n    const sourceProjection = this.getProjection();\n    assert(\n      sourceProjection === null || equivalent(sourceProjection, projection),\n      'A VectorTile source can only be rendered if it has a projection compatible with the view projection.'\n    );\n    return this.tileCache;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    }\n    return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n  }\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  getTileCoordForTileUrlFunction(tileCoord, projection) {\n    projection = projection !== undefined ? projection : this.getProjection();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n   * @api\n   */\n  clear() {\n    this.tileCache.clear();\n  }\n\n  refresh() {\n    this.clear();\n    super.refresh();\n  }\n\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  updateCacheSize(tileCount, projection) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCount > tileCache.highWaterMark) {\n      tileCache.highWaterMark = tileCount;\n    }\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  useTile(z, x, y, projection) {}\n}\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport class TileSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  constructor(type, tile) {\n    super(type);\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    this.tile = tile;\n  }\n}\n\nexport default TileSource;\n","/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n\n/**\n * A function that takes a {@link import(\"../View.js\").ViewStateLayerStateExtent} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../View.js\").ViewStateLayerStateExtent): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nclass Source extends BaseObject {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */\n    this.projection = getProjection(options.projection);\n\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n    this.attributions_ = adaptAttributions(options.attributions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.attributionsCollapsible_ =\n      options.attributionsCollapsible !== undefined\n        ? options.attributionsCollapsible\n        : true;\n\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n    this.loading = false;\n\n    /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */\n    this.state_ = options.state !== undefined ? options.state : 'ready';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = !!options.interpolate;\n\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n    this.viewResolver = null;\n\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n    this.viewRejector = null;\n\n    const self = this;\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n    this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n  }\n\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n  getAttributions() {\n    return this.attributions_;\n  }\n\n  /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */\n  getAttributionsCollapsible() {\n    return this.attributionsCollapsible_;\n  }\n\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\n   * @api\n   */\n  getProjection() {\n    return this.projection;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions(projection) {\n    return null;\n  }\n\n  /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */\n  getView() {\n    return this.viewPromise_;\n  }\n\n  /**\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n   * @return {import(\"./Source.js\").State} State.\n   * @api\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n  getWrapX() {\n    return this.wrapX_;\n  }\n\n  /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */\n  getInterpolate() {\n    return this.interpolate_;\n  }\n\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n  refresh() {\n    this.changed();\n  }\n\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n  setAttributions(attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  }\n\n  /**\n   * Set the state of the source.\n   * @param {import(\"./Source.js\").State} state State.\n   */\n  setState(state) {\n    this.state_ = state;\n    this.changed();\n  }\n}\n\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\n\nexport default Source;\n","/**\n * @module ol/tilegrid\n */\nimport TileGrid from './tilegrid/TileGrid.js';\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {METERS_PER_UNIT, get as getProjection} from './proj.js';\nimport {\n  containsCoordinate,\n  createOrUpdate,\n  getCorner,\n  getHeight,\n  getWidth,\n} from './extent.js';\nimport {toSize} from './size.js';\n\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil(\n      (projectionExtent[0] - center[0]) / worldWidth\n    );\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  }\n  return tileCoord;\n}\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\n  corner = corner !== undefined ? corner : 'top-left';\n\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\n\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: tileSize,\n  });\n}\n\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(options) {\n  const xyzOptions = options || {};\n\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(\n      extent,\n      xyzOptions.maxZoom,\n      xyzOptions.tileSize,\n      xyzOptions.maxResolution\n    ),\n  };\n  return new TileGrid(gridOptions);\n}\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\n\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n\n  maxResolution =\n    maxResolution > 0\n      ? maxResolution\n      : Math.max(width / tileSize[0], height / tileSize[1]);\n\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, maxZoom, tileSize, corner);\n}\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half =\n      (180 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}\n","/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, {\n  createOrUpdate as createOrUpdateTileRange,\n} from '../TileRange.js';\nimport {DEFAULT_TILE_SIZE} from './common.js';\nimport {assert} from '../asserts.js';\nimport {ceil, clamp, floor} from '../math.js';\nimport {createOrUpdate, getTopLeft} from '../extent.js';\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\nimport {intersectsLinearRing} from '../geom/flat/intersectsextent.js';\nimport {isSorted, linearFindNearest} from '../array.js';\nimport {toSize} from '../size.js';\n\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nconst tmpTileCoord = [0, 0, 0];\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nconst DECIMALS = 5;\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nclass TileGrid {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  constructor(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n    this.resolutions_ = options.resolutions;\n    assert(\n      isSorted(\n        this.resolutions_,\n        function (a, b) {\n          return b - a;\n        },\n        true\n      ),\n      '`resolutions` must be sorted in descending order'\n    );\n\n    // check if we've got a consistent zoom factor and origin\n    let zoomFactor;\n    if (!options.origins) {\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zoomFactor_ = zoomFactor;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(\n        this.origins_.length == this.resolutions_.length,\n        'Number of `origins` and `resolutions` must be equal'\n      );\n    }\n\n    const extent = options.extent;\n\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n\n    assert(\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\n      'Either `origin` or `origins` must be configured, never both'\n    );\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(\n        this.tileSizes_.length == this.resolutions_.length,\n        'Number of `tileSizes` and `resolutions` must be equal'\n      );\n    }\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.tileSize_ =\n      options.tileSize !== undefined\n        ? options.tileSize\n        : !this.tileSizes_\n        ? DEFAULT_TILE_SIZE\n        : null;\n    assert(\n      (!this.tileSize_ && this.tileSizes_) ||\n        (this.tileSize_ && !this.tileSizes_),\n      'Either `tileSize` or `tileSizes` must be configured, never both'\n    );\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n    this.fullTileRanges_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = [0, 0, 0, 0];\n\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\n        const tileRange = new TileRange(\n          Math.min(0, size[0]),\n          Math.max(size[0] - 1, -1),\n          Math.min(0, size[1]),\n          Math.max(size[1] - 1, -1)\n        );\n        if (extent) {\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n        return tileRange;\n      }, this);\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n  forEachTileCoord(extent, zoom, callback) {\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n  forEachTileCoordParentTileRange(\n    tileCoord,\n    callback,\n    tempTileRange,\n    tempExtent\n  ) {\n    let tileRange, x, y;\n    let tileCoordExtent = null;\n    let z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\n    }\n    while (z >= this.minZoom) {\n      if (this.zoomFactor_ === 2) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, tempTileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(\n          tileCoordExtent,\n          z,\n          tempTileRange\n        );\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  }\n\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n  getMaxZoom() {\n    return this.maxZoom;\n  }\n\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n  getMinZoom() {\n    return this.minZoom;\n  }\n\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n  getOrigin(z) {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    return this.origins_[z];\n  }\n\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n  getResolution(z) {\n    return this.resolutions_[z];\n  }\n\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        const minX = tileCoord[1] * 2;\n        const minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(\n          minX,\n          minX + 1,\n          minY,\n          minY + 1,\n          tempTileRange\n        );\n      }\n      const tileCoordExtent = this.getTileCoordExtent(\n        tileCoord,\n        tempExtent || this.tmpExtent_\n      );\n      return this.getTileRangeForExtentAndZ(\n        tileCoordExtent,\n        tileCoord[0] + 1,\n        tempTileRange\n      );\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n\n    const tileCoordZ = tileCoord[0];\n    const tileCoordX = tileCoord[1];\n    const tileCoordY = tileCoord[2];\n\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(\n        tileCoordX,\n        tileCoordY,\n        tileCoordX,\n        tileCoordY,\n        tempTileRange\n      );\n    }\n\n    if (this.zoomFactor_) {\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      const minX = Math.floor(tileCoordX * factor);\n      const minY = Math.floor(tileCoordY * factor);\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, tempTileRange);\n      }\n\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n    }\n\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\n  }\n\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileRangeForExtentAndZ(extent, z, tempTileRange) {\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);\n    const minX = tmpTileCoord[1];\n    const minY = tmpTileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);\n    const maxX = tmpTileCoord[1];\n    const maxY = tmpTileCoord[2];\n    return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n  getTileCoordCenter(tileCoord) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n      origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\n    ];\n  }\n\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getTileCoordExtent(tileCoord, tempExtent) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    const maxX = minX + tileSize[0] * resolution;\n    const maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\n  }\n\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(\n      coordinate[0],\n      coordinate[1],\n      resolution,\n      false,\n      opt_tileCoord\n    );\n  }\n\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndResolution_(\n    x,\n    y,\n    resolution,\n    reverseIntersectionPolicy,\n    opt_tileCoord\n  ) {\n    const z = this.getZForResolution(resolution);\n    const scale = resolution / this.getResolution(z);\n    const origin = this.getOrigin(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (scale * (x - origin[0])) / resolution / tileSize[0];\n    let tileCoordY = (scale * (origin[1] - y)) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n    let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Zoom level.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(\n      coordinate[0],\n      coordinate[1],\n      z,\n      false,\n      opt_tileCoord\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n  getTileCoordResolution(tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  }\n\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n  getTileSize(z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    }\n    return this.tileSizes_[z];\n  }\n\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n   */\n  getFullTileRange(z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_\n        ? this.getTileRangeForExtentAndZ(this.extent_, z)\n        : null;\n    }\n    return this.fullTileRanges_[z];\n  }\n\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */\n  getZForResolution(resolution, opt_direction) {\n    const z = linearFindNearest(\n      this.resolutions_,\n      resolution,\n      opt_direction || 0\n    );\n    return clamp(z, this.minZoom, this.maxZoom);\n  }\n\n  /**\n   * The tile with the provided tile coordinate intersects the given viewport.\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\n   */\n  tileCoordIntersectsViewport(tileCoord, viewport) {\n    return intersectsLinearRing(\n      viewport,\n      0,\n      viewport.length,\n      2,\n      this.getTileCoordExtent(tileCoord)\n    );\n  }\n\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n  calculateTileRanges_(extent) {\n    const length = this.resolutions_.length;\n    const fullTileRanges = new Array(length);\n    for (let z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  }\n}\n\nexport default TileGrid;\n","/**\n * @module ol/tileurlfunction\n */\nimport {assert} from './asserts.js';\nimport {modulo} from './math.js';\nimport {hash as tileCoordHash} from './tilecoord.js';\n\n/**\n * @param {string} template Template.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplate(template, tileGrid) {\n  const zRegEx = /\\{z\\}/g;\n  const xRegEx = /\\{x\\}/g;\n  const yRegEx = /\\{y\\}/g;\n  const dashYRegEx = /\\{-y\\}/g;\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      return template\n        .replace(zRegEx, tileCoord[0].toString())\n        .replace(xRegEx, tileCoord[1].toString())\n        .replace(yRegEx, tileCoord[2].toString())\n        .replace(dashYRegEx, function () {\n          const z = tileCoord[0];\n          const range = tileGrid.getFullTileRange(z);\n          assert(\n            range,\n            'The {-y} placeholder requires a tile grid with extent'\n          );\n          const y = range.getHeight() - tileCoord[2] - 1;\n          return y.toString();\n        });\n    }\n  );\n}\n\n/**\n * @param {Array<string>} templates Templates.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTemplates(templates, tileGrid) {\n  const len = templates.length;\n  const tileUrlFunctions = new Array(len);\n  for (let i = 0; i < len; ++i) {\n    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\n  }\n  return createFromTileUrlFunctions(tileUrlFunctions);\n}\n\n/**\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\n */\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\n  if (tileUrlFunctions.length === 1) {\n    return tileUrlFunctions[0];\n  }\n  return (\n    /**\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n     * @param {number} pixelRatio Pixel ratio.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @return {string|undefined} Tile URL.\n     */\n    function (tileCoord, pixelRatio, projection) {\n      if (!tileCoord) {\n        return undefined;\n      }\n      const h = tileCoordHash(tileCoord);\n      const index = modulo(h, tileUrlFunctions.length);\n      return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\n    }\n  );\n}\n\n/**\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {number} pixelRatio Pixel ratio.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {string|undefined} Tile URL.\n */\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\n  return undefined;\n}\n\n/**\n * @param {string} url URL.\n * @return {Array<string>} Array of urls.\n */\nexport function expandUrl(url) {\n  const urls = [];\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\n  if (match) {\n    // char range\n    const startCharCode = match[1].charCodeAt(0);\n    const stopCharCode = match[2].charCodeAt(0);\n    let charCode;\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\n    }\n    return urls;\n  }\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\n  if (match) {\n    // number range\n    const stop = parseInt(match[2], 10);\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\n      urls.push(url.replace(match[0], i.toString()));\n    }\n    return urls;\n  }\n  urls.push(url);\n  return urls;\n}\n","/**\n * @module ol/uri\n */\n\n/**\n * Appends query parameters to a URI.\n *\n * @param {string} uri The original URI, which may already have query data.\n * @param {!Object} params An object where keys are URI-encoded parameter keys,\n *     and the values are arbitrary types or arrays.\n * @return {string} The new URI.\n */\nexport function appendParams(uri, params) {\n  const keyParams = [];\n  // Skip any null or undefined parameter values\n  Object.keys(params).forEach(function (k) {\n    if (params[k] !== null && params[k] !== undefined) {\n      keyParams.push(k + '=' + encodeURIComponent(params[k]));\n    }\n  });\n  const qs = keyParams.join('&');\n  // remove any trailing ? or &\n  uri = uri.replace(/[?&]$/, '');\n  // append ? or & depending on whether uri has existing parameters\n  uri += uri.includes('?') ? '&' : '?';\n  return uri + qs;\n}\n","/**\n * @module ol/tilegrid/WMTS\n */\n\nimport TileGrid from './TileGrid.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles\n * outside this extent will be requested by {@link module:ol/source/Tile~TileSource} sources.\n * When no `origin` or `origins` are configured, the `origin` will be set to the\n * top-left corner of the extent.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e.\n * where the `x` and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left\n * to right and downwards. If not specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins,\n * i.e. where the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If\n * given, the array length should match the length of the `resolutions` array, i.e.\n * each resolution can have a different origin. Tile coordinates increase left to\n * right and downwards. If not specified, `extent` or `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each\n * resolution needs to match the zoom level. This means that even if a `minZoom`\n * is configured, the resolutions array will have a length of `maxZoom + 1`\n * @property {!Array<string>} matrixIds matrix IDs. The length of this array needs\n * to match the length of the `resolutions` array.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. The values here are the `TileMatrixWidth` and\n * `TileMatrixHeight` advertised in the GetCapabilities response of the WMTS, and\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent for\n * which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. The length of\n * this array needs to match the length of the `resolutions` array.\n */\n\n/**\n * @classdesc\n * Set the grid pattern for sources accessing WMTS tiled-image servers.\n * @api\n */\nclass WMTSTileGrid extends TileGrid {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    super({\n      extent: options.extent,\n      origin: options.origin,\n      origins: options.origins,\n      resolutions: options.resolutions,\n      tileSize: options.tileSize,\n      tileSizes: options.tileSizes,\n      sizes: options.sizes,\n    });\n\n    /**\n     * @private\n     * @type {!Array<string>}\n     */\n    this.matrixIds_ = options.matrixIds;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @return {string} MatrixId..\n   */\n  getMatrixId(z) {\n    return this.matrixIds_[z];\n  }\n\n  /**\n   * Get the list of matrix identifiers.\n   * @return {Array<string>} MatrixIds.\n   * @api\n   */\n  getMatrixIds() {\n    return this.matrixIds_;\n  }\n}\n\nexport default WMTSTileGrid;\n\n/**\n * Create a tile grid from a WMTS capabilities matrix set and an\n * optional TileMatrixSetLimits.\n * @param {Object} matrixSet An object representing a matrixSet in the\n *     capabilities document.\n * @param {import(\"../extent.js\").Extent} [extent] An optional extent to restrict the tile\n *     ranges the server provides.\n * @param {Array<Object>} [matrixLimits] An optional object representing\n *     the available matrices for tileGrid.\n * @return {WMTSTileGrid} WMTS tileGrid instance.\n * @api\n */\nexport function createFromCapabilitiesMatrixSet(\n  matrixSet,\n  extent,\n  matrixLimits\n) {\n  /** @type {!Array<number>} */\n  const resolutions = [];\n  /** @type {!Array<string>} */\n  const matrixIds = [];\n  /** @type {!Array<import(\"../coordinate.js\").Coordinate>} */\n  const origins = [];\n  /** @type {!Array<number|import(\"../size.js\").Size>} */\n  const tileSizes = [];\n  /** @type {!Array<import(\"../size.js\").Size>} */\n  const sizes = [];\n\n  matrixLimits = matrixLimits !== undefined ? matrixLimits : [];\n\n  const supportedCRSPropName = 'SupportedCRS';\n  const matrixIdsPropName = 'TileMatrix';\n  const identifierPropName = 'Identifier';\n  const scaleDenominatorPropName = 'ScaleDenominator';\n  const topLeftCornerPropName = 'TopLeftCorner';\n  const tileWidthPropName = 'TileWidth';\n  const tileHeightPropName = 'TileHeight';\n\n  const code = matrixSet[supportedCRSPropName];\n  const projection = getProjection(code);\n  const metersPerUnit = projection.getMetersPerUnit();\n  // swap origin x and y coordinates if axis orientation is lat/long\n  const switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  matrixSet[matrixIdsPropName].sort(function (a, b) {\n    return b[scaleDenominatorPropName] - a[scaleDenominatorPropName];\n  });\n\n  matrixSet[matrixIdsPropName].forEach(function (elt) {\n    let matrixAvailable;\n    // use of matrixLimits to filter TileMatrices from GetCapabilities\n    // TileMatrixSet from unavailable matrix levels.\n    if (matrixLimits.length > 0) {\n      matrixAvailable = matrixLimits.find(function (elt_ml) {\n        if (elt[identifierPropName] == elt_ml[matrixIdsPropName]) {\n          return true;\n        }\n        // Fallback for tileMatrix identifiers that don't get prefixed\n        // by their tileMatrixSet identifiers.\n        if (!elt[identifierPropName].includes(':')) {\n          return (\n            matrixSet[identifierPropName] + ':' + elt[identifierPropName] ===\n            elt_ml[matrixIdsPropName]\n          );\n        }\n        return false;\n      });\n    } else {\n      matrixAvailable = true;\n    }\n\n    if (matrixAvailable) {\n      matrixIds.push(elt[identifierPropName]);\n      const resolution =\n        (elt[scaleDenominatorPropName] * 0.28e-3) / metersPerUnit;\n      const tileWidth = elt[tileWidthPropName];\n      const tileHeight = elt[tileHeightPropName];\n      if (switchOriginXY) {\n        origins.push([\n          elt[topLeftCornerPropName][1],\n          elt[topLeftCornerPropName][0],\n        ]);\n      } else {\n        origins.push(elt[topLeftCornerPropName]);\n      }\n      resolutions.push(resolution);\n      tileSizes.push(\n        tileWidth == tileHeight ? tileWidth : [tileWidth, tileHeight]\n      );\n      sizes.push([elt['MatrixWidth'], elt['MatrixHeight']]);\n    }\n  });\n\n  return new WMTSTileGrid({\n    extent: extent,\n    origins: origins,\n    resolutions: resolutions,\n    matrixIds: matrixIds,\n    tileSizes: tileSizes,\n    sizes: sizes,\n  });\n}\n","/**\n * @module ol/source/Vector\n */\n\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RBush from '../structs/RBush.js';\nimport Source from './Source.js';\nimport VectorEventType from './VectorEventType.js';\nimport {TRUE, VOID} from '../functions.js';\nimport {all as allStrategy} from '../loadingstrategy.js';\nimport {assert} from '../asserts.js';\nimport {containsExtent, equals, wrapAndSliceX} from '../extent.js';\nimport {extend} from '../array.js';\nimport {getUid} from '../util.js';\nimport {isEmpty} from '../obj.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {xhr} from '../featureloader.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number, import(\"../proj/Projection.js\").default): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this\n * type.\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n */\nexport class VectorSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default<Geometry>} [feature] Feature.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} [features] Features.\n   */\n  constructor(type, feature, features) {\n    super(type);\n\n    /**\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\n     * @type {import(\"../Feature.js\").default<Geometry>|undefined}\n     * @api\n     */\n    this.feature = feature;\n\n    /**\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\n     * @type {Array<import(\"../Feature.js\").default<Geometry>>|undefined}\n     * @api\n     */\n    this.features = features;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\n */\n\n/**\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default<Geometry>>|Collection<import(\"../Feature.js\").default<Geometry>>} [features]\n * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\n * will only fire if the `success` and `failure` callbacks are used.\n *\n * Example:\n *\n * ```js\n * import Vector from 'ol/source/Vector.js';\n * import GeoJSON from 'ol/format/GeoJSON.js';\n * import {bbox} from 'ol/loadingstrategy.js';\n *\n * const vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection, success, failure) {\n *      const proj = projection.getCode();\n *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      const xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      const onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *        failure();\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);\n *          vectorSource.addFeatures(features);\n *          success(features);\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox,\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy.all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection~Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\n */\nclass VectorSource extends Source {\n  /**\n   * @param {Options<Geometry>} [options] Vector source options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    super({\n      attributions: options.attributions,\n      interpolate: true,\n      projection: undefined,\n      state: 'ready',\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    });\n\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {VectorSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    this.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, '`format` must be set when `url` is set');\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(\n        this.url_,\n        /** @type {import(\"../format/Feature.js\").default} */ (this.format_)\n      );\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    this.strategy_ =\n      options.strategy !== undefined ? options.strategy : allStrategy;\n\n    const useSpatialIndex =\n      options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.loadingExtentsCount_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features by uid (using getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.uidIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default<Geometry>>|null}\n     */\n    this.featuresCollection_ = null;\n\n    /** @type {Collection<import(\"../Feature.js\").default<Geometry>>} */\n    let collection;\n    /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */\n    let features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n  }\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,\n   * meaning that if a feature with a duplicate id is added in the collection, it will\n   * be removed from it right away.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\n   * @api\n   */\n  addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  }\n\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n  addFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n\n    if (!this.addToIndex_(featureKey, feature)) {\n      if (this.featuresCollection_) {\n        this.featuresCollection_.remove(feature);\n      }\n      return;\n    }\n\n    this.setupChangeEvents_(featureKey, feature);\n\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature)\n    );\n  }\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @private\n   */\n  setupChangeEvents_(featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [\n      listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),\n      listen(\n        feature,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleFeatureChange_,\n        this\n      ),\n    ];\n  }\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  addToIndex_(featureKey, feature) {\n    let valid = true;\n    const id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    }\n    if (valid) {\n      assert(\n        !(featureKey in this.uidIndex_),\n        'The passed `feature` was already added to the source'\n      );\n      this.uidIndex_[featureKey] = feature;\n    }\n    return valid;\n  }\n\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\n   * @api\n   */\n  addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  }\n\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\n   * @protected\n   */\n  addFeaturesInternal(features) {\n    const extents = [];\n    const newFeatures = [];\n    const geometryFeatures = [];\n\n    for (let i = 0, length = features.length; i < length; i++) {\n      const feature = features[i];\n      const featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      const feature = newFeatures[i];\n      const featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n\n      const geometry = feature.getGeometry();\n      if (geometry) {\n        const extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n\n    if (this.hasListener(VectorEventType.ADDFEATURE)) {\n      for (let i = 0, length = newFeatures.length; i < length; i++) {\n        this.dispatchEvent(\n          new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i])\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\n   * @private\n   */\n  bindFeaturesCollection_(collection) {\n    let modifyingCollection = false;\n    this.addEventListener(\n      VectorEventType.ADDFEATURE,\n      /**\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.push(evt.feature);\n          modifyingCollection = false;\n        }\n      }\n    );\n    this.addEventListener(\n      VectorEventType.REMOVEFEATURE,\n      /**\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.remove(evt.feature);\n          modifyingCollection = false;\n        }\n      }\n    );\n    collection.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent<import(\"../Feature.js\").default<Geometry>>} evt The collection event\n       */\n      (evt) => {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.addFeature(evt.element);\n          modifyingCollection = false;\n        }\n      }\n    );\n    collection.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent<import(\"../Feature.js\").default<Geometry>>} evt The collection event\n       */\n      (evt) => {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.removeFeature(evt.element);\n          modifyingCollection = false;\n        }\n      }\n    );\n    this.featuresCollection_ = collection;\n  }\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.\n   * @api\n   */\n  clear(fast) {\n    if (fast) {\n      for (const featureId in this.featureChangeKeys_) {\n        const keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.uidIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        const removeAndIgnoreReturn = (feature) => {\n          this.removeFeatureInternal(feature);\n        };\n        this.featuresRtree_.forEach(removeAndIgnoreReturn);\n        for (const id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.nullGeometryFeatures_ = {};\n\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  }\n\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      const geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      }\n      return undefined;\n    });\n  }\n\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(\n      extent,\n      /**\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n       * @return {T|undefined} The return value from the last call to the callback.\n       */\n      function (feature) {\n        const geometry = feature.getGeometry();\n        if (geometry.intersectsExtent(extent)) {\n          const result = callback(feature);\n          if (result) {\n            return result;\n          }\n        }\n      }\n    );\n  }\n\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection~Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default<Geometry>>|null} The collection of features.\n   * @api\n   */\n  getFeaturesCollection() {\n    return this.featuresCollection_;\n  }\n\n  /**\n   * Get a snapshot of the features currently on the source in random order. The returned array\n   * is a copy, the features are references to the features in the source.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeatures() {\n    let features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray().slice(0);\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, Object.values(this.nullGeometryFeatures_));\n      }\n    }\n    return /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */ (\n      features\n    );\n  }\n\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeaturesAtCoordinate(coordinate) {\n    const features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  }\n\n  /**\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * When `useSpatialIndex` is set to false, this method will return all\n   * features.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../proj/Projection.js\").default} [projection] Include features\n   * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeaturesInExtent(extent, projection) {\n    if (this.featuresRtree_) {\n      const multiWorld = projection && projection.canWrapX() && this.getWrapX();\n\n      if (!multiWorld) {\n        return this.featuresRtree_.getInExtent(extent);\n      }\n\n      const extents = wrapAndSliceX(extent, projection);\n\n      return [].concat(\n        ...extents.map((anExtent) => this.featuresRtree_.getInExtent(anExtent))\n      );\n    }\n    if (this.featuresCollection_) {\n      return this.featuresCollection_.getArray().slice(0);\n    }\n    return [];\n  }\n\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>):boolean} [filter] Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\n   * @api\n   */\n  getClosestFeatureToCoordinate(coordinate, filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let closestFeature = null;\n    const closestPoint = [NaN, NaN];\n    let minSquaredDistance = Infinity;\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\n    filter = filter ? filter : TRUE;\n    this.featuresRtree_.forEachInExtent(\n      extent,\n      /**\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n       */\n      function (feature) {\n        if (filter(feature)) {\n          const geometry = feature.getGeometry();\n          const previousMinSquaredDistance = minSquaredDistance;\n          minSquaredDistance = geometry.closestPointXY(\n            x,\n            y,\n            closestPoint,\n            minSquaredDistance\n          );\n          if (minSquaredDistance < previousMinSquaredDistance) {\n            closestFeature = feature;\n            // This is sneaky.  Reduce the extent that it is currently being\n            // searched while the R-Tree traversal using this same extent object\n            // is still in progress.  This is safe because the new extent is\n            // strictly contained by the old extent.\n            const minDistance = Math.sqrt(minSquaredDistance);\n            extent[0] = x - minDistance;\n            extent[1] = y - minDistance;\n            extent[2] = x + minDistance;\n            extent[3] = y + minDistance;\n          }\n        }\n      }\n    );\n    return closestFeature;\n  }\n\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent} [extent] Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent(extent) {\n    return this.featuresRtree_.getExtent(extent);\n  }\n\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\n   * @api\n   */\n  getFeatureById(id) {\n    const feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  }\n\n  /**\n   * Get a feature by its internal unique identifier (using `getUid`).\n   *\n   * @param {string} uid Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\n   */\n  getFeatureByUid(uid) {\n    const feature = this.uidIndex_[uid];\n    return feature !== undefined ? feature : null;\n  }\n\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  handleFeatureChange_(event) {\n    const feature = /** @type {import(\"../Feature.js\").default<Geometry>} */ (\n      event.target\n    );\n    const featureKey = getUid(feature);\n    const geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      const extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    const id = feature.getId();\n    if (id !== undefined) {\n      const sid = id.toString();\n      if (this.idIndex_[sid] !== feature) {\n        this.removeFromIdIndex_(feature);\n        this.idIndex_[sid] = feature;\n      }\n    } else {\n      this.removeFromIdIndex_(feature);\n      this.uidIndex_[featureKey] = feature;\n    }\n    this.changed();\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature)\n    );\n  }\n\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  hasFeature(feature) {\n    const id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    }\n    return getUid(feature) in this.uidIndex_;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    if (this.featuresRtree_) {\n      return (\n        this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_)\n      );\n    }\n    if (this.featuresCollection_) {\n      return this.featuresCollection_.getLength() === 0;\n    }\n    return true;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  loadFeatures(extent, resolution, projection) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    const extentsToLoad = this.strategy_(extent, resolution, projection);\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      const extentToLoad = extentsToLoad[i];\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(\n        extentToLoad,\n        /**\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n         * @return {boolean} Contains.\n         */\n        function (object) {\n          return containsExtent(object.extent, extentToLoad);\n        }\n      );\n      if (!alreadyLoaded) {\n        ++this.loadingExtentsCount_;\n        this.dispatchEvent(\n          new VectorSourceEvent(VectorEventType.FEATURESLOADSTART)\n        );\n        this.loader_.call(\n          this,\n          extentToLoad,\n          resolution,\n          projection,\n          (features) => {\n            --this.loadingExtentsCount_;\n            this.dispatchEvent(\n              new VectorSourceEvent(\n                VectorEventType.FEATURESLOADEND,\n                undefined,\n                features\n              )\n            );\n          },\n          () => {\n            --this.loadingExtentsCount_;\n            this.dispatchEvent(\n              new VectorSourceEvent(VectorEventType.FEATURESLOADERROR)\n            );\n          }\n        );\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\n      }\n    }\n    this.loading =\n      this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\n  }\n\n  refresh() {\n    this.clear(true);\n    this.loadedExtentsRtree_.clear();\n    super.refresh();\n  }\n\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  removeLoadedExtent(extent) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    let obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  }\n\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\n   * @api\n   */\n  removeFeature(feature) {\n    if (!feature) {\n      return;\n    }\n    const featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    const result = this.removeFeatureInternal(feature);\n    if (result) {\n      this.changed();\n    }\n  }\n\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {import(\"../Feature.js\").default<Geometry>|undefined} The removed feature\n   *     (or undefined if the feature was not found).\n   * @protected\n   */\n  removeFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n    const featureChangeKeys = this.featureChangeKeys_[featureKey];\n    if (!featureChangeKeys) {\n      return;\n    }\n    featureChangeKeys.forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    const id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    }\n    delete this.uidIndex_[featureKey];\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature)\n    );\n    return feature;\n  }\n\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  removeFromIdIndex_(feature) {\n    let removed = false;\n    for (const id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  }\n\n  /**\n   * Set the new loader of the source. The next render cycle will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n  /**\n   * Points the source to a new url. The next render cycle will use the new url.\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n   * @api\n   */\n  setUrl(url) {\n    assert(this.format_, '`format` must be set when `url` is set');\n    this.url_ = url;\n    this.setLoader(xhr(url, this.format_));\n  }\n}\n\nexport default VectorSource;\n","/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport {createOrUpdate, equals} from '../extent.js';\nimport {getUid} from '../util.js';\nimport {isEmpty} from '../obj.js';\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nclass RBush {\n  /**\n   * @param {number} [maxEntries] Max entries.\n   */\n  constructor(maxEntries) {\n    /**\n     * @private\n     */\n    this.rbush_ = new RBush_(maxEntries);\n\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n    this.items_ = {};\n  }\n\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  insert(extent, value) {\n    /** @type {Entry} */\n    const item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value,\n    };\n\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  }\n\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n  load(extents, values) {\n    const items = new Array(values.length);\n    for (let i = 0, l = values.length; i < l; i++) {\n      const extent = extents[i];\n      const value = values[i];\n\n      /** @type {Entry} */\n      const item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value,\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n    this.rbush_.load(items);\n  }\n\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n  remove(value) {\n    const uid = getUid(value);\n\n    // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n    const item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  }\n\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  update(extent, value) {\n    const item = this.items_[getUid(value)];\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  }\n\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n  getAll() {\n    const items = this.rbush_.all();\n    return items.map(function (item) {\n      return item.value;\n    });\n  }\n\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n  getInExtent(extent) {\n    /** @type {Entry} */\n    const bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n    };\n    const items = this.rbush_.search(bbox);\n    return items.map(function (item) {\n      return item.value;\n    });\n  }\n\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n  forEach(callback) {\n    return this.forEach_(this.getAll(), callback);\n  }\n\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n  forEachInExtent(extent, callback) {\n    return this.forEach_(this.getInExtent(extent), callback);\n  }\n\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(T): *} callback Callback.\n   * @private\n   * @return {*} Callback return value.\n   */\n  forEach_(values, callback) {\n    let result;\n    for (let i = 0, l = values.length; i < l; i++) {\n      result = callback(values[i]);\n      if (result) {\n        return result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.items_);\n  }\n\n  /**\n   * Remove all values from the RBush.\n   */\n  clear() {\n    this.rbush_.clear();\n    this.items_ = {};\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  getExtent(extent) {\n    const data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, extent);\n  }\n\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n  concat(rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n    for (const i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  }\n}\n\nexport default RBush;\n","!function(t,i){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=i():\"function\"==typeof define&&define.amd?define(i):(t=t||self).RBush=i()}(this,function(){\"use strict\";function t(t,r,e,a,h){!function t(n,r,e,a,h){for(;a>e;){if(a-e>600){var o=a-e+1,s=r-e+1,l=Math.log(o),f=.5*Math.exp(2*l/3),u=.5*Math.sqrt(l*f*(o-f)/o)*(s-o/2<0?-1:1),m=Math.max(e,Math.floor(r-s*f/o+u)),c=Math.min(a,Math.floor(r+(o-s)*f/o+u));t(n,r,m,c,h)}var p=n[r],d=e,x=a;for(i(n,e,r),h(n[a],p)>0&&i(n,e,a);d<x;){for(i(n,d,x),d++,x--;h(n[d],p)<0;)d++;for(;h(n[x],p)>0;)x--}0===h(n[e],p)?i(n,e,x):i(n,++x,a),x<=r&&(e=x+1),r<=x&&(a=x-1)}}(t,r,e||0,a||t.length-1,h||n)}function i(t,i,n){var r=t[i];t[i]=t[n],t[n]=r}function n(t,i){return t<i?-1:t>i?1:0}var r=function(t){void 0===t&&(t=9),this._maxEntries=Math.max(4,t),this._minEntries=Math.max(2,Math.ceil(.4*this._maxEntries)),this.clear()};function e(t,i,n){if(!n)return i.indexOf(t);for(var r=0;r<i.length;r++)if(n(t,i[r]))return r;return-1}function a(t,i){h(t,0,t.children.length,i,t)}function h(t,i,n,r,e){e||(e=p(null)),e.minX=1/0,e.minY=1/0,e.maxX=-1/0,e.maxY=-1/0;for(var a=i;a<n;a++){var h=t.children[a];o(e,t.leaf?r(h):h)}return e}function o(t,i){return t.minX=Math.min(t.minX,i.minX),t.minY=Math.min(t.minY,i.minY),t.maxX=Math.max(t.maxX,i.maxX),t.maxY=Math.max(t.maxY,i.maxY),t}function s(t,i){return t.minX-i.minX}function l(t,i){return t.minY-i.minY}function f(t){return(t.maxX-t.minX)*(t.maxY-t.minY)}function u(t){return t.maxX-t.minX+(t.maxY-t.minY)}function m(t,i){return t.minX<=i.minX&&t.minY<=i.minY&&i.maxX<=t.maxX&&i.maxY<=t.maxY}function c(t,i){return i.minX<=t.maxX&&i.minY<=t.maxY&&i.maxX>=t.minX&&i.maxY>=t.minY}function p(t){return{children:t,height:1,leaf:!0,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0}}function d(i,n,r,e,a){for(var h=[n,r];h.length;)if(!((r=h.pop())-(n=h.pop())<=e)){var o=n+Math.ceil((r-n)/e/2)*e;t(i,o,n,r,a),h.push(n,o,o,r)}}return r.prototype.all=function(){return this._all(this.data,[])},r.prototype.search=function(t){var i=this.data,n=[];if(!c(t,i))return n;for(var r=this.toBBox,e=[];i;){for(var a=0;a<i.children.length;a++){var h=i.children[a],o=i.leaf?r(h):h;c(t,o)&&(i.leaf?n.push(h):m(t,o)?this._all(h,n):e.push(h))}i=e.pop()}return n},r.prototype.collides=function(t){var i=this.data;if(!c(t,i))return!1;for(var n=[];i;){for(var r=0;r<i.children.length;r++){var e=i.children[r],a=i.leaf?this.toBBox(e):e;if(c(t,a)){if(i.leaf||m(t,a))return!0;n.push(e)}}i=n.pop()}return!1},r.prototype.load=function(t){if(!t||!t.length)return this;if(t.length<this._minEntries){for(var i=0;i<t.length;i++)this.insert(t[i]);return this}var n=this._build(t.slice(),0,t.length-1,0);if(this.data.children.length)if(this.data.height===n.height)this._splitRoot(this.data,n);else{if(this.data.height<n.height){var r=this.data;this.data=n,n=r}this._insert(n,this.data.height-n.height-1,!0)}else this.data=n;return this},r.prototype.insert=function(t){return t&&this._insert(t,this.data.height-1),this},r.prototype.clear=function(){return this.data=p([]),this},r.prototype.remove=function(t,i){if(!t)return this;for(var n,r,a,h=this.data,o=this.toBBox(t),s=[],l=[];h||s.length;){if(h||(h=s.pop(),r=s[s.length-1],n=l.pop(),a=!0),h.leaf){var f=e(t,h.children,i);if(-1!==f)return h.children.splice(f,1),s.push(h),this._condense(s),this}a||h.leaf||!m(h,o)?r?(n++,h=r.children[n],a=!1):h=null:(s.push(h),l.push(n),n=0,r=h,h=h.children[0])}return this},r.prototype.toBBox=function(t){return t},r.prototype.compareMinX=function(t,i){return t.minX-i.minX},r.prototype.compareMinY=function(t,i){return t.minY-i.minY},r.prototype.toJSON=function(){return this.data},r.prototype.fromJSON=function(t){return this.data=t,this},r.prototype._all=function(t,i){for(var n=[];t;)t.leaf?i.push.apply(i,t.children):n.push.apply(n,t.children),t=n.pop();return i},r.prototype._build=function(t,i,n,r){var e,h=n-i+1,o=this._maxEntries;if(h<=o)return a(e=p(t.slice(i,n+1)),this.toBBox),e;r||(r=Math.ceil(Math.log(h)/Math.log(o)),o=Math.ceil(h/Math.pow(o,r-1))),(e=p([])).leaf=!1,e.height=r;var s=Math.ceil(h/o),l=s*Math.ceil(Math.sqrt(o));d(t,i,n,l,this.compareMinX);for(var f=i;f<=n;f+=l){var u=Math.min(f+l-1,n);d(t,f,u,s,this.compareMinY);for(var m=f;m<=u;m+=s){var c=Math.min(m+s-1,u);e.children.push(this._build(t,m,c,r-1))}}return a(e,this.toBBox),e},r.prototype._chooseSubtree=function(t,i,n,r){for(;r.push(i),!i.leaf&&r.length-1!==n;){for(var e=1/0,a=1/0,h=void 0,o=0;o<i.children.length;o++){var s=i.children[o],l=f(s),u=(m=t,c=s,(Math.max(c.maxX,m.maxX)-Math.min(c.minX,m.minX))*(Math.max(c.maxY,m.maxY)-Math.min(c.minY,m.minY))-l);u<a?(a=u,e=l<e?l:e,h=s):u===a&&l<e&&(e=l,h=s)}i=h||i.children[0]}var m,c;return i},r.prototype._insert=function(t,i,n){var r=n?t:this.toBBox(t),e=[],a=this._chooseSubtree(r,this.data,i,e);for(a.children.push(t),o(a,r);i>=0&&e[i].children.length>this._maxEntries;)this._split(e,i),i--;this._adjustParentBBoxes(r,e,i)},r.prototype._split=function(t,i){var n=t[i],r=n.children.length,e=this._minEntries;this._chooseSplitAxis(n,e,r);var h=this._chooseSplitIndex(n,e,r),o=p(n.children.splice(h,n.children.length-h));o.height=n.height,o.leaf=n.leaf,a(n,this.toBBox),a(o,this.toBBox),i?t[i-1].children.push(o):this._splitRoot(n,o)},r.prototype._splitRoot=function(t,i){this.data=p([t,i]),this.data.height=t.height+1,this.data.leaf=!1,a(this.data,this.toBBox)},r.prototype._chooseSplitIndex=function(t,i,n){for(var r,e,a,o,s,l,u,m=1/0,c=1/0,p=i;p<=n-i;p++){var d=h(t,0,p,this.toBBox),x=h(t,p,n,this.toBBox),v=(e=d,a=x,o=void 0,s=void 0,l=void 0,u=void 0,o=Math.max(e.minX,a.minX),s=Math.max(e.minY,a.minY),l=Math.min(e.maxX,a.maxX),u=Math.min(e.maxY,a.maxY),Math.max(0,l-o)*Math.max(0,u-s)),M=f(d)+f(x);v<m?(m=v,r=p,c=M<c?M:c):v===m&&M<c&&(c=M,r=p)}return r||n-i},r.prototype._chooseSplitAxis=function(t,i,n){var r=t.leaf?this.compareMinX:s,e=t.leaf?this.compareMinY:l;this._allDistMargin(t,i,n,r)<this._allDistMargin(t,i,n,e)&&t.children.sort(r)},r.prototype._allDistMargin=function(t,i,n,r){t.children.sort(r);for(var e=this.toBBox,a=h(t,0,i,e),s=h(t,n-i,n,e),l=u(a)+u(s),f=i;f<n-i;f++){var m=t.children[f];o(a,t.leaf?e(m):m),l+=u(a)}for(var c=n-i-1;c>=i;c--){var p=t.children[c];o(s,t.leaf?e(p):p),l+=u(s)}return l},r.prototype._adjustParentBBoxes=function(t,i,n){for(var r=n;r>=0;r--)o(i[r],t)},r.prototype._condense=function(t){for(var i=t.length-1,n=void 0;i>=0;i--)0===t[i].children.length?i>0?(n=t[i-1].children).splice(n.indexOf(t[i]),1):this.clear():a(t[i],this.toBBox)},r});\n","/**\n * @module ol/source/VectorEventType\n */\n\n/**\n * @enum {string}\n */\nexport default {\n  /**\n   * Triggered when a feature is added to the source.\n   * @event module:ol/source/Vector.VectorSourceEvent#addfeature\n   * @api\n   */\n  ADDFEATURE: 'addfeature',\n\n  /**\n   * Triggered when a feature is updated.\n   * @event module:ol/source/Vector.VectorSourceEvent#changefeature\n   * @api\n   */\n  CHANGEFEATURE: 'changefeature',\n\n  /**\n   * Triggered when the clear method is called on the source.\n   * @event module:ol/source/Vector.VectorSourceEvent#clear\n   * @api\n   */\n  CLEAR: 'clear',\n\n  /**\n   * Triggered when a feature is removed from the source.\n   * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.\n   * @event module:ol/source/Vector.VectorSourceEvent#removefeature\n   * @api\n   */\n  REMOVEFEATURE: 'removefeature',\n\n  /**\n   * Triggered when features starts loading.\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart\n   * @api\n   */\n  FEATURESLOADSTART: 'featuresloadstart',\n\n  /**\n   * Triggered when features finishes loading.\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend\n   * @api\n   */\n  FEATURESLOADEND: 'featuresloadend',\n\n  /**\n   * Triggered if feature loading results in an error.\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror\n   * @api\n   */\n  FEATURESLOADERROR: 'featuresloaderror',\n};\n\n/**\n * @typedef {'addfeature'|'changefeature'|'clear'|'removefeature'|'featuresloadstart'|'featuresloadend'|'featuresloaderror'} VectorSourceEventTypes\n */\n","/**\n * @module ol/loadingstrategy\n */\n\nimport {fromUserExtent, fromUserResolution, toUserExtent} from './proj.js';\n\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj.js\").Projection} projection Projection.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution, projection) {\n      const z = tileGrid.getZForResolution(\n        fromUserResolution(resolution, projection)\n      );\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\n        fromUserExtent(extent, projection),\n        z\n      );\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n      const extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n      const tileCoord = [z, 0, 0];\n      for (\n        tileCoord[1] = tileRange.minX;\n        tileCoord[1] <= tileRange.maxX;\n        ++tileCoord[1]\n      ) {\n        for (\n          tileCoord[2] = tileRange.minY;\n          tileCoord[2] <= tileRange.maxY;\n          ++tileCoord[2]\n        ) {\n          extents.push(\n            toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection)\n          );\n        }\n      }\n      return extents;\n    }\n  );\n}\n","/**\n * @module ol/featureloader\n */\nimport {VOID} from './functions.js';\n\n/**\n *\n * @type {boolean}\n * @private\n */\nlet withCredentials = false;\n\n/**\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\n * load features.\n *\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an\n * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\n * `'featuresloaderror'` events. `this` within the function is bound to the\n * {@link module:ol/source/Vector~VectorSource} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\n *           import(\"./extent.js\").Extent,\n *           number,\n *           import(\"./proj/Projection.js\").default,\n *           function(Array<import(\"./Feature.js\").default>): void=,\n *           function(): void=): void} FeatureLoader\n * @api\n */\n\n/**\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection~Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @param {function(Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default): void} success Success\n *      Function called with the loaded features and optionally with the data projection.\n * @param {function(): void} failure Failure\n *      Function called when loading failed.\n */\nexport function loadFeaturesXhr(\n  url,\n  format,\n  extent,\n  resolution,\n  projection,\n  success,\n  failure\n) {\n  const xhr = new XMLHttpRequest();\n  xhr.open(\n    'GET',\n    typeof url === 'function' ? url(extent, resolution, projection) : url,\n    true\n  );\n  if (format.getType() == 'arraybuffer') {\n    xhr.responseType = 'arraybuffer';\n  }\n  xhr.withCredentials = withCredentials;\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  xhr.onload = function (event) {\n    // status will be 0 for file:// urls\n    if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {\n      const type = format.getType();\n      /** @type {Document|Node|Object|string|undefined} */\n      let source;\n      if (type == 'json' || type == 'text') {\n        source = xhr.responseText;\n      } else if (type == 'xml') {\n        source = xhr.responseXML;\n        if (!source) {\n          source = new DOMParser().parseFromString(\n            xhr.responseText,\n            'application/xml'\n          );\n        }\n      } else if (type == 'arraybuffer') {\n        source = /** @type {ArrayBuffer} */ (xhr.response);\n      }\n      if (source) {\n        success(\n          /** @type {Array<import(\"./Feature.js\").default>} */\n          (\n            format.readFeatures(source, {\n              extent: extent,\n              featureProjection: projection,\n            })\n          ),\n          format.readProjection(source)\n        );\n      } else {\n        failure();\n      }\n    } else {\n      failure();\n    }\n  };\n  /**\n   * @private\n   */\n  xhr.onerror = failure;\n  xhr.send();\n}\n\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\n   * @param {function(Array<import(\"./Feature.js\").default>): void} [success] Success\n   *      Function called when loading succeeded.\n   * @param {function(): void} [failure] Failure\n   *      Function called when loading failed.\n   */\n  return function (extent, resolution, projection, success, failure) {\n    const source = /** @type {import(\"./source/Vector\").default} */ (this);\n    loadFeaturesXhr(\n      url,\n      format,\n      extent,\n      resolution,\n      projection,\n      /**\n       * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n       * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n       * projection.\n       */\n      function (features, dataProjection) {\n        source.addFeatures(features);\n        if (success !== undefined) {\n          success(features);\n        }\n      },\n      /* FIXME handle error */ failure ? failure : VOID\n    );\n  };\n}\n\n/**\n * Setter for the withCredentials configuration for the XHR.\n *\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\n * @api\n */\nexport function setWithCredentials(xhrWithCredentials) {\n  withCredentials = xhrWithCredentials;\n}\n","/**\n * @module ol/format/GeoJSON\n */\n\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {get as getProjection} from '../proj.js';\nimport {isEmpty} from '../obj.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nclass GeoJSON extends JSONFeature {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ? options.dataProjection : 'EPSG:4326'\n    );\n\n    if (options.featureProjection) {\n      /**\n       * @type {import(\"../proj/Projection.js\").default}\n       */\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n\n    this.supportedMediaTypes = [\n      'application/geo+json',\n      'application/vnd.geo+json',\n    ];\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\n        'properties': null,\n      };\n    }\n\n    const geometry = readGeometry(geoJSONFeature['geometry'], options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (\n      this.extractGeometryName_ &&\n      'geometry_name' in geoJSONFeature !== undefined\n    ) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(geometry);\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (\n        object\n      );\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, options)];\n    }\n    return features;\n  }\n\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return readGeometry(object, options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        throw new Error('Unknown SRS type');\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n  writeFeatureObject(feature, options) {\n    options = this.adaptOptions(options);\n\n    /** @type {GeoJSONFeature} */\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null,\n    };\n\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    if (!feature.hasProperties()) {\n      return object;\n    }\n\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, options);\n\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, options) {\n    options = this.adaptOptions(options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects,\n    };\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, options) {\n    return writeGeometry(geometry, this.adaptOptions(options));\n  }\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, options) {\n  if (!object) {\n    return null;\n  }\n\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n  let geometry;\n  switch (object['type']) {\n    case 'Point': {\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n      break;\n    }\n    case 'LineString': {\n      geometry = readLineStringGeometry(\n        /** @type {GeoJSONLineString} */ (object)\n      );\n      break;\n    }\n    case 'Polygon': {\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n      break;\n    }\n    case 'MultiPoint': {\n      geometry = readMultiPointGeometry(\n        /** @type {GeoJSONMultiPoint} */ (object)\n      );\n      break;\n    }\n    case 'MultiLineString': {\n      geometry = readMultiLineStringGeometry(\n        /** @type {GeoJSONMultiLineString} */ (object)\n      );\n      break;\n    }\n    case 'MultiPolygon': {\n      geometry = readMultiPolygonGeometry(\n        /** @type {GeoJSONMultiPolygon} */ (object)\n      );\n      break;\n    }\n    case 'GeometryCollection': {\n      geometry = readGeometryCollectionGeometry(\n        /** @type {GeoJSONGeometryCollection} */ (object)\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unsupported GeoJSON type: ' + object['type']);\n    }\n  }\n  return transformGeometryWithOptions(geometry, false, options);\n}\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, options) {\n  const geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     */\n    function (geometry) {\n      return readGeometry(geometry, options);\n    }\n  );\n  return new GeometryCollection(geometries);\n}\n\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, options) {\n  geometry = transformGeometryWithOptions(geometry, true, options);\n  const type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  let geoJSON;\n  switch (type) {\n    case 'Point': {\n      geoJSON = writePointGeometry(/** @type {Point} */ (geometry), options);\n      break;\n    }\n    case 'LineString': {\n      geoJSON = writeLineStringGeometry(\n        /** @type {LineString} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'Polygon': {\n      geoJSON = writePolygonGeometry(\n        /** @type {Polygon} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'MultiPoint': {\n      geoJSON = writeMultiPointGeometry(\n        /** @type {MultiPoint} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'MultiLineString': {\n      geoJSON = writeMultiLineStringGeometry(\n        /** @type {MultiLineString} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'MultiPolygon': {\n      geoJSON = writeMultiPolygonGeometry(\n        /** @type {MultiPolygon} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'GeometryCollection': {\n      geoJSON = writeGeometryCollectionGeometry(\n        /** @type {GeometryCollection} */ (geometry),\n        options\n      );\n      break;\n    }\n    case 'Circle': {\n      geoJSON = {\n        type: 'GeometryCollection',\n        geometries: [],\n      };\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return geoJSON;\n}\n\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, options) {\n  options = Object.assign({}, options);\n  delete options.featureProjection;\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries,\n  };\n}\n\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, options) {\n  let right;\n  if (options) {\n    right = options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\nexport default GeoJSON;\n","/**\n * @module ol/Feature\n */\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport {assert} from './asserts.js';\nimport {listen, unlistenByKey} from './events.js';\n\n/**\n * @typedef {typeof Feature|typeof import(\"./render/Feature.js\").default} FeatureClass\n */\n\n/**\n * @typedef {Feature|import(\"./render/Feature.js\").default} FeatureLike\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types|'change:geometry', import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types\n *     |'change:geometry', Return>} FeatureOnSignature\n */\n\n/***\n * @template Geometry\n * @typedef {Object<string, *> & { geometry?: Geometry }} ObjectWithGeometry\n */\n\n/**\n * @classdesc\n * A vector object for geographic features with a geometry and other\n * attribute properties, similar to the features in vector file formats like\n * GeoJSON.\n *\n * Features can be styled individually with `setStyle`; otherwise they use the\n * style of their vector layer.\n *\n * Note that attribute properties are set as {@link module:ol/Object~BaseObject} properties on\n * the feature object, so they are observable, and have get/set accessors.\n *\n * Typically, a feature has a single geometry property. You can set the\n * geometry using the `setGeometry` method and get it with `getGeometry`.\n * It is possible to store more than one geometry on a feature using attribute\n * properties. By default, the geometry used for rendering is identified by\n * the property name `geometry`. If you want to use another geometry property\n * for rendering, use the `setGeometryName` method to change the attribute\n * property associated with the geometry for the feature.  For example:\n *\n * ```js\n *\n * import Feature from 'ol/Feature.js';\n * import Polygon from 'ol/geom/Polygon.js';\n * import Point from 'ol/geom/Point.js';\n *\n * const feature = new Feature({\n *   geometry: new Polygon(polyCoords),\n *   labelPoint: new Point(labelCoords),\n *   name: 'My Polygon',\n * });\n *\n * // get the polygon geometry\n * const poly = feature.getGeometry();\n *\n * // Render the feature as a point using the coordinates from labelPoint\n * feature.setGeometryName('labelPoint');\n *\n * // get the point geometry\n * const point = feature.getGeometry();\n * ```\n *\n * @api\n * @template {import(\"./geom/Geometry.js\").default} [Geometry=import(\"./geom/Geometry.js\").default]\n */\nclass Feature extends BaseObject {\n  /**\n   * @param {Geometry|ObjectWithGeometry<Geometry>} [geometryOrProperties]\n   *     You may pass a Geometry object directly, or an object literal containing\n   *     properties. If you pass an object literal, you may include a Geometry\n   *     associated with a `geometry` key.\n   */\n  constructor(geometryOrProperties) {\n    super();\n\n    /***\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {FeatureOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {FeatureOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n    this.id_ = undefined;\n\n    /**\n     * @type {string}\n     * @private\n     */\n    this.geometryName_ = 'geometry';\n\n    /**\n     * User provided style.\n     * @private\n     * @type {import(\"./style/Style.js\").StyleLike}\n     */\n    this.style_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./style/Style.js\").StyleFunction|undefined}\n     */\n    this.styleFunction_ = undefined;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.geometryChangeKey_ = null;\n\n    this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\n\n    if (geometryOrProperties) {\n      if (\n        typeof (\n          /** @type {?} */ (geometryOrProperties).getSimplifiedGeometry\n        ) === 'function'\n      ) {\n        const geometry = /** @type {Geometry} */ (geometryOrProperties);\n        this.setGeometry(geometry);\n      } else {\n        /** @type {Object<string, *>} */\n        const properties = geometryOrProperties;\n        this.setProperties(properties);\n      }\n    }\n  }\n\n  /**\n   * Clone this feature. If the original feature has a geometry it\n   * is also cloned. The feature id is not set in the clone.\n   * @return {Feature<Geometry>} The clone.\n   * @api\n   */\n  clone() {\n    const clone = /** @type {Feature<Geometry>} */ (\n      new Feature(this.hasProperties() ? this.getProperties() : null)\n    );\n    clone.setGeometryName(this.getGeometryName());\n    const geometry = this.getGeometry();\n    if (geometry) {\n      clone.setGeometry(/** @type {Geometry} */ (geometry.clone()));\n    }\n    const style = this.getStyle();\n    if (style) {\n      clone.setStyle(style);\n    }\n    return clone;\n  }\n\n  /**\n   * Get the feature's default geometry.  A feature may have any number of named\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\n   * @return {Geometry|undefined} The default geometry for the feature.\n   * @api\n   * @observable\n   */\n  getGeometry() {\n    return /** @type {Geometry|undefined} */ (this.get(this.geometryName_));\n  }\n\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is either set when reading data from a remote source or set explicitly by\n   * calling {@link module:ol/Feature~Feature#setId}.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id_;\n  }\n\n  /**\n   * Get the name of the feature's default geometry.  By default, the default\n   * geometry is named `geometry`.\n   * @return {string} Get the property name associated with the default geometry\n   *     for this feature.\n   * @api\n   */\n  getGeometryName() {\n    return this.geometryName_;\n  }\n\n  /**\n   * Get the feature's style. Will return what was provided to the\n   * {@link module:ol/Feature~Feature#setStyle} method.\n   * @return {import(\"./style/Style.js\").StyleLike|undefined} The feature style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Get the feature's style function.\n   * @return {import(\"./style/Style.js\").StyleFunction|undefined} Return a function\n   * representing the current style of this feature.\n   * @api\n   */\n  getStyleFunction() {\n    return this.styleFunction_;\n  }\n\n  /**\n   * @private\n   */\n  handleGeometryChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleGeometryChanged_() {\n    if (this.geometryChangeKey_) {\n      unlistenByKey(this.geometryChangeKey_);\n      this.geometryChangeKey_ = null;\n    }\n    const geometry = this.getGeometry();\n    if (geometry) {\n      this.geometryChangeKey_ = listen(\n        geometry,\n        EventType.CHANGE,\n        this.handleGeometryChange_,\n        this\n      );\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the default geometry for the feature.  This will update the property\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\n   * @param {Geometry|undefined} geometry The new geometry.\n   * @api\n   * @observable\n   */\n  setGeometry(geometry) {\n    this.set(this.geometryName_, geometry);\n  }\n\n  /**\n   * Set the style for the feature to override the layer style.  This can be a\n   * single style object, an array of styles, or a function that takes a\n   * resolution and returns an array of styles. To unset the feature style, call\n   * `setStyle()` without arguments or a falsey value.\n   * @param {import(\"./style/Style.js\").StyleLike} [style] Style for this feature.\n   * @api\n   * @fires module:ol/events/Event~BaseEvent#event:change\n   */\n  setStyle(style) {\n    this.style_ = style;\n    this.styleFunction_ = !style ? undefined : createStyleFunction(style);\n    this.changed();\n  }\n\n  /**\n   * Set the feature id.  The feature id is considered stable and may be used when\n   * requesting features or comparing identifiers returned from a remote source.\n   * The feature id can be used with the\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\n   * @param {number|string|undefined} id The feature id.\n   * @api\n   * @fires module:ol/events/Event~BaseEvent#event:change\n   */\n  setId(id) {\n    this.id_ = id;\n    this.changed();\n  }\n\n  /**\n   * Set the property name to be used when getting the feature's default geometry.\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\n   * this name will be returned.\n   * @param {string} name The property name of the default geometry.\n   * @api\n   */\n  setGeometryName(name) {\n    this.removeChangeListener(this.geometryName_, this.handleGeometryChanged_);\n    this.geometryName_ = name;\n    this.addChangeListener(this.geometryName_, this.handleGeometryChanged_);\n    this.handleGeometryChanged_();\n  }\n}\n\n/**\n * Convert the provided object into a feature style function.  Functions passed\n * through unchanged.  Arrays of Style or single style objects wrapped\n * in a new feature style function.\n * @param {!import(\"./style/Style.js\").StyleFunction|!Array<import(\"./style/Style.js\").default>|!import(\"./style/Style.js\").default} obj\n *     A feature style function, a single style, or an array of styles.\n * @return {import(\"./style/Style.js\").StyleFunction} A style function.\n */\nexport function createStyleFunction(obj) {\n  if (typeof obj === 'function') {\n    return obj;\n  }\n  /**\n   * @type {Array<import(\"./style/Style.js\").default>}\n   */\n  let styles;\n  if (Array.isArray(obj)) {\n    styles = obj;\n  } else {\n    assert(\n      typeof (/** @type {?} */ (obj).getZIndex) === 'function',\n      'Expected an `ol/style/Style` or an array of `ol/style/Style.js`'\n    );\n    const style = /** @type {import(\"./style/Style.js\").default} */ (obj);\n    styles = [style];\n  }\n  return function () {\n    return styles;\n  };\n}\nexport default Feature;\n","/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport {\n  closestSquaredDistanceXY,\n  createOrUpdateEmpty,\n  extend,\n  getCenter,\n} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nclass GeometryCollection extends Geometry {\n  /**\n   * @param {Array<Geometry>} [geometries] Geometries.\n   */\n  constructor(geometries) {\n    super();\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = geometries ? geometries : null;\n\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.changeEventsKeys_ = [];\n\n    this.listenGeometriesChange_();\n  }\n\n  /**\n   * @private\n   */\n  unlistenGeometriesChange_() {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(\n        listen(this.geometries_[i], EventType.CHANGE, this.changed, this)\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n  clone() {\n    const geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(\n        x,\n        y,\n        closestPoint,\n        minSquaredDistance\n      );\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  }\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArrayRecursive() {\n    /** @type {Array<Geometry>} */\n    let geometriesArray = [];\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(\n          /** @type {GeometryCollection} */ (\n            geometries[i]\n          ).getGeometriesArrayRecursive()\n        );\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n    return geometriesArray;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry =\n        geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      return simplifiedGeometryCollection;\n    }\n    this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n    return this;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'GeometryCollection';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, sy, anchor) {\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, sy, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n}\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  const clonedGeometries = [];\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\n\nexport default GeometryCollection;\n","/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from './Feature.js';\nimport {abstract} from '../util.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\nclass JSONFeature extends FeatureFormat {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'json';\n  }\n\n  /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  readFeature(source, options) {\n    return this.readFeatureFromObject(\n      getObject(source),\n      this.getReadOptions(source, options)\n    );\n  }\n\n  /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  readFeatures(source, options) {\n    return this.readFeaturesFromObject(\n      getObject(source),\n      this.getReadOptions(source, options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n  readGeometry(source, options) {\n    return this.readGeometryFromObject(\n      getObject(source),\n      this.getReadOptions(source, options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.readProjectionFromObject(getObject(source));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    return abstract();\n  }\n\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n  writeFeature(feature, options) {\n    return JSON.stringify(this.writeFeatureObject(feature, options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeatureObject(feature, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n  writeFeatures(features, options) {\n    return JSON.stringify(this.writeFeaturesObject(features, options));\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeaturesObject(features, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   */\n  writeGeometry(geometry, options) {\n    return JSON.stringify(this.writeGeometryObject(geometry, options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [options] Write options.\n   * @return {Object} Object.\n   */\n  writeGeometryObject(geometry, options) {\n    return abstract();\n  }\n}\n\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ? /** @type {Object} */ (object) : null;\n  }\n  if (source !== null) {\n    return source;\n  }\n  return null;\n}\n\nexport default JSONFeature;\n","/**\n * @module ol/format/Feature\n */\nimport {abstract} from '../util.js';\nimport {\n  equivalent as equivalentProjection,\n  get as getProjection,\n  transformExtent,\n} from '../proj.js';\n\n/**\n * @typedef {Object} ReadOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are reading.\n * If not provided, the projection will be derived from the data (where possible) or\n * the `dataProjection` of the format is assigned (where set). If the projection\n * can not be derived from the data and if no `dataProjection` is set for a format,\n * the features will not be reprojected.\n * @property {import(\"../extent.js\").Extent} [extent] Tile extent in map units of the tile being read.\n * This is only required when reading data with tile pixels as geometry units. When configured,\n * a `dataProjection` with `TILE_PIXELS` as `units` and the tile's pixel extent as `extent` needs to be\n * provided.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * created by the format reader. If not provided, features will be returned in the\n * `dataProjection`.\n */\n\n/**\n * @typedef {Object} WriteOptions\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection] Projection of the data we are writing.\n * If not provided, the `dataProjection` of the format is assigned (where set).\n * If no `dataProjection` is set for a format, the features will be returned\n * in the `featureProjection`.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection of the feature geometries\n * that will be serialized by the format writer. If not provided, geometries are assumed\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\n * as they are provided at construction.  If `true`, the right-hand rule will\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\n * exterior and counter-clockwise for interior rings).  Note that not all\n * formats support this.  The GeoJSON format does use this property when writing\n * geometries.\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\n * coordinates with a large number of decimal places, not generally wanted on output.\n * Set a number here to round coordinates. Can also be used to ensure that\n * coordinates read in can be written back out with the same number of decimals.\n * Default is no rounding.\n */\n\n/**\n * @typedef {'arraybuffer' | 'json' | 'text' | 'xml'} Type\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for feature formats.\n * {@link module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\n * file formats.  See the documentation for each format for more details.\n *\n * @abstract\n * @api\n */\nclass FeatureFormat {\n  constructor() {\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */\n    this.dataProjection = undefined;\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     */\n    this.defaultFeatureProjection = undefined;\n\n    /**\n     * A list media types supported by the format in descending order of preference.\n     * @type {Array<string>}\n     */\n    this.supportedMediaTypes = null;\n  }\n\n  /**\n   * Adds the data projection to the read options.\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [options] Options.\n   * @return {ReadOptions|undefined} Options.\n   * @protected\n   */\n  getReadOptions(source, options) {\n    if (options) {\n      let dataProjection = options.dataProjection\n        ? getProjection(options.dataProjection)\n        : this.readProjection(source);\n      if (\n        options.extent &&\n        dataProjection &&\n        dataProjection.getUnits() === 'tile-pixels'\n      ) {\n        dataProjection = getProjection(dataProjection);\n        dataProjection.setWorldExtent(options.extent);\n      }\n      options = {\n        dataProjection: dataProjection,\n        featureProjection: options.featureProjection,\n      };\n    }\n    return this.adaptOptions(options);\n  }\n\n  /**\n   * Sets the `dataProjection` on the options, if no `dataProjection`\n   * is set.\n   * @param {WriteOptions|ReadOptions|undefined} options\n   *     Options.\n   * @protected\n   * @return {WriteOptions|ReadOptions|undefined}\n   *     Updated options.\n   */\n  adaptOptions(options) {\n    return Object.assign(\n      {\n        dataProjection: this.dataProjection,\n        featureProjection: this.defaultFeatureProjection,\n      },\n      options\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {Type} The format type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Read a single feature from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [options] Read options.\n   * @return {import(\"../Feature.js\").FeatureLike} Feature.\n   */\n  readFeature(source, options) {\n    return abstract();\n  }\n\n  /**\n   * Read all features from a source.\n   *\n   * @abstract\n   * @param {Document|Element|ArrayBuffer|Object|string} source Source.\n   * @param {ReadOptions} [options] Read options.\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\n   */\n  readFeatures(source, options) {\n    return abstract();\n  }\n\n  /**\n   * Read a single geometry from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @param {ReadOptions} [options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometry(source, options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection from a source.\n   *\n   * @abstract\n   * @param {Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default|undefined} Projection.\n   */\n  readProjection(source) {\n    return abstract();\n  }\n\n  /**\n   * Encode a feature in this format.\n   *\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n  writeFeature(feature, options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features in this format.\n   *\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n  writeFeatures(features, options) {\n    return abstract();\n  }\n\n  /**\n   * Write a single geometry in this format.\n   *\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {WriteOptions} [options] Write options.\n   * @return {string|ArrayBuffer} Result.\n   */\n  writeGeometry(geometry, options) {\n    return abstract();\n  }\n}\n\nexport default FeatureFormat;\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {boolean} write Set to true for writing, false for reading.\n * @param {WriteOptions|ReadOptions} [options] Options.\n * @return {import(\"../geom/Geometry.js\").default} Transformed geometry.\n */\nexport function transformGeometryWithOptions(geometry, write, options) {\n  const featureProjection = options\n    ? getProjection(options.featureProjection)\n    : null;\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\n\n  let transformed;\n  if (\n    featureProjection &&\n    dataProjection &&\n    !equivalentProjection(featureProjection, dataProjection)\n  ) {\n    transformed = (write ? geometry.clone() : geometry).transform(\n      write ? featureProjection : dataProjection,\n      write ? dataProjection : featureProjection\n    );\n  } else {\n    transformed = geometry;\n  }\n  if (\n    write &&\n    options &&\n    /** @type {WriteOptions} */ (options).decimals !== undefined\n  ) {\n    const power = Math.pow(10, /** @type {WriteOptions} */ (options).decimals);\n    // if decimals option on write, round each coordinate appropriately\n    /**\n     * @param {Array<number>} coordinates Coordinates.\n     * @return {Array<number>} Transformed coordinates.\n     */\n    const transform = function (coordinates) {\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n        coordinates[i] = Math.round(coordinates[i] * power) / power;\n      }\n      return coordinates;\n    };\n    if (transformed === geometry) {\n      transformed = geometry.clone();\n    }\n    transformed.applyTransform(transform);\n  }\n  return transformed;\n}\n\n/**\n * @param {import(\"../extent.js\").Extent} extent Extent.\n * @param {ReadOptions} [options] Read options.\n * @return {import(\"../extent.js\").Extent} Transformed extent.\n */\nexport function transformExtentWithOptions(extent, options) {\n  const featureProjection = options\n    ? getProjection(options.featureProjection)\n    : null;\n  const dataProjection = options ? getProjection(options.dataProjection) : null;\n\n  if (\n    featureProjection &&\n    dataProjection &&\n    !equivalentProjection(featureProjection, dataProjection)\n  ) {\n    return transformExtent(extent, dataProjection, featureProjection);\n  }\n  return extent;\n}\n","/**\n * @module ol/geom/LineString\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {forEach as forEachSegment} from './flat/segments.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {interpolatePoint, lineStringCoordinateAtM} from './flat/interpolate.js';\nimport {intersectsLineString} from './flat/intersectsextent.js';\nimport {lineStringLength} from './flat/length.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nclass LineString extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  appendCoordinate(coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @api\n   */\n  clone() {\n    const lineString = new LineString(\n      this.flatCoordinates.slice(),\n      this.layout\n    );\n    lineString.applyProperties(this);\n    return lineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  forEachSegment(callback) {\n    return forEachSegment(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      callback\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, extrapolate) {\n    if (this.layout != 'XYM' && this.layout != 'XYZM') {\n      return null;\n    }\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\n    return lineStringCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      m,\n      extrapolate\n    );\n  }\n\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate} [dest] Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  getCoordinateAt(fraction, dest) {\n    return interpolatePoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      fraction,\n      dest,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  getLength() {\n    return lineStringLength(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return this.flatMidpoint_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} Simplified LineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    return new LineString(simplifiedFlatCoordinates, 'XY');\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'LineString';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineString(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default LineString;\n","/**\n * @module ol/geom/flat/interpolate\n */\nimport {binarySearch} from '../../array.js';\nimport {lerp} from '../../math.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>} [dest] Destination.\n * @param {number} [dimension] Destination dimension (default is `2`)\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  fraction,\n  dest,\n  dimension\n) {\n  let o, t;\n  const n = (end - offset) / stride;\n  if (n === 1) {\n    o = offset;\n  } else if (n === 2) {\n    o = offset;\n    t = fraction;\n  } else if (n !== 0) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    let length = 0;\n    const cumulativeLengths = [0];\n    for (let i = offset + stride; i < end; i += stride) {\n      const x2 = flatCoordinates[i];\n      const y2 = flatCoordinates[i + 1];\n      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      cumulativeLengths.push(length);\n      x1 = x2;\n      y1 = y2;\n    }\n    const target = fraction * length;\n    const index = binarySearch(cumulativeLengths, target);\n    if (index < 0) {\n      t =\n        (target - cumulativeLengths[-index - 2]) /\n        (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n      o = offset + (-index - 2) * stride;\n    } else {\n      o = offset + index * stride;\n    }\n  }\n  dimension = dimension > 1 ? dimension : 2;\n  dest = dest ? dest : new Array(dimension);\n  for (let i = 0; i < dimension; ++i) {\n    dest[i] =\n      o === undefined\n        ? NaN\n        : t === undefined\n        ? flatCoordinates[o + i]\n        : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringCoordinateAtM(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  m,\n  extrapolate\n) {\n  if (end == offset) {\n    return null;\n  }\n  let coordinate;\n  if (m < flatCoordinates[offset + stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(offset, offset + stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    }\n    return null;\n  }\n  if (flatCoordinates[end - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(end - stride, end);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    }\n    return null;\n  }\n  // FIXME use O(1) search\n  if (m == flatCoordinates[offset + stride - 1]) {\n    return flatCoordinates.slice(offset, offset + stride);\n  }\n  let lo = offset / stride;\n  let hi = end / stride;\n  while (lo < hi) {\n    const mid = (lo + hi) >> 1;\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  const m0 = flatCoordinates[lo * stride - 1];\n  if (m == m0) {\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n  }\n  const m1 = flatCoordinates[(lo + 1) * stride - 1];\n  const t = (m - m0) / (m1 - m0);\n  coordinate = [];\n  for (let i = 0; i < stride - 1; ++i) {\n    coordinate.push(\n      lerp(\n        flatCoordinates[(lo - 1) * stride + i],\n        flatCoordinates[lo * stride + i],\n        t\n      )\n    );\n  }\n  coordinate.push(m);\n  return coordinate;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringsCoordinateAtM(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  m,\n  extrapolate,\n  interpolate\n) {\n  if (interpolate) {\n    return lineStringCoordinateAtM(\n      flatCoordinates,\n      offset,\n      ends[ends.length - 1],\n      stride,\n      m,\n      extrapolate\n    );\n  }\n  let coordinate;\n  if (m < flatCoordinates[stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(0, stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    }\n    return null;\n  }\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    }\n    return null;\n  }\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    if (offset == end) {\n      continue;\n    }\n    if (m < flatCoordinates[offset + stride - 1]) {\n      return null;\n    }\n    if (m <= flatCoordinates[end - 1]) {\n      return lineStringCoordinateAtM(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        m,\n        false\n      );\n    }\n    offset = end;\n  }\n  return null;\n}\n","/**\n * @module ol/geom/flat/length\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Length.\n */\nexport function lineStringLength(flatCoordinates, offset, end, stride) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  let length = 0;\n  for (let i = offset + stride; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n    x1 = x2;\n    y1 = y2;\n  }\n  return length;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {number} Perimeter.\n */\nexport function linearRingLength(flatCoordinates, offset, end, stride) {\n  let perimeter = lineStringLength(flatCoordinates, offset, end, stride);\n  const dx = flatCoordinates[end - stride] - flatCoordinates[offset];\n  const dy = flatCoordinates[end - stride + 1] - flatCoordinates[offset + 1];\n  perimeter += Math.sqrt(dx * dx + dy * dy);\n  return perimeter;\n}\n","/**\n * @module ol/geom/MultiLineString\n */\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {douglasPeuckerArray} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {\n  interpolatePoint,\n  lineStringsCoordinateAtM,\n} from './flat/interpolate.js';\nimport {intersectsLineStringArray} from './flat/intersectsextent.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nclass MultiLineString extends SimpleGeometry {\n  /**\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n   *     combination with `layout` and `ends` are also accepted.)\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<number>} [ends] Flat coordinate ends for internal use.\n   */\n  constructor(coordinates, layout, ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        layout\n      );\n    } else if (layout !== undefined && ends) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = ends;\n    } else {\n      let layout = this.getLayout();\n      const lineStrings = /** @type {Array<LineString>} */ (coordinates);\n      const flatCoordinates = [];\n      const ends = [];\n      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n        const lineString = lineStrings[i];\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n  }\n\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */\n  appendLineString(lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @api\n   */\n  clone() {\n    const multiLineString = new MultiLineString(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n    multiLineString.applyProperties(this);\n    return multiLineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean} [extrapolate] Extrapolate. Default is `false`.\n   * @param {boolean} [interpolate] Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, extrapolate, interpolate) {\n    if (\n      (this.layout != 'XYM' && this.layout != 'XYZM') ||\n      this.flatCoordinates.length === 0\n    ) {\n      return null;\n    }\n    extrapolate = extrapolate !== undefined ? extrapolate : false;\n    interpolate = interpolate !== undefined ? interpolate : false;\n    return lineStringsCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      m,\n      extrapolate,\n      interpolate\n    );\n  }\n\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */\n  getLineString(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LineString(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */\n  getLineStrings() {\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const layout = this.layout;\n    /** @type {Array<LineString>} */\n    const lineStrings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const lineString = new LineString(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  getFlatMidpoints() {\n    const midpoints = [];\n    const flatCoordinates = this.flatCoordinates;\n    let offset = 0;\n    const ends = this.ends_;\n    const stride = this.stride;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const midpoint = interpolatePoint(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        0.5\n      );\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiLineString} Simplified MultiLineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new MultiLineString(simplifiedFlatCoordinates, 'XY', simplifiedEnds);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiLineString';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineStringArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default MultiLineString;\n","/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nclass MultiPoint extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   */\n  constructor(coordinates, layout) {\n    super();\n    if (layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n  clone() {\n    const multiPoint = new MultiPoint(\n      this.flatCoordinates.slice(),\n      this.layout\n    );\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const squaredDistance = squaredDx(\n        x,\n        y,\n        flatCoordinates[i],\n        flatCoordinates[i + 1]\n      );\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (let j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  getPoint(index) {\n    const n = !this.flatCoordinates\n      ? 0\n      : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(\n      this.flatCoordinates.slice(\n        index * this.stride,\n        (index + 1) * this.stride\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  getPoints() {\n    const flatCoordinates = this.flatCoordinates;\n    const layout = this.layout;\n    const stride = this.stride;\n    /** @type {Array<Point>} */\n    const points = [];\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiPoint';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default MultiPoint;\n","/**\n * @module ol/geom/MultiPolygon\n */\nimport MultiPoint from './MultiPoint.js';\nimport Polygon from './Polygon.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {\n  assignClosestMultiArrayPoint,\n  multiArrayMaxSquaredDelta,\n} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateMultiCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointsOfMultiArray} from './flat/interiorpoint.js';\nimport {inflateMultiCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingMultiArray} from './flat/intersectsextent.js';\nimport {\n  linearRingssAreOriented,\n  orientLinearRingsArray,\n} from './flat/orient.js';\nimport {linearRingss as linearRingssArea} from './flat/area.js';\nimport {linearRingss as linearRingssCenter} from './flat/center.js';\nimport {linearRingssContainsXY} from './flat/contains.js';\nimport {quantizeMultiArray} from './flat/simplify.js';\n\n/**\n * @classdesc\n * Multi-polygon geometry.\n *\n * @api\n */\nclass MultiPolygon extends SimpleGeometry {\n  /**\n   * @param {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>|Polygon>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `layout` and `endss` are also accepted.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @param {Array<Array<number>>} [endss] Array of ends for internal use with flat coordinates.\n   */\n  constructor(coordinates, layout, endss) {\n    super();\n\n    /**\n     * @type {Array<Array<number>>}\n     * @private\n     */\n    this.endss_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointsRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.flatInteriorPoints_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (!endss && !Array.isArray(coordinates[0])) {\n      let thisLayout = this.getLayout();\n      const polygons = /** @type {Array<Polygon>} */ (coordinates);\n      const flatCoordinates = [];\n      const thisEndss = [];\n      for (let i = 0, ii = polygons.length; i < ii; ++i) {\n        const polygon = polygons[i];\n        if (i === 0) {\n          thisLayout = polygon.getLayout();\n        }\n        const offset = flatCoordinates.length;\n        const ends = polygon.getEnds();\n        for (let j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] += offset;\n        }\n        extend(flatCoordinates, polygon.getFlatCoordinates());\n        thisEndss.push(ends);\n      }\n      layout = thisLayout;\n      coordinates = flatCoordinates;\n      endss = thisEndss;\n    }\n    if (layout !== undefined && endss) {\n      this.setFlatCoordinates(\n        layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.endss_ = endss;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} */ (\n          coordinates\n        ),\n        layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed polygon to this multipolygon.\n   * @param {Polygon} polygon Polygon.\n   * @api\n   */\n  appendPolygon(polygon) {\n    /** @type {Array<number>} */\n    let ends;\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = polygon.getFlatCoordinates().slice();\n      ends = polygon.getEnds().slice();\n      this.endss_.push();\n    } else {\n      const offset = this.flatCoordinates.length;\n      extend(this.flatCoordinates, polygon.getFlatCoordinates());\n      ends = polygon.getEnds().slice();\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] += offset;\n      }\n    }\n    this.endss_.push(ends);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPolygon} Clone.\n   * @api\n   */\n  clone() {\n    const len = this.endss_.length;\n    const newEndss = new Array(len);\n    for (let i = 0; i < len; ++i) {\n      newEndss[i] = this.endss_[i].slice();\n    }\n\n    const multiPolygon = new MultiPolygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      newEndss\n    );\n    multiPolygon.applyProperties(this);\n\n    return multiPolygon;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        multiArrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.endss_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestMultiArrayPoint(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingssContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Return the area of the multipolygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingssArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for multi-polygons.\n   *\n   * @param {boolean} [right] Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} Coordinates.\n   * @api\n   */\n  getCoordinates(right) {\n    let flatCoordinates;\n    if (right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRingsArray(\n        flatCoordinates,\n        0,\n        this.endss_,\n        this.stride,\n        right\n      );\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateMultiCoordinatesArray(\n      flatCoordinates,\n      0,\n      this.endss_,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<Array<number>>} Endss.\n   */\n  getEndss() {\n    return this.endss_;\n  }\n\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n  getFlatInteriorPoints() {\n    if (this.flatInteriorPointsRevision_ != this.getRevision()) {\n      const flatCenters = linearRingssCenter(\n        this.flatCoordinates,\n        0,\n        this.endss_,\n        this.stride\n      );\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.endss_,\n        this.stride,\n        flatCenters\n      );\n      this.flatInteriorPointsRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoints_;\n  }\n\n  /**\n   * Return the interior points as {@link module:ol/geom/MultiPoint~MultiPoint multipoint}.\n   * @return {MultiPoint} Interior points as XYM coordinates, where M is\n   * the length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoints() {\n    return new MultiPoint(this.getFlatInteriorPoints().slice(), 'XYM');\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (\n        linearRingssAreOriented(flatCoordinates, 0, this.endss_, this.stride)\n      ) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRingsArray(\n          this.orientedFlatCoordinates_,\n          0,\n          this.endss_,\n          this.stride\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiPolygon} Simplified MultiPolygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEndss = [];\n    simplifiedFlatCoordinates.length = quantizeMultiArray(\n      this.flatCoordinates,\n      0,\n      this.endss_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEndss\n    );\n    return new MultiPolygon(simplifiedFlatCoordinates, 'XY', simplifiedEndss);\n  }\n\n  /**\n   * Return the polygon at the specified index.\n   * @param {number} index Index.\n   * @return {Polygon} Polygon.\n   * @api\n   */\n  getPolygon(index) {\n    if (index < 0 || this.endss_.length <= index) {\n      return null;\n    }\n    let offset;\n    if (index === 0) {\n      offset = 0;\n    } else {\n      const prevEnds = this.endss_[index - 1];\n      offset = prevEnds[prevEnds.length - 1];\n    }\n    const ends = this.endss_[index].slice();\n    const end = ends[ends.length - 1];\n    if (offset !== 0) {\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        ends[i] -= offset;\n      }\n    }\n    return new Polygon(\n      this.flatCoordinates.slice(offset, end),\n      this.layout,\n      ends\n    );\n  }\n\n  /**\n   * Return the polygons of this multipolygon.\n   * @return {Array<Polygon>} Polygons.\n   * @api\n   */\n  getPolygons() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const endss = this.endss_;\n    const polygons = [];\n    let offset = 0;\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\n      const ends = endss[i].slice();\n      const end = ends[ends.length - 1];\n      if (offset !== 0) {\n        for (let j = 0, jj = ends.length; j < jj; ++j) {\n          ends[j] -= offset;\n        }\n      }\n      const polygon = new Polygon(\n        flatCoordinates.slice(offset, end),\n        layout,\n        ends\n      );\n      polygons.push(polygon);\n      offset = end;\n    }\n    return polygons;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiPolygon';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingMultiArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.endss_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the multipolygon.\n   * @param {!Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>} coordinates Coordinates.\n   * @param {import(\"./Geometry.js\").GeometryLayout} [layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, layout) {\n    this.setLayout(layout, coordinates, 3);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const endss = deflateMultiCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.endss_\n    );\n    if (endss.length === 0) {\n      this.flatCoordinates.length = 0;\n    } else {\n      const lastEnds = endss[endss.length - 1];\n      this.flatCoordinates.length =\n        lastEnds.length === 0 ? 0 : lastEnds[lastEnds.length - 1];\n    }\n    this.changed();\n  }\n}\n\nexport default MultiPolygon;\n","/**\n * @module ol/geom/flat/center\n */\nimport {createEmpty, createOrUpdateFromFlatCoordinates} from '../../extent.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @return {Array<number>} Flat centers.\n */\nexport function linearRingss(flatCoordinates, offset, endss, stride) {\n  const flatCenters = [];\n  let extent = createEmpty();\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    extent = createOrUpdateFromFlatCoordinates(\n      flatCoordinates,\n      offset,\n      ends[0],\n      stride\n    );\n    flatCenters.push((extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2);\n    offset = ends[ends.length - 1];\n  }\n  return flatCenters;\n}\n","/**\n * @module ol/layer/Vector\n */\nimport BaseVectorLayer from './BaseVector.js';\nimport CanvasVectorLayerRenderer from '../renderer/canvas/VectorLayer.js';\n\n/**\n * @classdesc\n * Vector data is rendered client-side, as vectors. This layer type provides most accurate rendering\n * even during animations. Points and labels stay upright on rotated views. For very large\n * amounts of vector data, performance may suffer during pan and zoom animations. In this case,\n * try {@link module:ol/layer/VectorImage~VectorImageLayer}.\n *\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default} VectorSourceType\n * @extends {BaseVectorLayer<VectorSourceType, CanvasVectorLayerRenderer>}\n * @api\n */\nclass VectorLayer extends BaseVectorLayer {\n  /**\n   * @param {import(\"./BaseVector.js\").Options<VectorSourceType>} [options] Options.\n   */\n  constructor(options) {\n    super(options);\n  }\n\n  createRenderer() {\n    return new CanvasVectorLayerRenderer(this);\n  }\n}\n\nexport default VectorLayer;\n","/**\n * @module ol/layer/BaseVector\n */\nimport Layer from './Layer.js';\nimport RBush from 'rbush';\nimport Style, {\n  createDefaultStyle,\n  toFunction as toStyleFunction,\n} from '../style/Style.js';\nimport {\n  flatStylesToStyleFunction,\n  rulesToStyleFunction,\n} from '../render/canvas/style.js';\n\n/**\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../render.js\").OrderFunction} [renderOrder] Render order. Function to be used when sorting\n * features before rendering. By default features are drawn in the order that they are created. Use\n * `null` to avoid the sort, but get an undefined draw order.\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\n * renderer when getting features from the vector source for the rendering or hit-detection.\n * Recommended value: the size of the largest symbol, line width or label.\n * @property {VectorSourceType} [source] Source.\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\n * use [map.addLayer()]{@link import(\"../Map.js\").default#addLayer}.\n * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all\n * image and text styles of all Vector and VectorTile layers that have set this to `true`. The priority\n * is defined by the z-index of the layer, the `zIndex` of the style and the render order of features.\n * Higher z-index means higher priority. Within the same z-index, a feature rendered before another has\n * higher priority.\n *\n * As an optimization decluttered features from layers with the same `className` are rendered above\n * the fill and stroke styles of all of those layers regardless of z-index.  To opt out of this\n * behavior and place declutterd features with their own layer configure the layer with a `className`\n * other than `ol-layer`.\n * @property {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style. When set to `null`, only\n * features that have their own style will be rendered. See {@link module:ol/style/Style~Style} for the default style\n * which will be used if this is not set.\n * @property {import(\"./Base.js\").BackgroundColor} [background] Background color for the layer. If not specified, no background\n * will be rendered.\n * @property {boolean} [updateWhileAnimating=false] When set to `true`, feature batches will\n * be recreated during animations. This means that no vectors will be shown clipped, but the\n * setting will have a performance impact for large amounts of vector data. When set to `false`,\n * batches will be recreated when no animation is active.\n * @property {boolean} [updateWhileInteracting=false] When set to `true`, feature batches will\n * be recreated during interactions. See also `updateWhileAnimating`.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  RENDER_ORDER: 'renderOrder',\n};\n\n/**\n * @classdesc\n * Vector data that is rendered client-side.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @template {import(\"../source/Vector.js\").default|import(\"../source/VectorTile.js\").default} VectorSourceType\n * @template {import(\"../renderer/canvas/VectorLayer.js\").default|import(\"../renderer/canvas/VectorTileLayer.js\").default|import(\"../renderer/canvas/VectorImageLayer.js\").default|import(\"../renderer/webgl/PointsLayer.js\").default} RendererType\n * @extends {Layer<VectorSourceType, RendererType>}\n * @api\n */\nclass BaseVectorLayer extends Layer {\n  /**\n   * @param {Options<VectorSourceType>} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {};\n\n    const baseOptions = Object.assign({}, options);\n\n    delete baseOptions.style;\n    delete baseOptions.renderBuffer;\n    delete baseOptions.updateWhileAnimating;\n    delete baseOptions.updateWhileInteracting;\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.declutter_ =\n      options.declutter !== undefined ? options.declutter : false;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.renderBuffer_ =\n      options.renderBuffer !== undefined ? options.renderBuffer : 100;\n\n    /**\n     * User provided style.\n     * @type {import(\"../style/Style.js\").StyleLike}\n     * @private\n     */\n    this.style_ = null;\n\n    /**\n     * Style function for use within the library.\n     * @type {import(\"../style/Style.js\").StyleFunction|undefined}\n     * @private\n     */\n    this.styleFunction_ = undefined;\n\n    this.setStyle(options.style);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.updateWhileAnimating_ =\n      options.updateWhileAnimating !== undefined\n        ? options.updateWhileAnimating\n        : false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.updateWhileInteracting_ =\n      options.updateWhileInteracting !== undefined\n        ? options.updateWhileInteracting\n        : false;\n  }\n\n  /**\n   * @return {boolean} Declutter.\n   */\n  getDeclutter() {\n    return this.declutter_;\n  }\n\n  /**\n   * Get the topmost feature that intersects the given pixel on the viewport. Returns a promise\n   * that resolves with an array of features. The array will either contain the topmost feature\n   * when a hit was detected, or it will be empty.\n   *\n   * The hit detection algorithm used for this method is optimized for performance, but is less\n   * accurate than the one used in [map.getFeaturesAtPixel()]{@link import(\"../Map.js\").default#getFeaturesAtPixel}.\n   * Text is not considered, and icons are only represented by their bounding box instead of the exact\n   * image.\n   *\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with an array of features.\n   * @api\n   */\n  getFeatures(pixel) {\n    return super.getFeatures(pixel);\n  }\n\n  /**\n   * @return {number|undefined} Render buffer.\n   */\n  getRenderBuffer() {\n    return this.renderBuffer_;\n  }\n\n  /**\n   * @return {function(import(\"../Feature.js\").default, import(\"../Feature.js\").default): number|null|undefined} Render\n   *     order.\n   */\n  getRenderOrder() {\n    return /** @type {import(\"../render.js\").OrderFunction|null|undefined} */ (\n      this.get(Property.RENDER_ORDER)\n    );\n  }\n\n  /**\n   * Get the style for features.  This returns whatever was passed to the `style`\n   * option at construction or to the `setStyle` method.\n   * @return {import(\"../style/Style.js\").StyleLike|null|undefined} Layer style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Get the style function.\n   * @return {import(\"../style/Style.js\").StyleFunction|undefined} Layer style function.\n   * @api\n   */\n  getStyleFunction() {\n    return this.styleFunction_;\n  }\n\n  /**\n   * @return {boolean} Whether the rendered layer should be updated while\n   *     animating.\n   */\n  getUpdateWhileAnimating() {\n    return this.updateWhileAnimating_;\n  }\n\n  /**\n   * @return {boolean} Whether the rendered layer should be updated while\n   *     interacting.\n   */\n  getUpdateWhileInteracting() {\n    return this.updateWhileInteracting_;\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (!frameState.declutterTree) {\n      frameState.declutterTree = new RBush(9);\n    }\n    /** @type {*} */ (this.getRenderer()).renderDeclutter(frameState);\n  }\n\n  /**\n   * @param {import(\"../render.js\").OrderFunction|null|undefined} renderOrder\n   *     Render order.\n   */\n  setRenderOrder(renderOrder) {\n    this.set(Property.RENDER_ORDER, renderOrder);\n  }\n\n  /**\n   * Set the style for features.  This can be a single style object, an array\n   * of styles, or a function that takes a feature and resolution and returns\n   * an array of styles. If set to `null`, the layer has no style (a `null` style),\n   * so only features that have their own styles will be rendered in the layer. Call\n   * `setStyle()` without arguments to reset to the default style. See\n   * [the ol/style/Style module]{@link module:ol/style/Style~Style} for information on the default style.\n   *\n   * If your layer has a static style, you can use [flat style]{@link module:ol/style/flat~FlatStyle} object\n   * literals instead of using the `Style` and symbolizer constructors (`Fill`, `Stroke`, etc.):\n   * ```js\n   * vectorLayer.setStyle({\n   *   \"fill-color\": \"yellow\",\n   *   \"stroke-color\": \"black\",\n   *   \"stroke-width\": 4\n   * })\n   * ```\n   *\n   * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\n   * @api\n   */\n  setStyle(style) {\n    this.style_ = toStyleLike(style);\n    this.styleFunction_ =\n      style === null ? undefined : toStyleFunction(this.style_);\n    this.changed();\n  }\n}\n\n/**\n * Coerce the allowed style types into a shorter list of types.  Flat styles, arrays of flat\n * styles, and arrays of rules are converted into style functions.\n *\n * @param {import(\"../style/Style.js\").StyleLike|import(\"../style/flat.js\").FlatStyleLike|null} [style] Layer style.\n * @return {import(\"../style/Style.js\").StyleLike|null} The style.\n */\nfunction toStyleLike(style) {\n  if (style === undefined) {\n    return createDefaultStyle;\n  }\n  if (!style) {\n    return null;\n  }\n  if (typeof style === 'function') {\n    return style;\n  }\n  if (style instanceof Style) {\n    return style;\n  }\n  if (!Array.isArray(style)) {\n    return flatStylesToStyleFunction([style]);\n  }\n  if (style.length === 0) {\n    return [];\n  }\n\n  const length = style.length;\n  const first = style[0];\n\n  if (first instanceof Style) {\n    /**\n     * @type {Array<Style>}\n     */\n    const styles = new Array(length);\n    for (let i = 0; i < length; ++i) {\n      const candidate = style[i];\n      if (!(candidate instanceof Style)) {\n        throw new Error('Expected a list of style instances');\n      }\n      styles[i] = candidate;\n    }\n    return styles;\n  }\n\n  if ('style' in first) {\n    /**\n     * @type Array<import(\"../style/flat.js\").Rule>\n     */\n    const rules = new Array(length);\n    for (let i = 0; i < length; ++i) {\n      const candidate = style[i];\n      if (!('style' in candidate)) {\n        throw new Error('Expected a list of rules with a style property');\n      }\n      rules[i] = candidate;\n    }\n    return rulesToStyleFunction(rules);\n  }\n\n  const flatStyles =\n    /** @type {Array<import(\"../style/flat.js\").FlatStyle>} */ (style);\n  return flatStylesToStyleFunction(flatStyles);\n}\n\nexport default BaseVectorLayer;\n","/**\n * @module ol/style/Style\n */\n\nimport CircleStyle from './Circle.js';\nimport Fill from './Fill.js';\nimport Stroke from './Stroke.js';\nimport {assert} from '../asserts.js';\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} and a `{number}`\n * representing the view's resolution. The function should return a\n * {@link module:ol/style/Style~Style} or an array of them. This way e.g. a\n * vector layer can be styled. If the function returns `undefined`, the\n * feature will not be rendered.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike, number):(Style|Array<Style>|void)} StyleFunction\n */\n\n/**\n * A {@link Style}, an array of {@link Style}, or a {@link StyleFunction}.\n * @typedef {Style|Array<Style>|StyleFunction} StyleLike\n */\n\n/**\n * A function that takes an {@link module:ol/Feature~Feature} as argument and returns an\n * {@link module:ol/geom/Geometry~Geometry} that will be rendered and styled for the feature.\n *\n * @typedef {function(import(\"../Feature.js\").FeatureLike):\n *     (import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined)} GeometryFunction\n */\n\n/**\n * Custom renderer function. Takes two arguments:\n *\n * 1. The pixel coordinates of the geometry in GeoJSON notation.\n * 2. The {@link module:ol/render~State} of the layer renderer.\n *\n * @typedef {function((import(\"../coordinate.js\").Coordinate|Array<import(\"../coordinate.js\").Coordinate>|Array<Array<import(\"../coordinate.js\").Coordinate>>|Array<Array<Array<import(\"../coordinate.js\").Coordinate>>>),import(\"../render.js\").State): void} RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string|import(\"../geom/Geometry.js\").default|GeometryFunction} [geometry] Feature property or geometry\n * or function returning a geometry to render for this style.\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {import(\"./Image.js\").default} [image] Image style.\n * @property {RenderFunction} [renderer] Custom renderer. When configured, `fill`, `stroke` and `image` will be\n * ignored, and the provided function will be called with each render frame for each geometry.\n * @property {RenderFunction} [hitDetectionRenderer] Custom renderer for hit detection. If provided will be used\n * in hit detection rendering.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Text.js\").default} [text] Text style.\n * @property {number} [zIndex] Z index.\n */\n\n/**\n * @classdesc\n * Container for vector feature rendering styles. Any changes made to the style\n * or its children through `set*()` methods will not take effect until the\n * feature or layer that uses the style is re-rendered.\n *\n * ## Feature styles\n *\n * If no style is defined, the following default style is used:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\n *\n *  const fill = new Fill({\n *    color: 'rgba(255,255,255,0.4)',\n *  });\n *  const stroke = new Stroke({\n *    color: '#3399CC',\n *    width: 1.25,\n *  });\n *  const styles = [\n *    new Style({\n *      image: new Circle({\n *        fill: fill,\n *        stroke: stroke,\n *        radius: 5,\n *      }),\n *      fill: fill,\n *      stroke: stroke,\n *    }),\n *  ];\n * ```\n *\n * A separate editing style has the following defaults:\n * ```js\n *  import {Circle, Fill, Stroke, Style} from 'ol/style.js';\n *\n *  const styles = {};\n *  const white = [255, 255, 255, 1];\n *  const blue = [0, 153, 255, 1];\n *  const width = 3;\n *  styles['Polygon'] = [\n *    new Style({\n *      fill: new Fill({\n *        color: [255, 255, 255, 0.5],\n *      }),\n *    }),\n *  ];\n *  styles['MultiPolygon'] =\n *      styles['Polygon'];\n *  styles['LineString'] = [\n *    new Style({\n *      stroke: new Stroke({\n *        color: white,\n *        width: width + 2,\n *      }),\n *    }),\n *    new Style({\n *      stroke: new Stroke({\n *        color: blue,\n *        width: width,\n *      }),\n *    }),\n *  ];\n *  styles['MultiLineString'] = styles['LineString'];\n *\n *  styles['Circle'] = styles['Polygon'].concat(\n *    styles['LineString']\n *  );\n *\n *  styles['Point'] = [\n *    new Style({\n *      image: new Circle({\n *        radius: width * 2,\n *        fill: new Fill({\n *          color: blue,\n *        }),\n *        stroke: new Stroke({\n *          color: white,\n *          width: width / 2,\n *        }),\n *      }),\n *      zIndex: Infinity,\n *    }),\n *  ];\n *  styles['MultiPoint'] =\n *      styles['Point'];\n *  styles['GeometryCollection'] =\n *      styles['Polygon'].concat(\n *          styles['LineString'],\n *          styles['Point']\n *      );\n * ```\n *\n * @api\n */\nclass Style {\n  /**\n   * @param {Options} [options] Style options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n     */\n    this.geometry_ = null;\n\n    /**\n     * @private\n     * @type {!GeometryFunction}\n     */\n    this.geometryFunction_ = defaultGeometryFunction;\n\n    if (options.geometry !== undefined) {\n      this.setGeometry(options.geometry);\n    }\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {import(\"./Image.js\").default}\n     */\n    this.image_ = options.image !== undefined ? options.image : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.renderer_ = options.renderer !== undefined ? options.renderer : null;\n\n    /**\n     * @private\n     * @type {RenderFunction|null}\n     */\n    this.hitDetectionRenderer_ =\n      options.hitDetectionRenderer !== undefined\n        ? options.hitDetectionRenderer\n        : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"./Text.js\").default}\n     */\n    this.text_ = options.text !== undefined ? options.text : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zIndex_ = options.zIndex;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Style} The cloned style.\n   * @api\n   */\n  clone() {\n    let geometry = this.getGeometry();\n    if (geometry && typeof geometry === 'object') {\n      geometry = /** @type {import(\"../geom/Geometry.js\").default} */ (\n        geometry\n      ).clone();\n    }\n    return new Style({\n      geometry: geometry,\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      image: this.getImage() ? this.getImage().clone() : undefined,\n      renderer: this.getRenderer(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      text: this.getText() ? this.getText().clone() : undefined,\n      zIndex: this.getZIndex(),\n    });\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setRenderer} or the `renderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Sets a custom renderer function for this style. When set, `fill`, `stroke`\n   * and `image` options of the style will be ignored.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setRenderer(renderer) {\n    this.renderer_ = renderer;\n  }\n\n  /**\n   * Sets a custom renderer function for this style used\n   * in hit detection.\n   * @param {RenderFunction|null} renderer Custom renderer function.\n   * @api\n   */\n  setHitDetectionRenderer(renderer) {\n    this.hitDetectionRenderer_ = renderer;\n  }\n\n  /**\n   * Get the custom renderer function that was configured with\n   * {@link #setHitDetectionRenderer} or the `hitDetectionRenderer` constructor option.\n   * @return {RenderFunction|null} Custom renderer function.\n   * @api\n   */\n  getHitDetectionRenderer() {\n    return this.hitDetectionRenderer_;\n  }\n\n  /**\n   * Get the geometry to be rendered.\n   * @return {string|import(\"../geom/Geometry.js\").default|GeometryFunction}\n   * Feature property or geometry or function that returns the geometry that will\n   * be rendered with this style.\n   * @api\n   */\n  getGeometry() {\n    return this.geometry_;\n  }\n\n  /**\n   * Get the function used to generate a geometry for rendering.\n   * @return {!GeometryFunction} Function that is called with a feature\n   * and returns the geometry to render instead of the feature's geometry.\n   * @api\n   */\n  getGeometryFunction() {\n    return this.geometryFunction_;\n  }\n\n  /**\n   * Get the fill style.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Get the image style.\n   * @return {import(\"./Image.js\").default} Image style.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Set the image style.\n   * @param {import(\"./Image.js\").default} image Image style.\n   * @api\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * Get the stroke style.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Get the text style.\n   * @return {import(\"./Text.js\").default} Text style.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Set the text style.\n   * @param {import(\"./Text.js\").default} text Text style.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Get the z-index for the style.\n   * @return {number|undefined} ZIndex.\n   * @api\n   */\n  getZIndex() {\n    return this.zIndex_;\n  }\n\n  /**\n   * Set a geometry that is rendered instead of the feature's geometry.\n   *\n   * @param {string|import(\"../geom/Geometry.js\").default|GeometryFunction} geometry\n   *     Feature property or geometry or function returning a geometry to render\n   *     for this style.\n   * @api\n   */\n  setGeometry(geometry) {\n    if (typeof geometry === 'function') {\n      this.geometryFunction_ = geometry;\n    } else if (typeof geometry === 'string') {\n      this.geometryFunction_ = function (feature) {\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (\n          feature.get(geometry)\n        );\n      };\n    } else if (!geometry) {\n      this.geometryFunction_ = defaultGeometryFunction;\n    } else if (geometry !== undefined) {\n      this.geometryFunction_ = function () {\n        return /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n      };\n    }\n    this.geometry_ = geometry;\n  }\n\n  /**\n   * Set the z-index.\n   *\n   * @param {number|undefined} zIndex ZIndex.\n   * @api\n   */\n  setZIndex(zIndex) {\n    this.zIndex_ = zIndex;\n  }\n}\n\n/**\n * Convert the provided object into a style function.  Functions passed through\n * unchanged.  Arrays of Style or single style objects wrapped in a\n * new style function.\n * @param {StyleFunction|Array<Style>|Style} obj\n *     A style function, a single style, or an array of styles.\n * @return {StyleFunction} A style function.\n */\nexport function toFunction(obj) {\n  let styleFunction;\n\n  if (typeof obj === 'function') {\n    styleFunction = obj;\n  } else {\n    /**\n     * @type {Array<Style>}\n     */\n    let styles;\n    if (Array.isArray(obj)) {\n      styles = obj;\n    } else {\n      assert(\n        typeof (/** @type {?} */ (obj).getZIndex) === 'function',\n        'Expected an `Style` or an array of `Style`'\n      );\n      const style = /** @type {Style} */ (obj);\n      styles = [style];\n    }\n    styleFunction = function () {\n      return styles;\n    };\n  }\n  return styleFunction;\n}\n\n/**\n * @type {Array<Style>|null}\n */\nlet defaultStyles = null;\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {number} resolution Resolution.\n * @return {Array<Style>} Style.\n */\nexport function createDefaultStyle(feature, resolution) {\n  // We don't use an immediately-invoked function\n  // and a closure so we don't get an error at script evaluation time in\n  // browsers that do not support Canvas. (import(\"./Circle.js\").CircleStyle does\n  // canvas.getContext('2d') at construction time, which will cause an.error\n  // in such browsers.)\n  if (!defaultStyles) {\n    const fill = new Fill({\n      color: 'rgba(255,255,255,0.4)',\n    });\n    const stroke = new Stroke({\n      color: '#3399CC',\n      width: 1.25,\n    });\n    defaultStyles = [\n      new Style({\n        image: new CircleStyle({\n          fill: fill,\n          stroke: stroke,\n          radius: 5,\n        }),\n        fill: fill,\n        stroke: stroke,\n      }),\n    ];\n  }\n  return defaultStyles;\n}\n\n/**\n * Default styles for editing features.\n * @return {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} Styles\n */\nexport function createEditingStyle() {\n  /** @type {Object<import(\"../geom/Geometry.js\").Type, Array<Style>>} */\n  const styles = {};\n  const white = [255, 255, 255, 1];\n  const blue = [0, 153, 255, 1];\n  const width = 3;\n  styles['Polygon'] = [\n    new Style({\n      fill: new Fill({\n        color: [255, 255, 255, 0.5],\n      }),\n    }),\n  ];\n  styles['MultiPolygon'] = styles['Polygon'];\n\n  styles['LineString'] = [\n    new Style({\n      stroke: new Stroke({\n        color: white,\n        width: width + 2,\n      }),\n    }),\n    new Style({\n      stroke: new Stroke({\n        color: blue,\n        width: width,\n      }),\n    }),\n  ];\n  styles['MultiLineString'] = styles['LineString'];\n\n  styles['Circle'] = styles['Polygon'].concat(styles['LineString']);\n\n  styles['Point'] = [\n    new Style({\n      image: new CircleStyle({\n        radius: width * 2,\n        fill: new Fill({\n          color: blue,\n        }),\n        stroke: new Stroke({\n          color: white,\n          width: width / 2,\n        }),\n      }),\n      zIndex: Infinity,\n    }),\n  ];\n  styles['MultiPoint'] = styles['Point'];\n\n  styles['GeometryCollection'] = styles['Polygon'].concat(\n    styles['LineString'],\n    styles['Point']\n  );\n\n  return styles;\n}\n\n/**\n * Function that is called with a feature and returns its default geometry.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature to get the geometry for.\n * @return {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default|undefined} Geometry to render.\n */\nfunction defaultGeometryFunction(feature) {\n  return feature.getGeometry();\n}\n\nexport default Style;\n","/**\n * @module ol/style/Circle\n */\n\nimport RegularShape from './RegularShape.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {Array<number>} [displacement=[0,0]] displacement\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. A two dimensional scale will produce an ellipse.\n * Unless two dimensional scaling is required a better result may be obtained with an appropriate setting for `radius`.\n * @property {number} [rotation=0] Rotation in radians\n * (positive rotation clockwise, meaningful only when used in conjunction with a two dimensional scale).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view\n * (meaningful only when used in conjunction with a two dimensional scale).\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\n */\n\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\nclass CircleStyle extends RegularShape {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options ? options : {radius: 5};\n\n    super({\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke,\n      scale: options.scale !== undefined ? options.scale : 1,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      rotateWithView:\n        options.rotateWithView !== undefined ? options.rotateWithView : false,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode,\n    });\n  }\n\n  /**\n   * Clones the style.\n   * @return {CircleStyle} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Set the circle radius.\n   *\n   * @param {number} radius Circle radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.radius_ = radius;\n    this.render();\n  }\n}\n\nexport default CircleStyle;\n","/**\n * @module ol/style/RegularShape\n */\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {asColorLike} from '../colorlike.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {\n  defaultFillStyle,\n  defaultLineCap,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../render/canvas.js';\n\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's points facing up.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the shape in pixels.\n * Positive values will shift the shape right and up.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {CanvasLineCap} lineCap LineCap.\n * @property {Array<number>|null} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nclass RegularShape extends ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvas_ = undefined;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius_ =\n      options.radius !== undefined ? options.radius : options.radius1;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = null;\n\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n    this.renderOptions_ = null;\n\n    this.render();\n  }\n\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    const size = this.size_;\n    if (!size) {\n      return null;\n    }\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [\n      size[0] / 2 - displacement[0] / scale[0],\n      size[1] / 2 + displacement[1] / scale[1],\n    ];\n  }\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  getAngle() {\n    return this.angle_;\n  }\n\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n    this.render();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.hitDetectionCanvas_) {\n      this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n    return this.hitDetectionCanvas_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    let image = this.canvas_[pixelRatio];\n    if (!image) {\n      const renderOptions = this.renderOptions_;\n      const context = createCanvasContext2D(\n        renderOptions.size * pixelRatio,\n        renderOptions.size * pixelRatio\n      );\n      this.draw_(renderOptions, context, pixelRatio);\n\n      image = context.canvas;\n      this.canvas_[pixelRatio] = image;\n    }\n    return image;\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  getPixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return ImageState.LOADED;\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    return this.origin_;\n  }\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  getPoints() {\n    return this.points_;\n  }\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return this.radius_;\n  }\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  getRadius2() {\n    return this.radius2_;\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n    this.render();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {}\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {}\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {}\n\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n    if (\n      strokeWidth === 0 ||\n      this.points_ === Infinity ||\n      (lineJoin !== 'bevel' && lineJoin !== 'miter')\n    ) {\n      return strokeWidth;\n    }\n    // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n    let r1 = this.radius_;\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n    if (r1 < r2) {\n      const tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n    const points =\n      this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    const alpha = (2 * Math.PI) / points;\n    const a = r2 * Math.sin(alpha);\n    const b = Math.sqrt(r2 * r2 - a * a);\n    const d = r1 - b;\n    const e = Math.sqrt(a * a + d * d);\n    const miterRatio = e / a;\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    }\n    // Calculate the distance from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n    const k = strokeWidth / 2 / miterRatio;\n    const l = (strokeWidth / 2) * (d / e);\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    const bevelAdd = maxr - r1;\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    }\n    // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n    const aa = r1 * Math.sin(alpha);\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\n    const dd = r2 - bb;\n    const ee = Math.sqrt(aa * aa + dd * dd);\n    const innerMiterRatio = ee / aa;\n    if (innerMiterRatio <= miterLimit) {\n      const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n    return bevelAdd * 2;\n  }\n\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n  createRenderOptions() {\n    let lineCap = defaultLineCap;\n    let lineJoin = defaultLineJoin;\n    let miterLimit = 0;\n    let lineDash = null;\n    let lineDashOffset = 0;\n    let strokeStyle;\n    let strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n      lineCap = this.stroke_.getLineCap();\n      if (lineCap === undefined) {\n        lineCap = defaultLineCap;\n      }\n      miterLimit = this.stroke_.getMiterLimit();\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    const size = Math.ceil(2 * maxRadius + add);\n\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineCap: lineCap,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit,\n    };\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.renderOptions_ = this.createRenderOptions();\n    const size = this.renderOptions_.size;\n    this.canvas_ = {};\n    this.size_ = [size, size];\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n  draw_(renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio);\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineCap = renderOptions.lineCap;\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n  createHitDetectionCanvas_(renderOptions) {\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n\n      // determine if fill is transparent (or pattern or gradient)\n      let opacity = 0;\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        const context = createCanvasContext2D(\n          renderOptions.size,\n          renderOptions.size\n        );\n        this.hitDetectionCanvas_ = context.canvas;\n\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.getImage(1);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n  createPath_(context) {\n    let points = this.points_;\n    const radius = this.radius_;\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n      const startAngle = this.angle_ - Math.PI / 2;\n      const step = (2 * Math.PI) / points;\n      for (let i = 0; i < points; i++) {\n        const angle0 = startAngle + i * step;\n        const radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n      context.closePath();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n  drawHitDetectionCanvas_(renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n}\n\nexport default RegularShape;\n","/**\n * @module ol/style/Image\n */\nimport {abstract} from '../util.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} opacity Opacity.\n * @property {boolean} rotateWithView If the image should get rotated with the view.\n * @property {number} rotation Rotation.\n * @property {number|import(\"../size.js\").Size} scale Scale.\n * @property {Array<number>} displacement Displacement.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} declutterMode Declutter mode: `declutter`, `obstacle`, 'none */\n\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */\nclass ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = options.opacity;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.displacement_ = options.displacement;\n\n    /**\n     * @private\n     * @type {\"declutter\"|\"obstacle\"|\"none\"|undefined}\n     */\n    this.declutterMode_ = options.declutterMode;\n  }\n\n  /**\n   * Clones the style.\n   * @return {ImageStyle} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new ImageStyle({\n      opacity: this.getOpacity(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n  }\n\n  /**\n   * Get the symbolizer opacity.\n   * @return {number} Opacity.\n   * @api\n   */\n  getOpacity() {\n    return this.opacity_;\n  }\n\n  /**\n   * Determine whether the symbolizer rotates with the map.\n   * @return {boolean} Rotate with map.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Get the symoblizer rotation.\n   * @return {number} Rotation.\n   * @api\n   */\n  getRotation() {\n    return this.rotation_;\n  }\n\n  /**\n   * Get the symbolizer scale.\n   * @return {number|import(\"../size.js\").Size} Scale.\n   * @api\n   */\n  getScale() {\n    return this.scale_;\n  }\n\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  getScaleArray() {\n    return this.scaleArray_;\n  }\n\n  /**\n   * Get the displacement of the shape\n   * @return {Array<number>} Shape's center displacement\n   * @api\n   */\n  getDisplacement() {\n    return this.displacement_;\n  }\n\n  /**\n   * Get the declutter mode of the shape\n   * @return {\"declutter\"|\"obstacle\"|\"none\"|undefined} Shape's declutter mode\n   * @api\n   */\n  getDeclutterMode() {\n    return this.declutterMode_;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @abstract\n   * @return {Array<number>} Anchor.\n   */\n  getAnchor() {\n    return abstract();\n  }\n\n  /**\n   * Get the image element for the symbolizer.\n   * @abstract\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {import('../DataTile.js').ImageLike} Image element.\n   */\n  getImage(pixelRatio) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @return {import('../DataTile.js').ImageLike} Image element.\n   */\n  getHitDetectionImage() {\n    return abstract();\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  getPixelRatio(pixelRatio) {\n    return 1;\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return abstract();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @abstract\n   * @return {Array<number>} Origin.\n   */\n  getOrigin() {\n    return abstract();\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @abstract\n   * @return {import(\"../size.js\").Size} Size.\n   */\n  getSize() {\n    return abstract();\n  }\n\n  /**\n   * Set the displacement.\n   *\n   * @param {Array<number>} displacement Displacement.\n   * @api\n   */\n  setDisplacement(displacement) {\n    this.displacement_ = displacement;\n  }\n\n  /**\n   * Set the opacity.\n   *\n   * @param {number} opacity Opacity.\n   * @api\n   */\n  setOpacity(opacity) {\n    this.opacity_ = opacity;\n  }\n\n  /**\n   * Set whether to rotate the style with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  }\n\n  /**\n   * Set the rotation.\n   *\n   * @param {number} rotation Rotation.\n   * @api\n   */\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale);\n  }\n\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    abstract();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @abstract\n   */\n  load() {\n    abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    abstract();\n  }\n}\n\nexport default ImageStyle;\n","/**\n * @module ol/colorlike\n */\nimport {toString} from './color.js';\n\n/**\n * A type accepted by CanvasRenderingContext2D.fillStyle\n * or CanvasRenderingContext2D.strokeStyle.\n * Represents a color, pattern, or gradient. The origin for patterns and\n * gradients as fill style is an increment of 512 css pixels from map coordinate\n * `[0, 0]`. For seamless repeat patterns, width and height of the pattern image\n * must be a factor of two (2, 4, 8, ..., 512).\n *\n * @typedef {string|CanvasPattern|CanvasGradient} ColorLike\n * @api\n */\n\n/**\n * @param {import(\"./color.js\").Color|ColorLike} color Color.\n * @return {ColorLike} The color as an {@link ol/colorlike~ColorLike}.\n * @api\n */\nexport function asColorLike(color) {\n  if (Array.isArray(color)) {\n    return toString(color);\n  }\n  return color;\n}\n","/**\n * @module ol/style/Fill\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} [color=null] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n */\n\n/**\n * @classdesc\n * Set fill style for vector features.\n * @api\n */\nclass Fill {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n  }\n\n  /**\n   * Clones the style. The color is not cloned if it is an {@link module:ol/colorlike~ColorLike}.\n   * @return {Fill} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Fill({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n    });\n  }\n\n  /**\n   * Get the fill color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike|null} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n  }\n}\n\nexport default Fill;\n","/**\n * @module ol/style/Stroke\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nclass Stroke {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {CanvasLineCap|undefined}\n     */\n    this.lineCap_ = options.lineCap;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lineDashOffset_ = options.lineDashOffset;\n\n    /**\n     * @private\n     * @type {CanvasLineJoin|undefined}\n     */\n    this.lineJoin_ = options.lineJoin;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.miterLimit_ = options.miterLimit;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Stroke({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n      lineCap: this.getLineCap(),\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n      lineDashOffset: this.getLineDashOffset(),\n      lineJoin: this.getLineJoin(),\n      miterLimit: this.getMiterLimit(),\n      width: this.getWidth(),\n    });\n  }\n\n  /**\n   * Get the stroke color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the line cap type for the stroke.\n   * @return {CanvasLineCap|undefined} Line cap.\n   * @api\n   */\n  getLineCap() {\n    return this.lineCap_;\n  }\n\n  /**\n   * Get the line dash style for the stroke.\n   * @return {Array<number>|null} Line dash.\n   * @api\n   */\n  getLineDash() {\n    return this.lineDash_;\n  }\n\n  /**\n   * Get the line dash offset for the stroke.\n   * @return {number|undefined} Line dash offset.\n   * @api\n   */\n  getLineDashOffset() {\n    return this.lineDashOffset_;\n  }\n\n  /**\n   * Get the line join type for the stroke.\n   * @return {CanvasLineJoin|undefined} Line join.\n   * @api\n   */\n  getLineJoin() {\n    return this.lineJoin_;\n  }\n\n  /**\n   * Get the miter limit for the stroke.\n   * @return {number|undefined} Miter limit.\n   * @api\n   */\n  getMiterLimit() {\n    return this.miterLimit_;\n  }\n\n  /**\n   * Get the stroke width.\n   * @return {number|undefined} Width.\n   * @api\n   */\n  getWidth() {\n    return this.width_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n  }\n\n  /**\n   * Set the line cap.\n   *\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\n   * @api\n   */\n  setLineCap(lineCap) {\n    this.lineCap_ = lineCap;\n  }\n\n  /**\n   * Set the line dash.\n   *\n   * @param {Array<number>|null} lineDash Line dash.\n   * @api\n   */\n  setLineDash(lineDash) {\n    this.lineDash_ = lineDash;\n  }\n\n  /**\n   * Set the line dash offset.\n   *\n   * @param {number|undefined} lineDashOffset Line dash offset.\n   * @api\n   */\n  setLineDashOffset(lineDashOffset) {\n    this.lineDashOffset_ = lineDashOffset;\n  }\n\n  /**\n   * Set the line join.\n   *\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\n   * @api\n   */\n  setLineJoin(lineJoin) {\n    this.lineJoin_ = lineJoin;\n  }\n\n  /**\n   * Set the miter limit.\n   *\n   * @param {number|undefined} miterLimit Miter limit.\n   * @api\n   */\n  setMiterLimit(miterLimit) {\n    this.miterLimit_ = miterLimit;\n  }\n\n  /**\n   * Set the width.\n   *\n   * @param {number|undefined} width Width.\n   * @api\n   */\n  setWidth(width) {\n    this.width_ = width;\n  }\n}\n\nexport default Stroke;\n","/**\n * @module ol/render/canvas/style\n */\n\nimport Circle from '../../style/Circle.js';\nimport Fill from '../../style/Fill.js';\nimport Icon from '../../style/Icon.js';\nimport RegularShape from '../../style/RegularShape.js';\nimport Stroke from '../../style/Stroke.js';\nimport Style from '../../style/Style.js';\nimport Text from '../../style/Text.js';\nimport {\n  BooleanType,\n  ColorType,\n  NumberArrayType,\n  NumberType,\n  StringType,\n  newParsingContext,\n} from '../../expr/expression.js';\nimport {buildExpression, newEvaluationContext} from '../../expr/cpu.js';\nimport {toSize} from '../../size.js';\n\n/**\n * @fileoverview This module includes functions to build styles for the canvas renderer.  Building\n * is composed of two steps: parsing and compiling.  The parsing step takes an encoded expression\n * and returns an instance of one of the expression classes.  The compiling step takes the\n * expression instance and returns a function that can be evaluated to return a literal value.  The\n * evaluator function should do as little allocation and work as possible.\n */\n\n/**\n * @typedef {import(\"../../style/flat.js\").FlatStyle} FlatStyle\n */\n\n/**\n * @typedef {import(\"../../expr/expression.js\").EncodedExpression} EncodedExpression\n */\n\n/**\n * @typedef {import(\"../../expr/expression.js\").ParsingContext} ParsingContext\n */\n\n/**\n * @typedef {import(\"../../expr/expression.js\").CallExpression} CallExpression\n */\n\n/**\n * @typedef {import(\"../../expr/cpu.js\").EvaluationContext} EvaluationContext\n */\n\n/**\n * @typedef {import(\"../../expr/cpu.js\").ExpressionEvaluator} ExpressionEvaluator\n */\n\n/**\n * @param {EvaluationContext} context The evaluation context.\n * @return {boolean} Always true.\n */\nfunction always(context) {\n  return true;\n}\n\n/**\n * This function adapts a rule evaluator to the existing style function interface.\n * After we have deprecated the style function, we can use the compiled rules directly\n * and pass a more complete evaluation context (variables, zoom, time, etc.).\n *\n * @param {Array<import('../../style/flat.js').Rule>} rules The rules.\n * @return {import('../../style/Style.js').StyleFunction} A style function.\n */\nexport function rulesToStyleFunction(rules) {\n  const parsingContext = newParsingContext();\n  const evaluator = buildRuleSet(rules, parsingContext);\n  const evaluationContext = newEvaluationContext();\n  return function (feature, resolution) {\n    evaluationContext.properties = feature.getPropertiesInternal();\n    evaluationContext.resolution = resolution;\n    return evaluator(evaluationContext);\n  };\n}\n\n/**\n * This function adapts a style evaluator to the existing style function interface.\n * After we have deprecated the style function, we can use the compiled rules directly\n * and pass a more complete evaluation context (variables, zoom, time, etc.).\n *\n * @param {Array<import('../../style/flat.js').FlatStyle>} flatStyles The flat styles.\n * @return {import('../../style/Style.js').StyleFunction} A style function.\n */\nexport function flatStylesToStyleFunction(flatStyles) {\n  const parsingContext = newParsingContext();\n  const length = flatStyles.length;\n\n  /**\n   * @type {Array<StyleEvaluator>}\n   */\n  const evaluators = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    evaluators[i] = buildStyle(flatStyles[i], parsingContext);\n  }\n  const evaluationContext = newEvaluationContext();\n\n  /**\n   * @type {Array<Style>}\n   */\n  const styles = new Array(length);\n\n  return function (feature, resolution) {\n    evaluationContext.properties = feature.getPropertiesInternal();\n    evaluationContext.resolution = resolution;\n    for (let i = 0; i < length; ++i) {\n      styles[i] = evaluators[i](evaluationContext);\n    }\n    return styles;\n  };\n}\n\n/**\n * @typedef {function(EvaluationContext):Array<Style>} RuleSetEvaluator\n */\n\n/**\n * @typedef {Object} CompiledRule\n * @property {ExpressionEvaluator} filter The compiled filter evaluator.\n * @property {Array<StyleEvaluator>} styles The list of compiled style evaluators.\n */\n\n/**\n * @param {Array<import('../../style/flat.js').Rule>} rules The rules.\n * @param {ParsingContext} context The parsing context.\n * @return {RuleSetEvaluator} The evaluator function.\n */\nexport function buildRuleSet(rules, context) {\n  const length = rules.length;\n\n  /**\n   * @type {Array<CompiledRule>}\n   */\n  const compiledRules = new Array(length);\n\n  for (let i = 0; i < length; ++i) {\n    const rule = rules[i];\n    const filter =\n      'filter' in rule\n        ? buildExpression(rule.filter, BooleanType, context)\n        : always;\n\n    /**\n     * @type {Array<StyleEvaluator>}\n     */\n    let styles;\n    if (Array.isArray(rule.style)) {\n      const styleLength = rule.style.length;\n      styles = new Array(styleLength);\n      for (let j = 0; j < styleLength; ++j) {\n        styles[j] = buildStyle(rule.style[j], context);\n      }\n    } else {\n      styles = [buildStyle(rule.style, context)];\n    }\n\n    compiledRules[i] = {filter, styles};\n  }\n\n  return function (context) {\n    /**\n     * @type {Array<Style>}\n     */\n    const styles = [];\n\n    let someMatched = false;\n    for (let i = 0; i < length; ++i) {\n      const filterEvaluator = compiledRules[i].filter;\n      if (!filterEvaluator(context)) {\n        continue;\n      }\n      if (rules[i].else && someMatched) {\n        continue;\n      }\n      someMatched = true;\n      for (const styleEvaluator of compiledRules[i].styles) {\n        const style = styleEvaluator(context);\n        if (!style) {\n          continue;\n        }\n        styles.push(style);\n      }\n    }\n\n    return styles;\n  };\n}\n\n/**\n * @typedef {function(EvaluationContext):Style} StyleEvaluator\n */\n\n/**\n * @param {FlatStyle} flatStyle A flat style literal.\n * @param {ParsingContext} context The parsing context.\n * @return {StyleEvaluator} A function that evaluates to a style.  The style returned by\n * this function will be reused between invocations.\n */\nexport function buildStyle(flatStyle, context) {\n  const evaluateFill = buildFill(flatStyle, '', context);\n  const evaluateStroke = buildStroke(flatStyle, '', context);\n  const evaluateText = buildText(flatStyle, context);\n  const evaluateImage = buildImage(flatStyle, context);\n  const evaluateZIndex = numberEvaluator(flatStyle, 'z-index', context);\n\n  const style = new Style();\n  return function (context) {\n    let empty = true;\n    if (evaluateFill) {\n      const fill = evaluateFill(context);\n      if (fill) {\n        empty = false;\n      }\n      style.setFill(fill);\n    }\n    if (evaluateStroke) {\n      const stroke = evaluateStroke(context);\n      if (stroke) {\n        empty = false;\n      }\n      style.setStroke(stroke);\n    }\n    if (evaluateText) {\n      const text = evaluateText(context);\n      if (text) {\n        empty = false;\n      }\n      style.setText(text);\n    }\n    if (evaluateImage) {\n      const image = evaluateImage(context);\n      if (image) {\n        empty = false;\n      }\n      style.setImage(image);\n    }\n    if (evaluateZIndex) {\n      style.setZIndex(evaluateZIndex(context));\n    }\n    if (empty) {\n      return null;\n    }\n    return style;\n  };\n}\n\n/**\n * @typedef {function(EvaluationContext):Fill} FillEvaluator\n */\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} prefix The property prefix.\n * @param {ParsingContext} context The parsing context.\n * @return {FillEvaluator?} A function that evaluates to a fill.\n */\nfunction buildFill(flatStyle, prefix, context) {\n  const evaluateColor = colorLikeEvaluator(\n    flatStyle,\n    prefix + 'fill-color',\n    context\n  );\n  if (!evaluateColor) {\n    return null;\n  }\n\n  const fill = new Fill();\n  return function (context) {\n    const color = evaluateColor(context);\n    if (color === 'none') {\n      return null;\n    }\n    fill.setColor(color);\n    return fill;\n  };\n}\n\n/**\n * @typedef {function(EvaluationContext):Stroke} StrokeEvaluator\n */\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} prefix The property prefix.\n * @param {ParsingContext} context The parsing context.\n * @return {StrokeEvaluator?} A function the evaluates to a stroke.\n */\nfunction buildStroke(flatStyle, prefix, context) {\n  const evaluateWidth = numberEvaluator(\n    flatStyle,\n    prefix + 'stroke-width',\n    context\n  );\n\n  const evaluateColor = colorLikeEvaluator(\n    flatStyle,\n    prefix + 'stroke-color',\n    context\n  );\n\n  if (!evaluateWidth && !evaluateColor) {\n    return null;\n  }\n\n  const evaluateLineCap = stringEvaluator(\n    flatStyle,\n    prefix + 'stroke-line-cap',\n    context\n  );\n\n  const evaluateLineJoin = stringEvaluator(\n    flatStyle,\n    prefix + 'stroke-line-join',\n    context\n  );\n\n  const evaluateLineDash = numberArrayEvaluator(\n    flatStyle,\n    prefix + 'stroke-line-dash',\n    context\n  );\n\n  const evaluateLineDashOffset = numberEvaluator(\n    flatStyle,\n    prefix + 'stroke-line-dash-offset',\n    context\n  );\n\n  const evaluateMiterLimit = numberEvaluator(\n    flatStyle,\n    prefix + 'stroke-miter-limit',\n    context\n  );\n\n  const stroke = new Stroke();\n  return function (context) {\n    if (evaluateColor) {\n      const color = evaluateColor(context);\n      if (color === 'none') {\n        return null;\n      }\n      stroke.setColor(color);\n    }\n\n    if (evaluateWidth) {\n      stroke.setWidth(evaluateWidth(context));\n    }\n\n    if (evaluateLineCap) {\n      const lineCap = evaluateLineCap(context);\n      if (lineCap !== 'butt' && lineCap !== 'round' && lineCap !== 'square') {\n        throw new Error('Expected butt, round, or square line cap');\n      }\n      stroke.setLineCap(lineCap);\n    }\n\n    if (evaluateLineJoin) {\n      const lineJoin = evaluateLineJoin(context);\n      if (\n        lineJoin !== 'bevel' &&\n        lineJoin !== 'round' &&\n        lineJoin !== 'miter'\n      ) {\n        throw new Error('Expected bevel, round, or miter line join');\n      }\n      stroke.setLineJoin(lineJoin);\n    }\n\n    if (evaluateLineDash) {\n      stroke.setLineDash(evaluateLineDash(context));\n    }\n\n    if (evaluateLineDashOffset) {\n      stroke.setLineDashOffset(evaluateLineDashOffset(context));\n    }\n\n    if (evaluateMiterLimit) {\n      stroke.setMiterLimit(evaluateMiterLimit(context));\n    }\n\n    return stroke;\n  };\n}\n\n/**\n * @typedef {function(EvaluationContext):Text} TextEvaluator\n */\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {ParsingContext} context The parsing context.\n * @return {TextEvaluator?} A function that evaluates to a text symbolizer.\n */\nfunction buildText(flatStyle, context) {\n  const prefix = 'text-';\n\n  // Currently, an Array<string> may be used for rich text support.  This doesn't\n  // work with our expression syntax where arrays of strings are interpreted as\n  // call expressions.  To support rich text, we could add a 'strings' operator\n  // where all the following arguments would be string values.\n  const evaluateValue = stringEvaluator(flatStyle, prefix + 'value', context);\n  if (!evaluateValue) {\n    return null;\n  }\n\n  const evaluateFill = buildFill(flatStyle, prefix, context);\n\n  const evaluateBackgroundFill = buildFill(\n    flatStyle,\n    prefix + 'background-',\n    context\n  );\n\n  const evaluateStroke = buildStroke(flatStyle, prefix, context);\n\n  const evaluateBackgroundStroke = buildStroke(\n    flatStyle,\n    prefix + 'background-',\n    context\n  );\n\n  const evaluateFont = stringEvaluator(flatStyle, prefix + 'font', context);\n\n  const evaluateMaxAngle = numberEvaluator(\n    flatStyle,\n    prefix + 'max-angle',\n    context\n  );\n\n  const evaluateOffsetX = numberEvaluator(\n    flatStyle,\n    prefix + 'offset-x',\n    context\n  );\n\n  const evaluateOffsetY = numberEvaluator(\n    flatStyle,\n    prefix + 'offset-y',\n    context\n  );\n\n  const evaluateOverflow = booleanEvaluator(\n    flatStyle,\n    prefix + 'overflow',\n    context\n  );\n\n  const evaluatePlacement = stringEvaluator(\n    flatStyle,\n    prefix + 'placement',\n    context\n  );\n\n  const evaluateRepeat = numberEvaluator(flatStyle, prefix + 'repeat', context);\n\n  const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\n\n  const evaluateRotateWithView = booleanEvaluator(\n    flatStyle,\n    prefix + 'rotate-with-view',\n    context\n  );\n\n  const evaluateRotation = numberEvaluator(\n    flatStyle,\n    prefix + 'rotation',\n    context\n  );\n\n  const evaluateAlign = stringEvaluator(flatStyle, prefix + 'align', context);\n\n  const evaluateJustify = stringEvaluator(\n    flatStyle,\n    prefix + 'justify',\n    context\n  );\n\n  const evaluateBaseline = stringEvaluator(\n    flatStyle,\n    prefix + 'baseline',\n    context\n  );\n\n  const evaluatePadding = numberArrayEvaluator(\n    flatStyle,\n    prefix + 'padding',\n    context\n  );\n\n  const text = new Text({});\n  return function (context) {\n    text.setText(evaluateValue(context));\n\n    if (evaluateFill) {\n      text.setFill(evaluateFill(context));\n    }\n\n    if (evaluateBackgroundFill) {\n      text.setBackgroundFill(evaluateBackgroundFill(context));\n    }\n\n    if (evaluateStroke) {\n      text.setStroke(evaluateStroke(context));\n    }\n\n    if (evaluateBackgroundStroke) {\n      text.setBackgroundStroke(evaluateBackgroundStroke(context));\n    }\n\n    if (evaluateFont) {\n      text.setFont(evaluateFont(context));\n    }\n\n    if (evaluateMaxAngle) {\n      text.setMaxAngle(evaluateMaxAngle(context));\n    }\n\n    if (evaluateOffsetX) {\n      text.setOffsetX(evaluateOffsetX(context));\n    }\n\n    if (evaluateOffsetY) {\n      text.setOffsetY(evaluateOffsetY(context));\n    }\n\n    if (evaluateOverflow) {\n      text.setOverflow(evaluateOverflow(context));\n    }\n\n    if (evaluatePlacement) {\n      const placement = evaluatePlacement(context);\n      if (placement !== 'point' && placement !== 'line') {\n        throw new Error('Expected point or line for text-placement');\n      }\n      text.setPlacement(placement);\n    }\n\n    if (evaluateRepeat) {\n      text.setRepeat(evaluateRepeat(context));\n    }\n\n    if (evaluateScale) {\n      text.setScale(evaluateScale(context));\n    }\n\n    if (evaluateRotateWithView) {\n      text.setRotateWithView(evaluateRotateWithView(context));\n    }\n\n    if (evaluateRotation) {\n      text.setRotation(evaluateRotation(context));\n    }\n\n    if (evaluateAlign) {\n      const textAlign = evaluateAlign(context);\n      if (\n        textAlign !== 'left' &&\n        textAlign !== 'center' &&\n        textAlign !== 'right' &&\n        textAlign !== 'end' &&\n        textAlign !== 'start'\n      ) {\n        throw new Error(\n          'Expected left, right, center, start, or end for text-align'\n        );\n      }\n      text.setTextAlign(textAlign);\n    }\n\n    if (evaluateJustify) {\n      const justify = evaluateJustify(context);\n      if (justify !== 'left' && justify !== 'right' && justify !== 'center') {\n        throw new Error('Expected left, right, or center for text-justify');\n      }\n      text.setJustify(justify);\n    }\n\n    if (evaluateBaseline) {\n      const textBaseline = evaluateBaseline(context);\n      if (\n        textBaseline !== 'bottom' &&\n        textBaseline !== 'top' &&\n        textBaseline !== 'middle' &&\n        textBaseline !== 'alphabetic' &&\n        textBaseline !== 'hanging'\n      ) {\n        throw new Error(\n          'Expected bottom, top, middle, alphabetic, or hanging for text-baseline'\n        );\n      }\n      text.setTextBaseline(textBaseline);\n    }\n\n    if (evaluatePadding) {\n      text.setPadding(evaluatePadding(context));\n    }\n\n    return text;\n  };\n}\n\n/**\n * @typedef {function(EvaluationContext):import(\"../../style/Image.js\").default} ImageEvaluator\n */\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {ParsingContext} context The parsing context.\n * @return {ImageEvaluator?} A function that evaluates to an image symbolizer.\n */\nfunction buildImage(flatStyle, context) {\n  if ('icon-src' in flatStyle) {\n    return buildIcon(flatStyle, context);\n  }\n\n  if ('shape-points' in flatStyle) {\n    return buildShape(flatStyle, context);\n  }\n\n  if ('circle-radius' in flatStyle) {\n    return buildCircle(flatStyle, context);\n  }\n\n  return null;\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {ParsingContext} context The parsing context.\n * @return {ImageEvaluator} A function that evaluates to an image symbolizer.\n */\nfunction buildIcon(flatStyle, context) {\n  const prefix = 'icon-';\n\n  // required property\n  const srcName = prefix + 'src';\n  const src = requireString(flatStyle[srcName], srcName);\n\n  // settable properties\n  const evaluateAnchor = coordinateEvaluator(\n    flatStyle,\n    prefix + 'anchor',\n    context\n  );\n\n  const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\n\n  const evaluateOpacity = numberEvaluator(\n    flatStyle,\n    prefix + 'opacity',\n    context\n  );\n\n  const evaluateDisplacement = coordinateEvaluator(\n    flatStyle,\n    prefix + 'displacement',\n    context\n  );\n\n  const evaluateRotation = numberEvaluator(\n    flatStyle,\n    prefix + 'rotation',\n    context\n  );\n\n  const evaluateRotateWithView = booleanEvaluator(\n    flatStyle,\n    prefix + 'rotate-with-view',\n    context\n  );\n\n  // the remaining symbolizer properties are not currently settable\n  const anchorOrigin = optionalIconOrigin(flatStyle, prefix + 'anchor-origin');\n  const anchorXUnits = optionalIconAnchorUnits(\n    flatStyle,\n    prefix + 'anchor-x-units'\n  );\n  const anchorYUnits = optionalIconAnchorUnits(\n    flatStyle,\n    prefix + 'anchor-y-units'\n  );\n  const color = optionalColorLike(flatStyle, prefix + 'color');\n  const crossOrigin = optionalString(flatStyle, prefix + 'cross-origin');\n  const offset = optionalNumberArray(flatStyle, prefix + 'offset');\n  const offsetOrigin = optionalIconOrigin(flatStyle, prefix + 'offset-origin');\n  const width = optionalNumber(flatStyle, prefix + 'width');\n  const height = optionalNumber(flatStyle, prefix + 'height');\n  const size = optionalSize(flatStyle, prefix + 'size');\n  const declutterMode = optionalDeclutterMode(flatStyle, prefix + 'declutter');\n\n  const icon = new Icon({\n    src,\n    anchorOrigin,\n    anchorXUnits,\n    anchorYUnits,\n    color,\n    crossOrigin,\n    offset,\n    offsetOrigin,\n    height,\n    width,\n    size,\n    declutterMode,\n  });\n\n  return function (context) {\n    if (evaluateOpacity) {\n      icon.setOpacity(evaluateOpacity(context));\n    }\n\n    if (evaluateDisplacement) {\n      icon.setDisplacement(evaluateDisplacement(context));\n    }\n\n    if (evaluateRotation) {\n      icon.setRotation(evaluateRotation(context));\n    }\n\n    if (evaluateRotateWithView) {\n      icon.setRotateWithView(evaluateRotateWithView(context));\n    }\n\n    if (evaluateScale) {\n      icon.setScale(evaluateScale(context));\n    }\n\n    if (evaluateAnchor) {\n      icon.setAnchor(evaluateAnchor(context));\n    }\n    return icon;\n  };\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {ParsingContext} context The parsing context.\n * @return {ImageEvaluator} A function that evaluates to an icon symbolizer.\n */\nfunction buildShape(flatStyle, context) {\n  const prefix = 'shape-';\n\n  // required property\n  const pointsName = prefix + 'points';\n  const points = requireNumber(flatStyle[pointsName], pointsName);\n\n  // settable properties\n  const evaluateFill = buildFill(flatStyle, prefix, context);\n  const evaluateStroke = buildStroke(flatStyle, prefix, context);\n  const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\n  const evaluateDisplacement = coordinateEvaluator(\n    flatStyle,\n    prefix + 'displacement',\n    context\n  );\n  const evaluateRotation = numberEvaluator(\n    flatStyle,\n    prefix + 'rotation',\n    context\n  );\n  const evaluateRotateWithView = booleanEvaluator(\n    flatStyle,\n    prefix + 'rotate-with-view',\n    context\n  );\n\n  // the remaining properties are not currently settable\n  const radius = optionalNumber(flatStyle, prefix + 'radius');\n  const radius1 = optionalNumber(flatStyle, prefix + 'radius1');\n  const radius2 = optionalNumber(flatStyle, prefix + 'radius2');\n  const angle = optionalNumber(flatStyle, prefix + 'angle');\n  const declutterMode = optionalDeclutterMode(\n    flatStyle,\n    prefix + 'declutter-mode'\n  );\n\n  const shape = new RegularShape({\n    points,\n    radius,\n    radius1,\n    radius2,\n    angle,\n    declutterMode,\n  });\n\n  return function (context) {\n    if (evaluateFill) {\n      shape.setFill(evaluateFill(context));\n    }\n    if (evaluateStroke) {\n      shape.setStroke(evaluateStroke(context));\n    }\n    if (evaluateDisplacement) {\n      shape.setDisplacement(evaluateDisplacement(context));\n    }\n    if (evaluateRotation) {\n      shape.setRotation(evaluateRotation(context));\n    }\n    if (evaluateRotateWithView) {\n      shape.setRotateWithView(evaluateRotateWithView(context));\n    }\n    if (evaluateScale) {\n      shape.setScale(evaluateScale(context));\n    }\n\n    return shape;\n  };\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {ParsingContext} context The parsing context.\n * @return {ImageEvaluator} A function that evaluates to a circle symbolizer.\n */\nfunction buildCircle(flatStyle, context) {\n  const prefix = 'circle-';\n\n  // settable properties\n  const evaluateFill = buildFill(flatStyle, prefix, context);\n  const evaluateStroke = buildStroke(flatStyle, prefix, context);\n  const evaluateRadius = numberEvaluator(flatStyle, prefix + 'radius', context);\n  const evaluateScale = sizeLikeEvaluator(flatStyle, prefix + 'scale', context);\n  const evaluateDisplacement = coordinateEvaluator(\n    flatStyle,\n    prefix + 'displacement',\n    context\n  );\n  const evaluateRotation = numberEvaluator(\n    flatStyle,\n    prefix + 'rotation',\n    context\n  );\n  const evaluateRotateWithView = booleanEvaluator(\n    flatStyle,\n    prefix + 'rotate-with-view',\n    context\n  );\n\n  // the remaining properties are not currently settable\n  const declutterMode = optionalDeclutterMode(\n    flatStyle,\n    prefix + 'declutter-mode'\n  );\n\n  const circle = new Circle({\n    radius: 5, // this is arbitrary, but required - the evaluated radius is used below\n    declutterMode,\n  });\n\n  return function (context) {\n    if (evaluateRadius) {\n      circle.setRadius(evaluateRadius(context));\n    }\n    if (evaluateFill) {\n      circle.setFill(evaluateFill(context));\n    }\n    if (evaluateStroke) {\n      circle.setStroke(evaluateStroke(context));\n    }\n    if (evaluateDisplacement) {\n      circle.setDisplacement(evaluateDisplacement(context));\n    }\n    if (evaluateRotation) {\n      circle.setRotation(evaluateRotation(context));\n    }\n    if (evaluateRotateWithView) {\n      circle.setRotateWithView(evaluateRotateWithView(context));\n    }\n    if (evaluateScale) {\n      circle.setScale(evaluateScale(context));\n    }\n\n    return circle;\n  };\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').NumberEvaluator|undefined} The expression evaluator or undefined.\n */\nfunction numberEvaluator(flatStyle, name, context) {\n  if (!(name in flatStyle)) {\n    return undefined;\n  }\n  const evaluator = buildExpression(flatStyle[name], NumberType, context);\n  return function (context) {\n    return requireNumber(evaluator(context), name);\n  };\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').StringEvaluator?} The expression evaluator.\n */\nfunction stringEvaluator(flatStyle, name, context) {\n  if (!(name in flatStyle)) {\n    return null;\n  }\n  const evaluator = buildExpression(flatStyle[name], StringType, context);\n  return function (context) {\n    return requireString(evaluator(context), name);\n  };\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').BooleanEvaluator?} The expression evaluator.\n */\nfunction booleanEvaluator(flatStyle, name, context) {\n  if (!(name in flatStyle)) {\n    return null;\n  }\n  const evaluator = buildExpression(flatStyle[name], BooleanType, context);\n  return function (context) {\n    const value = evaluator(context);\n    if (typeof value !== 'boolean') {\n      throw new Error(`Expected a boolean for ${name}`);\n    }\n    return value;\n  };\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').ColorLikeEvaluator?} The expression evaluator.\n */\nfunction colorLikeEvaluator(flatStyle, name, context) {\n  if (!(name in flatStyle)) {\n    return null;\n  }\n  const evaluator = buildExpression(\n    flatStyle[name],\n    ColorType | StringType,\n    context\n  );\n  return function (context) {\n    return requireColorLike(evaluator(context), name);\n  };\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').NumberArrayEvaluator?} The expression evaluator.\n */\nfunction numberArrayEvaluator(flatStyle, name, context) {\n  if (!(name in flatStyle)) {\n    return null;\n  }\n  const evaluator = buildExpression(flatStyle[name], NumberArrayType, context);\n  return function (context) {\n    return requireNumberArray(evaluator(context), name);\n  };\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').CoordinateEvaluator?} The expression evaluator.\n */\nfunction coordinateEvaluator(flatStyle, name, context) {\n  if (!(name in flatStyle)) {\n    return null;\n  }\n  const evaluator = buildExpression(flatStyle[name], NumberArrayType, context);\n  return function (context) {\n    const array = requireNumberArray(evaluator(context), name);\n    if (array.length !== 2) {\n      throw new Error(`Expected two numbers for ${name}`);\n    }\n    return array;\n  };\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} name The property name.\n * @param {ParsingContext} context The parsing context.\n * @return {import('../../expr/cpu.js').SizeLikeEvaluator?} The expression evaluator.\n */\nfunction sizeLikeEvaluator(flatStyle, name, context) {\n  if (!(name in flatStyle)) {\n    return null;\n  }\n  const evaluator = buildExpression(\n    flatStyle[name],\n    NumberArrayType | NumberType,\n    context\n  );\n  return function (context) {\n    return requireSizeLike(evaluator(context), name);\n  };\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {number|undefined} A number or undefined.\n */\nfunction optionalNumber(flatStyle, property) {\n  const value = flatStyle[property];\n  if (value === undefined) {\n    return undefined;\n  }\n  if (typeof value !== 'number') {\n    throw new Error(`Expected a number for ${property}`);\n  }\n  return value;\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {import(\"../../size.js\").Size|undefined} A size or undefined.\n */\nfunction optionalSize(flatStyle, property) {\n  const encoded = flatStyle[property];\n  if (encoded === undefined) {\n    return undefined;\n  }\n  if (typeof encoded === 'number') {\n    return toSize(encoded);\n  }\n  if (!Array.isArray(encoded)) {\n    throw new Error(`Expected a number or size array for ${property}`);\n  }\n  if (\n    encoded.length !== 2 ||\n    typeof encoded[0] !== 'number' ||\n    typeof encoded[1] !== 'number'\n  ) {\n    throw new Error(`Expected a number or size array for ${property}`);\n  }\n  return encoded;\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {string|undefined} A string or undefined.\n */\nfunction optionalString(flatStyle, property) {\n  const encoded = flatStyle[property];\n  if (encoded === undefined) {\n    return undefined;\n  }\n  if (typeof encoded !== 'string') {\n    throw new Error(`Expected a string for ${property}`);\n  }\n  return encoded;\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {import(\"../../style/Icon.js\").IconOrigin|undefined} An icon origin or undefined.\n */\nfunction optionalIconOrigin(flatStyle, property) {\n  const encoded = flatStyle[property];\n  if (encoded === undefined) {\n    return undefined;\n  }\n  if (\n    encoded !== 'bottom-left' &&\n    encoded !== 'bottom-right' &&\n    encoded !== 'top-left' &&\n    encoded !== 'top-right'\n  ) {\n    throw new Error(\n      `Expected bottom-left, bottom-right, top-left, or top-right for ${property}`\n    );\n  }\n  return encoded;\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {import(\"../../style/Icon.js\").IconAnchorUnits|undefined} Icon anchor units or undefined.\n */\nfunction optionalIconAnchorUnits(flatStyle, property) {\n  const encoded = flatStyle[property];\n  if (encoded === undefined) {\n    return undefined;\n  }\n  if (encoded !== 'pixels' && encoded !== 'fraction') {\n    throw new Error(`Expected pixels or fraction for ${property}`);\n  }\n  return encoded;\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {Array<number>|undefined} An array of numbers or undefined.\n */\nfunction optionalNumberArray(flatStyle, property) {\n  const encoded = flatStyle[property];\n  if (encoded === undefined) {\n    return undefined;\n  }\n  return requireNumberArray(encoded, property);\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {\"declutter\"|\"obstacle\"|\"none\"|undefined} Icon declutter mode.\n */\nfunction optionalDeclutterMode(flatStyle, property) {\n  const encoded = flatStyle[property];\n  if (encoded === undefined) {\n    return undefined;\n  }\n  if (typeof encoded !== 'string') {\n    throw new Error(`Expected a string for ${property}`);\n  }\n  if (encoded !== 'declutter' && encoded !== 'obstacle' && encoded !== 'none') {\n    throw new Error(`Expected declutter, obstacle, or none for ${property}`);\n  }\n  return encoded;\n}\n\n/**\n * @param {FlatStyle} flatStyle The flat style.\n * @param {string} property The symbolizer property.\n * @return {string|Array<number>|undefined} A string or an array of color values or undefined.\n */\nfunction optionalColorLike(flatStyle, property) {\n  const encoded = flatStyle[property];\n  if (encoded === undefined) {\n    return undefined;\n  }\n  return requireColorLike(encoded, property);\n}\n\n/**\n * @param {any} value The value.\n * @param {string} property The property.\n * @return {Array<number>} An array of numbers.\n */\nfunction requireNumberArray(value, property) {\n  if (!Array.isArray(value)) {\n    throw new Error(`Expected an array for ${property}`);\n  }\n  const length = value.length;\n  for (let i = 0; i < length; ++i) {\n    if (typeof value[i] !== 'number') {\n      throw new Error(`Expected an array of numbers for ${property}`);\n    }\n  }\n  return value;\n}\n\n/**\n * @param {any} value The value.\n * @param {string} property The property.\n * @return {string} A string.\n */\nfunction requireString(value, property) {\n  if (typeof value !== 'string') {\n    throw new Error(`Expected a string for ${property}`);\n  }\n  return value;\n}\n\n/**\n * @param {any} value The value.\n * @param {string} property The property.\n * @return {number} A number.\n */\nfunction requireNumber(value, property) {\n  if (typeof value !== 'number') {\n    throw new Error(`Expected a number for ${property}`);\n  }\n  return value;\n}\n\n/**\n * @param {any} value The value.\n * @param {string} property The property.\n * @return {Array<number>|string} A color.\n */\nfunction requireColorLike(value, property) {\n  if (typeof value === 'string') {\n    return value;\n  }\n  const array = requireNumberArray(value, property);\n  const length = array.length;\n  if (length < 3 || length > 4) {\n    throw new Error(`Expected a color with 3 or 4 values for ${property}`);\n  }\n  return array;\n}\n\n/**\n * @param {any} value The value.\n * @param {string} property The property.\n * @return {number|Array<number>} A number or an array of two numbers.\n */\nfunction requireSizeLike(value, property) {\n  if (typeof value === 'number') {\n    return value;\n  }\n  const size = requireNumberArray(value, property);\n  if (size.length !== 2) {\n    throw new Error(`Expected an array of two numbers for ${property}`);\n  }\n  return size;\n}\n","/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {assert} from '../asserts.js';\nimport {get as getIconImage} from './IconImage.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {'fraction' | 'pixels'} IconAnchorUnits\n * Anchor unit can be either a fraction of the icon size or in pixels.\n */\n\n/**\n * @typedef {'bottom-left' | 'bottom-right' | 'top-left' | 'top-right'} IconOrigin\n * Icon origin. One of 'bottom-left', 'bottom-right', 'top-left', 'top-right'.\n */\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {IconOrigin} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {IconAnchorUnits} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {IconAnchorUnits} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement|ImageBitmap} [img] Image object for the icon.\n * @property {Array<number>} [displacement=[0, 0]] Displacement of the icon in pixels.\n * Positive values will shift the icon right and up.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number} [width] The width of the icon in pixels. This can't be used together with `scale`.\n * @property {number} [height] The height of the icon in pixels. This can't be used together with `scale`.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {Array<number>} [offset=[0, 0]] Offset which, together with `size` and `offsetOrigin`, defines the\n * sub-rectangle to use from the original (sprite) image.\n * @property {IconOrigin} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"../size.js\").Size} [size] Icon size in pixels. Used together with `offset` to define the\n * sub-rectangle to use from the original (sprite) image.\n * @property {string} [src] Image source URI.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode.\n */\n\n/**\n * @param {number} width The width.\n * @param {number} height The height.\n * @param {number|undefined} wantedWidth The wanted width.\n * @param {number|undefined} wantedHeight The wanted height.\n * @return {number|Array<number>} The scale.\n */\nfunction calculateScale(width, height, wantedWidth, wantedHeight) {\n  if (wantedWidth !== undefined && wantedHeight !== undefined) {\n    return [wantedWidth / width, wantedHeight / height];\n  }\n  if (wantedWidth !== undefined) {\n    return wantedWidth / width;\n  }\n  if (wantedHeight !== undefined) {\n    return wantedHeight / height;\n  }\n  return 1;\n}\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.anchorOrigin_ =\n      options.anchorOrigin !== undefined ? options.anchorOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorXUnits_ =\n      options.anchorXUnits !== undefined ? options.anchorXUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {IconAnchorUnits}\n     */\n    this.anchorYUnits_ =\n      options.anchorYUnits !== undefined ? options.anchorYUnits : 'fraction';\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    const image = options.img !== undefined ? options.img : null;\n\n    let cacheKey = options.src;\n\n    assert(\n      !(cacheKey !== undefined && image),\n      '`image` and `src` cannot be provided at the same time'\n    );\n\n    if ((cacheKey === undefined || cacheKey.length === 0) && image) {\n      cacheKey = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n    }\n    assert(\n      cacheKey !== undefined && cacheKey.length > 0,\n      'A defined and non-empty `src` or `image` must be provided'\n    );\n\n    assert(\n      !(\n        (options.width !== undefined || options.height !== undefined) &&\n        options.scale !== undefined\n      ),\n      '`width` or `height` cannot be provided together with `scale`'\n    );\n\n    let imageState;\n    if (options.src !== undefined) {\n      imageState = ImageState.IDLE;\n    } else if (image !== undefined) {\n      if (image instanceof HTMLImageElement) {\n        if (image.complete) {\n          imageState = image.src ? ImageState.LOADED : ImageState.IDLE;\n        } else {\n          imageState = ImageState.LOADING;\n        }\n      } else {\n        imageState = ImageState.LOADED;\n      }\n    }\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(\n      image,\n      /** @type {string} */ (cacheKey),\n      this.crossOrigin_,\n      imageState,\n      this.color_\n    );\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {IconOrigin}\n     */\n    this.offsetOrigin_ =\n      options.offsetOrigin !== undefined ? options.offsetOrigin : 'top-left';\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n\n    /**\n     * Calculate the scale if width or height were given.\n     */\n    if (options.width !== undefined || options.height !== undefined) {\n      let width, height;\n      if (options.size) {\n        [width, height] = options.size;\n      } else {\n        const image = this.getImage(1);\n        if (image.width && image.height) {\n          width = image.width;\n          height = image.height;\n        } else if (image instanceof HTMLImageElement) {\n          this.initialOptions_ = options;\n          const onload = () => {\n            this.unlistenImageChange(onload);\n            if (!this.initialOptions_) {\n              return;\n            }\n            const imageSize = this.iconImage_.getSize();\n            this.setScale(\n              calculateScale(\n                imageSize[0],\n                imageSize[1],\n                options.width,\n                options.height\n              )\n            );\n          };\n          this.listenImageChange(onload);\n          return;\n        }\n      }\n      if (width !== undefined) {\n        this.setScale(\n          calculateScale(width, height, options.width, options.height)\n        );\n      }\n    }\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    let scale, width, height;\n    if (this.initialOptions_) {\n      width = this.initialOptions_.width;\n      height = this.initialOptions_.height;\n    } else {\n      scale = this.getScale();\n      scale = Array.isArray(scale) ? scale.slice() : scale;\n    }\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      color:\n        this.color_ && this.color_.slice\n          ? this.color_.slice()\n          : this.color_ || undefined,\n      crossOrigin: this.crossOrigin_,\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      opacity: this.getOpacity(),\n      rotateWithView: this.getRotateWithView(),\n      rotation: this.getRotation(),\n      scale,\n      width,\n      height,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      src: this.getSrc(),\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    let anchor = this.normalizedAnchor_;\n    if (!anchor) {\n      anchor = this.anchor_;\n      const size = this.getSize();\n      if (\n        this.anchorXUnits_ == 'fraction' ||\n        this.anchorYUnits_ == 'fraction'\n      ) {\n        if (!size) {\n          return null;\n        }\n        anchor = this.anchor_.slice();\n        if (this.anchorXUnits_ == 'fraction') {\n          anchor[0] *= size[0];\n        }\n        if (this.anchorYUnits_ == 'fraction') {\n          anchor[1] *= size[1];\n        }\n      }\n\n      if (this.anchorOrigin_ != 'top-left') {\n        if (!size) {\n          return null;\n        }\n        if (anchor === this.anchor_) {\n          anchor = this.anchor_.slice();\n        }\n        if (\n          this.anchorOrigin_ == 'top-right' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[0] = -anchor[0] + size[0];\n        }\n        if (\n          this.anchorOrigin_ == 'bottom-left' ||\n          this.anchorOrigin_ == 'bottom-right'\n        ) {\n          anchor[1] = -anchor[1] + size[1];\n        }\n      }\n      this.normalizedAnchor_ = anchor;\n    }\n    const displacement = this.getDisplacement();\n    const scale = this.getScaleArray();\n    // anchor is scaled by renderer but displacement should not be scaled\n    // so divide by scale here\n    return [\n      anchor[0] - displacement[0] / scale[0],\n      anchor[1] + displacement[1] / scale[1],\n    ];\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element. If the Icon\n   * style was configured with `src` or with a not let loaded `img`, an `ImageBitmap` will be returned.\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ratio of the image.\n   * @api\n   */\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\n   */\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n\n    if (this.offsetOrigin_ != 'top-left') {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (\n        this.offsetOrigin_ == 'top-right' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (\n        this.offsetOrigin_ == 'bottom-left' ||\n        this.offsetOrigin_ == 'bottom-right'\n      ) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * Get the width of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon width (in pixels).\n   * @api\n   */\n  getWidth() {\n    const scale = this.getScaleArray();\n    if (this.size_) {\n      return this.size_[0] * scale[0];\n    }\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\n      return this.iconImage_.getSize()[0] * scale[0];\n    }\n    return undefined;\n  }\n\n  /**\n   * Get the height of the icon (in pixels). Will return undefined when the icon image is not yet loaded.\n   * @return {number} Icon height (in pixels).\n   * @api\n   */\n  getHeight() {\n    const scale = this.getScaleArray();\n    if (this.size_) {\n      return this.size_[1] * scale[1];\n    }\n    if (this.iconImage_.getImageState() == ImageState.LOADED) {\n      return this.iconImage_.getSize()[1] * scale[1];\n    }\n    return undefined;\n  }\n\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    delete this.initialOptions_;\n    super.setScale(scale);\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n}\n\nexport default Icon;\n","/**\n * @module ol/style/IconImage\n */\n\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport {asString} from '../color.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {decodeFallback} from '../Image.js';\nimport {shared as iconImageCache} from './IconImageCache.js';\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet taintedTestContext = null;\n\nclass IconImage extends EventTarget {\n  /**\n   * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap} image Image.\n   * @param {string|undefined} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../ImageState.js\").default} imageState Image state.\n   * @param {import(\"../color.js\").Color} color Color.\n   */\n  constructor(image, src, crossOrigin, imageState, color) {\n    super();\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap}\n     */\n    this.hitDetectionImage_ = null;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement|ImageBitmap}\n     */\n    this.image_ = image;\n\n    /**\n     * @private\n     * @type {string|null}\n     */\n    this.crossOrigin_ = crossOrigin;\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvas_ = {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = color;\n\n    /**\n     * @private\n     * @type {import(\"../ImageState.js\").default}\n     */\n    this.imageState_ = imageState === undefined ? ImageState.IDLE : imageState;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size|null}\n     */\n    this.size_ =\n      image && image.width && image.height ? [image.width, image.height] : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     */\n    this.tainted_;\n  }\n\n  /**\n   * @private\n   */\n  initializeImage_() {\n    this.image_ = new Image();\n    if (this.crossOrigin_ !== null) {\n      this.image_.crossOrigin = this.crossOrigin_;\n    }\n  }\n\n  /**\n   * @private\n   * @return {boolean} The image canvas is tainted.\n   */\n  isTainted_() {\n    if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\n      if (!taintedTestContext) {\n        taintedTestContext = createCanvasContext2D(1, 1, undefined, {\n          willReadFrequently: true,\n        });\n      }\n      taintedTestContext.drawImage(this.image_, 0, 0);\n      try {\n        taintedTestContext.getImageData(0, 0, 1, 1);\n        this.tainted_ = false;\n      } catch (e) {\n        taintedTestContext = null;\n        this.tainted_ = true;\n      }\n    }\n    return this.tainted_ === true;\n  }\n\n  /**\n   * @private\n   */\n  dispatchChangeEvent_() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * @private\n   */\n  handleImageError_() {\n    this.imageState_ = ImageState.ERROR;\n    this.dispatchChangeEvent_();\n  }\n\n  /**\n   * @private\n   */\n  handleImageLoad_() {\n    this.imageState_ = ImageState.LOADED;\n    this.size_ = [this.image_.width, this.image_.height];\n    this.dispatchChangeEvent_();\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image or Canvas element or image bitmap.\n   */\n  getImage(pixelRatio) {\n    if (!this.image_) {\n      this.initializeImage_();\n    }\n    this.replaceColor_(pixelRatio);\n    return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Image or Canvas element.\n   */\n  getPixelRatio(pixelRatio) {\n    this.replaceColor_(pixelRatio);\n    return this.canvas_[pixelRatio] ? pixelRatio : 1;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.imageState_;\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement|ImageBitmap} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.image_) {\n      this.initializeImage_();\n    }\n    if (!this.hitDetectionImage_) {\n      if (this.isTainted_()) {\n        const width = this.size_[0];\n        const height = this.size_[1];\n        const context = createCanvasContext2D(width, height);\n        context.fillRect(0, 0, width, height);\n        this.hitDetectionImage_ = context.canvas;\n      } else {\n        this.hitDetectionImage_ = this.image_;\n      }\n    }\n    return this.hitDetectionImage_;\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {string|undefined} Image src.\n   */\n  getSrc() {\n    return this.src_;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.imageState_ !== ImageState.IDLE) {\n      return;\n    }\n    if (!this.image_) {\n      this.initializeImage_();\n    }\n\n    this.imageState_ = ImageState.LOADING;\n    try {\n      if (this.src_ !== undefined) {\n        /** @type {HTMLImageElement} */ (this.image_).src = this.src_;\n      }\n    } catch (e) {\n      this.handleImageError_();\n    }\n    if (this.image_ instanceof HTMLImageElement) {\n      decodeFallback(this.image_, this.src_)\n        .then((image) => {\n          this.image_ = image;\n          this.handleImageLoad_();\n        })\n        .catch(this.handleImageError_.bind(this));\n    }\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @private\n   */\n  replaceColor_(pixelRatio) {\n    if (\n      !this.color_ ||\n      this.canvas_[pixelRatio] ||\n      this.imageState_ !== ImageState.LOADED\n    ) {\n      return;\n    }\n\n    const image = this.image_;\n    const canvas = document.createElement('canvas');\n    canvas.width = Math.ceil(image.width * pixelRatio);\n    canvas.height = Math.ceil(image.height * pixelRatio);\n\n    const ctx = canvas.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.drawImage(image, 0, 0);\n\n    ctx.globalCompositeOperation = 'multiply';\n    ctx.fillStyle = asString(this.color_);\n    ctx.fillRect(0, 0, canvas.width / pixelRatio, canvas.height / pixelRatio);\n\n    ctx.globalCompositeOperation = 'destination-in';\n    ctx.drawImage(image, 0, 0);\n\n    this.canvas_[pixelRatio] = canvas;\n  }\n}\n\n/**\n * @param {HTMLImageElement|HTMLCanvasElement|ImageBitmap} image Image.\n * @param {string} cacheKey Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../ImageState.js\").default} imageState Image state.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {IconImage} Icon image.\n */\nexport function get(image, cacheKey, crossOrigin, imageState, color) {\n  let iconImage =\n    cacheKey === undefined\n      ? undefined\n      : iconImageCache.get(cacheKey, crossOrigin, color);\n  if (!iconImage) {\n    iconImage = new IconImage(\n      image,\n      image instanceof HTMLImageElement ? image.src || undefined : cacheKey,\n      crossOrigin,\n      imageState,\n      color\n    );\n    iconImageCache.set(cacheKey, crossOrigin, color, iconImage);\n  }\n  return iconImage;\n}\n\nexport default IconImage;\n","/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {'point' | 'line'} TextPlacement\n * Default text placement is `'point'`. Note that\n * `'line'` requires the underlying geometry to be a {@link module:ol/geom/LineString~LineString},\n * {@link module:ol/geom/Polygon~Polygon}, {@link module:ol/geom/MultiLineString~MultiLineString} or\n * {@link module:ol/geom/MultiPolygon~MultiPolygon}.\n */\n\n/**\n * @typedef {'left' | 'center' | 'right'} TextJustify\n */\n\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nconst DEFAULT_FILL_COLOR = '#333';\n\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS `font` value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is `'10px sans-serif'`\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {TextPlacement} [placement='point'] Text placement.\n * @property {number} [repeat] Repeat interval. When set, the text will be repeated at this interval, which specifies\n * the distance between two text anchors in pixels. Only available when `placement` is set to `'line'`. Overrides 'textAlign'.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for `placement: 'line'` or the immediate rendering API.\n * @property {CanvasTextAlign} [textAlign] Text alignment. Possible values: `'left'`, `'right'`, `'center'`, `'end'` or `'start'`.\n * Default is `'center'` for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {TextJustify} [justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\n * @property {CanvasTextBaseline} [textBaseline='middle'] Text base line. Possible values: `'bottom'`, `'top'`, `'middle'`, `'alphabetic'`,\n * `'hanging'`, `'ideographic'`.\n * @property {import(\"./Fill.js\").default|null} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333). Specify `null` for no fill.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nclass Text {\n  /**\n   * @param {Options} [options] Options.\n   */\n  constructor(options) {\n    options = options || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.font_ = options.font;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n\n    /**\n     * @private\n     * @type {string|Array<string>|undefined}\n     */\n    this.text_ = options.text;\n\n    /**\n     * @private\n     * @type {CanvasTextAlign|undefined}\n     */\n    this.textAlign_ = options.textAlign;\n\n    /**\n     * @private\n     * @type {TextJustify|undefined}\n     */\n    this.justify_ = options.justify;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.repeat_ = options.repeat;\n\n    /**\n     * @private\n     * @type {CanvasTextBaseline|undefined}\n     */\n    this.textBaseline_ = options.textBaseline;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ =\n      options.fill !== undefined\n        ? options.fill\n        : new Fill({color: DEFAULT_FILL_COLOR});\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxAngle_ =\n      options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n\n    /**\n     * @private\n     * @type {TextPlacement}\n     */\n    this.placement_ =\n      options.placement !== undefined ? options.placement : 'point';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overflow_ = !!options.overflow;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.backgroundFill_ = options.backgroundFill\n      ? options.backgroundFill\n      : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.backgroundStroke_ = options.backgroundStroke\n      ? options.backgroundStroke\n      : null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.padding_ = options.padding === undefined ? null : options.padding;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      repeat: this.getRepeat(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      justify: this.getJustify(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill()\n        ? this.getBackgroundFill().clone()\n        : undefined,\n      backgroundStroke: this.getBackgroundStroke()\n        ? this.getBackgroundStroke().clone()\n        : undefined,\n      padding: this.getPadding() || undefined,\n    });\n  }\n\n  /**\n   * Get the `overflow` configuration.\n   * @return {boolean} Let text overflow the length of the path they follow.\n   * @api\n   */\n  getOverflow() {\n    return this.overflow_;\n  }\n\n  /**\n   * Get the font name.\n   * @return {string|undefined} Font.\n   * @api\n   */\n  getFont() {\n    return this.font_;\n  }\n\n  /**\n   * Get the maximum angle between adjacent characters.\n   * @return {number} Angle in radians.\n   * @api\n   */\n  getMaxAngle() {\n    return this.maxAngle_;\n  }\n\n  /**\n   * Get the label placement.\n   * @return {TextPlacement} Text placement.\n   * @api\n   */\n  getPlacement() {\n    return this.placement_;\n  }\n\n  /**\n   * Get the repeat interval of the text.\n   * @return {number|undefined} Repeat interval in pixels.\n   * @api\n   */\n  getRepeat() {\n    return this.repeat_;\n  }\n\n  /**\n   * Get the x-offset for the text.\n   * @return {number} Horizontal text offset.\n   * @api\n   */\n  getOffsetX() {\n    return this.offsetX_;\n  }\n\n  /**\n   * Get the y-offset for the text.\n   * @return {number} Vertical text offset.\n   * @api\n   */\n  getOffsetY() {\n    return this.offsetY_;\n  }\n\n  /**\n   * Get the fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Determine whether the text rotates with the map.\n   * @return {boolean|undefined} Rotate with map.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Get the text rotation.\n   * @return {number|undefined} Rotation.\n   * @api\n   */\n  getRotation() {\n    return this.rotation_;\n  }\n\n  /**\n   * Get the text scale.\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\n   * @api\n   */\n  getScale() {\n    return this.scale_;\n  }\n\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  getScaleArray() {\n    return this.scaleArray_;\n  }\n\n  /**\n   * Get the stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Get the text to be rendered.\n   * @return {string|Array<string>|undefined} Text.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Get the text alignment.\n   * @return {CanvasTextAlign|undefined} Text align.\n   * @api\n   */\n  getTextAlign() {\n    return this.textAlign_;\n  }\n\n  /**\n   * Get the justification.\n   * @return {TextJustify|undefined} Justification.\n   * @api\n   */\n  getJustify() {\n    return this.justify_;\n  }\n\n  /**\n   * Get the text baseline.\n   * @return {CanvasTextBaseline|undefined} Text baseline.\n   * @api\n   */\n  getTextBaseline() {\n    return this.textBaseline_;\n  }\n\n  /**\n   * Get the background fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getBackgroundFill() {\n    return this.backgroundFill_;\n  }\n\n  /**\n   * Get the background stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getBackgroundStroke() {\n    return this.backgroundStroke_;\n  }\n\n  /**\n   * Get the padding for the text.\n   * @return {Array<number>|null} Padding.\n   * @api\n   */\n  getPadding() {\n    return this.padding_;\n  }\n\n  /**\n   * Set the `overflow` property.\n   *\n   * @param {boolean} overflow Let text overflow the path that it follows.\n   * @api\n   */\n  setOverflow(overflow) {\n    this.overflow_ = overflow;\n  }\n\n  /**\n   * Set the font.\n   *\n   * @param {string|undefined} font Font.\n   * @api\n   */\n  setFont(font) {\n    this.font_ = font;\n  }\n\n  /**\n   * Set the maximum angle between adjacent characters.\n   *\n   * @param {number} maxAngle Angle in radians.\n   * @api\n   */\n  setMaxAngle(maxAngle) {\n    this.maxAngle_ = maxAngle;\n  }\n\n  /**\n   * Set the x offset.\n   *\n   * @param {number} offsetX Horizontal text offset.\n   * @api\n   */\n  setOffsetX(offsetX) {\n    this.offsetX_ = offsetX;\n  }\n\n  /**\n   * Set the y offset.\n   *\n   * @param {number} offsetY Vertical text offset.\n   * @api\n   */\n  setOffsetY(offsetY) {\n    this.offsetY_ = offsetY;\n  }\n\n  /**\n   * Set the text placement.\n   *\n   * @param {TextPlacement} placement Placement.\n   * @api\n   */\n  setPlacement(placement) {\n    this.placement_ = placement;\n  }\n\n  /**\n   * Set the repeat interval of the text.\n   * @param {number|undefined} [repeat] Repeat interval in pixels.\n   * @api\n   */\n  setRepeat(repeat) {\n    this.repeat_ = repeat;\n  }\n\n  /**\n   * Set whether to rotate the text with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  }\n\n  /**\n   * Set the fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Set the rotation.\n   *\n   * @param {number|undefined} rotation Rotation.\n   * @api\n   */\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n  }\n\n  /**\n   * Set the stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Set the text.\n   *\n   * @param {string|Array<string>|undefined} text Text.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Set the text alignment.\n   *\n   * @param {CanvasTextAlign|undefined} textAlign Text align.\n   * @api\n   */\n  setTextAlign(textAlign) {\n    this.textAlign_ = textAlign;\n  }\n\n  /**\n   * Set the justification.\n   *\n   * @param {TextJustify|undefined} justify Justification.\n   * @api\n   */\n  setJustify(justify) {\n    this.justify_ = justify;\n  }\n\n  /**\n   * Set the text baseline.\n   *\n   * @param {CanvasTextBaseline|undefined} textBaseline Text baseline.\n   * @api\n   */\n  setTextBaseline(textBaseline) {\n    this.textBaseline_ = textBaseline;\n  }\n\n  /**\n   * Set the background fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setBackgroundFill(fill) {\n    this.backgroundFill_ = fill;\n  }\n\n  /**\n   * Set the background stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setBackgroundStroke(stroke) {\n    this.backgroundStroke_ = stroke;\n  }\n\n  /**\n   * Set the padding (`[top, right, bottom, left]`).\n   *\n   * @param {Array<number>|null} padding Padding.\n   * @api\n   */\n  setPadding(padding) {\n    this.padding_ = padding;\n  }\n}\n\nexport default Text;\n","/**\n * @module ol/expr/expression\n */\n\nimport {ascending} from '../array.js';\n\n/**\n * @fileoverview This module includes types and functions for parsing array encoded expressions.\n * The result of parsing an encoded expression is one of the specific expression classes.\n * During parsing, information is added to the parsing context about the data accessed by the\n * expression.\n */\n\nlet numTypes = 0;\nexport const NoneType = 0;\nexport const BooleanType = 1 << numTypes++;\nexport const NumberType = 1 << numTypes++;\nexport const StringType = 1 << numTypes++;\nexport const ColorType = 1 << numTypes++;\nexport const NumberArrayType = 1 << numTypes++;\nexport const AnyType = Math.pow(2, numTypes) - 1;\n\nconst typeNames = {\n  [BooleanType]: 'boolean',\n  [NumberType]: 'number',\n  [StringType]: 'string',\n  [ColorType]: 'color',\n  [NumberArrayType]: 'number[]',\n};\n\nconst namedTypes = Object.keys(typeNames).map(Number).sort(ascending);\n\n/**\n * Get a string representation for a type.\n * @param {number} type The type.\n * @return {string} The type name.\n */\nexport function typeName(type) {\n  const names = [];\n  for (const namedType of namedTypes) {\n    if (includesType(type, namedType)) {\n      names.push(typeNames[namedType]);\n    }\n  }\n  if (names.length === 0) {\n    return 'untyped';\n  }\n  if (names.length < 3) {\n    return names.join(' or ');\n  }\n  return names.slice(0, -1).join(', ') + ', or ' + names[names.length - 1];\n}\n\n/**\n * @param {number} broad The broad type.\n * @param {number} specific The specific type.\n * @return {boolean} The broad type includes the specific type.\n */\nexport function includesType(broad, specific) {\n  return (broad & specific) === specific;\n}\n\n/**\n * @param {number} oneType One type.\n * @param {number} otherType Another type.\n * @return {boolean} The set of types overlap (share a common specific type)\n */\nexport function overlapsType(oneType, otherType) {\n  return !!(oneType & otherType);\n}\n\n/**\n * @param {number} type The type.\n * @param {number} expected The expected type.\n * @return {boolean} The given type is exactly the expected type.\n */\nexport function isType(type, expected) {\n  return type === expected;\n}\n\n/**\n * @typedef {boolean|number|string|Array<number>} LiteralValue\n */\n\nexport class LiteralExpression {\n  /**\n   * @param {number} type The value type.\n   * @param {LiteralValue} value The literal value.\n   */\n  constructor(type, value) {\n    this.type = type;\n    this.value = value;\n  }\n}\n\nexport class CallExpression {\n  /**\n   * @param {number} type The return type.\n   * @param {string} operator The operator.\n   * @param {...Expression} args The arguments.\n   */\n  constructor(type, operator, ...args) {\n    this.type = type;\n    this.operator = operator;\n    this.args = args;\n  }\n}\n\n/**\n * @typedef {LiteralExpression|CallExpression} Expression\n */\n\n/**\n * @typedef {Object} ParsingContext\n * @property {Set<string>} variables Variables referenced with the 'var' operator.\n * @property {Set<string>} properties Properties referenced with the 'get' operator.\n */\n\n/**\n * @return {ParsingContext} A new parsing context.\n */\nexport function newParsingContext() {\n  return {\n    variables: new Set(),\n    properties: new Set(),\n  };\n}\n\n/**\n * @typedef {LiteralValue|Array} EncodedExpression\n */\n\n/**\n * @param {EncodedExpression} encoded The encoded expression.\n * @param {ParsingContext} context The parsing context.\n * @return {Expression} The parsed expression result.\n */\nexport function parse(encoded, context) {\n  switch (typeof encoded) {\n    case 'boolean': {\n      return new LiteralExpression(BooleanType, encoded);\n    }\n    case 'number': {\n      return new LiteralExpression(NumberType, encoded);\n    }\n    case 'string': {\n      return new LiteralExpression(StringType, encoded);\n    }\n    default: {\n      // pass\n    }\n  }\n\n  if (!Array.isArray(encoded)) {\n    throw new Error('Expression must be an array or a primitive value');\n  }\n\n  if (encoded.length === 0) {\n    throw new Error('Empty expression');\n  }\n\n  if (typeof encoded[0] === 'string') {\n    return parseCallExpression(encoded, context);\n  }\n\n  for (const item of encoded) {\n    if (typeof item !== 'number') {\n      throw new Error('Expected an array of numbers');\n    }\n  }\n\n  let type = NumberArrayType;\n  if (encoded.length === 3 || encoded.length === 4) {\n    type |= ColorType;\n  }\n\n  return new LiteralExpression(type, encoded);\n}\n\n/**\n * @type {Object<string, string>}\n */\nexport const Ops = {\n  Number: 'number',\n  String: 'string',\n  Get: 'get',\n  Var: 'var',\n  Any: 'any',\n  All: 'all',\n  Not: '!',\n  Resolution: 'resolution',\n  Equal: '==',\n  NotEqual: '!=',\n  GreaterThan: '>',\n  GreaterThanOrEqualTo: '>=',\n  LessThan: '<',\n  LessThanOrEqualTo: '<=',\n  Multiply: '*',\n  Divide: '/',\n  Add: '+',\n  Subtract: '-',\n  Clamp: 'clamp',\n  Mod: '%',\n  Pow: '^',\n  Abs: 'abs',\n  Floor: 'floor',\n  Ceil: 'ceil',\n  Round: 'round',\n  Sin: 'sin',\n  Cos: 'cos',\n  Atan: 'atan',\n  Sqrt: 'sqrt',\n  Match: 'match',\n};\n\n/**\n * @typedef {function(Array, ParsingContext):Expression} Parser\n */\n\n/**\n * @type {Object<string, Parser>}\n */\nconst parsers = {\n  [Ops.Number]: createParser(withArgs(1, Infinity, AnyType), NumberType),\n  [Ops.String]: createParser(withArgs(1, Infinity, AnyType), StringType),\n  [Ops.Get]: createParser(withGetArgs, AnyType),\n  [Ops.Var]: createParser(withVarArgs, AnyType),\n  [Ops.Resolution]: createParser(withNoArgs, NumberType),\n  [Ops.Any]: createParser(withArgs(2, Infinity, BooleanType), BooleanType),\n  [Ops.All]: createParser(withArgs(2, Infinity, BooleanType), BooleanType),\n  [Ops.Not]: createParser(withArgs(1, 1, BooleanType), BooleanType),\n  [Ops.Equal]: createParser(withArgs(2, 2, AnyType), BooleanType),\n  [Ops.NotEqual]: createParser(withArgs(2, 2, AnyType), BooleanType),\n  [Ops.GreaterThan]: createParser(withArgs(2, 2, AnyType), BooleanType),\n  [Ops.GreaterThanOrEqualTo]: createParser(\n    withArgs(2, 2, AnyType),\n    BooleanType\n  ),\n  [Ops.LessThan]: createParser(withArgs(2, 2, AnyType), BooleanType),\n  [Ops.LessThanOrEqualTo]: createParser(withArgs(2, 2, AnyType), BooleanType),\n  [Ops.Multiply]: createParser(withArgs(2, Infinity, NumberType), NumberType),\n  [Ops.Divide]: createParser(withArgs(2, 2, NumberType), NumberType),\n  [Ops.Add]: createParser(withArgs(2, Infinity, NumberType), NumberType),\n  [Ops.Subtract]: createParser(withArgs(2, 2, NumberType), NumberType),\n  [Ops.Clamp]: createParser(withArgs(3, 3, NumberType), NumberType),\n  [Ops.Mod]: createParser(withArgs(2, 2, NumberType), NumberType),\n  [Ops.Pow]: createParser(withArgs(2, 2, NumberType), NumberType),\n  [Ops.Abs]: createParser(withArgs(1, 1, NumberType), NumberType),\n  [Ops.Floor]: createParser(withArgs(1, 1, NumberType), NumberType),\n  [Ops.Ceil]: createParser(withArgs(1, 1, NumberType), NumberType),\n  [Ops.Round]: createParser(withArgs(1, 1, NumberType), NumberType),\n  [Ops.Sin]: createParser(withArgs(1, 1, NumberType), NumberType),\n  [Ops.Cos]: createParser(withArgs(1, 1, NumberType), NumberType),\n  [Ops.Atan]: createParser(withArgs(1, 2, NumberType), NumberType),\n  [Ops.Sqrt]: createParser(withArgs(1, 1, NumberType), NumberType),\n  [Ops.Match]: createParser(\n    withArgs(4, Infinity, StringType | NumberType),\n    AnyType\n  ),\n};\n\n/**\n * @typedef {function(Array, ParsingContext):Array<Expression>} ArgValidator\n */\n\n/**\n * @type ArgValidator\n */\nfunction withGetArgs(encoded, context) {\n  if (encoded.length !== 2) {\n    throw new Error('Expected 1 argument for get operation');\n  }\n  const arg = parse(encoded[1], context);\n  if (!(arg instanceof LiteralExpression)) {\n    throw new Error('Expected a literal argument for get operation');\n  }\n  if (typeof arg.value !== 'string') {\n    throw new Error('Expected a string argument for get operation');\n  }\n  context.properties.add(arg.value);\n  return [arg];\n}\n\n/**\n * @type ArgValidator\n */\nfunction withVarArgs(encoded, context) {\n  if (encoded.length !== 2) {\n    throw new Error('Expected 1 argument for var operation');\n  }\n  const arg = parse(encoded[1], context);\n  if (!(arg instanceof LiteralExpression)) {\n    throw new Error('Expected a literal argument for var operation');\n  }\n  if (typeof arg.value !== 'string') {\n    throw new Error('Expected a string argument for get operation');\n  }\n  context.variables.add(arg.value);\n  return [arg];\n}\n\n/**\n * @type ArgValidator\n */\nfunction withNoArgs(encoded, context) {\n  const operation = encoded[0];\n  if (encoded.length !== 1) {\n    throw new Error(`Expected no arguments for ${operation} operation`);\n  }\n  return [];\n}\n\n/**\n * @param {number} minArgs The minimum number of arguments.\n * @param {number} maxArgs The maximum number of arguments.\n * @param {number} argType The argument type.\n * @return {ArgValidator} The argument validator\n */\nfunction withArgs(minArgs, maxArgs, argType) {\n  return function (encoded, context) {\n    const operation = encoded[0];\n    const argCount = encoded.length - 1;\n    if (minArgs === maxArgs) {\n      if (argCount !== minArgs) {\n        const plural = minArgs === 1 ? '' : 's';\n        throw new Error(\n          `Expected ${minArgs} argument${plural} for operation ${operation}, got ${argCount}`\n        );\n      }\n    } else if (argCount < minArgs || argCount > maxArgs) {\n      throw new Error(\n        `Expected ${minArgs} to ${maxArgs} arguments for operation ${operation}, got ${argCount}`\n      );\n    }\n\n    /**\n     * @type {Array<Expression>}\n     */\n    const args = new Array(argCount);\n    for (let i = 0; i < argCount; ++i) {\n      const expression = parse(encoded[i + 1], context);\n      if (!overlapsType(argType, expression.type)) {\n        const gotType = typeName(argType);\n        const expectedType = typeName(expression.type);\n        throw new Error(\n          `Unexpected type for argument ${i} of ${operation} operation` +\n            ` : got ${gotType} but expected ${expectedType}`\n        );\n      }\n      args[i] = expression;\n    }\n\n    return args;\n  };\n}\n\n/**\n * @param {ArgValidator} argValidator The argument validator.\n * @param {number} returnType The return type.\n * @return {Parser} The parser.\n */\nfunction createParser(argValidator, returnType) {\n  return function (encoded, context) {\n    const operator = encoded[0];\n    const args = argValidator(encoded, context);\n    return new CallExpression(returnType, operator, ...args);\n  };\n}\n\n/**\n * @param {Array} encoded The encoded expression.\n * @param {ParsingContext} context The parsing context.\n * @return {Expression} The parsed expression.\n */\nfunction parseCallExpression(encoded, context) {\n  const operator = encoded[0];\n\n  const parser = parsers[operator];\n  if (!parser) {\n    throw new Error(`Unknown operator: ${operator}`);\n  }\n  return parser(encoded, context);\n}\n","/**\n * @module ol/expr/cpu\n */\n\nimport {\n  LiteralExpression,\n  Ops,\n  overlapsType,\n  parse,\n  typeName,\n} from './expression.js';\n\n/**\n * @fileoverview This module includes functions to build expressions for evaluation on the CPU.\n * Building is composed of two steps: parsing and compiling.  The parsing step takes an encoded\n * expression and returns an instance of one of the expression classes.  The compiling step takes\n * the expression instance and returns a function that can be evaluated in to return a literal\n * value.  The evaluator function should do as little allocation and work as possible.\n */\n\n/**\n * @typedef {Object} EvaluationContext\n * @property {Object} properties The values for properties used in 'get' expressions.\n * @property {Object} variables The values for variables used in 'var' expressions.\n * @property {number} resolution The map resolution.\n */\n\n/**\n * @return {EvaluationContext} A new evaluation context.\n */\nexport function newEvaluationContext() {\n  return {\n    variables: {},\n    properties: {},\n    resolution: NaN,\n  };\n}\n\n/**\n * @typedef {function(EvaluationContext):import(\"./expression.js\").LiteralValue} ExpressionEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):boolean} BooleanEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):number} NumberEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):string} StringEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):(Array<number>|string)} ColorLikeEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):Array<number>} NumberArrayEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):Array<number>} CoordinateEvaluator\n */\n\n/**\n * @typedef {function(EvaluationContext):(Array<number>|number)} SizeLikeEvaluator\n */\n\n/**\n * @param {import('./expression.js').EncodedExpression} encoded The encoded expression.\n * @param {number} type The expected type.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The expression evaluator.\n */\nexport function buildExpression(encoded, type, context) {\n  const expression = parse(encoded, context);\n  if (!overlapsType(type, expression.type)) {\n    const expected = typeName(type);\n    const actual = typeName(expression.type);\n    throw new Error(\n      `Expected expression to be of type ${expected}, got ${actual}`\n    );\n  }\n  return compileExpression(expression, context);\n}\n\n/**\n * @param {import(\"./expression.js\").Expression} expression The expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileExpression(expression, context) {\n  if (expression instanceof LiteralExpression) {\n    return function () {\n      return expression.value;\n    };\n  }\n  const operator = expression.operator;\n  switch (operator) {\n    case Ops.Number:\n    case Ops.String: {\n      return compileAssertionExpression(expression, context);\n    }\n    case Ops.Get:\n    case Ops.Var: {\n      return compileAccessorExpression(expression, context);\n    }\n    case Ops.Resolution: {\n      return (context) => context.resolution;\n    }\n    case Ops.Any:\n    case Ops.All:\n    case Ops.Not: {\n      return compileLogicalExpression(expression, context);\n    }\n    case Ops.Equal:\n    case Ops.NotEqual:\n    case Ops.LessThan:\n    case Ops.LessThanOrEqualTo:\n    case Ops.GreaterThan:\n    case Ops.GreaterThanOrEqualTo: {\n      return compileComparisonExpression(expression, context);\n    }\n    case Ops.Multiply:\n    case Ops.Divide:\n    case Ops.Add:\n    case Ops.Subtract:\n    case Ops.Clamp:\n    case Ops.Mod:\n    case Ops.Pow:\n    case Ops.Abs:\n    case Ops.Floor:\n    case Ops.Ceil:\n    case Ops.Round:\n    case Ops.Sin:\n    case Ops.Cos:\n    case Ops.Atan:\n    case Ops.Sqrt: {\n      return compileNumericExpression(expression, context);\n    }\n    case Ops.Match: {\n      return compileMatchExpression(expression, context);\n    }\n    default: {\n      throw new Error(`Unsupported operator ${operator}`);\n    }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileAssertionExpression(expression, context) {\n  const type = expression.operator;\n  const length = expression.args.length;\n\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch (type) {\n    case Ops.Number:\n    case Ops.String: {\n      return (context) => {\n        for (let i = 0; i < length; ++i) {\n          const value = args[i](context);\n          if (typeof value === type) {\n            return value;\n          }\n        }\n        throw new Error(`Expected one of the values to be a ${type}`);\n      };\n    }\n    default: {\n      throw new Error(`Unsupported assertion operator ${type}`);\n    }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileAccessorExpression(expression, context) {\n  const nameExpression = expression.args[0];\n  if (!(nameExpression instanceof LiteralExpression)) {\n    throw new Error('Expected literal name');\n  }\n  const name = nameExpression.value;\n  if (typeof name !== 'string') {\n    throw new Error('Expected string name');\n  }\n  switch (expression.operator) {\n    case Ops.Get: {\n      return (context) => context.properties[name];\n    }\n    case Ops.Var: {\n      return (context) => context.variables[name];\n    }\n    default: {\n      throw new Error(`Unsupported accessor operator ${expression.operator}`);\n    }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {BooleanEvaluator} The evaluator function.\n */\nfunction compileComparisonExpression(expression, context) {\n  const op = expression.operator;\n  const left = compileExpression(expression.args[0], context);\n  const right = compileExpression(expression.args[1], context);\n  switch (op) {\n    case Ops.Equal: {\n      return (context) => left(context) === right(context);\n    }\n    case Ops.NotEqual: {\n      return (context) => left(context) !== right(context);\n    }\n    case Ops.LessThan: {\n      return (context) => left(context) < right(context);\n    }\n    case Ops.LessThanOrEqualTo: {\n      return (context) => left(context) <= right(context);\n    }\n    case Ops.GreaterThan: {\n      return (context) => left(context) > right(context);\n    }\n    case Ops.GreaterThanOrEqualTo: {\n      return (context) => left(context) >= right(context);\n    }\n    default: {\n      throw new Error(`Unsupported comparison operator ${op}`);\n    }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {BooleanEvaluator} The evaluator function.\n */\nfunction compileLogicalExpression(expression, context) {\n  const op = expression.operator;\n  const length = expression.args.length;\n\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch (op) {\n    case Ops.Any: {\n      return (context) => {\n        for (let i = 0; i < length; ++i) {\n          if (args[i](context)) {\n            return true;\n          }\n        }\n        return false;\n      };\n    }\n    case Ops.All: {\n      return (context) => {\n        for (let i = 0; i < length; ++i) {\n          if (!args[i](context)) {\n            return false;\n          }\n        }\n        return true;\n      };\n    }\n    case Ops.Not: {\n      return (context) => !args[0](context);\n    }\n    default: {\n      throw new Error(`Unsupported logical operator ${op}`);\n    }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {NumberEvaluator} The evaluator function.\n */\nfunction compileNumericExpression(expression, context) {\n  const op = expression.operator;\n  const length = expression.args.length;\n\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  switch (op) {\n    case Ops.Multiply: {\n      return (context) => {\n        let value = 1;\n        for (let i = 0; i < length; ++i) {\n          value *= args[i](context);\n        }\n        return value;\n      };\n    }\n    case Ops.Divide: {\n      return (context) => args[0](context) / args[1](context);\n    }\n    case Ops.Add: {\n      return (context) => {\n        let value = 0;\n        for (let i = 0; i < length; ++i) {\n          value += args[i](context);\n        }\n        return value;\n      };\n    }\n    case Ops.Subtract: {\n      return (context) => args[0](context) - args[1](context);\n    }\n    case Ops.Clamp: {\n      return (context) => {\n        const value = args[0](context);\n        const min = args[1](context);\n        if (value < min) {\n          return min;\n        }\n        const max = args[2](context);\n        if (value > max) {\n          return max;\n        }\n        return value;\n      };\n    }\n    case Ops.Mod: {\n      return (context) => args[0](context) % args[1](context);\n    }\n    case Ops.Pow: {\n      return (context) => Math.pow(args[0](context), args[1](context));\n    }\n    case Ops.Abs: {\n      return (context) => Math.abs(args[0](context));\n    }\n    case Ops.Floor: {\n      return (context) => Math.floor(args[0](context));\n    }\n    case Ops.Ceil: {\n      return (context) => Math.ceil(args[0](context));\n    }\n    case Ops.Round: {\n      return (context) => Math.round(args[0](context));\n    }\n    case Ops.Sin: {\n      return (context) => Math.sin(args[0](context));\n    }\n    case Ops.Cos: {\n      return (context) => Math.cos(args[0](context));\n    }\n    case Ops.Atan: {\n      if (length === 2) {\n        return (context) => Math.atan2(args[0](context), args[1](context));\n      }\n      return (context) => Math.atan(args[0](context));\n    }\n    case Ops.Sqrt: {\n      return (context) => Math.sqrt(args[0](context));\n    }\n    default: {\n      throw new Error(`Unsupported numeric operator ${op}`);\n    }\n  }\n}\n\n/**\n * @param {import('./expression.js').CallExpression} expression The call expression.\n * @param {import('./expression.js').ParsingContext} context The parsing context.\n * @return {ExpressionEvaluator} The evaluator function.\n */\nfunction compileMatchExpression(expression, context) {\n  const length = expression.args.length;\n  const args = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    args[i] = compileExpression(expression.args[i], context);\n  }\n  return (context) => {\n    const value = args[0](context);\n    for (let i = 1; i < length; i += 2) {\n      if (value === args[i](context)) {\n        return args[i + 1](context);\n      }\n    }\n    return args[length - 1](context);\n  };\n}\n","/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, {canvasPool} from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport RenderEventType from '../../render/EventType.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  HIT_DETECT_RESOLUTION,\n  createHitDetectionImageData,\n  hitDetect,\n} from '../../render/canvas/hitdetect.js';\nimport {\n  apply,\n  makeInverse,\n  makeScale,\n  toString as transformToString,\n} from '../../transform.js';\nimport {\n  buffer,\n  containsExtent,\n  createEmpty,\n  getWidth,\n  intersects as intersectsExtent,\n  wrapX as wrapExtentX,\n} from '../../extent.js';\nimport {createCanvasContext2D, releaseCanvas} from '../../dom.js';\nimport {\n  defaultOrder as defaultRenderOrder,\n  getTolerance as getRenderTolerance,\n  getSquaredTolerance as getSquaredRenderTolerance,\n  renderFeature,\n} from '../vector.js';\nimport {equals} from '../../array.js';\nimport {\n  fromUserExtent,\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n  toUserResolution,\n} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @type {ImageData|null}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.declutterExecutorGroup = null;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.compositionContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = 1;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */\n  renderWorlds(executorGroup, frameState, declutterTree) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    const context = this.compositionContext_;\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n      : 1;\n    let world = multiWorld\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n      : 0;\n    do {\n      const transform = this.getRenderTransform(\n        center,\n        resolution,\n        rotation,\n        pixelRatio,\n        width,\n        height,\n        world * worldWidth\n      );\n      executorGroup.execute(\n        context,\n        1,\n        transform,\n        rotation,\n        snapToPixel,\n        undefined,\n        declutterTree\n      );\n    } while (++world < endWorld);\n  }\n\n  setupCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const compositionContext = createCanvasContext2D(\n        this.context.canvas.width,\n        this.context.canvas.height,\n        canvasPool\n      );\n      this.compositionContext_ = compositionContext;\n    } else {\n      this.compositionContext_ = this.context;\n    }\n  }\n\n  releaseCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.context.globalAlpha;\n      this.context.globalAlpha = this.opacity_;\n      this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n      this.context.globalAlpha = alpha;\n      releaseCanvas(this.compositionContext_);\n      canvasPool.push(this.compositionContext_.canvas);\n      this.compositionContext_ = null;\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (this.declutterExecutorGroup) {\n      this.setupCompositionContext_();\n      this.renderWorlds(\n        this.declutterExecutorGroup,\n        frameState,\n        frameState.declutterTree\n      );\n      this.releaseCompositionContext_();\n    }\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement|null} target Target that may be used to render content to.\n   * @return {HTMLElement|null} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const pixelRatio = frameState.pixelRatio;\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n    // set forward and inverse pixel transforms\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = transformToString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n\n    const replayGroup = this.replayGroup_;\n    const declutterExecutorGroup = this.declutterExecutorGroup;\n    let render =\n      (replayGroup && !replayGroup.isEmpty()) ||\n      (declutterExecutorGroup && !declutterExecutorGroup.isEmpty());\n    if (!render) {\n      const hasRenderListeners =\n        this.getLayer().hasListener(RenderEventType.PRERENDER) ||\n        this.getLayer().hasListener(RenderEventType.POSTRENDER);\n      if (!hasRenderListeners) {\n        return null;\n      }\n    }\n\n    // resize and clear\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    this.preRender(context, frameState);\n\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n\n    this.opacity_ = layerState.opacity;\n    this.setupCompositionContext_();\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    if (render && layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n\n    if (clipped) {\n      this.compositionContext_.restore();\n    }\n\n    this.releaseCompositionContext_();\n\n    this.postRender(context, frameState);\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise\n   * that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise((resolve) => {\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        const size = [this.context.canvas.width, this.context.canvas.height];\n        apply(this.pixelTransform, size);\n        const center = this.renderedCenter_;\n        const resolution = this.renderedResolution_;\n        const rotation = this.renderedRotation_;\n        const projection = this.renderedProjection_;\n        const extent = this.wrappedRenderedExtent_;\n        const layer = this.getLayer();\n        const transforms = [];\n        const width = size[0] * HIT_DETECT_RESOLUTION;\n        const height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(\n          this.getRenderTransform(\n            center,\n            resolution,\n            rotation,\n            HIT_DETECT_RESOLUTION,\n            width,\n            height,\n            0\n          ).slice()\n        );\n        const source = layer.getSource();\n        const projectionExtent = projection.getExtent();\n        if (\n          source.getWrapX() &&\n          projection.canWrapX() &&\n          !containsExtent(projectionExtent, extent)\n        ) {\n          let startX = extent[0];\n          const worldWidth = getWidth(projectionExtent);\n          let world = 0;\n          let offsetX;\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                HIT_DETECT_RESOLUTION,\n                width,\n                height,\n                offsetX\n              ).slice()\n            );\n            startX += worldWidth;\n          }\n          world = 0;\n          startX = extent[2];\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(\n              this.getRenderTransform(\n                center,\n                resolution,\n                rotation,\n                HIT_DETECT_RESOLUTION,\n                width,\n                height,\n                offsetX\n              ).slice()\n            );\n            startX -= worldWidth;\n          }\n        }\n\n        this.hitDetectionImageData_ = createHitDetectionImageData(\n          size,\n          transforms,\n          this.renderedFeatures_,\n          layer.getStyleFunction(),\n          extent,\n          resolution,\n          rotation\n        );\n      }\n      resolve(\n        hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_)\n      );\n    });\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(\n          (features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback,\n          })\n        );\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n\n    let result;\n    const executorGroups = [this.replayGroup_];\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n    executorGroups.some((executorGroup) => {\n      return (result = executorGroup.forEachFeatureAtCoordinate(\n        coordinate,\n        resolution,\n        rotation,\n        hitTolerance,\n        featureCallback,\n        executorGroup === this.declutterExecutorGroup &&\n          frameState.declutterTree\n          ? frameState.declutterTree.all().map((item) => item.value)\n          : null\n      ));\n    });\n\n    return result;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (\n      (this.ready && !updateWhileAnimating && animating) ||\n      (!updateWhileInteracting && interacting)\n    ) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = buffer(\n      frameStateExtent,\n      vectorLayerRenderBuffer * resolution\n    );\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (\n      vectorSource.getWrapX() &&\n      projection.canWrapX() &&\n      !containsExtent(projectionExtent, frameState.extent)\n    ) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (\n        loadExtent[0] < projectionExtent[0] &&\n        loadExtent[2] < projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] + worldWidth,\n          loadExtent[1],\n          loadExtent[2] + worldWidth,\n          loadExtent[3],\n        ]);\n      } else if (\n        loadExtent[0] > projectionExtent[0] &&\n        loadExtent[2] > projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] - worldWidth,\n          loadExtent[1],\n          loadExtent[2] - worldWidth,\n          loadExtent[3],\n        ]);\n      }\n    }\n\n    if (\n      this.ready &&\n      this.renderedResolution_ == resolution &&\n      this.renderedRevision_ == vectorLayerRevision &&\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n      containsExtent(this.wrappedRenderedExtent_, extent)\n    ) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n\n    const replayGroup = new CanvasBuilderGroup(\n      getRenderTolerance(resolution, pixelRatio),\n      extent,\n      resolution,\n      pixelRatio\n    );\n\n    let declutterBuilderGroup;\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new CanvasBuilderGroup(\n        getRenderTolerance(resolution, pixelRatio),\n        extent,\n        resolution,\n        pixelRatio\n      );\n    }\n\n    const userProjection = getUserProjection();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = toUserExtent(extent, projection);\n        vectorSource.loadFeatures(\n          userExtent,\n          toUserResolution(resolution, projection),\n          userProjection\n        );\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    let ready = true;\n    const render =\n      /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       */\n      (feature) => {\n        let styles;\n        const styleFunction =\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(\n            feature,\n            squaredTolerance,\n            styles,\n            replayGroup,\n            userTransform,\n            declutterBuilderGroup\n          );\n          ready = ready && !dirty;\n        }\n      };\n\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(\n      extent,\n      resolution,\n      pixelRatio,\n      vectorSource.getOverlaps(),\n      replayGroupInstructions,\n      vectorLayer.getRenderBuffer()\n    );\n\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup(\n        extent,\n        resolution,\n        pixelRatio,\n        vectorSource.getOverlaps(),\n        declutterBuilderGroup.finish(),\n        vectorLayer.getRenderBuffer()\n      );\n    }\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    transform,\n    declutterBuilderGroup\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            transform,\n            declutterBuilderGroup\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        transform,\n        declutterBuilderGroup\n      );\n    }\n    return loading;\n  }\n}\n\nexport default CanvasVectorLayerRenderer;\n","/**\n * @module ol/render/canvas/BuilderGroup\n */\n\nimport Builder from './Builder.js';\nimport ImageBuilder from './ImageBuilder.js';\nimport LineStringBuilder from './LineStringBuilder.js';\nimport PolygonBuilder from './PolygonBuilder.js';\nimport TextBuilder from './TextBuilder.js';\n\n/**\n * @type {Object<import(\"../canvas.js\").BuilderType, typeof Builder>}\n */\nconst BATCH_CONSTRUCTORS = {\n  'Circle': PolygonBuilder,\n  'Default': Builder,\n  'Image': ImageBuilder,\n  'LineString': LineStringBuilder,\n  'Polygon': PolygonBuilder,\n  'Text': TextBuilder,\n};\n\nclass BuilderGroup {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tolerance_ = tolerance;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, Builder>>}\n     */\n    this.buildersByZIndex_ = {};\n  }\n\n  /**\n   * @return {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Builder.js\").SerializableInstructions>>} The serializable instructions\n   */\n  finish() {\n    const builderInstructions = {};\n    for (const zKey in this.buildersByZIndex_) {\n      builderInstructions[zKey] = builderInstructions[zKey] || {};\n      const builders = this.buildersByZIndex_[zKey];\n      for (const builderKey in builders) {\n        const builderInstruction = builders[builderKey].finish();\n        builderInstructions[zKey][builderKey] = builderInstruction;\n      }\n    }\n    return builderInstructions;\n  }\n\n  /**\n   * @param {number|undefined} zIndex Z index.\n   * @param {import(\"../canvas.js\").BuilderType} builderType Replay type.\n   * @return {import(\"../VectorContext.js\").default} Replay.\n   */\n  getBuilder(zIndex, builderType) {\n    const zIndexKey = zIndex !== undefined ? zIndex.toString() : '0';\n    let replays = this.buildersByZIndex_[zIndexKey];\n    if (replays === undefined) {\n      replays = {};\n      this.buildersByZIndex_[zIndexKey] = replays;\n    }\n    let replay = replays[builderType];\n    if (replay === undefined) {\n      const Constructor = BATCH_CONSTRUCTORS[builderType];\n      replay = new Constructor(\n        this.tolerance_,\n        this.maxExtent_,\n        this.resolution_,\n        this.pixelRatio_\n      );\n      replays[builderType] = replay;\n    }\n    return replay;\n  }\n}\n\nexport default BuilderGroup;\n","/**\n * @module ol/render/canvas/Builder\n */\nimport CanvasInstruction from './Instruction.js';\nimport Relationship from '../../extent/Relationship.js';\nimport VectorContext from '../VectorContext.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  buffer,\n  clone,\n  containsCoordinate,\n  coordinateRelationship,\n} from '../../extent.js';\nimport {\n  defaultFillStyle,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../canvas.js';\nimport {equals, reverseSubArray} from '../../array.js';\nimport {\n  inflateCoordinates,\n  inflateCoordinatesArray,\n  inflateMultiCoordinatesArray,\n} from '../../geom/flat/inflate.js';\n\nclass CanvasBuilder extends VectorContext {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super();\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.tolerance = tolerance;\n\n    /**\n     * @protected\n     * @const\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent = maxExtent;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxLineWidth = 0;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction1_ = null;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction2_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.bufferedMaxExtent_ = null;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = [];\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = [];\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate.js\").Coordinate}\n     */\n    this.tmpCoordinate_ = [];\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = [];\n\n    /**\n     * @protected\n     * @type {import(\"../canvas.js\").FillStrokeState}\n     */\n    this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */ ({});\n  }\n\n  /**\n   * @protected\n   * @param {Array<number>} dashArray Dash array.\n   * @return {Array<number>} Dash array with pixel ratio applied\n   */\n  applyPixelRatio(dashArray) {\n    const pixelRatio = this.pixelRatio;\n    return pixelRatio == 1\n      ? dashArray\n      : dashArray.map(function (dash) {\n          return dash * pixelRatio;\n        });\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} stride Stride.\n   * @protected\n   * @return {number} My end\n   */\n  appendFlatPointCoordinates(flatCoordinates, stride) {\n    const extent = this.getBufferedMaxExtent();\n    const tmpCoord = this.tmpCoordinate_;\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      tmpCoord[0] = flatCoordinates[i];\n      tmpCoord[1] = flatCoordinates[i + 1];\n      if (containsCoordinate(extent, tmpCoord)) {\n        coordinates[myEnd++] = tmpCoord[0];\n        coordinates[myEnd++] = tmpCoord[1];\n      }\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} closed Last input coordinate equals first.\n   * @param {boolean} skipFirst Skip first coordinate.\n   * @protected\n   * @return {number} My end.\n   */\n  appendFlatLineCoordinates(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    closed,\n    skipFirst\n  ) {\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    const extent = this.getBufferedMaxExtent();\n    if (skipFirst) {\n      offset += stride;\n    }\n    let lastXCoord = flatCoordinates[offset];\n    let lastYCoord = flatCoordinates[offset + 1];\n    const nextCoord = this.tmpCoordinate_;\n    let skipped = true;\n\n    let i, lastRel, nextRel;\n    for (i = offset + stride; i < end; i += stride) {\n      nextCoord[0] = flatCoordinates[i];\n      nextCoord[1] = flatCoordinates[i + 1];\n      nextRel = coordinateRelationship(extent, nextCoord);\n      if (nextRel !== lastRel) {\n        if (skipped) {\n          coordinates[myEnd++] = lastXCoord;\n          coordinates[myEnd++] = lastYCoord;\n          skipped = false;\n        }\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n      } else if (nextRel === Relationship.INTERSECTING) {\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n        skipped = false;\n      } else {\n        skipped = true;\n      }\n      lastXCoord = nextCoord[0];\n      lastYCoord = nextCoord[1];\n      lastRel = nextRel;\n    }\n\n    // Last coordinate equals first or only one point to append:\n    if ((closed && skipped) || i === offset + stride) {\n      coordinates[myEnd++] = lastXCoord;\n      coordinates[myEnd++] = lastYCoord;\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @param {Array<number>} builderEnds Builder ends.\n   * @return {number} Offset.\n   */\n  drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const builderEnd = this.appendFlatLineCoordinates(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        false,\n        false\n      );\n      builderEnds.push(builderEnd);\n      offset = end;\n    }\n    return offset;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   * @param {Function} hitDetectionRenderer Renderer.\n   */\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer) {\n    this.beginGeometry(geometry, feature);\n\n    const type = geometry.getType();\n    const stride = geometry.getStride();\n    const builderBegin = this.coordinates.length;\n\n    let flatCoordinates, builderEnd, builderEnds, builderEndss;\n    let offset;\n\n    switch (type) {\n      case 'MultiPolygon':\n        flatCoordinates =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getOrientedFlatCoordinates();\n        builderEndss = [];\n        const endss =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getEndss();\n        offset = 0;\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          const myEnds = [];\n          offset = this.drawCustomCoordinates_(\n            flatCoordinates,\n            offset,\n            endss[i],\n            stride,\n            myEnds\n          );\n          builderEndss.push(myEnds);\n        }\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEndss,\n          geometry,\n          renderer,\n          inflateMultiCoordinatesArray,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEndss,\n          geometry,\n          hitDetectionRenderer || renderer,\n          inflateMultiCoordinatesArray,\n        ]);\n        break;\n      case 'Polygon':\n      case 'MultiLineString':\n        builderEnds = [];\n        flatCoordinates =\n          type == 'Polygon'\n            ? /** @type {import(\"../../geom/Polygon.js\").default} */ (\n                geometry\n              ).getOrientedFlatCoordinates()\n            : geometry.getFlatCoordinates();\n        offset = this.drawCustomCoordinates_(\n          flatCoordinates,\n          0,\n          /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */ (\n            geometry\n          ).getEnds(),\n          stride,\n          builderEnds\n        );\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnds,\n          geometry,\n          renderer,\n          inflateCoordinatesArray,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnds,\n          geometry,\n          hitDetectionRenderer || renderer,\n          inflateCoordinatesArray,\n        ]);\n        break;\n      case 'LineString':\n      case 'Circle':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatLineCoordinates(\n          flatCoordinates,\n          0,\n          flatCoordinates.length,\n          stride,\n          false,\n          false\n        );\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          renderer,\n          inflateCoordinates,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          hitDetectionRenderer || renderer,\n          inflateCoordinates,\n        ]);\n        break;\n      case 'MultiPoint':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n\n        if (builderEnd > builderBegin) {\n          this.instructions.push([\n            CanvasInstruction.CUSTOM,\n            builderBegin,\n            builderEnd,\n            geometry,\n            renderer,\n            inflateCoordinates,\n          ]);\n          this.hitDetectionInstructions.push([\n            CanvasInstruction.CUSTOM,\n            builderBegin,\n            builderEnd,\n            geometry,\n            hitDetectionRenderer || renderer,\n            inflateCoordinates,\n          ]);\n        }\n        break;\n      case 'Point':\n        flatCoordinates = geometry.getFlatCoordinates();\n        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n        builderEnd = this.coordinates.length;\n\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          renderer,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          hitDetectionRenderer || renderer,\n        ]);\n        break;\n      default:\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  beginGeometry(geometry, feature) {\n    this.beginGeometryInstruction1_ = [\n      CanvasInstruction.BEGIN_GEOMETRY,\n      feature,\n      0,\n      geometry,\n    ];\n    this.instructions.push(this.beginGeometryInstruction1_);\n    this.beginGeometryInstruction2_ = [\n      CanvasInstruction.BEGIN_GEOMETRY,\n      feature,\n      0,\n      geometry,\n    ];\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    return {\n      instructions: this.instructions,\n      hitDetectionInstructions: this.hitDetectionInstructions,\n      coordinates: this.coordinates,\n    };\n  }\n\n  /**\n   * Reverse the hit detection instructions.\n   */\n  reverseHitDetectionInstructions() {\n    const hitDetectionInstructions = this.hitDetectionInstructions;\n    // step 1 - reverse array\n    hitDetectionInstructions.reverse();\n    // step 2 - reverse instructions within geometry blocks\n    let i;\n    const n = hitDetectionInstructions.length;\n    let instruction;\n    let type;\n    let begin = -1;\n    for (i = 0; i < n; ++i) {\n      instruction = hitDetectionInstructions[i];\n      type = /** @type {import(\"./Instruction.js\").default} */ (instruction[0]);\n      if (type == CanvasInstruction.END_GEOMETRY) {\n        begin = i;\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\n        instruction[2] = i;\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\n        begin = -1;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    const state = this.state;\n    if (fillStyle) {\n      const fillStyleColor = fillStyle.getColor();\n      state.fillStyle = asColorLike(\n        fillStyleColor ? fillStyleColor : defaultFillStyle\n      );\n    } else {\n      state.fillStyle = undefined;\n    }\n    if (strokeStyle) {\n      const strokeStyleColor = strokeStyle.getColor();\n      state.strokeStyle = asColorLike(\n        strokeStyleColor ? strokeStyleColor : defaultStrokeStyle\n      );\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      state.lineCap =\n        strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      state.lineDash = strokeStyleLineDash\n        ? strokeStyleLineDash.slice()\n        : defaultLineDash;\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      state.lineDashOffset = strokeStyleLineDashOffset\n        ? strokeStyleLineDashOffset\n        : defaultLineDashOffset;\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      state.lineJoin =\n        strokeStyleLineJoin !== undefined\n          ? strokeStyleLineJoin\n          : defaultLineJoin;\n      const strokeStyleWidth = strokeStyle.getWidth();\n      state.lineWidth =\n        strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      state.miterLimit =\n        strokeStyleMiterLimit !== undefined\n          ? strokeStyleMiterLimit\n          : defaultMiterLimit;\n\n      if (state.lineWidth > this.maxLineWidth) {\n        this.maxLineWidth = state.lineWidth;\n        // invalidate the buffered max extent cache\n        this.bufferedMaxExtent_ = null;\n      }\n    } else {\n      state.strokeStyle = undefined;\n      state.lineCap = undefined;\n      state.lineDash = null;\n      state.lineDashOffset = undefined;\n      state.lineJoin = undefined;\n      state.lineWidth = undefined;\n      state.miterLimit = undefined;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Fill instruction.\n   */\n  createFill(state) {\n    const fillStyle = state.fillStyle;\n    /** @type {Array<*>} */\n    const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\n    if (typeof fillStyle !== 'string') {\n      // Fill is a pattern or gradient - align it!\n      fillInstruction.push(true);\n    }\n    return fillInstruction;\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n  applyStroke(state) {\n    this.instructions.push(this.createStroke(state));\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Stroke instruction.\n   */\n  createStroke(state) {\n    return [\n      CanvasInstruction.SET_STROKE_STYLE,\n      state.strokeStyle,\n      state.lineWidth * this.pixelRatio,\n      state.lineCap,\n      state.lineJoin,\n      state.miterLimit,\n      this.applyPixelRatio(state.lineDash),\n      state.lineDashOffset * this.pixelRatio,\n    ];\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\n   */\n  updateFillStyle(state, createFill) {\n    const fillStyle = state.fillStyle;\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\n      if (fillStyle !== undefined) {\n        this.instructions.push(createFill.call(this, state));\n      }\n      state.currentFillStyle = fillStyle;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\n   */\n  updateStrokeStyle(state, applyStroke) {\n    const strokeStyle = state.strokeStyle;\n    const lineCap = state.lineCap;\n    const lineDash = state.lineDash;\n    const lineDashOffset = state.lineDashOffset;\n    const lineJoin = state.lineJoin;\n    const lineWidth = state.lineWidth;\n    const miterLimit = state.miterLimit;\n    if (\n      state.currentStrokeStyle != strokeStyle ||\n      state.currentLineCap != lineCap ||\n      (lineDash != state.currentLineDash &&\n        !equals(state.currentLineDash, lineDash)) ||\n      state.currentLineDashOffset != lineDashOffset ||\n      state.currentLineJoin != lineJoin ||\n      state.currentLineWidth != lineWidth ||\n      state.currentMiterLimit != miterLimit\n    ) {\n      if (strokeStyle !== undefined) {\n        applyStroke.call(this, state);\n      }\n      state.currentStrokeStyle = strokeStyle;\n      state.currentLineCap = lineCap;\n      state.currentLineDash = lineDash;\n      state.currentLineDashOffset = lineDashOffset;\n      state.currentLineJoin = lineJoin;\n      state.currentLineWidth = lineWidth;\n      state.currentMiterLimit = miterLimit;\n    }\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  endGeometry(feature) {\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\n    this.beginGeometryInstruction1_ = null;\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n    this.beginGeometryInstruction2_ = null;\n    const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\n    this.instructions.push(endGeometryInstruction);\n    this.hitDetectionInstructions.push(endGeometryInstruction);\n  }\n\n  /**\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\n   * provided to the constructor.  To account for symbolizers that may intersect\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\n   * @protected\n   */\n  getBufferedMaxExtent() {\n    if (!this.bufferedMaxExtent_) {\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\n      if (this.maxLineWidth > 0) {\n        const width = (this.resolution * (this.maxLineWidth + 1)) / 2;\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n      }\n    }\n    return this.bufferedMaxExtent_;\n  }\n}\n\nexport default CanvasBuilder;\n","/**\n * @module ol/render/canvas/Instruction\n */\n\n/**\n * @enum {number}\n */\nconst Instruction = {\n  BEGIN_GEOMETRY: 0,\n  BEGIN_PATH: 1,\n  CIRCLE: 2,\n  CLOSE_PATH: 3,\n  CUSTOM: 4,\n  DRAW_CHARS: 5,\n  DRAW_IMAGE: 6,\n  END_GEOMETRY: 7,\n  FILL: 8,\n  MOVE_TO_LINE_TO: 9,\n  SET_FILL_STYLE: 10,\n  SET_STROKE_STYLE: 11,\n  STROKE: 12,\n};\n\n/**\n * @type {Array<Instruction>}\n */\nexport const fillInstruction = [Instruction.FILL];\n\n/**\n * @type {Array<Instruction>}\n */\nexport const strokeInstruction = [Instruction.STROKE];\n\n/**\n * @type {Array<Instruction>}\n */\nexport const beginPathInstruction = [Instruction.BEGIN_PATH];\n\n/**\n * @type {Array<Instruction>}\n */\nexport const closePathInstruction = [Instruction.CLOSE_PATH];\n\nexport default Instruction;\n","/**\n * @module ol/render/VectorContext\n */\n\n/**\n * @classdesc\n * Context for drawing geometries.  A vector context is available on render\n * events and does not need to be constructed directly.\n * @api\n */\nclass VectorContext {\n  /**\n   * Render a geometry with a custom renderer.\n   *\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   * @param {Function} hitDetectionRenderer Renderer.\n   */\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer) {}\n\n  /**\n   * Render a geometry.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry The geometry to render.\n   */\n  drawGeometry(geometry) {}\n\n  /**\n   * Set the rendering style.\n   *\n   * @param {import(\"../style/Style.js\").default} style The rendering style.\n   */\n  setStyle(style) {}\n\n  /**\n   * @param {import(\"../geom/Circle.js\").default} circleGeometry Circle geometry.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   */\n  drawCircle(circleGeometry, feature) {}\n\n  /**\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"../style/Style.js\").default} style Style.\n   */\n  drawFeature(feature, style) {}\n\n  /**\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometryCollectionGeometry Geometry collection.\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   */\n  drawGeometryCollection(geometryCollectionGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/LineString.js\").default|import(\"./Feature.js\").default} lineStringGeometry Line string geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawLineString(lineStringGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/MultiLineString.js\").default|import(\"./Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawMultiLineString(multiLineStringGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/MultiPoint.js\").default|import(\"./Feature.js\").default} multiPointGeometry MultiPoint geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawMultiPoint(multiPointGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawMultiPolygon(multiPolygonGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/Point.js\").default|import(\"./Feature.js\").default} pointGeometry Point geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawPoint(pointGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/Polygon.js\").default|import(\"./Feature.js\").default} polygonGeometry Polygon geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawPolygon(polygonGeometry, feature) {}\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default|import(\"./Feature.js\").default} geometry Geometry.\n   * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawText(geometry, feature) {}\n\n  /**\n   * @param {import(\"../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {}\n\n  /**\n   * @param {import(\"../style/Image.js\").default} imageStyle Image style.\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with a text style.\n   */\n  setImageStyle(imageStyle, declutterImageWithText) {}\n\n  /**\n   * @param {import(\"../style/Text.js\").default} textStyle Text style.\n   * @param {import(\"../render/canvas.js\").DeclutterImageWithText} [declutterImageWithText] Shared data for combined decluttering with an image style.\n   */\n  setTextStyle(textStyle, declutterImageWithText) {}\n}\n\nexport default VectorContext;\n","/**\n * @module ol/render/canvas/ImageBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\n\nclass CanvasImageBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {import('../../DataTile.js').ImageLike}\n     */\n    this.hitDetectionImage_ = null;\n\n    /**\n     * @private\n     * @type {import('../../DataTile.js').ImageLike}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.imagePixelRatio_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.anchorX_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.anchorY_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.height_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.opacity_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.originX_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.originY_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.rotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = undefined;\n\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size|undefined}\n     */\n    this.scale_ = undefined;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = undefined;\n\n    /**\n     * @private\n     * @type {\"declutter\"|\"obstacle\"|\"none\"|undefined}\n     */\n    this.declutterMode_ = undefined;\n\n    /**\n     * Data shared with a text builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */\n    this.declutterImageWithText_ = undefined;\n  }\n\n  /**\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} pointGeometry Point geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawPoint(pointGeometry, feature) {\n    if (!this.image_) {\n      return;\n    }\n    this.beginGeometry(pointGeometry, feature);\n    const flatCoordinates = pointGeometry.getFlatCoordinates();\n    const stride = pointGeometry.getStride();\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n    this.instructions.push([\n      CanvasInstruction.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.image_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_ * this.imagePixelRatio_,\n      this.anchorY_ * this.imagePixelRatio_,\n      Math.ceil(this.height_ * this.imagePixelRatio_),\n      this.opacity_,\n      this.originX_ * this.imagePixelRatio_,\n      this.originY_ * this.imagePixelRatio_,\n      this.rotateWithView_,\n      this.rotation_,\n      [\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\n      ],\n      Math.ceil(this.width_ * this.imagePixelRatio_),\n      this.declutterMode_,\n      this.declutterImageWithText_,\n    ]);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.hitDetectionImage_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_,\n      this.anchorY_,\n      this.height_,\n      1,\n      this.originX_,\n      this.originY_,\n      this.rotateWithView_,\n      this.rotation_,\n      this.scale_,\n      this.width_,\n      this.declutterMode_,\n      this.declutterImageWithText_,\n    ]);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} multiPointGeometry MultiPoint geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawMultiPoint(multiPointGeometry, feature) {\n    if (!this.image_) {\n      return;\n    }\n    this.beginGeometry(multiPointGeometry, feature);\n    const flatCoordinates = multiPointGeometry.getFlatCoordinates();\n    const stride = multiPointGeometry.getStride();\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n    this.instructions.push([\n      CanvasInstruction.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.image_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_ * this.imagePixelRatio_,\n      this.anchorY_ * this.imagePixelRatio_,\n      Math.ceil(this.height_ * this.imagePixelRatio_),\n      this.opacity_,\n      this.originX_ * this.imagePixelRatio_,\n      this.originY_ * this.imagePixelRatio_,\n      this.rotateWithView_,\n      this.rotation_,\n      [\n        (this.scale_[0] * this.pixelRatio) / this.imagePixelRatio_,\n        (this.scale_[1] * this.pixelRatio) / this.imagePixelRatio_,\n      ],\n      Math.ceil(this.width_ * this.imagePixelRatio_),\n      this.declutterMode_,\n      this.declutterImageWithText_,\n    ]);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.DRAW_IMAGE,\n      myBegin,\n      myEnd,\n      this.hitDetectionImage_,\n      // Remaining arguments to DRAW_IMAGE are in alphabetical order\n      this.anchorX_,\n      this.anchorY_,\n      this.height_,\n      1,\n      this.originX_,\n      this.originY_,\n      this.rotateWithView_,\n      this.rotation_,\n      this.scale_,\n      this.width_,\n      this.declutterMode_,\n      this.declutterImageWithText_,\n    ]);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    this.reverseHitDetectionInstructions();\n    // FIXME this doesn't really protect us against further calls to draw*Geometry\n    this.anchorX_ = undefined;\n    this.anchorY_ = undefined;\n    this.hitDetectionImage_ = null;\n    this.image_ = null;\n    this.imagePixelRatio_ = undefined;\n    this.height_ = undefined;\n    this.scale_ = undefined;\n    this.opacity_ = undefined;\n    this.originX_ = undefined;\n    this.originY_ = undefined;\n    this.rotateWithView_ = undefined;\n    this.rotation_ = undefined;\n    this.width_ = undefined;\n    return super.finish();\n  }\n\n  /**\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\n   * @param {Object} [sharedData] Shared data.\n   */\n  setImageStyle(imageStyle, sharedData) {\n    const anchor = imageStyle.getAnchor();\n    const size = imageStyle.getSize();\n    const origin = imageStyle.getOrigin();\n    this.imagePixelRatio_ = imageStyle.getPixelRatio(this.pixelRatio);\n    this.anchorX_ = anchor[0];\n    this.anchorY_ = anchor[1];\n    this.hitDetectionImage_ = imageStyle.getHitDetectionImage();\n    this.image_ = imageStyle.getImage(this.pixelRatio);\n    this.height_ = size[1];\n    this.opacity_ = imageStyle.getOpacity();\n    this.originX_ = origin[0];\n    this.originY_ = origin[1];\n    this.rotateWithView_ = imageStyle.getRotateWithView();\n    this.rotation_ = imageStyle.getRotation();\n    this.scale_ = imageStyle.getScaleArray();\n    this.width_ = size[0];\n    this.declutterMode_ = imageStyle.getDeclutterMode();\n    this.declutterImageWithText_ = sharedData;\n  }\n}\n\nexport default CanvasImageBuilder;\n","/**\n * @module ol/render/canvas/LineStringBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction, {\n  beginPathInstruction,\n  strokeInstruction,\n} from './Instruction.js';\nimport {defaultLineDash, defaultLineDashOffset} from '../canvas.js';\n\nclass CanvasLineStringBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} end.\n   */\n  drawFlatCoordinates_(flatCoordinates, offset, end, stride) {\n    const myBegin = this.coordinates.length;\n    const myEnd = this.appendFlatLineCoordinates(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      false,\n      false\n    );\n    const moveToLineToInstruction = [\n      CanvasInstruction.MOVE_TO_LINE_TO,\n      myBegin,\n      myEnd,\n    ];\n    this.instructions.push(moveToLineToInstruction);\n    this.hitDetectionInstructions.push(moveToLineToInstruction);\n    return end;\n  }\n\n  /**\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} lineStringGeometry Line string geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawLineString(lineStringGeometry, feature) {\n    const state = this.state;\n    const strokeStyle = state.strokeStyle;\n    const lineWidth = state.lineWidth;\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(lineStringGeometry, feature);\n    this.hitDetectionInstructions.push(\n      [\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ],\n      beginPathInstruction\n    );\n    const flatCoordinates = lineStringGeometry.getFlatCoordinates();\n    const stride = lineStringGeometry.getStride();\n    this.drawFlatCoordinates_(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride\n    );\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} multiLineStringGeometry MultiLineString geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawMultiLineString(multiLineStringGeometry, feature) {\n    const state = this.state;\n    const strokeStyle = state.strokeStyle;\n    const lineWidth = state.lineWidth;\n    if (strokeStyle === undefined || lineWidth === undefined) {\n      return;\n    }\n    this.updateStrokeStyle(state, this.applyStroke);\n    this.beginGeometry(multiLineStringGeometry, feature);\n    this.hitDetectionInstructions.push(\n      [\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ],\n      beginPathInstruction\n    );\n    const ends = multiLineStringGeometry.getEnds();\n    const flatCoordinates = multiLineStringGeometry.getFlatCoordinates();\n    const stride = multiLineStringGeometry.getStride();\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.drawFlatCoordinates_(\n        flatCoordinates,\n        offset,\n        /** @type {number} */ (ends[i]),\n        stride\n      );\n    }\n    this.hitDetectionInstructions.push(strokeInstruction);\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    const state = this.state;\n    if (\n      state.lastStroke != undefined &&\n      state.lastStroke != this.coordinates.length\n    ) {\n      this.instructions.push(strokeInstruction);\n    }\n    this.reverseHitDetectionInstructions();\n    this.state = null;\n    return super.finish();\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n  applyStroke(state) {\n    if (\n      state.lastStroke != undefined &&\n      state.lastStroke != this.coordinates.length\n    ) {\n      this.instructions.push(strokeInstruction);\n      state.lastStroke = this.coordinates.length;\n    }\n    state.lastStroke = 0;\n    super.applyStroke(state);\n    this.instructions.push(beginPathInstruction);\n  }\n}\n\nexport default CanvasLineStringBuilder;\n","/**\n * @module ol/render/canvas/PolygonBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction, {\n  beginPathInstruction,\n  closePathInstruction,\n  fillInstruction,\n  strokeInstruction,\n} from './Instruction.js';\nimport {\n  defaultFillStyle,\n  defaultLineDash,\n  defaultLineDashOffset,\n} from '../canvas.js';\nimport {snap} from '../../geom/flat/simplify.js';\n\nclass CanvasPolygonBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n  drawFlatCoordinatess_(flatCoordinates, offset, ends, stride) {\n    const state = this.state;\n    const fill = state.fillStyle !== undefined;\n    const stroke = state.strokeStyle !== undefined;\n    const numEnds = ends.length;\n    this.instructions.push(beginPathInstruction);\n    this.hitDetectionInstructions.push(beginPathInstruction);\n    for (let i = 0; i < numEnds; ++i) {\n      const end = ends[i];\n      const myBegin = this.coordinates.length;\n      const myEnd = this.appendFlatLineCoordinates(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        true,\n        !stroke\n      );\n      const moveToLineToInstruction = [\n        CanvasInstruction.MOVE_TO_LINE_TO,\n        myBegin,\n        myEnd,\n      ];\n      this.instructions.push(moveToLineToInstruction);\n      this.hitDetectionInstructions.push(moveToLineToInstruction);\n      if (stroke) {\n        // Performance optimization: only call closePath() when we have a stroke.\n        // Otherwise the ring is closed already (see appendFlatLineCoordinates above).\n        this.instructions.push(closePathInstruction);\n        this.hitDetectionInstructions.push(closePathInstruction);\n      }\n      offset = end;\n    }\n    if (fill) {\n      this.instructions.push(fillInstruction);\n      this.hitDetectionInstructions.push(fillInstruction);\n    }\n    if (stroke) {\n      this.instructions.push(strokeInstruction);\n      this.hitDetectionInstructions.push(strokeInstruction);\n    }\n    return offset;\n  }\n\n  /**\n   * @param {import(\"../../geom/Circle.js\").default} circleGeometry Circle geometry.\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   */\n  drawCircle(circleGeometry, feature) {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    const strokeStyle = state.strokeStyle;\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n    this.setFillStrokeStyles_();\n    this.beginGeometry(circleGeometry, feature);\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_FILL_STYLE,\n        defaultFillStyle,\n      ]);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ]);\n    }\n    const flatCoordinates = circleGeometry.getFlatCoordinates();\n    const stride = circleGeometry.getStride();\n    const myBegin = this.coordinates.length;\n    this.appendFlatLineCoordinates(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride,\n      false,\n      false\n    );\n    const circleInstruction = [CanvasInstruction.CIRCLE, myBegin];\n    this.instructions.push(beginPathInstruction, circleInstruction);\n    this.hitDetectionInstructions.push(beginPathInstruction, circleInstruction);\n    if (state.fillStyle !== undefined) {\n      this.instructions.push(fillInstruction);\n      this.hitDetectionInstructions.push(fillInstruction);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.instructions.push(strokeInstruction);\n      this.hitDetectionInstructions.push(strokeInstruction);\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} polygonGeometry Polygon geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawPolygon(polygonGeometry, feature) {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    const strokeStyle = state.strokeStyle;\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n    this.setFillStrokeStyles_();\n    this.beginGeometry(polygonGeometry, feature);\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_FILL_STYLE,\n        defaultFillStyle,\n      ]);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ]);\n    }\n    const ends = polygonGeometry.getEnds();\n    const flatCoordinates = polygonGeometry.getOrientedFlatCoordinates();\n    const stride = polygonGeometry.getStride();\n    this.drawFlatCoordinatess_(\n      flatCoordinates,\n      0,\n      /** @type {Array<number>} */ (ends),\n      stride\n    );\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @param {import(\"../../geom/MultiPolygon.js\").default} multiPolygonGeometry MultiPolygon geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawMultiPolygon(multiPolygonGeometry, feature) {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    const strokeStyle = state.strokeStyle;\n    if (fillStyle === undefined && strokeStyle === undefined) {\n      return;\n    }\n    this.setFillStrokeStyles_();\n    this.beginGeometry(multiPolygonGeometry, feature);\n    if (state.fillStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_FILL_STYLE,\n        defaultFillStyle,\n      ]);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.SET_STROKE_STYLE,\n        state.strokeStyle,\n        state.lineWidth,\n        state.lineCap,\n        state.lineJoin,\n        state.miterLimit,\n        defaultLineDash,\n        defaultLineDashOffset,\n      ]);\n    }\n    const endss = multiPolygonGeometry.getEndss();\n    const flatCoordinates = multiPolygonGeometry.getOrientedFlatCoordinates();\n    const stride = multiPolygonGeometry.getStride();\n    let offset = 0;\n    for (let i = 0, ii = endss.length; i < ii; ++i) {\n      offset = this.drawFlatCoordinatess_(\n        flatCoordinates,\n        offset,\n        endss[i],\n        stride\n      );\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    this.reverseHitDetectionInstructions();\n    this.state = null;\n    // We want to preserve topology when drawing polygons.  Polygons are\n    // simplified using quantization and point elimination. However, we might\n    // have received a mix of quantized and non-quantized geometries, so ensure\n    // that all are quantized by quantizing all coordinates in the batch.\n    const tolerance = this.tolerance;\n    if (tolerance !== 0) {\n      const coordinates = this.coordinates;\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\n        coordinates[i] = snap(coordinates[i], tolerance);\n      }\n    }\n    return super.finish();\n  }\n\n  /**\n   * @private\n   */\n  setFillStrokeStyles_() {\n    const state = this.state;\n    const fillStyle = state.fillStyle;\n    if (fillStyle !== undefined) {\n      this.updateFillStyle(state, this.createFill);\n    }\n    if (state.strokeStyle !== undefined) {\n      this.updateStrokeStyle(state, this.applyStroke);\n    }\n  }\n}\n\nexport default CanvasPolygonBuilder;\n","/**\n * @module ol/render/canvas/TextBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  defaultFillStyle,\n  defaultFont,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultPadding,\n  defaultStrokeStyle,\n  defaultTextAlign,\n  defaultTextBaseline,\n  registerFont,\n} from '../canvas.js';\nimport {getUid} from '../../util.js';\nimport {intersects} from '../../extent.js';\nimport {lineChunk} from '../../geom/flat/linechunk.js';\nimport {matchingChunk} from '../../geom/flat/straightchunk.js';\n/**\n * @const\n * @type {{left: 0, center: 0.5, right: 1, top: 0, middle: 0.5, hanging: 0.2, alphabetic: 0.8, ideographic: 0.8, bottom: 1}}\n */\nexport const TEXT_ALIGN = {\n  'left': 0,\n  'center': 0.5,\n  'right': 1,\n  'top': 0,\n  'middle': 0.5,\n  'hanging': 0.2,\n  'alphabetic': 0.8,\n  'ideographic': 0.8,\n  'bottom': 1,\n};\n\nclass CanvasTextBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {Array<HTMLCanvasElement>}\n     */\n    this.labels_ = null;\n\n    /**\n     * @private\n     * @type {string|Array<string>}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.textRotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = {};\n    this.fillStates[defaultFillStyle] = {fillStyle: defaultFillStyle};\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = {};\n\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ ({});\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.textKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.fillKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.strokeKey_ = '';\n\n    /**\n     * Data shared with an image builder for combined decluttering.\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterImageWithText}\n     */\n    this.declutterImageWithText_ = undefined;\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    const instructions = super.finish();\n    instructions.textStates = this.textStates;\n    instructions.fillStates = this.fillStates;\n    instructions.strokeStates = this.strokeStates;\n    return instructions;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawText(geometry, feature) {\n    const fillState = this.textFillState_;\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\n      return;\n    }\n\n    const coordinates = this.coordinates;\n    let begin = coordinates.length;\n\n    const geometryType = geometry.getType();\n    let flatCoordinates = null;\n    let stride = geometry.getStride();\n\n    if (\n      textState.placement === 'line' &&\n      (geometryType == 'LineString' ||\n        geometryType == 'MultiLineString' ||\n        geometryType == 'Polygon' ||\n        geometryType == 'MultiPolygon')\n    ) {\n      if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\n        return;\n      }\n      let ends;\n      flatCoordinates = geometry.getFlatCoordinates();\n      if (geometryType == 'LineString') {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == 'MultiLineString') {\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n          geometry\n        ).getEnds();\n      } else if (geometryType == 'Polygon') {\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\n          .getEnds()\n          .slice(0, 1);\n      } else if (geometryType == 'MultiPolygon') {\n        const endss =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getEndss();\n        ends = [];\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n      this.beginGeometry(geometry, feature);\n      const repeat = textState.repeat;\n      const textAlign = repeat ? undefined : textState.textAlign;\n      // No `justify` support for line placement.\n      let flatOffset = 0;\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\n        let chunks;\n        if (repeat) {\n          chunks = lineChunk(\n            repeat * this.resolution,\n            flatCoordinates,\n            flatOffset,\n            ends[o],\n            stride\n          );\n        } else {\n          chunks = [flatCoordinates.slice(flatOffset, ends[o])];\n        }\n        for (let c = 0, cc = chunks.length; c < cc; ++c) {\n          const chunk = chunks[c];\n          let chunkBegin = 0;\n          let chunkEnd = chunk.length;\n          if (textAlign == undefined) {\n            const range = matchingChunk(\n              textState.maxAngle,\n              chunk,\n              0,\n              chunk.length,\n              2\n            );\n            chunkBegin = range[0];\n            chunkEnd = range[1];\n          }\n          for (let i = chunkBegin; i < chunkEnd; i += stride) {\n            coordinates.push(chunk[i], chunk[i + 1]);\n          }\n          const end = coordinates.length;\n          flatOffset = ends[o];\n          this.drawChars_(begin, end);\n          begin = end;\n        }\n      }\n      this.endGeometry(feature);\n    } else {\n      let geometryWidths = textState.overflow ? null : [];\n      switch (geometryType) {\n        case 'Point':\n        case 'MultiPoint':\n          flatCoordinates =\n            /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\n              geometry\n            ).getFlatCoordinates();\n          break;\n        case 'LineString':\n          flatCoordinates =\n            /** @type {import(\"../../geom/LineString.js\").default} */ (\n              geometry\n            ).getFlatMidpoint();\n          break;\n        case 'Circle':\n          flatCoordinates =\n            /** @type {import(\"../../geom/Circle.js\").default} */ (\n              geometry\n            ).getCenter();\n          break;\n        case 'MultiLineString':\n          flatCoordinates =\n            /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n              geometry\n            ).getFlatMidpoints();\n          stride = 2;\n          break;\n        case 'Polygon':\n          flatCoordinates =\n            /** @type {import(\"../../geom/Polygon.js\").default} */ (\n              geometry\n            ).getFlatInteriorPoint();\n          if (!textState.overflow) {\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\n          }\n          stride = 3;\n          break;\n        case 'MultiPolygon':\n          const interiorPoints =\n            /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n              geometry\n            ).getFlatInteriorPoints();\n          flatCoordinates = [];\n          for (let i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (!textState.overflow) {\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n            }\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n          if (flatCoordinates.length === 0) {\n            return;\n          }\n          stride = 2;\n          break;\n        default:\n      }\n      const end = this.appendFlatPointCoordinates(flatCoordinates, stride);\n      if (end === begin) {\n        return;\n      }\n      if (\n        geometryWidths &&\n        (end - begin) / 2 !== flatCoordinates.length / stride\n      ) {\n        let beg = begin / 2;\n        geometryWidths = geometryWidths.filter((w, i) => {\n          const keep =\n            coordinates[(beg + i) * 2] === flatCoordinates[i * stride] &&\n            coordinates[(beg + i) * 2 + 1] === flatCoordinates[i * stride + 1];\n          if (!keep) {\n            --beg;\n          }\n          return keep;\n        });\n      }\n\n      this.saveTextStates_();\n\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(\n          textState.backgroundFill,\n          textState.backgroundStroke\n        );\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill);\n        }\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n\n      this.beginGeometry(geometry, feature);\n\n      // adjust padding for negative scale\n      let padding = textState.padding;\n      if (\n        padding != defaultPadding &&\n        (textState.scale[0] < 0 || textState.scale[1] < 0)\n      ) {\n        let p0 = textState.padding[0];\n        let p1 = textState.padding[1];\n        let p2 = textState.padding[2];\n        let p3 = textState.padding[3];\n        if (textState.scale[0] < 0) {\n          p1 = -p1;\n          p3 = -p3;\n        }\n        if (textState.scale[1] < 0) {\n          p0 = -p0;\n          p2 = -p2;\n        }\n        padding = [p0, p1, p2, p3];\n      }\n\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n      // render time.\n      const pixelRatio = this.pixelRatio;\n      this.instructions.push([\n        CanvasInstruction.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [1, 1],\n        NaN,\n        undefined,\n        this.declutterImageWithText_,\n        padding == defaultPadding\n          ? defaultPadding\n          : padding.map(function (p) {\n              return p * pixelRatio;\n            }),\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n      const scale = 1 / pixelRatio;\n      // Set default fill for hit detection background\n      const currentFillStyle = this.state.fillStyle;\n      if (textState.backgroundFill) {\n        this.state.fillStyle = defaultFillStyle;\n        this.hitDetectionInstructions.push(this.createFill(this.state));\n      }\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [scale, scale],\n        NaN,\n        undefined,\n        this.declutterImageWithText_,\n        padding,\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_ ? defaultFillStyle : this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n      // Reset previous fill\n      if (textState.backgroundFill) {\n        this.state.fillStyle = currentFillStyle;\n        this.hitDetectionInstructions.push(this.createFill(this.state));\n      }\n\n      this.endGeometry(feature);\n    }\n  }\n\n  /**\n   * @private\n   */\n  saveTextStates_() {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    const fillState = this.textFillState_;\n\n    const strokeKey = this.strokeKey_;\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] = {\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash,\n        };\n      }\n    }\n    const textKey = this.textKey_;\n    if (!(textKey in this.textStates)) {\n      this.textStates[textKey] = {\n        font: textState.font,\n        textAlign: textState.textAlign || defaultTextAlign,\n        justify: textState.justify,\n        textBaseline: textState.textBaseline || defaultTextBaseline,\n        scale: textState.scale,\n      };\n    }\n    const fillKey = this.fillKey_;\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] = {\n          fillStyle: fillState.fillStyle,\n        };\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   */\n  drawChars_(begin, end) {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n\n    const strokeKey = this.strokeKey_;\n    const textKey = this.textKey_;\n    const fillKey = this.fillKey_;\n    this.saveTextStates_();\n\n    const pixelRatio = this.pixelRatio;\n    const baseline = TEXT_ALIGN[textState.textBaseline];\n\n    const offsetY = this.textOffsetY_ * pixelRatio;\n    const text = this.text_;\n    const strokeWidth = strokeState\n      ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2\n      : 0;\n\n    this.instructions.push([\n      CanvasInstruction.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      textState.overflow,\n      fillKey,\n      textState.maxAngle,\n      pixelRatio,\n      offsetY,\n      strokeKey,\n      strokeWidth * pixelRatio,\n      text,\n      textKey,\n      1,\n    ]);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      textState.overflow,\n      fillKey ? defaultFillStyle : fillKey,\n      textState.maxAngle,\n      pixelRatio,\n      offsetY,\n      strokeKey,\n      strokeWidth * pixelRatio,\n      text,\n      textKey,\n      1 / pixelRatio,\n    ]);\n  }\n\n  /**\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @param {Object} [sharedData] Shared data.\n   */\n  setTextStyle(textStyle, sharedData) {\n    let textState, fillState, strokeState;\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        fillState = null;\n        this.textFillState_ = fillState;\n      } else {\n        fillState = this.textFillState_;\n        if (!fillState) {\n          fillState = /** @type {import(\"../canvas.js\").FillState} */ ({});\n          this.textFillState_ = fillState;\n        }\n        fillState.fillStyle = asColorLike(\n          textFillStyle.getColor() || defaultFillStyle\n        );\n      }\n\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        strokeState = null;\n        this.textStrokeState_ = strokeState;\n      } else {\n        strokeState = this.textStrokeState_;\n        if (!strokeState) {\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ ({});\n          this.textStrokeState_ = strokeState;\n        }\n        const lineDash = textStrokeStyle.getLineDash();\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\n        const lineWidth = textStrokeStyle.getWidth();\n        const miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n        strokeState.lineDashOffset =\n          lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n        strokeState.lineWidth =\n          lineWidth === undefined ? defaultLineWidth : lineWidth;\n        strokeState.miterLimit =\n          miterLimit === undefined ? defaultMiterLimit : miterLimit;\n        strokeState.strokeStyle = asColorLike(\n          textStrokeStyle.getColor() || defaultStrokeStyle\n        );\n      }\n\n      textState = this.textState_;\n      const font = textStyle.getFont() || defaultFont;\n      registerFont(font);\n      const textScale = textStyle.getScaleArray();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.repeat = textStyle.getRepeat();\n      textState.justify = textStyle.getJustify();\n      textState.textBaseline =\n        textStyle.getTextBaseline() || defaultTextBaseline;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || defaultPadding;\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\n\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ =\n        textRotateWithView === undefined ? false : textRotateWithView;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n\n      this.strokeKey_ = strokeState\n        ? (typeof strokeState.strokeStyle == 'string'\n            ? strokeState.strokeStyle\n            : getUid(strokeState.strokeStyle)) +\n          strokeState.lineCap +\n          strokeState.lineDashOffset +\n          '|' +\n          strokeState.lineWidth +\n          strokeState.lineJoin +\n          strokeState.miterLimit +\n          '[' +\n          strokeState.lineDash.join() +\n          ']'\n        : '';\n      this.textKey_ =\n        textState.font +\n        textState.scale +\n        (textState.textAlign || '?') +\n        (textState.repeat || '?') +\n        (textState.justify || '?') +\n        (textState.textBaseline || '?');\n      this.fillKey_ = fillState\n        ? typeof fillState.fillStyle == 'string'\n          ? fillState.fillStyle\n          : '|' + getUid(fillState.fillStyle)\n        : '';\n    }\n    this.declutterImageWithText_ = sharedData;\n  }\n}\n\nexport default CanvasTextBuilder;\n","import {lerp} from '../../math.js';\n\n/**\n * Creates chunks of equal length from a linestring\n * @param {number} chunkLength Length of each chunk.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Start offset of the `flatCoordinates`.\n * @param {number} end End offset of the `flatCoordinates`.\n * @param {number} stride Stride.\n * @return {Array<Array<number>>} Chunks of linestrings with stride 2.\n */\nexport function lineChunk(chunkLength, flatCoordinates, offset, end, stride) {\n  const chunks = [];\n  let cursor = offset;\n  let chunkM = 0;\n  let currentChunk = flatCoordinates.slice(offset, 2);\n  while (chunkM < chunkLength && cursor + stride < end) {\n    const [x1, y1] = currentChunk.slice(-2);\n    const x2 = flatCoordinates[cursor + stride];\n    const y2 = flatCoordinates[cursor + stride + 1];\n    const segmentLength = Math.sqrt(\n      (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1)\n    );\n    chunkM += segmentLength;\n    if (chunkM >= chunkLength) {\n      const m = (chunkLength - chunkM + segmentLength) / segmentLength;\n      const x = lerp(x1, x2, m);\n      const y = lerp(y1, y2, m);\n      currentChunk.push(x, y);\n      chunks.push(currentChunk);\n      currentChunk = [x, y];\n      if (chunkM == chunkLength) {\n        cursor += stride;\n      }\n      chunkM = 0;\n    } else if (chunkM < chunkLength) {\n      currentChunk.push(\n        flatCoordinates[cursor + stride],\n        flatCoordinates[cursor + stride + 1]\n      );\n      cursor += stride;\n    } else {\n      const missing = segmentLength - chunkM;\n      const x = lerp(x1, x2, missing / segmentLength);\n      const y = lerp(y1, y2, missing / segmentLength);\n      currentChunk.push(x, y);\n      chunks.push(currentChunk);\n      currentChunk = [x, y];\n      chunkM = 0;\n      cursor += stride;\n    }\n  }\n  if (chunkM > 0) {\n    chunks.push(currentChunk);\n  }\n  return chunks;\n}\n","/**\n * @module ol/geom/flat/straightchunk\n */\n\n/**\n * @param {number} maxAngle Maximum acceptable angle delta between segments.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {Array<number>} Start and end of the first suitable chunk of the\n * given `flatCoordinates`.\n */\nexport function matchingChunk(maxAngle, flatCoordinates, offset, end, stride) {\n  let chunkStart = offset;\n  let chunkEnd = offset;\n  let chunkM = 0;\n  let m = 0;\n  let start = offset;\n  let acos, i, m12, m23, x1, y1, x12, y12, x23, y23;\n  for (i = offset; i < end; i += stride) {\n    const x2 = flatCoordinates[i];\n    const y2 = flatCoordinates[i + 1];\n    if (x1 !== undefined) {\n      x23 = x2 - x1;\n      y23 = y2 - y1;\n      m23 = Math.sqrt(x23 * x23 + y23 * y23);\n      if (x12 !== undefined) {\n        m += m12;\n        acos = Math.acos((x12 * x23 + y12 * y23) / (m12 * m23));\n        if (acos > maxAngle) {\n          if (m > chunkM) {\n            chunkM = m;\n            chunkStart = start;\n            chunkEnd = i;\n          }\n          m = 0;\n          start = i - stride;\n        }\n      }\n      m12 = m23;\n      x12 = x23;\n      y12 = y23;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  m += m23;\n  return m > chunkM ? [start, i] : [chunkStart, chunkEnd];\n}\n","/**\n * @module ol/render/canvas/ExecutorGroup\n */\n\nimport Executor from './Executor.js';\nimport {ascending} from '../../array.js';\nimport {buffer, createEmpty, extendCoordinate} from '../../extent.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {isEmpty} from '../../obj.js';\nimport {transform2D} from '../../geom/flat/transform.js';\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nconst ORDER = ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'];\n\nclass ExecutorGroup {\n  /**\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceed that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number} [renderBuffer] Optional rendering buffer.\n   */\n  constructor(\n    maxExtent,\n    resolution,\n    pixelRatio,\n    overlaps,\n    allInstructions,\n    renderBuffer\n  ) {\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = overlaps;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderBuffer_ = renderBuffer;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Executor\").default>>}\n     */\n    this.executorsByZIndex_ = {};\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.hitDetectionContext_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.hitDetectionTransform_ = createTransform();\n\n    this.createExecutors_(allInstructions);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n  clip(context, transform) {\n    const flatClipCoords = this.getClipCoords(transform);\n    context.beginPath();\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n    context.clip();\n  }\n\n  /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\n   */\n  createExecutors_(allInstructions) {\n    for (const zIndex in allInstructions) {\n      let executors = this.executorsByZIndex_[zIndex];\n      if (executors === undefined) {\n        executors = {};\n        this.executorsByZIndex_[zIndex] = executors;\n      }\n      const instructionByZindex = allInstructions[zIndex];\n      for (const builderType in instructionByZindex) {\n        const instructions = instructionByZindex[builderType];\n        executors[builderType] = new Executor(\n          this.resolution_,\n          this.pixelRatio_,\n          this.overlaps_,\n          instructions\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */\n  hasExecutors(executors) {\n    for (const zIndex in this.executorsByZIndex_) {\n      const candidates = this.executorsByZIndex_[zIndex];\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\n        if (executors[i] in candidates) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    resolution,\n    rotation,\n    hitTolerance,\n    callback,\n    declutteredFeatures\n  ) {\n    hitTolerance = Math.round(hitTolerance);\n    const contextSize = hitTolerance * 2 + 1;\n    const transform = composeTransform(\n      this.hitDetectionTransform_,\n      hitTolerance + 0.5,\n      hitTolerance + 0.5,\n      1 / resolution,\n      -1 / resolution,\n      -rotation,\n      -coordinate[0],\n      -coordinate[1]\n    );\n\n    const newContext = !this.hitDetectionContext_;\n    if (newContext) {\n      this.hitDetectionContext_ = createCanvasContext2D(\n        contextSize,\n        contextSize,\n        undefined,\n        {willReadFrequently: true}\n      );\n    }\n    const context = this.hitDetectionContext_;\n\n    if (\n      context.canvas.width !== contextSize ||\n      context.canvas.height !== contextSize\n    ) {\n      context.canvas.width = contextSize;\n      context.canvas.height = contextSize;\n    } else if (!newContext) {\n      context.clearRect(0, 0, contextSize, contextSize);\n    }\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    let hitExtent;\n    if (this.renderBuffer_ !== undefined) {\n      hitExtent = createEmpty();\n      extendCoordinate(hitExtent, coordinate);\n      buffer(\n        hitExtent,\n        resolution * (this.renderBuffer_ + hitTolerance),\n        hitExtent\n      );\n    }\n\n    const indexes = getPixelIndexArray(hitTolerance);\n\n    let builderType;\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */\n    function featureCallback(feature, geometry) {\n      const imageData = context.getImageData(\n        0,\n        0,\n        contextSize,\n        contextSize\n      ).data;\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\n        if (imageData[indexes[i]] > 0) {\n          if (\n            !declutteredFeatures ||\n            (builderType !== 'Image' && builderType !== 'Text') ||\n            declutteredFeatures.includes(feature)\n          ) {\n            const idx = (indexes[i] - 3) / 4;\n            const x = hitTolerance - (idx % contextSize);\n            const y = hitTolerance - ((idx / contextSize) | 0);\n            const result = callback(feature, geometry, x * x + y * y);\n            if (result) {\n              return result;\n            }\n          }\n          context.clearRect(0, 0, contextSize, contextSize);\n          break;\n        }\n      }\n      return undefined;\n    }\n\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(ascending);\n\n    let i, j, executors, executor, result;\n    for (i = zs.length - 1; i >= 0; --i) {\n      const zIndexKey = zs[i].toString();\n      executors = this.executorsByZIndex_[zIndexKey];\n      for (j = ORDER.length - 1; j >= 0; --j) {\n        builderType = ORDER[j];\n        executor = executors[builderType];\n        if (executor !== undefined) {\n          result = executor.executeHitDetection(\n            context,\n            transform,\n            rotation,\n            featureCallback,\n            hitExtent\n          );\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @return {Array<number>|null} Clip coordinates.\n   */\n  getClipCoords(transform) {\n    const maxExtent = this.maxExtent_;\n    if (!maxExtent) {\n      return null;\n    }\n    const minX = maxExtent[0];\n    const minY = maxExtent[1];\n    const maxX = maxExtent[2];\n    const maxY = maxExtent[3];\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n    return flatClipCoords;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.executorsByZIndex_);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [builderTypes] Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ORDER}\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */\n  execute(\n    context,\n    contextScale,\n    transform,\n    viewRotation,\n    snapToPixel,\n    builderTypes,\n    declutterTree\n  ) {\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(ascending);\n\n    // setup clipping so that the parts of over-simplified geometries are not\n    // visible outside the current extent when panning\n    if (this.maxExtent_) {\n      context.save();\n      this.clip(context, transform);\n    }\n\n    builderTypes = builderTypes ? builderTypes : ORDER;\n    let i, ii, j, jj, replays, replay;\n    if (declutterTree) {\n      zs.reverse();\n    }\n    for (i = 0, ii = zs.length; i < ii; ++i) {\n      const zIndexKey = zs[i].toString();\n      replays = this.executorsByZIndex_[zIndexKey];\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n        const builderType = builderTypes[j];\n        replay = replays[builderType];\n        if (replay !== undefined) {\n          replay.execute(\n            context,\n            contextScale,\n            transform,\n            viewRotation,\n            snapToPixel,\n            declutterTree\n          );\n        }\n      }\n    }\n\n    if (this.maxExtent_) {\n      context.restore();\n    }\n  }\n}\n\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */\nconst circlePixelIndexArrayCache = {};\n\n/**\n * This methods creates an array with indexes of all pixels within a circle,\n * ordered by how close they are to the center.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @return {Array<number>} An array with indexes within a circle.\n */\nexport function getPixelIndexArray(radius) {\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\n    return circlePixelIndexArrayCache[radius];\n  }\n\n  const size = radius * 2 + 1;\n  const maxDistanceSq = radius * radius;\n  const distances = new Array(maxDistanceSq + 1);\n  for (let i = 0; i <= radius; ++i) {\n    for (let j = 0; j <= radius; ++j) {\n      const distanceSq = i * i + j * j;\n      if (distanceSq > maxDistanceSq) {\n        break;\n      }\n      let distance = distances[distanceSq];\n      if (!distance) {\n        distance = [];\n        distances[distanceSq] = distance;\n      }\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n      if (i > 0) {\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n      }\n      if (j > 0) {\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n        if (i > 0) {\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n      }\n    }\n  }\n\n  const pixelIndex = [];\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\n    if (distances[i]) {\n      pixelIndex.push(...distances[i]);\n    }\n  }\n\n  circlePixelIndexArrayCache[radius] = pixelIndex;\n  return pixelIndex;\n}\n\nexport default ExecutorGroup;\n","/**\n * @module ol/render/canvas/Executor\n */\nimport CanvasInstruction from './Instruction.js';\nimport {TEXT_ALIGN} from './TextBuilder.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n  setFromArray as transformSetFromArray,\n} from '../../transform.js';\nimport {createEmpty, createOrUpdate, intersects} from '../../extent.js';\nimport {\n  defaultPadding,\n  defaultTextAlign,\n  defaultTextBaseline,\n  drawImageOrLabel,\n  getTextDimensions,\n  measureAndCacheTextWidth,\n} from '../canvas.js';\nimport {drawTextOnPath} from '../../geom/flat/textpath.js';\nimport {equals} from '../../array.js';\nimport {lineStringLength} from '../../geom/flat/length.js';\nimport {transform2D} from '../../geom/flat/transform.js';\n\n/**\n * @typedef {Object} BBox\n * @property {number} minX Minimal x.\n * @property {number} minY Minimal y.\n * @property {number} maxX Maximal x.\n * @property {number} maxY Maximal y\n * @property {*} value Value.\n */\n\n/**\n * @typedef {Object} ImageOrLabelDimensions\n * @property {number} drawImageX DrawImageX.\n * @property {number} drawImageY DrawImageY.\n * @property {number} drawImageW DrawImageW.\n * @property {number} drawImageH DrawImageH.\n * @property {number} originX OriginX.\n * @property {number} originY OriginY.\n * @property {Array<number>} scale Scale.\n * @property {BBox} declutterBox DeclutterBox.\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\n */\n\n/**\n * @typedef {{0: CanvasRenderingContext2D, 1: number, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\n */\n\n/**\n * @template T\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */\n\n/**\n * @type {import(\"../../extent.js\").Extent}\n */\nconst tmpExtent = createEmpty();\n\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p1 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p2 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p3 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p4 = [];\n\n/**\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\n * @return {BBox} Declutter bbox.\n */\nfunction getDeclutterBox(replayImageOrLabelArgs) {\n  return replayImageOrLabelArgs[3].declutterBox;\n}\n\nconst rtlRegEx = new RegExp(\n  /* eslint-disable prettier/prettier */\n  '[' +\n    String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) +\n    String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) +\n    String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) +\n    String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) +\n    String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) +\n  ']'\n  /* eslint-enable prettier/prettier */\n);\n\n/**\n * @param {string} text Text.\n * @param {CanvasTextAlign} align Alignment.\n * @return {number} Text alignment.\n */\nfunction horizontalTextAlign(text, align) {\n  if (align === 'start') {\n    align = rtlRegEx.test(text) ? 'right' : 'left';\n  } else if (align === 'end') {\n    align = rtlRegEx.test(text) ? 'left' : 'right';\n  }\n  return TEXT_ALIGN[align];\n}\n\n/**\n * @param {Array<string>} acc Accumulator.\n * @param {string} line Line of text.\n * @param {number} i Index\n * @return {Array<string>} Accumulator.\n */\nfunction createTextChunks(acc, line, i) {\n  if (i > 0) {\n    acc.push('\\n', '');\n  }\n  acc.push(line, '');\n  return acc;\n}\n\nclass Executor {\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The replay can have overlapping geometries.\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions\n   */\n  constructor(resolution, pixelRatio, overlaps, instructions) {\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.overlaps = overlaps;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.alignFill_;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = instructions.instructions;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = instructions.coordinates;\n\n    /**\n     * @private\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\n     */\n    this.coordinateCache_ = {};\n\n    /**\n     * @private\n     * @type {!import(\"../../transform.js\").Transform}\n     */\n    this.renderedTransform_ = createTransform();\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = instructions.hitDetectionInstructions;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = 0;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = instructions.fillStates || {};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = instructions.strokeStates || {};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = instructions.textStates || {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.widths_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, import(\"../canvas.js\").Label>}\n     */\n    this.labels_ = {};\n  }\n\n  /**\n   * @param {string|Array<string>} text Text.\n   * @param {string} textKey Text style key.\n   * @param {string} fillKey Fill style key.\n   * @param {string} strokeKey Stroke style key.\n   * @return {import(\"../canvas.js\").Label} Label.\n   */\n  createLabel(text, textKey, fillKey, strokeKey) {\n    const key = text + textKey + fillKey + strokeKey;\n    if (this.labels_[key]) {\n      return this.labels_[key];\n    }\n    const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\n    const fillState = fillKey ? this.fillStates[fillKey] : null;\n    const textState = this.textStates[textKey];\n    const pixelRatio = this.pixelRatio;\n    const scale = [\n      textState.scale[0] * pixelRatio,\n      textState.scale[1] * pixelRatio,\n    ];\n    const textIsArray = Array.isArray(text);\n    const align = textState.justify\n      ? TEXT_ALIGN[textState.justify]\n      : horizontalTextAlign(\n          Array.isArray(text) ? text[0] : text,\n          textState.textAlign || defaultTextAlign\n        );\n    const strokeWidth =\n      strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    const chunks = textIsArray\n      ? text\n      : text.split('\\n').reduce(createTextChunks, []);\n\n    const {width, height, widths, heights, lineWidths} = getTextDimensions(\n      textState,\n      chunks\n    );\n    const renderWidth = width + strokeWidth;\n    const contextInstructions = [];\n    // make canvas 2 pixels wider to account for italic text width measurement errors\n    const w = (renderWidth + 2) * scale[0];\n    const h = (height + strokeWidth) * scale[1];\n    /** @type {import(\"../canvas.js\").Label} */\n    const label = {\n      width: w < 0 ? Math.floor(w) : Math.ceil(w),\n      height: h < 0 ? Math.floor(h) : Math.ceil(h),\n      contextInstructions: contextInstructions,\n    };\n    if (scale[0] != 1 || scale[1] != 1) {\n      contextInstructions.push('scale', scale);\n    }\n    if (strokeKey) {\n      contextInstructions.push('strokeStyle', strokeState.strokeStyle);\n      contextInstructions.push('lineWidth', strokeWidth);\n      contextInstructions.push('lineCap', strokeState.lineCap);\n      contextInstructions.push('lineJoin', strokeState.lineJoin);\n      contextInstructions.push('miterLimit', strokeState.miterLimit);\n      contextInstructions.push('setLineDash', [strokeState.lineDash]);\n      contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);\n    }\n    if (fillKey) {\n      contextInstructions.push('fillStyle', fillState.fillStyle);\n    }\n    contextInstructions.push('textBaseline', 'middle');\n    contextInstructions.push('textAlign', 'center');\n    const leftRight = 0.5 - align;\n    let x = align * renderWidth + leftRight * strokeWidth;\n    const strokeInstructions = [];\n    const fillInstructions = [];\n    let lineHeight = 0;\n    let lineOffset = 0;\n    let widthHeightIndex = 0;\n    let lineWidthIndex = 0;\n    let previousFont;\n    for (let i = 0, ii = chunks.length; i < ii; i += 2) {\n      const text = chunks[i];\n      if (text === '\\n') {\n        lineOffset += lineHeight;\n        lineHeight = 0;\n        x = align * renderWidth + leftRight * strokeWidth;\n        ++lineWidthIndex;\n        continue;\n      }\n      const font = chunks[i + 1] || textState.font;\n      if (font !== previousFont) {\n        if (strokeKey) {\n          strokeInstructions.push('font', font);\n        }\n        if (fillKey) {\n          fillInstructions.push('font', font);\n        }\n        previousFont = font;\n      }\n      lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\n      const fillStrokeArgs = [\n        text,\n        x +\n          leftRight * widths[widthHeightIndex] +\n          align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),\n        0.5 * (strokeWidth + lineHeight) + lineOffset,\n      ];\n      x += widths[widthHeightIndex];\n      if (strokeKey) {\n        strokeInstructions.push('strokeText', fillStrokeArgs);\n      }\n      if (fillKey) {\n        fillInstructions.push('fillText', fillStrokeArgs);\n      }\n      ++widthHeightIndex;\n    }\n    Array.prototype.push.apply(contextInstructions, strokeInstructions);\n    Array.prototype.push.apply(contextInstructions, fillInstructions);\n    this.labels_[key] = label;\n    return label;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */\n  replayTextBackground_(\n    context,\n    p1,\n    p2,\n    p3,\n    p4,\n    fillInstruction,\n    strokeInstruction\n  ) {\n    context.beginPath();\n    context.moveTo.apply(context, p1);\n    context.lineTo.apply(context, p2);\n    context.lineTo.apply(context, p3);\n    context.lineTo.apply(context, p4);\n    context.lineTo.apply(context, p1);\n    if (fillInstruction) {\n      this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);\n      this.fill_(context);\n    }\n    if (strokeInstruction) {\n      this.setStrokeStyle_(\n        context,\n        /** @type {Array<*>} */ (strokeInstruction)\n      );\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} sheetWidth Width of the sprite sheet.\n   * @param {number} sheetHeight Height of the sprite sheet.\n   * @param {number} centerX X.\n   * @param {number} centerY Y.\n   * @param {number} width Width.\n   * @param {number} height Height.\n   * @param {number} anchorX Anchor X.\n   * @param {number} anchorY Anchor Y.\n   * @param {number} originX Origin X.\n   * @param {number} originY Origin Y.\n   * @param {number} rotation Rotation.\n   * @param {import(\"../../size.js\").Size} scale Scale.\n   * @param {boolean} snapToPixel Snap to pixel.\n   * @param {Array<number>} padding Padding.\n   * @param {boolean} fillStroke Background fill or stroke.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\n   */\n  calculateImageOrLabelDimensions_(\n    sheetWidth,\n    sheetHeight,\n    centerX,\n    centerY,\n    width,\n    height,\n    anchorX,\n    anchorY,\n    originX,\n    originY,\n    rotation,\n    scale,\n    snapToPixel,\n    padding,\n    fillStroke,\n    feature\n  ) {\n    anchorX *= scale[0];\n    anchorY *= scale[1];\n    let x = centerX - anchorX;\n    let y = centerY - anchorY;\n\n    const w = width + originX > sheetWidth ? sheetWidth - originX : width;\n    const h = height + originY > sheetHeight ? sheetHeight - originY : height;\n    const boxW = padding[3] + w * scale[0] + padding[1];\n    const boxH = padding[0] + h * scale[1] + padding[2];\n    const boxX = x - padding[3];\n    const boxY = y - padding[0];\n\n    if (fillStroke || rotation !== 0) {\n      p1[0] = boxX;\n      p4[0] = boxX;\n      p1[1] = boxY;\n      p2[1] = boxY;\n      p2[0] = boxX + boxW;\n      p3[0] = p2[0];\n      p3[1] = boxY + boxH;\n      p4[1] = p3[1];\n    }\n\n    let transform;\n    if (rotation !== 0) {\n      transform = composeTransform(\n        createTransform(),\n        centerX,\n        centerY,\n        1,\n        1,\n        rotation,\n        -centerX,\n        -centerY\n      );\n\n      applyTransform(transform, p1);\n      applyTransform(transform, p2);\n      applyTransform(transform, p3);\n      applyTransform(transform, p4);\n      createOrUpdate(\n        Math.min(p1[0], p2[0], p3[0], p4[0]),\n        Math.min(p1[1], p2[1], p3[1], p4[1]),\n        Math.max(p1[0], p2[0], p3[0], p4[0]),\n        Math.max(p1[1], p2[1], p3[1], p4[1]),\n        tmpExtent\n      );\n    } else {\n      createOrUpdate(\n        Math.min(boxX, boxX + boxW),\n        Math.min(boxY, boxY + boxH),\n        Math.max(boxX, boxX + boxW),\n        Math.max(boxY, boxY + boxH),\n        tmpExtent\n      );\n    }\n    if (snapToPixel) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n    return {\n      drawImageX: x,\n      drawImageY: y,\n      drawImageW: w,\n      drawImageH: h,\n      originX: originX,\n      originY: originY,\n      declutterBox: {\n        minX: tmpExtent[0],\n        minY: tmpExtent[1],\n        maxX: tmpExtent[2],\n        maxY: tmpExtent[3],\n        value: feature,\n      },\n      canvasTransform: transform,\n      scale: scale,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\n   * @param {number} opacity Opacity.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   * @return {boolean} The image or label was rendered.\n   */\n  replayImageOrLabel_(\n    context,\n    contextScale,\n    imageOrLabel,\n    dimensions,\n    opacity,\n    fillInstruction,\n    strokeInstruction\n  ) {\n    const fillStroke = !!(fillInstruction || strokeInstruction);\n\n    const box = dimensions.declutterBox;\n    const canvas = context.canvas;\n    const strokePadding = strokeInstruction\n      ? (strokeInstruction[2] * dimensions.scale[0]) / 2\n      : 0;\n    const intersects =\n      box.minX - strokePadding <= canvas.width / contextScale &&\n      box.maxX + strokePadding >= 0 &&\n      box.minY - strokePadding <= canvas.height / contextScale &&\n      box.maxY + strokePadding >= 0;\n\n    if (intersects) {\n      if (fillStroke) {\n        this.replayTextBackground_(\n          context,\n          p1,\n          p2,\n          p3,\n          p4,\n          /** @type {Array<*>} */ (fillInstruction),\n          /** @type {Array<*>} */ (strokeInstruction)\n        );\n      }\n      drawImageOrLabel(\n        context,\n        dimensions.canvasTransform,\n        opacity,\n        imageOrLabel,\n        dimensions.originX,\n        dimensions.originY,\n        dimensions.drawImageW,\n        dimensions.drawImageH,\n        dimensions.drawImageX,\n        dimensions.drawImageY,\n        dimensions.scale\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  fill_(context) {\n    if (this.alignFill_) {\n      const origin = applyTransform(this.renderedTransform_, [0, 0]);\n      const repeatSize = 512 * this.pixelRatio;\n      context.save();\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\n      context.rotate(this.viewRotation_);\n    }\n    context.fill();\n    if (this.alignFill_) {\n      context.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {Array<*>} instruction Instruction.\n   */\n  setStrokeStyle_(context, instruction) {\n    context['strokeStyle'] =\n      /** @type {import(\"../../colorlike.js\").ColorLike} */ (instruction[1]);\n    context.lineWidth = /** @type {number} */ (instruction[2]);\n    context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);\n    context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);\n    context.miterLimit = /** @type {number} */ (instruction[5]);\n    context.lineDashOffset = /** @type {number} */ (instruction[7]);\n    context.setLineDash(/** @type {Array<number>} */ (instruction[6]));\n  }\n\n  /**\n   * @private\n   * @param {string|Array<string>} text The text to draw.\n   * @param {string} textKey The key of the text state.\n   * @param {string} strokeKey The key for the stroke state.\n   * @param {string} fillKey The key for the fill state.\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\n   */\n  drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\n    const textState = this.textStates[textKey];\n\n    const label = this.createLabel(text, textKey, fillKey, strokeKey);\n\n    const strokeState = this.strokeStates[strokeKey];\n    const pixelRatio = this.pixelRatio;\n    const align = horizontalTextAlign(\n      Array.isArray(text) ? text[0] : text,\n      textState.textAlign || defaultTextAlign\n    );\n    const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];\n    const strokeWidth =\n      strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    // Remove the 2 pixels we added in createLabel() for the anchor\n    const width = label.width / pixelRatio - 2 * textState.scale[0];\n    const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\n    const anchorY =\n      (baseline * label.height) / pixelRatio +\n      2 * (0.5 - baseline) * strokeWidth;\n\n    return {\n      label: label,\n      anchorX: anchorX,\n      anchorY: anchorY,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {Array<*>} instructions Instructions array.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\n   *     features that intersect this extent.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  execute_(\n    context,\n    contextScale,\n    transform,\n    instructions,\n    snapToPixel,\n    featureCallback,\n    hitExtent,\n    declutterTree\n  ) {\n    /** @type {Array<number>} */\n    let pixelCoordinates;\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\n      pixelCoordinates = this.pixelCoordinates_;\n    } else {\n      if (!this.pixelCoordinates_) {\n        this.pixelCoordinates_ = [];\n      }\n      pixelCoordinates = transform2D(\n        this.coordinates,\n        0,\n        this.coordinates.length,\n        2,\n        transform,\n        this.pixelCoordinates_\n      );\n      transformSetFromArray(this.renderedTransform_, transform);\n    }\n    let i = 0; // instruction index\n    const ii = instructions.length; // end of instructions\n    let d = 0; // data index\n    let dd; // end of per-instruction data\n    let anchorX,\n      anchorY,\n      prevX,\n      prevY,\n      roundX,\n      roundY,\n      image,\n      text,\n      textKey,\n      strokeKey,\n      fillKey;\n    let pendingFill = 0;\n    let pendingStroke = 0;\n    let lastFillInstruction = null;\n    let lastStrokeInstruction = null;\n    const coordinateCache = this.coordinateCache_;\n    const viewRotation = this.viewRotation_;\n    const viewRotationFromTransform =\n      Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\n\n    const state = /** @type {import(\"../../render.js\").State} */ ({\n      context: context,\n      pixelRatio: this.pixelRatio,\n      resolution: this.resolution,\n      rotation: viewRotation,\n    });\n\n    // When the batch size gets too big, performance decreases. 200 is a good\n    // balance between batch size and number of fill/stroke instructions.\n    const batchSize =\n      this.instructions != instructions || this.overlaps ? 0 : 200;\n    let /** @type {import(\"../../Feature.js\").FeatureLike} */ feature;\n    let x, y, currentGeometry;\n    while (i < ii) {\n      const instruction = instructions[i];\n      const type = /** @type {import(\"./Instruction.js\").default} */ (\n        instruction[0]\n      );\n      switch (type) {\n        case CanvasInstruction.BEGIN_GEOMETRY:\n          feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\n            instruction[1]\n          );\n          currentGeometry = instruction[3];\n          if (!feature.getGeometry()) {\n            i = /** @type {number} */ (instruction[2]);\n          } else if (\n            hitExtent !== undefined &&\n            !intersects(hitExtent, currentGeometry.getExtent())\n          ) {\n            i = /** @type {number} */ (instruction[2]) + 1;\n          } else {\n            ++i;\n          }\n          break;\n        case CanvasInstruction.BEGIN_PATH:\n          if (pendingFill > batchSize) {\n            this.fill_(context);\n            pendingFill = 0;\n          }\n          if (pendingStroke > batchSize) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          if (!pendingFill && !pendingStroke) {\n            context.beginPath();\n            prevX = NaN;\n            prevY = NaN;\n          }\n          ++i;\n          break;\n        case CanvasInstruction.CIRCLE:\n          d = /** @type {number} */ (instruction[1]);\n          const x1 = pixelCoordinates[d];\n          const y1 = pixelCoordinates[d + 1];\n          const x2 = pixelCoordinates[d + 2];\n          const y2 = pixelCoordinates[d + 3];\n          const dx = x2 - x1;\n          const dy = y2 - y1;\n          const r = Math.sqrt(dx * dx + dy * dy);\n          context.moveTo(x1 + r, y1);\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n          ++i;\n          break;\n        case CanvasInstruction.CLOSE_PATH:\n          context.closePath();\n          ++i;\n          break;\n        case CanvasInstruction.CUSTOM:\n          d = /** @type {number} */ (instruction[1]);\n          dd = instruction[2];\n          const geometry =\n            /** @type {import(\"../../geom/SimpleGeometry.js\").default} */ (\n              instruction[3]\n            );\n          const renderer = instruction[4];\n          const fn = instruction.length == 6 ? instruction[5] : undefined;\n          state.geometry = geometry;\n          state.feature = feature;\n          if (!(i in coordinateCache)) {\n            coordinateCache[i] = [];\n          }\n          const coords = coordinateCache[i];\n          if (fn) {\n            fn(pixelCoordinates, d, dd, 2, coords);\n          } else {\n            coords[0] = pixelCoordinates[d];\n            coords[1] = pixelCoordinates[d + 1];\n            coords.length = 2;\n          }\n          renderer(coords, state);\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_IMAGE:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          image =\n            /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (\n              instruction[3]\n            );\n\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\n          anchorX = /** @type {number} */ (instruction[4]);\n          anchorY = /** @type {number} */ (instruction[5]);\n          let height = /** @type {number} */ (instruction[6]);\n          const opacity = /** @type {number} */ (instruction[7]);\n          const originX = /** @type {number} */ (instruction[8]);\n          const originY = /** @type {number} */ (instruction[9]);\n          const rotateWithView = /** @type {boolean} */ (instruction[10]);\n          let rotation = /** @type {number} */ (instruction[11]);\n          const scale = /** @type {import(\"../../size.js\").Size} */ (\n            instruction[12]\n          );\n          let width = /** @type {number} */ (instruction[13]);\n          const declutterMode =\n            /** @type {\"declutter\"|\"obstacle\"|\"none\"|undefined} */ (\n              instruction[14]\n            );\n          const declutterImageWithText =\n            /** @type {import(\"../canvas.js\").DeclutterImageWithText} */ (\n              instruction[15]\n            );\n\n          if (!image && instruction.length >= 20) {\n            // create label images\n            text = /** @type {string} */ (instruction[19]);\n            textKey = /** @type {string} */ (instruction[20]);\n            strokeKey = /** @type {string} */ (instruction[21]);\n            fillKey = /** @type {string} */ (instruction[22]);\n            const labelWithAnchor = this.drawLabelWithPointPlacement_(\n              text,\n              textKey,\n              strokeKey,\n              fillKey\n            );\n            image = labelWithAnchor.label;\n            instruction[3] = image;\n            const textOffsetX = /** @type {number} */ (instruction[23]);\n            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\n            instruction[4] = anchorX;\n            const textOffsetY = /** @type {number} */ (instruction[24]);\n            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\n            instruction[5] = anchorY;\n            height = image.height;\n            instruction[6] = height;\n            width = image.width;\n            instruction[13] = width;\n          }\n\n          let geometryWidths;\n          if (instruction.length > 25) {\n            geometryWidths = /** @type {number} */ (instruction[25]);\n          }\n\n          let padding, backgroundFill, backgroundStroke;\n          if (instruction.length > 17) {\n            padding = /** @type {Array<number>} */ (instruction[16]);\n            backgroundFill = /** @type {boolean} */ (instruction[17]);\n            backgroundStroke = /** @type {boolean} */ (instruction[18]);\n          } else {\n            padding = defaultPadding;\n            backgroundFill = false;\n            backgroundStroke = false;\n          }\n\n          if (rotateWithView && viewRotationFromTransform) {\n            // Canvas is expected to be rotated to reverse view rotation.\n            rotation += viewRotation;\n          } else if (!rotateWithView && !viewRotationFromTransform) {\n            // Canvas is not rotated, images need to be rotated back to be north-up.\n            rotation -= viewRotation;\n          }\n          let widthIndex = 0;\n          for (; d < dd; d += 2) {\n            if (\n              geometryWidths &&\n              geometryWidths[widthIndex++] < width / this.pixelRatio\n            ) {\n              continue;\n            }\n            const dimensions = this.calculateImageOrLabelDimensions_(\n              image.width,\n              image.height,\n              pixelCoordinates[d],\n              pixelCoordinates[d + 1],\n              width,\n              height,\n              anchorX,\n              anchorY,\n              originX,\n              originY,\n              rotation,\n              scale,\n              snapToPixel,\n              padding,\n              backgroundFill || backgroundStroke,\n              feature\n            );\n            /** @type {ReplayImageOrLabelArgs} */\n            const args = [\n              context,\n              contextScale,\n              image,\n              dimensions,\n              opacity,\n              backgroundFill\n                ? /** @type {Array<*>} */ (lastFillInstruction)\n                : null,\n              backgroundStroke\n                ? /** @type {Array<*>} */ (lastStrokeInstruction)\n                : null,\n            ];\n            if (declutterTree) {\n              if (declutterMode === 'none') {\n                // not rendered in declutter group\n                continue;\n              } else if (declutterMode === 'obstacle') {\n                // will always be drawn, thus no collision detection, but insert as obstacle\n                declutterTree.insert(dimensions.declutterBox);\n                continue;\n              } else {\n                let imageArgs;\n                let imageDeclutterBox;\n                if (declutterImageWithText) {\n                  const index = dd - d;\n                  if (!declutterImageWithText[index]) {\n                    // We now have the image for an image+text combination.\n                    declutterImageWithText[index] = args;\n                    // Don't render anything for now, wait for the text.\n                    continue;\n                  }\n                  imageArgs = declutterImageWithText[index];\n                  delete declutterImageWithText[index];\n                  imageDeclutterBox = getDeclutterBox(imageArgs);\n                  if (declutterTree.collides(imageDeclutterBox)) {\n                    continue;\n                  }\n                }\n                if (declutterTree.collides(dimensions.declutterBox)) {\n                  continue;\n                }\n                if (imageArgs) {\n                  // We now have image and text for an image+text combination.\n                  declutterTree.insert(imageDeclutterBox);\n                  // Render the image before we render the text.\n                  this.replayImageOrLabel_.apply(this, imageArgs);\n                }\n                declutterTree.insert(dimensions.declutterBox);\n              }\n            }\n            this.replayImageOrLabel_.apply(this, args);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_CHARS:\n          const begin = /** @type {number} */ (instruction[1]);\n          const end = /** @type {number} */ (instruction[2]);\n          const baseline = /** @type {number} */ (instruction[3]);\n          const overflow = /** @type {number} */ (instruction[4]);\n          fillKey = /** @type {string} */ (instruction[5]);\n          const maxAngle = /** @type {number} */ (instruction[6]);\n          const measurePixelRatio = /** @type {number} */ (instruction[7]);\n          const offsetY = /** @type {number} */ (instruction[8]);\n          strokeKey = /** @type {string} */ (instruction[9]);\n          const strokeWidth = /** @type {number} */ (instruction[10]);\n          text = /** @type {string} */ (instruction[11]);\n          textKey = /** @type {string} */ (instruction[12]);\n          const pixelRatioScale = [\n            /** @type {number} */ (instruction[13]),\n            /** @type {number} */ (instruction[13]),\n          ];\n\n          const textState = this.textStates[textKey];\n          const font = textState.font;\n          const textScale = [\n            textState.scale[0] * measurePixelRatio,\n            textState.scale[1] * measurePixelRatio,\n          ];\n\n          let cachedWidths;\n          if (font in this.widths_) {\n            cachedWidths = this.widths_[font];\n          } else {\n            cachedWidths = {};\n            this.widths_[font] = cachedWidths;\n          }\n\n          const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\n          const textLength =\n            Math.abs(textScale[0]) *\n            measureAndCacheTextWidth(font, text, cachedWidths);\n          if (overflow || textLength <= pathLength) {\n            const textAlign = this.textStates[textKey].textAlign;\n            const startM =\n              (pathLength - textLength) * horizontalTextAlign(text, textAlign);\n            const parts = drawTextOnPath(\n              pixelCoordinates,\n              begin,\n              end,\n              2,\n              text,\n              startM,\n              maxAngle,\n              Math.abs(textScale[0]),\n              measureAndCacheTextWidth,\n              font,\n              cachedWidths,\n              viewRotationFromTransform ? 0 : this.viewRotation_\n            );\n            drawChars: if (parts) {\n              /** @type {Array<ReplayImageOrLabelArgs>} */\n              const replayImageOrLabelArgs = [];\n              let c, cc, chars, label, part;\n              if (strokeKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = this.createLabel(chars, textKey, '', strokeKey);\n                  anchorX =\n                    /** @type {number} */ (part[2]) +\n                    (textScale[0] < 0 ? -strokeWidth : strokeWidth);\n                  anchorY =\n                    baseline * label.height +\n                    ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /\n                      textScale[0] -\n                    offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(\n                    label.width,\n                    label.height,\n                    part[0],\n                    part[1],\n                    label.width,\n                    label.height,\n                    anchorX,\n                    anchorY,\n                    0,\n                    0,\n                    part[3],\n                    pixelRatioScale,\n                    false,\n                    defaultPadding,\n                    false,\n                    feature\n                  );\n                  if (\n                    declutterTree &&\n                    declutterTree.collides(dimensions.declutterBox)\n                  ) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([\n                    context,\n                    contextScale,\n                    label,\n                    dimensions,\n                    1,\n                    null,\n                    null,\n                  ]);\n                }\n              }\n              if (fillKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = this.createLabel(chars, textKey, fillKey, '');\n                  anchorX = /** @type {number} */ (part[2]);\n                  anchorY = baseline * label.height - offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(\n                    label.width,\n                    label.height,\n                    part[0],\n                    part[1],\n                    label.width,\n                    label.height,\n                    anchorX,\n                    anchorY,\n                    0,\n                    0,\n                    part[3],\n                    pixelRatioScale,\n                    false,\n                    defaultPadding,\n                    false,\n                    feature\n                  );\n                  if (\n                    declutterTree &&\n                    declutterTree.collides(dimensions.declutterBox)\n                  ) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([\n                    context,\n                    contextScale,\n                    label,\n                    dimensions,\n                    1,\n                    null,\n                    null,\n                  ]);\n                }\n              }\n              if (declutterTree) {\n                declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));\n              }\n              for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {\n                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\n              }\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.END_GEOMETRY:\n          if (featureCallback !== undefined) {\n            feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\n              instruction[1]\n            );\n            const result = featureCallback(feature, currentGeometry);\n            if (result) {\n              return result;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.FILL:\n          if (batchSize) {\n            pendingFill++;\n          } else {\n            this.fill_(context);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.MOVE_TO_LINE_TO:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          x = pixelCoordinates[d];\n          y = pixelCoordinates[d + 1];\n          roundX = (x + 0.5) | 0;\n          roundY = (y + 0.5) | 0;\n          if (roundX !== prevX || roundY !== prevY) {\n            context.moveTo(x, y);\n            prevX = roundX;\n            prevY = roundY;\n          }\n          for (d += 2; d < dd; d += 2) {\n            x = pixelCoordinates[d];\n            y = pixelCoordinates[d + 1];\n            roundX = (x + 0.5) | 0;\n            roundY = (y + 0.5) | 0;\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n              context.lineTo(x, y);\n              prevX = roundX;\n              prevY = roundY;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.SET_FILL_STYLE:\n          lastFillInstruction = instruction;\n          this.alignFill_ = instruction[2];\n\n          if (pendingFill) {\n            this.fill_(context);\n            pendingFill = 0;\n            if (pendingStroke) {\n              context.stroke();\n              pendingStroke = 0;\n            }\n          }\n\n          context.fillStyle =\n            /** @type {import(\"../../colorlike.js\").ColorLike} */ (\n              instruction[1]\n            );\n          ++i;\n          break;\n        case CanvasInstruction.SET_STROKE_STYLE:\n          lastStrokeInstruction = instruction;\n          if (pendingStroke) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));\n          ++i;\n          break;\n        case CanvasInstruction.STROKE:\n          if (batchSize) {\n            pendingStroke++;\n          } else {\n            context.stroke();\n          }\n          ++i;\n          break;\n        default: // consume the instruction anyway, to avoid an infinite loop\n          ++i;\n          break;\n      }\n    }\n    if (pendingFill) {\n      this.fill_(context);\n    }\n    if (pendingStroke) {\n      context.stroke();\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {import(\"rbush\").default} [declutterTree] Declutter tree.\n   */\n  execute(\n    context,\n    contextScale,\n    transform,\n    viewRotation,\n    snapToPixel,\n    declutterTree\n  ) {\n    this.viewRotation_ = viewRotation;\n    this.execute_(\n      context,\n      contextScale,\n      transform,\n      this.instructions,\n      snapToPixel,\n      undefined,\n      undefined,\n      declutterTree\n    );\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {FeatureCallback<T>} [featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [hitExtent] Only check\n   *     features that intersect this extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  executeHitDetection(\n    context,\n    transform,\n    viewRotation,\n    featureCallback,\n    hitExtent\n  ) {\n    this.viewRotation_ = viewRotation;\n    return this.execute_(\n      context,\n      1,\n      transform,\n      this.hitDetectionInstructions,\n      true,\n      featureCallback,\n      hitExtent\n    );\n  }\n}\n\nexport default Executor;\n","/**\n * @module ol/geom/flat/textpath\n */\nimport {lerp} from '../../math.js';\nimport {rotate} from './transform.js';\n\n/**\n * @param {Array<number>} flatCoordinates Path to put text on.\n * @param {number} offset Start offset of the `flatCoordinates`.\n * @param {number} end End offset of the `flatCoordinates`.\n * @param {number} stride Stride.\n * @param {string} text Text to place on the path.\n * @param {number} startM m along the path where the text starts.\n * @param {number} maxAngle Max angle between adjacent chars in radians.\n * @param {number} scale The product of the text scale and the device pixel ratio.\n * @param {function(string, string, Object<string, number>):number} measureAndCacheTextWidth Measure and cache text width.\n * @param {string} font The font.\n * @param {Object<string, number>} cache A cache of measured widths.\n * @param {number} rotation Rotation to apply to the flatCoordinates to determine whether text needs to be reversed.\n * @return {Array<Array<*>>|null} The result array (or null if `maxAngle` was\n * exceeded). Entries of the array are x, y, anchorX, angle, chunk.\n */\nexport function drawTextOnPath(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  text,\n  startM,\n  maxAngle,\n  scale,\n  measureAndCacheTextWidth,\n  font,\n  cache,\n  rotation\n) {\n  let x2 = flatCoordinates[offset];\n  let y2 = flatCoordinates[offset + 1];\n  let x1 = 0;\n  let y1 = 0;\n  let segmentLength = 0;\n  let segmentM = 0;\n\n  function advance() {\n    x1 = x2;\n    y1 = y2;\n    offset += stride;\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    segmentM += segmentLength;\n    segmentLength = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n  }\n  do {\n    advance();\n  } while (offset < end - stride && segmentM + segmentLength < startM);\n\n  let interpolate =\n    segmentLength === 0 ? 0 : (startM - segmentM) / segmentLength;\n  const beginX = lerp(x1, x2, interpolate);\n  const beginY = lerp(y1, y2, interpolate);\n\n  const startOffset = offset - stride;\n  const startLength = segmentM;\n  const endM = startM + scale * measureAndCacheTextWidth(font, text, cache);\n  while (offset < end - stride && segmentM + segmentLength < endM) {\n    advance();\n  }\n  interpolate = segmentLength === 0 ? 0 : (endM - segmentM) / segmentLength;\n  const endX = lerp(x1, x2, interpolate);\n  const endY = lerp(y1, y2, interpolate);\n\n  // Keep text upright\n  let reverse;\n  if (rotation) {\n    const flat = [beginX, beginY, endX, endY];\n    rotate(flat, 0, 4, 2, rotation, flat, flat);\n    reverse = flat[0] > flat[2];\n  } else {\n    reverse = beginX > endX;\n  }\n\n  const PI = Math.PI;\n  const result = [];\n  const singleSegment = startOffset + stride === offset;\n\n  offset = startOffset;\n  segmentLength = 0;\n  segmentM = startLength;\n  x2 = flatCoordinates[offset];\n  y2 = flatCoordinates[offset + 1];\n\n  let previousAngle;\n  // All on the same segment\n  if (singleSegment) {\n    advance();\n\n    previousAngle = Math.atan2(y2 - y1, x2 - x1);\n    if (reverse) {\n      previousAngle += previousAngle > 0 ? -PI : PI;\n    }\n    const x = (endX + beginX) / 2;\n    const y = (endY + beginY) / 2;\n    result[0] = [x, y, (endM - startM) / 2, previousAngle, text];\n    return result;\n  }\n\n  // rendering across line segments\n  text = text.replace(/\\n/g, ' '); // ensure rendering in single-line as all calculations below don't handle multi-lines\n\n  for (let i = 0, ii = text.length; i < ii; ) {\n    advance();\n    let angle = Math.atan2(y2 - y1, x2 - x1);\n    if (reverse) {\n      angle += angle > 0 ? -PI : PI;\n    }\n    if (previousAngle !== undefined) {\n      let delta = angle - previousAngle;\n      delta += delta > PI ? -2 * PI : delta < -PI ? 2 * PI : 0;\n      if (Math.abs(delta) > maxAngle) {\n        return null;\n      }\n    }\n    previousAngle = angle;\n\n    const iStart = i;\n    let charLength = 0;\n    for (; i < ii; ++i) {\n      const index = reverse ? ii - i - 1 : i;\n      const len = scale * measureAndCacheTextWidth(font, text[index], cache);\n      if (\n        offset + stride < end &&\n        segmentM + segmentLength < startM + charLength + len / 2\n      ) {\n        break;\n      }\n      charLength += len;\n    }\n    if (i === iStart) {\n      continue;\n    }\n    const chars = reverse\n      ? text.substring(ii - iStart, ii - i)\n      : text.substring(iStart, i);\n    interpolate =\n      segmentLength === 0\n        ? 0\n        : (startM + charLength / 2 - segmentM) / segmentLength;\n    const x = lerp(x1, x2, interpolate);\n    const y = lerp(y1, y2, interpolate);\n    result.push([x, y, charLength / 2, angle, chars]);\n    startM += charLength;\n  }\n  return result;\n}\n","/**\n * @module ol/render/canvas/hitdetect\n */\n\nimport CanvasImmediateRenderer from './Immediate.js';\nimport {Icon} from '../../style.js';\nimport {ascending} from '../../array.js';\nimport {clamp} from '../../math.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {intersects} from '../../extent.js';\n\nexport const HIT_DETECT_RESOLUTION = 0.5;\n\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(\n  size,\n  transforms,\n  features,\n  styleFunction,\n  extent,\n  resolution,\n  rotation\n) {\n  const width = size[0] * HIT_DETECT_RESOLUTION;\n  const height = size[1] * HIT_DETECT_RESOLUTION;\n  const context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  const canvas = context.canvas;\n  const renderer = new CanvasImmediateRenderer(\n    context,\n    HIT_DETECT_RESOLUTION,\n    extent,\n    null,\n    rotation\n  );\n  const featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  const featuresByZIndex = {};\n  for (let i = 1; i <= featureCount; ++i) {\n    const feature = features[i - 1];\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!featureStyleFunction) {\n      continue;\n    }\n    let styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    const index = i * indexFactor;\n    const color = index.toString(16).padStart(7, '#00000');\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\n      const originalStyle = styles[j];\n      const geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\n        continue;\n      }\n      const style = originalStyle.clone();\n      const fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      const stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      const image = originalStyle.getImage();\n      if (image) {\n        const imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n\n        const imgContext = createCanvasContext2D(\n          imgSize[0],\n          imgSize[1],\n          undefined,\n          {alpha: false}\n        );\n        const img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(\n          new Icon({\n            img: img,\n            anchor: image.getAnchor(),\n            anchorXUnits: 'pixels',\n            anchorYUnits: 'pixels',\n            offset: image.getOrigin(),\n            opacity: 1,\n            size: image.getSize(),\n            scale: image.getScale(),\n            rotation: image.getRotation(),\n            rotateWithView: image.getRotateWithView(),\n          })\n        );\n      }\n      const zIndex = style.getZIndex() || 0;\n      let byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n      const type = geometry.getType();\n      if (type === 'GeometryCollection') {\n        const geometries =\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\n            geometry\n          ).getGeometriesArrayRecursive();\n        for (let i = 0, ii = geometries.length; i < ii; ++i) {\n          const geometry = geometries[i];\n          byGeometryType[geometry.getType().replace('Multi', '')].push(\n            geometry,\n            style\n          );\n        }\n      } else {\n        byGeometryType[type.replace('Multi', '')].push(geometry, style);\n      }\n    }\n  }\n\n  const zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(ascending);\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (const type in byGeometryType) {\n      const geomAndStyle = byGeometryType[type];\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<F>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<F>} Features.\n * @template {import(\"../../Feature.js\").FeatureLike} F\n */\nexport function hitDetect(pixel, features, imageData) {\n  const resultFeatures = [];\n  if (imageData) {\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    const index =\n      (clamp(x, 0, imageData.width - 1) +\n        clamp(y, 0, imageData.height - 1) * imageData.width) *\n      4;\n    const r = imageData.data[index];\n    const g = imageData.data[index + 1];\n    const b = imageData.data[index + 2];\n    const i = b + 256 * (g + 256 * r);\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  // @ts-ignore Features are copied from `features` to `resultFeatures` so the type should be the same\n  return resultFeatures;\n}\n","/**\n * @module ol/render/canvas/Immediate\n */\n// FIXME test, especially polygons with holes and multipolygons\n// FIXME need to handle large thick features (where pixel size matters)\n// FIXME add offset and end to ol/geom/flat/transform~transform2D?\n\nimport VectorContext from '../VectorContext.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {\n  defaultFillStyle,\n  defaultFont,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n  defaultTextAlign,\n  defaultTextBaseline,\n} from '../canvas.js';\nimport {equals} from '../../array.js';\nimport {intersects} from '../../extent.js';\nimport {toFixed} from '../../math.js';\nimport {transform2D} from '../../geom/flat/transform.js';\nimport {transformGeom2D} from '../../geom/SimpleGeometry.js';\n\n/**\n * @classdesc\n * A concrete subclass of {@link module:ol/render/VectorContext~VectorContext} that implements\n * direct rendering of features and geometries to an HTML5 Canvas context.\n * Instances of this class are created internally by the library and\n * provided to application code as vectorContext member of the\n * {@link module:ol/render/Event~RenderEvent} object associated with postcompose, precompose and\n * render events emitted by layers and maps.\n */\nclass CanvasImmediateRenderer extends VectorContext {\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {number} [squaredTolerance] Optional squared tolerance for simplification.\n   * @param {import(\"../../proj.js\").TransformFunction} [userTransform] Transform from user to view projection.\n   */\n  constructor(\n    context,\n    pixelRatio,\n    extent,\n    transform,\n    viewRotation,\n    squaredTolerance,\n    userTransform\n  ) {\n    super();\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context_ = context;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.transform_ = transform;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.transformRotation_ = transform\n      ? toFixed(Math.atan2(transform[1], transform[0]), 10)\n      : 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = viewRotation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.squaredTolerance_ = squaredTolerance;\n\n    /**\n     * @private\n     * @type {import(\"../../proj.js\").TransformFunction}\n     */\n    this.userTransform_ = userTransform;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.contextFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.contextStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n    this.contextTextState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.fillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.strokeState_ = null;\n\n    /**\n     * @private\n     * @type {import('../../DataTile.js').ImageLike}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageAnchorY_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageHeight_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOpacity_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageOriginY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.imageRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageRotation_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size}\n     */\n    this.imageScale_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.imageWidth_ = 0;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.textRotateWithView_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {import(\"../../size.js\").Size}\n     */\n    this.textScale_ = [0, 0];\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = [];\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tmpLocalTransform_ = createTransform();\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  drawImages_(flatCoordinates, offset, end, stride) {\n    if (!this.image_) {\n      return;\n    }\n    const pixelCoordinates = transform2D(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_\n    );\n    const context = this.context_;\n    const localTransform = this.tmpLocalTransform_;\n    const alpha = context.globalAlpha;\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha * this.imageOpacity_;\n    }\n    let rotation = this.imageRotation_;\n    if (this.transformRotation_ === 0) {\n      rotation -= this.viewRotation_;\n    }\n    if (this.imageRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (let i = 0, ii = pixelCoordinates.length; i < ii; i += 2) {\n      const x = pixelCoordinates[i] - this.imageAnchorX_;\n      const y = pixelCoordinates[i + 1] - this.imageAnchorY_;\n      if (\n        rotation !== 0 ||\n        this.imageScale_[0] != 1 ||\n        this.imageScale_[1] != 1\n      ) {\n        const centerX = x + this.imageAnchorX_;\n        const centerY = y + this.imageAnchorY_;\n        composeTransform(\n          localTransform,\n          centerX,\n          centerY,\n          1,\n          1,\n          rotation,\n          -centerX,\n          -centerY\n        );\n        context.save();\n        context.transform.apply(context, localTransform);\n        context.translate(centerX, centerY);\n        context.scale(this.imageScale_[0], this.imageScale_[1]);\n        context.drawImage(\n          this.image_,\n          this.imageOriginX_,\n          this.imageOriginY_,\n          this.imageWidth_,\n          this.imageHeight_,\n          -this.imageAnchorX_,\n          -this.imageAnchorY_,\n          this.imageWidth_,\n          this.imageHeight_\n        );\n        context.restore();\n      } else {\n        context.drawImage(\n          this.image_,\n          this.imageOriginX_,\n          this.imageOriginY_,\n          this.imageWidth_,\n          this.imageHeight_,\n          x,\n          y,\n          this.imageWidth_,\n          this.imageHeight_\n        );\n      }\n    }\n    if (this.imageOpacity_ != 1) {\n      context.globalAlpha = alpha;\n    }\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @private\n   */\n  drawText_(flatCoordinates, offset, end, stride) {\n    if (!this.textState_ || this.text_ === '') {\n      return;\n    }\n    if (this.textFillState_) {\n      this.setContextFillState_(this.textFillState_);\n    }\n    if (this.textStrokeState_) {\n      this.setContextStrokeState_(this.textStrokeState_);\n    }\n    this.setContextTextState_(this.textState_);\n    const pixelCoordinates = transform2D(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_\n    );\n    const context = this.context_;\n    let rotation = this.textRotation_;\n    if (this.transformRotation_ === 0) {\n      rotation -= this.viewRotation_;\n    }\n    if (this.textRotateWithView_) {\n      rotation += this.viewRotation_;\n    }\n    for (; offset < end; offset += stride) {\n      const x = pixelCoordinates[offset] + this.textOffsetX_;\n      const y = pixelCoordinates[offset + 1] + this.textOffsetY_;\n      if (\n        rotation !== 0 ||\n        this.textScale_[0] != 1 ||\n        this.textScale_[1] != 1\n      ) {\n        context.save();\n        context.translate(x - this.textOffsetX_, y - this.textOffsetY_);\n        context.rotate(rotation);\n        context.translate(this.textOffsetX_, this.textOffsetY_);\n        context.scale(this.textScale_[0], this.textScale_[1]);\n        if (this.textStrokeState_) {\n          context.strokeText(this.text_, 0, 0);\n        }\n        if (this.textFillState_) {\n          context.fillText(this.text_, 0, 0);\n        }\n        context.restore();\n      } else {\n        if (this.textStrokeState_) {\n          context.strokeText(this.text_, x, y);\n        }\n        if (this.textFillState_) {\n          context.fillText(this.text_, x, y);\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} close Close.\n   * @private\n   * @return {number} end End.\n   */\n  moveToLineTo_(flatCoordinates, offset, end, stride, close) {\n    const context = this.context_;\n    const pixelCoordinates = transform2D(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      this.transform_,\n      this.pixelCoordinates_\n    );\n    context.moveTo(pixelCoordinates[0], pixelCoordinates[1]);\n    let length = pixelCoordinates.length;\n    if (close) {\n      length -= 2;\n    }\n    for (let i = 2; i < length; i += 2) {\n      context.lineTo(pixelCoordinates[i], pixelCoordinates[i + 1]);\n    }\n    if (close) {\n      context.closePath();\n    }\n    return end;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @private\n   * @return {number} End.\n   */\n  drawRings_(flatCoordinates, offset, ends, stride) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      offset = this.moveToLineTo_(\n        flatCoordinates,\n        offset,\n        ends[i],\n        stride,\n        true\n      );\n    }\n    return offset;\n  }\n\n  /**\n   * Render a circle geometry into the canvas.  Rendering is immediate and uses\n   * the current fill and stroke styles.\n   *\n   * @param {import(\"../../geom/Circle.js\").default} geometry Circle geometry.\n   * @api\n   */\n  drawCircle(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/Circle.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.fillState_ || this.strokeState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const pixelCoordinates = transformGeom2D(\n        geometry,\n        this.transform_,\n        this.pixelCoordinates_\n      );\n      const dx = pixelCoordinates[2] - pixelCoordinates[0];\n      const dy = pixelCoordinates[3] - pixelCoordinates[1];\n      const radius = Math.sqrt(dx * dx + dy * dy);\n      const context = this.context_;\n      context.beginPath();\n      context.arc(\n        pixelCoordinates[0],\n        pixelCoordinates[1],\n        radius,\n        0,\n        2 * Math.PI\n      );\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      this.drawText_(geometry.getCenter(), 0, 2, 2);\n    }\n  }\n\n  /**\n   * Set the rendering style.  Note that since this is an immediate rendering API,\n   * any `zIndex` on the provided style will be ignored.\n   *\n   * @param {import(\"../../style/Style.js\").default} style The rendering style.\n   * @api\n   */\n  setStyle(style) {\n    this.setFillStrokeStyle(style.getFill(), style.getStroke());\n    this.setImageStyle(style.getImage());\n    this.setTextStyle(style.getText());\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n  setTransform(transform) {\n    this.transform_ = transform;\n  }\n\n  /**\n   * Render a geometry into the canvas.  Call\n   * {@link module:ol/render/canvas/Immediate~CanvasImmediateRenderer#setStyle renderer.setStyle()} first to set the rendering style.\n   *\n   * @param {import(\"../../geom/Geometry.js\").default|import(\"../Feature.js\").default} geometry The geometry to render.\n   * @api\n   */\n  drawGeometry(geometry) {\n    const type = geometry.getType();\n    switch (type) {\n      case 'Point':\n        this.drawPoint(\n          /** @type {import(\"../../geom/Point.js\").default} */ (geometry)\n        );\n        break;\n      case 'LineString':\n        this.drawLineString(\n          /** @type {import(\"../../geom/LineString.js\").default} */ (geometry)\n        );\n        break;\n      case 'Polygon':\n        this.drawPolygon(\n          /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\n        );\n        break;\n      case 'MultiPoint':\n        this.drawMultiPoint(\n          /** @type {import(\"../../geom/MultiPoint.js\").default} */ (geometry)\n        );\n        break;\n      case 'MultiLineString':\n        this.drawMultiLineString(\n          /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n            geometry\n          )\n        );\n        break;\n      case 'MultiPolygon':\n        this.drawMultiPolygon(\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (geometry)\n        );\n        break;\n      case 'GeometryCollection':\n        this.drawGeometryCollection(\n          /** @type {import(\"../../geom/GeometryCollection.js\").default} */ (\n            geometry\n          )\n        );\n        break;\n      case 'Circle':\n        this.drawCircle(\n          /** @type {import(\"../../geom/Circle.js\").default} */ (geometry)\n        );\n        break;\n      default:\n    }\n  }\n\n  /**\n   * Render a feature into the canvas.  Note that any `zIndex` on the provided\n   * style will be ignored - features are rendered immediately in the order that\n   * this method is called.  If you need `zIndex` support, you should be using an\n   * {@link module:ol/layer/Vector~VectorLayer} instead.\n   *\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {import(\"../../style/Style.js\").default} style Style.\n   * @api\n   */\n  drawFeature(feature, style) {\n    const geometry = style.getGeometryFunction()(feature);\n    if (!geometry) {\n      return;\n    }\n    this.setStyle(style);\n    this.drawGeometry(geometry);\n  }\n\n  /**\n   * Render a GeometryCollection to the canvas.  Rendering is immediate and\n   * uses the current styles appropriate for each geometry in the collection.\n   *\n   * @param {import(\"../../geom/GeometryCollection.js\").default} geometry Geometry collection.\n   */\n  drawGeometryCollection(geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      this.drawGeometry(geometries[i]);\n    }\n  }\n\n  /**\n   * Render a Point geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Point.js\").default|import(\"../Feature.js\").default} geometry Point geometry.\n   */\n  drawPoint(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/Point.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n\n  /**\n   * Render a MultiPoint geometry  into the canvas.  Rendering is immediate and\n   * uses the current style.\n   *\n   * @param {import(\"../../geom/MultiPoint.js\").default|import(\"../Feature.js\").default} geometry MultiPoint geometry.\n   */\n  drawMultiPoint(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/MultiPoint.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    const flatCoordinates = geometry.getFlatCoordinates();\n    const stride = geometry.getStride();\n    if (this.image_) {\n      this.drawImages_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n    if (this.text_ !== '') {\n      this.drawText_(flatCoordinates, 0, flatCoordinates.length, stride);\n    }\n  }\n\n  /**\n   * Render a LineString into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/LineString.js\").default|import(\"../Feature.js\").default} geometry LineString geometry.\n   */\n  drawLineString(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/LineString.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      context.beginPath();\n      this.moveToLineTo_(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        geometry.getStride(),\n        false\n      );\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      const flatMidpoint = geometry.getFlatMidpoint();\n      this.drawText_(flatMidpoint, 0, 2, 2);\n    }\n  }\n\n  /**\n   * Render a MultiLineString geometry into the canvas.  Rendering is immediate\n   * and uses the current style.\n   *\n   * @param {import(\"../../geom/MultiLineString.js\").default|import(\"../Feature.js\").default} geometry MultiLineString geometry.\n   */\n  drawMultiLineString(geometry) {\n    if (this.squaredTolerance_) {\n      geometry =\n        /** @type {import(\"../../geom/MultiLineString.js\").default} */ (\n          geometry.simplifyTransformed(\n            this.squaredTolerance_,\n            this.userTransform_\n          )\n        );\n    }\n    const geometryExtent = geometry.getExtent();\n    if (!intersects(this.extent_, geometryExtent)) {\n      return;\n    }\n    if (this.strokeState_) {\n      this.setContextStrokeState_(this.strokeState_);\n      const context = this.context_;\n      const flatCoordinates = geometry.getFlatCoordinates();\n      let offset = 0;\n      const ends = /** @type {Array<number>} */ (geometry.getEnds());\n      const stride = geometry.getStride();\n      context.beginPath();\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        offset = this.moveToLineTo_(\n          flatCoordinates,\n          offset,\n          ends[i],\n          stride,\n          false\n        );\n      }\n      context.stroke();\n    }\n    if (this.text_ !== '') {\n      const flatMidpoints = geometry.getFlatMidpoints();\n      this.drawText_(flatMidpoints, 0, flatMidpoints.length, 2);\n    }\n  }\n\n  /**\n   * Render a Polygon geometry into the canvas.  Rendering is immediate and uses\n   * the current style.\n   *\n   * @param {import(\"../../geom/Polygon.js\").default|import(\"../Feature.js\").default} geometry Polygon geometry.\n   */\n  drawPolygon(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/Polygon.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const context = this.context_;\n      context.beginPath();\n      this.drawRings_(\n        geometry.getOrientedFlatCoordinates(),\n        0,\n        /** @type {Array<number>} */ (geometry.getEnds()),\n        geometry.getStride()\n      );\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      const flatInteriorPoint = geometry.getFlatInteriorPoint();\n      this.drawText_(flatInteriorPoint, 0, 2, 2);\n    }\n  }\n\n  /**\n   * Render MultiPolygon geometry into the canvas.  Rendering is immediate and\n   * uses the current style.\n   * @param {import(\"../../geom/MultiPolygon.js\").default} geometry MultiPolygon geometry.\n   */\n  drawMultiPolygon(geometry) {\n    if (this.squaredTolerance_) {\n      geometry = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n        geometry.simplifyTransformed(\n          this.squaredTolerance_,\n          this.userTransform_\n        )\n      );\n    }\n    if (!intersects(this.extent_, geometry.getExtent())) {\n      return;\n    }\n    if (this.strokeState_ || this.fillState_) {\n      if (this.fillState_) {\n        this.setContextFillState_(this.fillState_);\n      }\n      if (this.strokeState_) {\n        this.setContextStrokeState_(this.strokeState_);\n      }\n      const context = this.context_;\n      const flatCoordinates = geometry.getOrientedFlatCoordinates();\n      let offset = 0;\n      const endss = geometry.getEndss();\n      const stride = geometry.getStride();\n      context.beginPath();\n      for (let i = 0, ii = endss.length; i < ii; ++i) {\n        const ends = endss[i];\n        offset = this.drawRings_(flatCoordinates, offset, ends, stride);\n      }\n      if (this.fillState_) {\n        context.fill();\n      }\n      if (this.strokeState_) {\n        context.stroke();\n      }\n    }\n    if (this.text_ !== '') {\n      const flatInteriorPoints = geometry.getFlatInteriorPoints();\n      this.drawText_(flatInteriorPoints, 0, flatInteriorPoints.length, 2);\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillState} fillState Fill state.\n   * @private\n   */\n  setContextFillState_(fillState) {\n    const context = this.context_;\n    const contextFillState = this.contextFillState_;\n    if (!contextFillState) {\n      context.fillStyle = fillState.fillStyle;\n      this.contextFillState_ = {\n        fillStyle: fillState.fillStyle,\n      };\n    } else {\n      if (contextFillState.fillStyle != fillState.fillStyle) {\n        contextFillState.fillStyle = fillState.fillStyle;\n        context.fillStyle = fillState.fillStyle;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").StrokeState} strokeState Stroke state.\n   * @private\n   */\n  setContextStrokeState_(strokeState) {\n    const context = this.context_;\n    const contextStrokeState = this.contextStrokeState_;\n    if (!contextStrokeState) {\n      context.lineCap = strokeState.lineCap;\n      context.setLineDash(strokeState.lineDash);\n      context.lineDashOffset = strokeState.lineDashOffset;\n      context.lineJoin = strokeState.lineJoin;\n      context.lineWidth = strokeState.lineWidth;\n      context.miterLimit = strokeState.miterLimit;\n      context.strokeStyle = strokeState.strokeStyle;\n      this.contextStrokeState_ = {\n        lineCap: strokeState.lineCap,\n        lineDash: strokeState.lineDash,\n        lineDashOffset: strokeState.lineDashOffset,\n        lineJoin: strokeState.lineJoin,\n        lineWidth: strokeState.lineWidth,\n        miterLimit: strokeState.miterLimit,\n        strokeStyle: strokeState.strokeStyle,\n      };\n    } else {\n      if (contextStrokeState.lineCap != strokeState.lineCap) {\n        contextStrokeState.lineCap = strokeState.lineCap;\n        context.lineCap = strokeState.lineCap;\n      }\n      if (!equals(contextStrokeState.lineDash, strokeState.lineDash)) {\n        context.setLineDash(\n          (contextStrokeState.lineDash = strokeState.lineDash)\n        );\n      }\n      if (contextStrokeState.lineDashOffset != strokeState.lineDashOffset) {\n        contextStrokeState.lineDashOffset = strokeState.lineDashOffset;\n        context.lineDashOffset = strokeState.lineDashOffset;\n      }\n      if (contextStrokeState.lineJoin != strokeState.lineJoin) {\n        contextStrokeState.lineJoin = strokeState.lineJoin;\n        context.lineJoin = strokeState.lineJoin;\n      }\n      if (contextStrokeState.lineWidth != strokeState.lineWidth) {\n        contextStrokeState.lineWidth = strokeState.lineWidth;\n        context.lineWidth = strokeState.lineWidth;\n      }\n      if (contextStrokeState.miterLimit != strokeState.miterLimit) {\n        contextStrokeState.miterLimit = strokeState.miterLimit;\n        context.miterLimit = strokeState.miterLimit;\n      }\n      if (contextStrokeState.strokeStyle != strokeState.strokeStyle) {\n        contextStrokeState.strokeStyle = strokeState.strokeStyle;\n        context.strokeStyle = strokeState.strokeStyle;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").TextState} textState Text state.\n   * @private\n   */\n  setContextTextState_(textState) {\n    const context = this.context_;\n    const contextTextState = this.contextTextState_;\n    const textAlign = textState.textAlign\n      ? textState.textAlign\n      : defaultTextAlign;\n    if (!contextTextState) {\n      context.font = textState.font;\n      context.textAlign = textAlign;\n      context.textBaseline = textState.textBaseline;\n      this.contextTextState_ = {\n        font: textState.font,\n        textAlign: textAlign,\n        textBaseline: textState.textBaseline,\n      };\n    } else {\n      if (contextTextState.font != textState.font) {\n        contextTextState.font = textState.font;\n        context.font = textState.font;\n      }\n      if (contextTextState.textAlign != textAlign) {\n        contextTextState.textAlign = textAlign;\n        context.textAlign = textAlign;\n      }\n      if (contextTextState.textBaseline != textState.textBaseline) {\n        contextTextState.textBaseline = textState.textBaseline;\n        context.textBaseline = textState.textBaseline;\n      }\n    }\n  }\n\n  /**\n   * Set the fill and stroke style for subsequent draw operations.  To clear\n   * either fill or stroke styles, pass null for the appropriate parameter.\n   *\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    if (!fillStyle) {\n      this.fillState_ = null;\n    } else {\n      const fillStyleColor = fillStyle.getColor();\n      this.fillState_ = {\n        fillStyle: asColorLike(\n          fillStyleColor ? fillStyleColor : defaultFillStyle\n        ),\n      };\n    }\n    if (!strokeStyle) {\n      this.strokeState_ = null;\n    } else {\n      const strokeStyleColor = strokeStyle.getColor();\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      const strokeStyleWidth = strokeStyle.getWidth();\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      const lineDash = strokeStyleLineDash\n        ? strokeStyleLineDash\n        : defaultLineDash;\n      this.strokeState_ = {\n        lineCap:\n          strokeStyleLineCap !== undefined\n            ? strokeStyleLineCap\n            : defaultLineCap,\n        lineDash:\n          this.pixelRatio_ === 1\n            ? lineDash\n            : lineDash.map((n) => n * this.pixelRatio_),\n        lineDashOffset:\n          (strokeStyleLineDashOffset\n            ? strokeStyleLineDashOffset\n            : defaultLineDashOffset) * this.pixelRatio_,\n        lineJoin:\n          strokeStyleLineJoin !== undefined\n            ? strokeStyleLineJoin\n            : defaultLineJoin,\n        lineWidth:\n          (strokeStyleWidth !== undefined\n            ? strokeStyleWidth\n            : defaultLineWidth) * this.pixelRatio_,\n        miterLimit:\n          strokeStyleMiterLimit !== undefined\n            ? strokeStyleMiterLimit\n            : defaultMiterLimit,\n        strokeStyle: asColorLike(\n          strokeStyleColor ? strokeStyleColor : defaultStrokeStyle\n        ),\n      };\n    }\n  }\n\n  /**\n   * Set the image style for subsequent draw operations.  Pass null to remove\n   * the image style.\n   *\n   * @param {import(\"../../style/Image.js\").default} imageStyle Image style.\n   */\n  setImageStyle(imageStyle) {\n    let imageSize;\n    if (!imageStyle || !(imageSize = imageStyle.getSize())) {\n      this.image_ = null;\n      return;\n    }\n    const imagePixelRatio = imageStyle.getPixelRatio(this.pixelRatio_);\n    const imageAnchor = imageStyle.getAnchor();\n    const imageOrigin = imageStyle.getOrigin();\n    this.image_ = imageStyle.getImage(this.pixelRatio_);\n    this.imageAnchorX_ = imageAnchor[0] * imagePixelRatio;\n    this.imageAnchorY_ = imageAnchor[1] * imagePixelRatio;\n    this.imageHeight_ = imageSize[1] * imagePixelRatio;\n    this.imageOpacity_ = imageStyle.getOpacity();\n    this.imageOriginX_ = imageOrigin[0];\n    this.imageOriginY_ = imageOrigin[1];\n    this.imageRotateWithView_ = imageStyle.getRotateWithView();\n    this.imageRotation_ = imageStyle.getRotation();\n    const imageScale = imageStyle.getScaleArray();\n    this.imageScale_ = [\n      (imageScale[0] * this.pixelRatio_) / imagePixelRatio,\n      (imageScale[1] * this.pixelRatio_) / imagePixelRatio,\n    ];\n    this.imageWidth_ = imageSize[0] * imagePixelRatio;\n  }\n\n  /**\n   * Set the text style for subsequent draw operations.  Pass null to\n   * remove the text style.\n   *\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   */\n  setTextStyle(textStyle) {\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        this.textFillState_ = null;\n      } else {\n        const textFillStyleColor = textFillStyle.getColor();\n        this.textFillState_ = {\n          fillStyle: asColorLike(\n            textFillStyleColor ? textFillStyleColor : defaultFillStyle\n          ),\n        };\n      }\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        this.textStrokeState_ = null;\n      } else {\n        const textStrokeStyleColor = textStrokeStyle.getColor();\n        const textStrokeStyleLineCap = textStrokeStyle.getLineCap();\n        const textStrokeStyleLineDash = textStrokeStyle.getLineDash();\n        const textStrokeStyleLineDashOffset =\n          textStrokeStyle.getLineDashOffset();\n        const textStrokeStyleLineJoin = textStrokeStyle.getLineJoin();\n        const textStrokeStyleWidth = textStrokeStyle.getWidth();\n        const textStrokeStyleMiterLimit = textStrokeStyle.getMiterLimit();\n        this.textStrokeState_ = {\n          lineCap:\n            textStrokeStyleLineCap !== undefined\n              ? textStrokeStyleLineCap\n              : defaultLineCap,\n          lineDash: textStrokeStyleLineDash\n            ? textStrokeStyleLineDash\n            : defaultLineDash,\n          lineDashOffset: textStrokeStyleLineDashOffset\n            ? textStrokeStyleLineDashOffset\n            : defaultLineDashOffset,\n          lineJoin:\n            textStrokeStyleLineJoin !== undefined\n              ? textStrokeStyleLineJoin\n              : defaultLineJoin,\n          lineWidth:\n            textStrokeStyleWidth !== undefined\n              ? textStrokeStyleWidth\n              : defaultLineWidth,\n          miterLimit:\n            textStrokeStyleMiterLimit !== undefined\n              ? textStrokeStyleMiterLimit\n              : defaultMiterLimit,\n          strokeStyle: asColorLike(\n            textStrokeStyleColor ? textStrokeStyleColor : defaultStrokeStyle\n          ),\n        };\n      }\n      const textFont = textStyle.getFont();\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      const textScale = textStyle.getScaleArray();\n      const textText = textStyle.getText();\n      const textTextAlign = textStyle.getTextAlign();\n      const textTextBaseline = textStyle.getTextBaseline();\n      this.textState_ = {\n        font: textFont !== undefined ? textFont : defaultFont,\n        textAlign:\n          textTextAlign !== undefined ? textTextAlign : defaultTextAlign,\n        textBaseline:\n          textTextBaseline !== undefined\n            ? textTextBaseline\n            : defaultTextBaseline,\n      };\n      this.text_ =\n        textText !== undefined\n          ? Array.isArray(textText)\n            ? textText.reduce((acc, t, i) => (acc += i % 2 ? ' ' : t), '')\n            : textText\n          : '';\n      this.textOffsetX_ =\n        textOffsetX !== undefined ? this.pixelRatio_ * textOffsetX : 0;\n      this.textOffsetY_ =\n        textOffsetY !== undefined ? this.pixelRatio_ * textOffsetY : 0;\n      this.textRotateWithView_ =\n        textRotateWithView !== undefined ? textRotateWithView : false;\n      this.textRotation_ = textRotation !== undefined ? textRotation : 0;\n      this.textScale_ = [\n        this.pixelRatio_ * textScale[0],\n        this.pixelRatio_ * textScale[1],\n      ];\n    }\n  }\n}\n\nexport default CanvasImmediateRenderer;\n","/**\n * @module ol/renderer/vector\n */\nimport ImageState from '../ImageState.js';\nimport {getUid} from '../util.js';\n\n/**\n * Feature callback. The callback will be called with three arguments. The first\n * argument is one {@link module:ol/Feature~Feature feature} or {@link module:ol/render/Feature~RenderFeature render feature}\n * at the pixel, the second is the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n * unmanaged layers. The third is the {@link module:ol/geom/SimpleGeometry~SimpleGeometry} of the feature. For features\n * with a GeometryCollection geometry, it will be the first detected geometry from the collection.\n * @template T\n * @typedef {function(import(\"../Feature.js\").FeatureLike, import(\"../layer/Layer.js\").default<import(\"../source/Source\").default>, import(\"../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */\n\n/**\n * Tolerance for geometry simplification in device pixels.\n * @type {number}\n */\nconst SIMPLIFY_TOLERANCE = 0.5;\n\n/**\n * @const\n * @type {Object<import(\"../geom/Geometry.js\").Type,\n *                function(import(\"../render/canvas/BuilderGroup.js\").default, import(\"../geom/Geometry.js\").default,\n *                         import(\"../style/Style.js\").default, Object): void>}\n */\nconst GEOMETRY_RENDERERS = {\n  'Point': renderPointGeometry,\n  'LineString': renderLineStringGeometry,\n  'Polygon': renderPolygonGeometry,\n  'MultiPoint': renderMultiPointGeometry,\n  'MultiLineString': renderMultiLineStringGeometry,\n  'MultiPolygon': renderMultiPolygonGeometry,\n  'GeometryCollection': renderGeometryCollectionGeometry,\n  'Circle': renderCircleGeometry,\n};\n\n/**\n * @param {import(\"../Feature.js\").FeatureLike} feature1 Feature 1.\n * @param {import(\"../Feature.js\").FeatureLike} feature2 Feature 2.\n * @return {number} Order.\n */\nexport function defaultOrder(feature1, feature2) {\n  return parseInt(getUid(feature1), 10) - parseInt(getUid(feature2), 10);\n}\n\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Squared pixel tolerance.\n */\nexport function getSquaredTolerance(resolution, pixelRatio) {\n  const tolerance = getTolerance(resolution, pixelRatio);\n  return tolerance * tolerance;\n}\n\n/**\n * @param {number} resolution Resolution.\n * @param {number} pixelRatio Pixel ratio.\n * @return {number} Pixel tolerance.\n */\nexport function getTolerance(resolution, pixelRatio) {\n  return (SIMPLIFY_TOLERANCE * resolution) / pixelRatio;\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderCircleGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (fillStyle || strokeStyle) {\n    const circleReplay = builderGroup.getBuilder(style.getZIndex(), 'Circle');\n    circleReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    circleReplay.drawCircle(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      'Text'\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n * @param {import(\"../proj.js\").TransformFunction} [transform] Transform from user to view projection.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n * @return {boolean} `true` if style is loading.\n */\nexport function renderFeature(\n  replayGroup,\n  feature,\n  style,\n  squaredTolerance,\n  listener,\n  transform,\n  declutterBuilderGroup\n) {\n  let loading = false;\n  const imageStyle = style.getImage();\n  if (imageStyle) {\n    const imageState = imageStyle.getImageState();\n    if (imageState == ImageState.LOADED || imageState == ImageState.ERROR) {\n      imageStyle.unlistenImageChange(listener);\n    } else {\n      if (imageState == ImageState.IDLE) {\n        imageStyle.load();\n      }\n      imageStyle.listenImageChange(listener);\n      loading = true;\n    }\n  }\n  renderFeatureInternal(\n    replayGroup,\n    feature,\n    style,\n    squaredTolerance,\n    transform,\n    declutterBuilderGroup\n  );\n\n  return loading;\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {import(\"../proj.js\").TransformFunction} [transform] Optional transform function.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderFeatureInternal(\n  replayGroup,\n  feature,\n  style,\n  squaredTolerance,\n  transform,\n  declutterBuilderGroup\n) {\n  const geometry = style.getGeometryFunction()(feature);\n  if (!geometry) {\n    return;\n  }\n  const simplifiedGeometry = geometry.simplifyTransformed(\n    squaredTolerance,\n    transform\n  );\n  const renderer = style.getRenderer();\n  if (renderer) {\n    renderGeometry(replayGroup, simplifiedGeometry, style, feature);\n  } else {\n    const geometryRenderer = GEOMETRY_RENDERERS[simplifiedGeometry.getType()];\n    geometryRenderer(\n      replayGroup,\n      simplifiedGeometry,\n      style,\n      feature,\n      declutterBuilderGroup\n    );\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/Geometry.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n */\nfunction renderGeometry(replayGroup, geometry, style, feature) {\n  if (geometry.getType() == 'GeometryCollection') {\n    const geometries =\n      /** @type {import(\"../geom/GeometryCollection.js\").default} */ (\n        geometry\n      ).getGeometries();\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      renderGeometry(replayGroup, geometries[i], style, feature);\n    }\n    return;\n  }\n  const replay = replayGroup.getBuilder(style.getZIndex(), 'Default');\n  replay.drawCustom(\n    /** @type {import(\"../geom/SimpleGeometry.js\").default} */ (geometry),\n    feature,\n    style.getRenderer(),\n    style.getHitDetectionRenderer()\n  );\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} replayGroup Replay group.\n * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderGeometryCollectionGeometry(\n  replayGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const geometries = geometry.getGeometriesArray();\n  let i, ii;\n  for (i = 0, ii = geometries.length; i < ii; ++i) {\n    const geometryRenderer = GEOMETRY_RENDERERS[geometries[i].getType()];\n    geometryRenderer(\n      replayGroup,\n      geometries[i],\n      style,\n      feature,\n      declutterBuilderGroup\n    );\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/LineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderLineStringGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const strokeStyle = style.getStroke();\n  if (strokeStyle) {\n    const lineStringReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      'LineString'\n    );\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawLineString(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      'Text'\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiLineString.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiLineStringGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const strokeStyle = style.getStroke();\n  if (strokeStyle) {\n    const lineStringReplay = builderGroup.getBuilder(\n      style.getZIndex(),\n      'LineString'\n    );\n    lineStringReplay.setFillStrokeStyle(null, strokeStyle);\n    lineStringReplay.drawMultiLineString(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      'Text'\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").default} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPolygonGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (strokeStyle || fillStyle) {\n    const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawMultiPolygon(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      'Text'\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Point.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPointGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const imageStyle = style.getImage();\n  const textStyle = style.getText();\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n  let declutterImageWithText;\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState.LOADED) {\n      return;\n    }\n    let imageBuilderGroup = builderGroup;\n    if (declutterBuilderGroup) {\n      const declutterMode = imageStyle.getDeclutterMode();\n      if (declutterMode !== 'none') {\n        imageBuilderGroup = declutterBuilderGroup;\n        if (declutterMode === 'obstacle') {\n          // draw in non-declutter group:\n          const imageReplay = builderGroup.getBuilder(\n            style.getZIndex(),\n            'Image'\n          );\n          imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n          imageReplay.drawPoint(geometry, feature);\n        } else if (textStyle && textStyle.getText()) {\n          declutterImageWithText = {};\n        }\n      }\n    }\n    const imageReplay = imageBuilderGroup.getBuilder(\n      style.getZIndex(),\n      'Image'\n    );\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n    imageReplay.drawPoint(geometry, feature);\n  }\n  if (textStyle && textStyle.getText()) {\n    let textBuilderGroup = builderGroup;\n    if (declutterBuilderGroup) {\n      textBuilderGroup = declutterBuilderGroup;\n    }\n    const textReplay = textBuilderGroup.getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/MultiPoint.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderMultiPointGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const imageStyle = style.getImage();\n  const textStyle = style.getText();\n  /** @type {import(\"../render/canvas.js\").DeclutterImageWithText} */\n  let declutterImageWithText;\n  if (imageStyle) {\n    if (imageStyle.getImageState() != ImageState.LOADED) {\n      return;\n    }\n    let imageBuilderGroup = builderGroup;\n    if (declutterBuilderGroup) {\n      const declutterMode = imageStyle.getDeclutterMode();\n      if (declutterMode !== 'none') {\n        imageBuilderGroup = declutterBuilderGroup;\n        if (declutterMode === 'obstacle') {\n          // draw in non-declutter group:\n          const imageReplay = builderGroup.getBuilder(\n            style.getZIndex(),\n            'Image'\n          );\n          imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n          imageReplay.drawMultiPoint(geometry, feature);\n        } else if (textStyle && textStyle.getText()) {\n          declutterImageWithText = {};\n        }\n      }\n    }\n    const imageReplay = imageBuilderGroup.getBuilder(\n      style.getZIndex(),\n      'Image'\n    );\n    imageReplay.setImageStyle(imageStyle, declutterImageWithText);\n    imageReplay.drawMultiPoint(geometry, feature);\n  }\n  if (textStyle && textStyle.getText()) {\n    let textBuilderGroup = builderGroup;\n    if (declutterBuilderGroup) {\n      textBuilderGroup = declutterBuilderGroup;\n    }\n    const textReplay = textBuilderGroup.getBuilder(style.getZIndex(), 'Text');\n    textReplay.setTextStyle(textStyle, declutterImageWithText);\n    textReplay.drawText(geometry, feature);\n  }\n}\n\n/**\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} builderGroup Replay group.\n * @param {import(\"../geom/Polygon.js\").default|import(\"../render/Feature.js\").default} geometry Geometry.\n * @param {import(\"../style/Style.js\").default} style Style.\n * @param {import(\"../Feature.js\").FeatureLike} feature Feature.\n * @param {import(\"../render/canvas/BuilderGroup.js\").default} [declutterBuilderGroup] Builder for decluttering.\n */\nfunction renderPolygonGeometry(\n  builderGroup,\n  geometry,\n  style,\n  feature,\n  declutterBuilderGroup\n) {\n  const fillStyle = style.getFill();\n  const strokeStyle = style.getStroke();\n  if (fillStyle || strokeStyle) {\n    const polygonReplay = builderGroup.getBuilder(style.getZIndex(), 'Polygon');\n    polygonReplay.setFillStrokeStyle(fillStyle, strokeStyle);\n    polygonReplay.drawPolygon(geometry, feature);\n  }\n  const textStyle = style.getText();\n  if (textStyle && textStyle.getText()) {\n    const textReplay = (declutterBuilderGroup || builderGroup).getBuilder(\n      style.getZIndex(),\n      'Text'\n    );\n    textReplay.setTextStyle(textStyle);\n    textReplay.drawText(geometry, feature);\n  }\n}\n","{\n    \"0\": \"INDETERMINE\",\n    \"1\": \"PIERRE\",\n    \"2\": \"MEULIERE\",\n    \"3\": \"BETON\",\n    \"4\": \"BRIQUES\",\n    \"5\": \"AGGLOMERE\",\n    \"6\": \"BOIS\",\n    \"9\": \"AUTRES\",\n    \"00\": \"INDETERMINE\",\n    \"01\": \"PIERRE\",\n    \"02\": \"MEULIERE\",\n    \"03\": \"BETON\",\n    \"04\": \"BRIQUES\",\n    \"05\": \"AGGLOMERE\",\n    \"06\": \"BOIS\",\n    \"09\": \"AUTRES\",\n    \"10\": \"PIERRE\",\n    \"11\": \"PIERRE\",\n    \"12\": \"MEULIERE - PIERRE\",\n    \"13\": \"BETON - PIERRE\",\n    \"14\": \"BRIQUES - PIERRE\",\n    \"15\": \"AGGLOMERE - PIERRE\",\n    \"16\": \"BOIS - PIERRE\",\n    \"19\": \"PIERRE - AUTRES\",\n    \"20\": \"MEULIERE\",\n    \"21\": \"MEULIERE - PIERRE\",\n    \"22\": \"MEULIERE\",\n    \"23\": \"BETON - MEULIERE\",\n    \"24\": \"BRIQUES - MEULIERE\",\n    \"25\": \"AGGLOMERE - MEULIERE\",\n    \"26\": \"BOIS - MEULIERE\",\n    \"29\": \"MEULIERE - AUTRES\",\n    \"30\": \"BETON\",\n    \"31\": \"BETON - PIERRE\",\n    \"32\": \"BETON - MEULIERE\",\n    \"33\": \"BETON\",\n    \"34\": \"BETON - BRIQUES\",\n    \"35\": \"AGGLOMERE - BETON\",\n    \"36\": \"BETON - BOIS\",\n    \"39\": \"BETON - AUTRES\",\n    \"40\": \"BRIQUES\",\n    \"41\": \"BRIQUES - PIERRE\",\n    \"42\": \"BRIQUES - MEULIERE\",\n    \"43\": \"BETON - BRIQUES\",\n    \"44\": \"BRIQUES\",\n    \"45\": \"AGGLOMERE - BRIQUES\",\n    \"46\": \"BOIS - BRIQUES\",\n    \"49\": \"BRIQUES - AUTRES\",\n    \"50\": \"AGGLOMERE\",\n    \"51\": \"AGGLOMERE - PIERRE\",\n    \"52\": \"AGGLOMERE - MEULIERE\",\n    \"53\": \"AGGLOMERE - BETON\",\n    \"54\": \"AGGLOMERE - BRIQUES\",\n    \"55\": \"AGGLOMERE\",\n    \"56\": \"AGGLOMERE - BOIS\",\n    \"59\": \"AGGLOMERE - AUTRES\",\n    \"60\": \"BOIS\",\n    \"61\": \"BOIS - PIERRE\",\n    \"62\": \"BOIS - MEULIERE\",\n    \"63\": \"BETON - BOIS\",\n    \"64\": \"BOIS - BRIQUES\",\n    \"65\": \"AGGLOMERE - BOIS\",\n    \"66\": \"BOIS\",\n    \"69\": \"BOIS - AUTRES\",\n    \"90\": \"AUTRES\",\n    \"91\": \"PIERRE - AUTRES\",\n    \"92\": \"MEULIERE - AUTRES\",\n    \"93\": \"BETON - AUTRES\",\n    \"94\": \"BRIQUES - AUTRES\",\n    \"95\": \"AGGLOMERE - AUTRES\",\n    \"96\": \"BOIS - AUTRES\",\n    \"99\": \"AUTRES\"\n}","{\n    \"0\": \"INDETERMINE\",\n    \"1\": \"TUILES\",\n    \"2\": \"ARDOISES\",\n    \"3\": \"ZINC ALUMINIUM\",\n    \"4\": \"BETON\",\n    \"9\": \"AUTRES\",\n    \"00\": \"INDETERMINE\",\n    \"01\": \"TUILES\",\n    \"02\": \"ARDOISES\",\n    \"03\": \"ZINC ALUMINIUM\",\n    \"04\": \"BETON\",\n    \"09\": \"AUTRES\",\n    \"10\": \"TUILES\",\n    \"11\": \"TUILES\",\n    \"12\": \"ARDOISES - TUILES\",\n    \"13\": \"TUILES - ZINC ALUMINIUM\",\n    \"14\": \"BETON - TUILES\",\n    \"19\": \"TUILES - AUTRES\",\n    \"20\": \"ARDOISES\",\n    \"21\": \"ARDOISES - TUILES\",\n    \"22\": \"ARDOISES\",\n    \"23\": \"ARDOISES - ZINC ALUMINIUM\",\n    \"24\": \"ARDOISES - BETON\",\n    \"29\": \"ARDOISES - AUTRES\",\n    \"30\": \"ZINC ALUMINIUM\",\n    \"31\": \"TUILES - ZINC ALUMINIUM\",\n    \"32\": \"ARDOISES - ZINC ALUMINIUM\",\n    \"33\": \"ZINC ALUMINIUM\",\n    \"34\": \"BETON - ZINC ALUMINIUM\",\n    \"39\": \"ZINC ALUMINIUM - AUTRES\",\n    \"40\": \"BETON\",\n    \"41\": \"BETON - TUILES\",\n    \"42\": \"ARDOISES - BETON\",\n    \"43\": \"BETON - ZINC ALUMINIUM\",\n    \"44\": \"BETON\",\n    \"49\": \"BETON - AUTRES\",\n    \"90\": \"AUTRES\",\n    \"91\": \"TUILES - AUTRES\",\n    \"92\": \"ARDOISES - AUTRES\",\n    \"93\": \"ZINC ALUMINIUM - AUTRES\",\n    \"94\": \"BETON - AUTRES\",\n    \"99\": \"AUTRES\"\n}"],"names":["$e22e7611e69f42a9$var$transformStringDiv","$d4aabc5c971073f1$var$measureFont","$2b0a118af78fb031$var$brokenDiagonalRendering_","measureElement","$parcel$interopDefault","a","__esModule","default","projection","$aeedce20e9577100$export$2e2bcd8739ae039","constructor","type","propagationStopped","defaultPrevented","target","preventDefault","stopPropagation","$e881b5dca21eb5d4$export$2e2bcd8739ae039","PROPERTYCHANGE","$3273ed08087da3da$export$2e2bcd8739ae039","disposed","dispose","disposeInternal","$b998d41b678ed5d1$export$fcb633242ef15540","b","$b998d41b678ed5d1$export$8a3786cc03fdb777","arr","direction","n","length","i","candidate","$b998d41b678ed5d1$export$8b58be045bf06082","data","extension","Array","isArray","$b998d41b678ed5d1$export$e9bab7fafb253603","arr1","arr2","len1","$013a1733c226ec50$export$22e23a2304399231","$013a1733c226ec50$export$8f11cee4bdc7e668","$013a1733c226ec50$export$1cd1943b3a73bbe8","$beaefe87199bb537$export$42ffd38884aecdac","object","property","$beaefe87199bb537$export$dd1bc94b04021eeb","$08c28d22c0cb5a39$export$2e2bcd8739ae039","eventTarget_","pendingRemovals_","dispatching_","listeners_","addEventListener","listener","listeners","listenersForType","includes","push","dispatchEvent","event","propagate","isString","evt","dispatching","pendingRemovals","ii","handleEvent","call","pr","removeEventListener","getListeners","undefined","hasListener","Object","keys","index","indexOf","splice","$294047c5e65f31a3$export$2e2bcd8739ae039","CHANGE","ERROR","CONTEXTMENU","CLICK","DBLCLICK","KEYDOWN","KEYPRESS","LOAD","TOUCHMOVE","WHEEL","$d5bf8abd656a3cdc$export$63174c828edd6ff8","thisArg","once","bind","originalListener","apply","arguments","eventsKey","$d5bf8abd656a3cdc$export$b0a21c8b3c1c921","key","$1f093ab5083c8a1f$var$Observable","on","onInternal","onceInternal","un","unInternal","revision_","changed","getRevision","len","ol_key","$1f093ab5083c8a1f$export$b7ef3f8527533384","prototype","$1f093ab5083c8a1f$export$2e2bcd8739ae039","$6c5e11070e371322$export$817eb92a8194bab0","Error","$6c5e11070e371322$var$uidCounter_","$6c5e11070e371322$export$5e82334337e0f204","obj","ol_uid","String","$b68b3d6e32e3074a$export$cf395d7c4a2d5a17","oldValue","$b68b3d6e32e3074a$export$2e2bcd8739ae039","values","values_","setProperties","get","value","hasOwnProperty","getKeys","getProperties","assign","getPropertiesInternal","hasProperties","notify","eventType","addChangeListener","removeChangeListener","set","silent","applyProperties","source","unset","$161dd067fe2d672c$export$2e2bcd8739ae039","ADD","REMOVE","$931ffc4e747c14db$var$Property","LENGTH","$931ffc4e747c14db$export$a87ae6eb2761ec6d","element","$931ffc4e747c14db$export$2e2bcd8739ae039","array","options","unique_","unique","array_","assertUnique_","updateLength_","clear","getLength","pop","extend","forEach","f","getArray","item","insertAt","elem","removeAt","remove","prev","setAt","except","$67c66761d21428d0$var$ua","navigator","userAgent","toLowerCase","$67c66761d21428d0$export$8442bdfd18b7b8a6","$67c66761d21428d0$export$3227bfbdaa9275de","test","$67c66761d21428d0$export$39dfd62a25e0fe93","$67c66761d21428d0$export$76c0a3b101d93136","$67c66761d21428d0$export$6b83a0446fc26f94","devicePixelRatio","$67c66761d21428d0$export$98fcef3dc9973292","WorkerGlobalScope","OffscreenCanvas","self","$67c66761d21428d0$export$716f8695eedb9bad","Image","decode","$67c66761d21428d0$export$f751ce96c6c4e4fc","passive","defineProperty","window","error","$35d5ec884318008e$export$a7a9523472993e97","assertion","errorMessage","$e22e7611e69f42a9$export$185802fd694ee1f5","$e22e7611e69f42a9$export$5635d7ef4b8fee1c","transform","coordinate","x","y","$e22e7611e69f42a9$export$f672e0b6f7222cd7","dx1","dy1","sx","sy","angle","dx2","dy2","sin","Math","cos","$e22e7611e69f42a9$export$bd70ea2a93c0fa4","det","mat","c","d","e","$e22e7611e69f42a9$export$f84e8e69fd4488a5","transformString","join","node","document","createElement","style","$dab4245bc22b806c$export$2e2bcd8739ae039","UNKNOWN","INTERSECTING","ABOVE","RIGHT","BELOW","LEFT","$6da4c8ed3074c92b$export$8aceca7c77505534","coordinates","extent","$6da4c8ed3074c92b$export$fe201bb3bbe031e9","$6da4c8ed3074c92b$export$1f820e3920fa5715","$6da4c8ed3074c92b$export$ab1029bcae9ddb4a","dest","$6da4c8ed3074c92b$export$9cd59f9826255e47","slice","$6da4c8ed3074c92b$export$cbe64c389534206f","dx","dy","$6da4c8ed3074c92b$export$ac68c24d37ca240f","$6da4c8ed3074c92b$export$805bdfd6d6690e97","$6da4c8ed3074c92b$export$be866b1e0809b17e","extent1","extent2","$6da4c8ed3074c92b$export$f97905ead28c61a8","minX","minY","maxX","maxY","relationship","Infinity","$6da4c8ed3074c92b$export$958e3e1a02eac4b6","$6da4c8ed3074c92b$export$3e2152b047719fa1","$6da4c8ed3074c92b$export$be0ab0bf96ca59ca","flatCoordinates","offset","end","stride","$6da4c8ed3074c92b$export$30570204156ffd18","$6da4c8ed3074c92b$export$e9bab7fafb253603","$6da4c8ed3074c92b$export$8b58be045bf06082","$6da4c8ed3074c92b$export$f1dab130b92b85a9","min","max","$6da4c8ed3074c92b$export$f9ed8a3d123a08e2","callback","val","$6da4c8ed3074c92b$export$8d09f5e2e1bf560d","$6da4c8ed3074c92b$export$e77c1cf70445e168","$6da4c8ed3074c92b$export$b84fa077c8b05295","$6da4c8ed3074c92b$export$cb1538b07e6964ff","$6da4c8ed3074c92b$export$520c40045967cb15","area","$6da4c8ed3074c92b$export$dd1bc94b04021eeb","$6da4c8ed3074c92b$export$3c49c185de0c2bfc","$6da4c8ed3074c92b$export$c08559766941f856","$6da4c8ed3074c92b$export$c91255cadecfe081","$6da4c8ed3074c92b$export$13ba650faf8308","center","resolution","rotation","size","x0","y0","x1","y1","x2","y2","x3","y3","$6da4c8ed3074c92b$export$4b7a6fb4002cd6ac","cosRotation","sinRotation","xCos","xSin","yCos","ySin","$6da4c8ed3074c92b$export$72209efa88586d42","intersection","$6da4c8ed3074c92b$export$7b0a31e10bbff018","$6da4c8ed3074c92b$export$39a9ce3624977b84","projectionExtent","getExtent","canWrapX","worldWidth","worldsAway","floor","$6b000a049d919fe5$export$7d15b64cf5a3a4c4","$6b000a049d919fe5$export$88e6ebb4fe54f538","$6b000a049d919fe5$export$cba01ba138429a1d","angleInDegrees","PI","$6b000a049d919fe5$export$ba467bec01d66def","r","$6b000a049d919fe5$export$a81f732198733497","decimals","factor","pow","round","$6b000a049d919fe5$export$a3fe094919f356fd","$6b000a049d919fe5$export$803ce6b71a0a94b2","ceil","$322346e1ff7894ca$var$HEX_COLOR_RE_","$322346e1ff7894ca$var$NAMED_COLOR_RE_","$322346e1ff7894ca$export$590567be997858b6","color","$322346e1ff7894ca$export$f84e8e69fd4488a5","$322346e1ff7894ca$export$3004f64547af360e","cache","cacheSize","s","$322346e1ff7894ca$var$fromStringInternal_","g","exec","$322346e1ff7894ca$var$fromNamed","el","body","appendChild","rgb","getComputedStyle","removeChild","hasAlpha","parseInt","substr","startsWith","$322346e1ff7894ca$export$a3295358bff77e","split","map","Number","$322346e1ff7894ca$export$75093a47a9fa838d","$f351daabfe6e2d22$var$getKey","src","crossOrigin","colorString","$f351daabfe6e2d22$export$747ccdf771a87ab8","cache_","cacheSize_","maxCacheSize_","canExpireCache","expire","iconImage","setSize","maxCacheSize","$f6d1853b3fcae320$export$2e2bcd8739ae039","OPACITY","VISIBLE","EXTENT","Z_INDEX","MAX_RESOLUTION","MIN_RESOLUTION","MAX_ZOOM","MIN_ZOOM","SOURCE","MAP","$57c5f0299cb9b82f$export$2e2bcd8739ae039","background_","background","properties","opacity","visible","zIndex","maxResolution","minResolution","minZoom","maxZoom","className_","className","state_","getBackground","getClassName","getLayerState","managed","state","layer","getZIndex","getOpacity","getVisible","getMaxResolution","getMinResolution","getMinZoom","getMaxZoom","getLayersArray","getLayerStatesArray","states","getSourceState","setBackground","setExtent","setMaxResolution","setMinResolution","setMaxZoom","setMinZoom","setOpacity","setVisible","setZIndex","zindex","$f5e92a4d985a2824$export$2e2bcd8739ae039","PRERENDER","POSTRENDER","PRECOMPOSE","POSTCOMPOSE","RENDERCOMPLETE","$7d362782b4ccb93d$export$2e2bcd8739ae039","ANIMATING","INTERACTING","$d35baefbe89be4c5$export$2e2bcd8739ae039","CENTER","RESOLUTION","ROTATION","$03edbd434a9e6608$export$1482081eec883108","$6dc418afeec7068a$export$2e2bcd8739ae039","code_","code","units_","units","extent_","worldExtent_","worldExtent","axisOrientation_","axisOrientation","global_","global","canWrapX_","getPointResolutionFunc_","getPointResolution","defaultTileGrid_","metersPerUnit_","metersPerUnit","getCode","getUnits","getMetersPerUnit","getWorldExtent","getAxisOrientation","isGlobal","setGlobal","getDefaultTileGrid","setDefaultTileGrid","tileGrid","setWorldExtent","setGetPointResolution","func","getPointResolutionFunc","$84ad988f04807ab1$export$f3928063e5e96d35","$84ad988f04807ab1$export$21e6da8a7375dfe8","$84ad988f04807ab1$export$ae9d6ed80df710e5","$84ad988f04807ab1$export$d26945d1ad52feeb","$84ad988f04807ab1$export$2d2c9be8b5b863f","log","tan","$84ad988f04807ab1$var$EPSG3857Projection","point","cosh","$84ad988f04807ab1$export$b508d7ad9a891c1b","$b58ae362632b32c5$export$21e6da8a7375dfe8","$b58ae362632b32c5$export$1482081eec883108","$b58ae362632b32c5$var$EPSG4326Projection","$b58ae362632b32c5$export$b508d7ad9a891c1b","$f5ec5c943d804ecb$var$cache","$11b5dd198626e1de$var$transforms","$11b5dd198626e1de$export$e16d8520af44a096","destination","transformFn","sourceCode","destinationCode","$1bd0a226f9a16141$export$e9bab7fafb253603","coordinate1","coordinate2","equals","$1bd0a226f9a16141$export$bb628a54ab399bc9","cosAngle","sinAngle","$1bd0a226f9a16141$export$39a9ce3624977b84","$1bd0a226f9a16141$export$24e2b27d1ff0c1d5","sourceExtentWidth","$fb75384508533d8f$export$79376507b09a66f","c1","c2","radius","lat1","lat2","deltaLatBy2","deltaLonBy2","atan2","sqrt","$8c65b0699f3f3f8e$export$c106dd0671a0fc2d","args","console","warn","$9c4744460e43e41b$var$showCoordinateWarning","$9c4744460e43e41b$export$ed949affbc7c4223","disable","$9c4744460e43e41b$export$dd516654c5f598fb","input","output","$9c4744460e43e41b$export$83e8ab53904f8022","$9c4744460e43e41b$export$59ae956cd3e343f7","$9c4744460e43e41b$export$3988ae62b71be9a3","projectionLike","replace","$9c4744460e43e41b$export$2d8f7b4eec383d44","pointResolution","getter","projUnits","toEPSG4326","$9c4744460e43e41b$export$e3c4995a701c26a3","vertices","width","height","$9c4744460e43e41b$export$eeb8392580a05a37","projections","$9c4744460e43e41b$export$638ad73f7aafb913","$9c4744460e43e41b$export$549167224996a0fb","defaultCode","$9c4744460e43e41b$export$fe091d73a555748b","projection1","projection2","equalUnits","transformFunc","sourceProjection","destinationProjection","$9c4744460e43e41b$export$fce0c6cfca85ed96","$9c4744460e43e41b$export$51186ad6e864892a","$9c4744460e43e41b$export$d4b8ec0b96db1ee2","destProjection","$b21a6e049949bb31$export$c2f0af2c946f6897","onlyCenter","smooth","isMoving","centerShift","viewWidth","viewHeight","shiftX","shiftY","ratio","$b21a6e049949bb31$export$f883a24d5edde77c","$bac43a1f4a628548$var$getViewportClampedResolution","maxExtent","viewportSize","showFullExtent","xResolution","yResolution","$bac43a1f4a628548$var$getSmoothClampedResolution","result","$bac43a1f4a628548$export$1c4e6da9b4b066fe","cappedMaxRes","$d65f0a322291d127$export$e20fbacbb41798b","$d65f0a322291d127$export$f883a24d5edde77c","$c7ccf7e681a9b333$export$929e5a82286172a6","t","$c7ccf7e681a9b333$export$57636bb43b1ccbb0","$c7ccf7e681a9b333$export$9b47139b511b56e4","$c7ccf7e681a9b333$export$45db2fc2f15997e7","$14c6e714516e527b$export$b92b2dedcfff79de","j","$14c6e714516e527b$export$bb628a54ab399bc9","anchor","anchorX","anchorY","deltaX","deltaY","k","projections1","projections2","forwardTransform","inverseTransform","dimension","atan","exp","$50db89a00eb954f6$var$tmpTransform","$50db89a00eb954f6$export$2e2bcd8739ae039","fn","lastResult","lastArgs","lastThis","called","extentRevision_","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometryRevision","simplifyTransformedInternal","revision","squaredTolerance","getSimplifiedGeometry","clone","applyTransform","nextArgs","simplifyTransformed","closestPointXY","closestPoint","minSquaredDistance","containsXY","coord","getClosestPoint","NaN","intersectsCoordinate","computeExtent","isNaN","rotate","scale","simplify","tolerance","getType","intersectsExtent","translate","sourceProj","inCoordinates","outCoordinates","pixelExtent","projectedExtent","$c76e993e57efc8c4$export$6af0c1b4a8549a43","layout","$c76e993e57efc8c4$export$2e2bcd8739ae039","getCoordinates","getFirstCoordinate","getFlatCoordinates","getLastCoordinate","getLayout","simplifiedGeometry","getSimplifiedGeometryInternal","simplifiedFlatCoordinates","getStride","setFlatCoordinates","setCoordinates","setLayout","nesting","$bf5604c1b8258b71$var$assignClosest","offset1","offset2","$bf5604c1b8258b71$export$bc2eb611ddf80103","squaredDelta","$bf5604c1b8258b71$export$fbf31c8f2668ed5a","ends","$bf5604c1b8258b71$export$4adc8e5135fb44c","maxDelta","isRing","tmpPoint","squaredDistance","$bf5604c1b8258b71$export$5a48a0eefcf14992","$6b086aa46281540d$export$5c4daf67e03c190f","$6b086aa46281540d$export$47c3746a74384d45","coordinatess","jj","$8780aae6970f5f65$export$ef693d1572e64fb8","simplifiedOffset","markers","stack","last","first","maxSquaredDistance","$8780aae6970f5f65$export$51a0620f7a28532b","$8780aae6970f5f65$export$60a9904b67f8d51b","simplifiedEnds","$8780aae6970f5f65$export$b84e8d2c4920a0c6","$5454470599558ddd$export$9c0934e4e9c3f61e","$5454470599558ddd$export$cbb9596fc0f40db2","$5454470599558ddd$export$915c7058aeb4dfeb","endss","coordinatesss","$01ff26a2f986a1d0$export$3c5e1905f889266e","twiceArea","$01ff26a2f986a1d0$export$7a8ee541dfdf2ed5","$548636579b4087f2$var$LinearRing","maxDelta_","maxDeltaRevision_","getArea","$6eced4c969949f6b$var$Point","$239aa88e7a573859$export$949a7a3a4b6f34fa","wn","$239aa88e7a573859$export$ae868c0f6acc3355","$2166f19777f69377$export$50e3b25928a5e892","flatCenters","flatCentersOffset","intersections","rr","pointX","maxSegmentLength","sort","segmentLength","abs","$3e64078bffae1cbd$export$4b80e395e36b5a56","ret","$acee589e5b390c5c$export$40d8d71841a3d779","coordinatesExtent","point1","point2","start","intersects","startRel","endRel","startX","startY","endX","endY","slope","$acee589e5b390c5c$export$830a0dafbb2ef1c5","$acee589e5b390c5c$export$76dcd8f8f83b6ddb","outside","$7892dc06ffd23218$export$318f2842ed17e094","edge","$7892dc06ffd23218$export$f27cd06e85f4ba28","right","isClockwise","$7892dc06ffd23218$export$b71b604ddfc778c7","reverse","tmp","$7892dc06ffd23218$export$ea9ed55fc2a85010","$40aa8d43bbe572bf$var$Polygon","ends_","flatInteriorPointRevision_","flatInteriorPoint_","orientedRevision_","orientedFlatCoordinates_","appendLinearRing","linearRing","polygon","getOrientedFlatCoordinates","getEnds","getFlatInteriorPoint","flatCenter","getInteriorPoint","getLinearRingCount","getLinearRing","getLinearRings","linearRings","$40aa8d43bbe572bf$export$c16b671815801c75","$70364d0195659942$var$animationCallback","returnValue","setTimeout","$70364d0195659942$var$calculateCenterOn","position","rotX","rotY","centerX","centerY","$70364d0195659942$export$2e2bcd8739ae039","hints_","animations_","updateAnimationKey_","projection_","viewportSize_","targetCenter_","targetResolution_","targetRotation_","nextCenter_","nextResolution_","nextRotation_","cancelAnchor_","applyOptions_","resolutionConstraintInfo","$70364d0195659942$export$c68d65f9148da196","resolutionConstraint","zoomFactor","multiWorld","smoothResolutionConstraint","projExtent","constrainOnlyCenter","resolutions","constrainResolution","capped","z","degrees","defaultMaxResolution","minZoomLevel","cappedZoomLevel","newResolution","constraint","maxResolution_","minResolution_","zoomFactor_","resolutions_","padding_","padding","minZoom_","centerConstraint","$70364d0195659942$export$964345001ee9ac52","smoothExtentConstraint","rotationConstraint","$70364d0195659942$export$4eeaa08dd550e3c0","enableRotation","constrainRotation","theta","constraints_","setRotation","setCenterInternal","setResolution","zoom","setZoom","oldPadding","getCenterInternal","newPadding","getResolution","offsetX","offsetY","getUpdatedOptions_","newOptions","getZoom","getRotation","animate","var_args","isDef","getAnimating","resolveConstraints","getProjection","animateInternal","animationCount","Date","now","series","animation","complete","duration","easing","sourceCenter","targetCenter","sourceResolution","targetResolution","getResolutionForZoom","sourceRotation","delta","targetRotation","setHint","updateAnimations_","getInteracting","cancelAnimations","cancelAnimationFrame","more","seriesComplete","elapsed","fraction","progress","getViewportSize_","constrainedResolution","calculateCenterZoom","applyTargetState_","constrainedRotation","calculateCenterRotate","filter","Boolean","requestAnimationFrame","currentCenter","currentResolution","w","h","setViewportSize","getCenter","getConstraints","getConstrainResolution","getHints","hints","calculateExtent","calculateExtentInternal","getViewportSizeMinusPadding_","getZoomForResolution","setConstrainResolution","enabled","getResolutions","getResolutionForExtent","getResolutionForExtentInternal","getResolutionForValueFunction","power","getConstrainedResolution","getValueForResolutionFunction","logPower","getState","reducedSize","nextCenter","nextResolution","nextRotation","getViewStateAndExtent","viewState","nearest","baseLevel","fit","geometryOrExtent","geometry","fitInternal","rotatedExtentForGeometry","coords","minRotX","minRotY","maxRotX","maxRotY","rotatedExtent","centerRot","getConstrainedCenter","centerOn","centerOnInternal","calculateCenterShift","shiftedCenter","adjustCenter","deltaCoordinates","setCenter","adjustCenterInternal","adjustResolution","adjustResolutionInternal","adjustZoom","adjustRotation","adjustRotationInternal","newRotation","hint","doNotCancelAnims","forceMoving","newCenter","resolutionDirection","beginInteraction","endInteraction","endInteractionInternal","getConstrainedZoom","targetZoom","targetRes","$534f30fce11effcd$export$acb1e9cb9ce4ca56","layerState","$534f30fce11effcd$export$2e2bcd8739ae039","baseOptions","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","renderer_","sourceReady_","rendered","render","setMap","handleSourcePropertyChange_","setSource","getSource","getRenderSource","handleSourceChange_","getFeatures","pixel","Promise","resolve","getData","isVisible","view","frameState","getMapInternal","getView","layerStatesArray","getLayerGroup","find","layerExtent","getAttributions","attributions","layerRenderer","getRenderer","prepareFrame","renderFrame","unrender","setMapInternal","renderEvent","some","arrayLayerState","createRenderer","hasRenderer","$b370ab32454a96fd$var$expireIconCache","$b370ab32454a96fd$export$2e2bcd8739ae039","map_","dispatchRenderEvent","calculateMatrices2D","coordinateToPixelTransform","pixelToCoordinateTransform","forEachFeatureAtCoordinate","hitTolerance","checkWrapped","layerFilter","thisArg2","feature","translatedCoordinate","offsets","layerStates","numLayers","matches","tmpCoord","getWrapX","order","m","distanceSq","hasFeatureAtCoordinate","hasFeature","getMap","flushDeclutterItems","scheduleExpireIconCache","postRenderFunctions","$b80dddceb0c42ad4$export$2e2bcd8739ae039","inversePixelTransform","context","$ce07df6d5d4656f1$export$981241db82723ce2","$ce07df6d5d4656f1$export$1afde3d6e16a7b29","$ce07df6d5d4656f1$export$4d4f8be70b656192","$ce07df6d5d4656f1$export$e16017ac68d14492","$ce07df6d5d4656f1$var$fontRegEx","RegExp","$ce07df6d5d4656f1$var$fontRegExMatchIndex","$ce07df6d5d4656f1$export$5abde8a6aec4a131","fontSpec","match","lineHeight","weight","variant","families","family","$075f937d7366f1a2$export$9e05d10eae75c464","canvasPool","settings","canvas","shift","getContext","$075f937d7366f1a2$export$e918ac6a1026a12a","clearRect","$075f937d7366f1a2$export$5542201de9311ab2","newNode","oldNode","parent","parentNode","replaceChild","$075f937d7366f1a2$export$1d0aa160432dfea5","$075f937d7366f1a2$export$1e1c9bf5a4ffe0d1","lastChild","$d4aabc5c971073f1$export$3847dfea4f8d4dfa","$d4aabc5c971073f1$export$c495d52ee3fd74b2","$d4aabc5c971073f1$export$17bd0c38d6ae694e","$d4aabc5c971073f1$export$e21b4112fdc612fc","$d4aabc5c971073f1$export$365eb9648cf19bd0","$d4aabc5c971073f1$export$1eb2eaecacf2031e","$d4aabc5c971073f1$export$94d53b95641b5766","$d4aabc5c971073f1$export$cf2279a1bff62eb","$d4aabc5c971073f1$export$40a9eeef55665a40","$d4aabc5c971073f1$export$1d36981fcadac93b","$d4aabc5c971073f1$var$measureContext","$d4aabc5c971073f1$export$7fdcec604f0b1fa7","$d4aabc5c971073f1$export$a534074a28fa87ff","interval","referenceWidth","referenceFonts","text","isAvailable","fontStyle","fontWeight","fontFamily","available","referenceFont","$d4aabc5c971073f1$export$4ea92329b673abd1","check","done","fonts","font","clearInterval","setInterval","$d4aabc5c971073f1$export$4feaf6852ff92513","metrics","$d4aabc5c971073f1$var$measureText","actualBoundingBoxAscent","actualBoundingBoxDescent","innerHTML","minHeight","maxHeight","border","display","left","offsetHeight","measureText","$d4aabc5c971073f1$export$915c7ba51467308f","reduce","curr","$fa78c97693b12120$export$2e2bcd8739ae039","fontChangeListenerKey_","redrawText","element_","container","getViewport","insertBefore","firstChild","children_","renderedVisible_","declutterLayers_","declutterLayers","previousElement","layerIndex","sourceState","children","oldChildren","childNodes","oldChild","newChild","layers","renderDeclutter","$0b703156bb914e6f$export$2f5ff21d758d25a7","$0b703156bb914e6f$var$Property","LAYERS","$0b703156bb914e6f$var$LayerGroup","layersListenerKeys_","listenerKeys_","handleLayersChanged_","setLayers","handleLayerChange_","getLayers","id","handleLayersAdd_","handleLayersRemove_","layersArray","registerLayerListeners_","listenerKeys","handleLayerGroupAdd_","handleLayerGroupRemove_","collectionEvent","collection","currentLayers","pos","ownLayerState","defaultZIndex","$3a171922c3a0c5ed$export$2e2bcd8739ae039","$a1b91f073c6a6c43$export$2e2bcd8739ae039","originalEvent","dragging","activePointers","pixel_","coordinate_","getEventPixel","getCoordinateFromPixel","$150f412a4a7fa263$export$2e2bcd8739ae039","SINGLECLICK","POINTERDRAG","POINTERMOVE","POINTERDOWN","POINTERUP","POINTEROVER","POINTEROUT","POINTERENTER","POINTERLEAVE","POINTERCANCEL","$d564567e31203d44$export$2e2bcd8739ae039","$6085d006f9d0efe2$export$2e2bcd8739ae039","moveTolerance","clickTimeoutId_","emulateClicks_","dragging_","dragListenerKeys_","moveTolerance_","down_","activePointers_","trackedTouches_","pointerdownListenerKey_","handlePointerDown_","originalPointerMoveEvent_","relayedListenerKey_","relayMoveEvent_","boundHandleTouchMove_","handleTouchMove_","emulateClick_","pointerEvent","newEvent","clearTimeout","updateActivePointers_","pointerId","handlePointerUp_","isMouseActionButton_","button","PointerEvent","writable","doc","getOwnerDocument","handlePointerMove_","getRootNode","isMoving_","cancelable","clientX","clientY","$e4ad75f913b6f7ff$export$2e2bcd8739ae039","MOVESTART","MOVEEND","LOADSTART","LOADEND","$07fa325567004bb7$export$2e2bcd8739ae039","LAYERGROUP","SIZE","TARGET","VIEW","$716c6804ea170b71$export$b4af72c40fd57063","$716c6804ea170b71$export$2e2bcd8739ae039","priorityFunction","keyFunction","priorityFunction_","keyFunction_","elements_","priorities_","queuedElements_","dequeue","elements","priorities","siftUp_","elementKey","enqueue","priority","siftDown_","getCount","getLeftChildIndex_","getRightChildIndex_","getParentIndex_","heapify_","isEmpty","isKeyQueued","isQueued","count","startIndex","lIndex","rIndex","smallerChildIndex","parentIndex","reprioritize","$b8291d9739c3c64e$export$2e2bcd8739ae039","IDLE","LOADING","LOADED","EMPTY","$4c51fd53052a6bbc$export$2e2bcd8739ae039","tilePriorityFunction","tileChangeCallback","getKey","boundHandleTileChange_","handleTileChange","tileChangeCallback_","tilesLoading_","tilesLoadingKeys_","added","tile","getTilesLoading","tileKey","loadMoreTiles","maxTotalLoading","maxNewLoads","newLoads","load","$b978dafe8f7d27ff$export$2e2bcd8739ae039","pointerEvents","target_","setTarget","getOverlayContainerStopEvent","mapEvent","getElementById","$6a26ab11104d2c24$export$2e2bcd8739ae039","ulElement_","collapsed_","collapsed","userCollapsed_","overrideCollapsible_","collapsible","collapsible_","tipLabel","expandClassName","collapseLabel","collapseClassName","collapseLabel_","textContent","label","label_","activeLabel","toggleButton_","setAttribute","title","handleClick_","cssClasses","renderedAttributions_","collectSourceAttributions_","visibleAttributions","from","Set","getAllLayers","flatMap","getAttributionsCollapsible","setCollapsible","updateElement_","handleToggle_","classList","toggle","getCollapsible","setCollapsed","getCollapsed","$a305cff1f91b3b86$export$2e2bcd8739ae039","compassClassName","add","callResetNorth_","resetNorth","duration_","autoHide_","autoHide","rotation_","resetNorth_","contains","$4901e3e27e30416a$export$2e2bcd8739ae039","zoomInClassName","zoomOutClassName","zoomInLabel","zoomOutLabel","zoomInTipLabel","zoomOutTipLabel","inElement","createTextNode","outElement","zoomByDelta_","currentZoom","newZoom","$2c9e42723ccf2bfb$export$2e2bcd8739ae039","ACTIVE","$39210df8527e63e5$export$ace321ff2a8016ef","$39210df8527e63e5$export$2e2bcd8739ae039","setActive","getActive","mapBrowserEvent","active","$b50403621294a654$export$2e2bcd8739ae039","delta_","stopEvent","browserEvent","shiftKey","$cf1eb502962d87a8$export$e2a20c553f6c85ce","$cf1eb502962d87a8$export$2e2bcd8739ae039","handleDownEvent","handleDragEvent","handleMoveEvent","handleUpEvent","stopDown","handlingDownUpSequence","targetPointers","getPointerCount","updateTrackedPointers_","handledUp","handled","$edf87b50170125f7$export$84bf76cd7afc7469","conditions","pass","$edf87b50170125f7$export$4e5f01653f9f1f82","altKey","metaKey","ctrlKey","$edf87b50170125f7$export$d7ddd398f22d79ef","targetElement","getTargetElement","activeElement","$edf87b50170125f7$export$ae2cdf064e3b0c55","hasAttribute","$edf87b50170125f7$export$1238ad6b5e7fff70","$edf87b50170125f7$export$fdc892d0d8fe3bfb","$edf87b50170125f7$export$32603ad571dd22b5","$edf87b50170125f7$export$5d31fe68a477cfbb","$edf87b50170125f7$export$e5570ca80cd8fd54","tagName","isContentEditable","$edf87b50170125f7$export$abb7acbfa76bf3c4","pointerType","$edf87b50170125f7$export$189f0d593022b199","isPrimary","$c11585da26a016db$export$2e2bcd8739ae039","kinetic_","kinetic","lastCentroid","lastPointersCount_","panning_","condition","condition_","onFocusOnly","noKinetic_","centroid","update","begin","distance","getDistance","getAngle","centerpx","getPixelFromCoordinateInternal","getCoordinateFromPixelInternal","$197c7092261b2aa0$export$2e2bcd8739ae039","lastAngle_","getSize","$c47adf75308683a6$export$2e2bcd8739ae039","geometry_","startPixel_","endPixel_","render_","startPixel","endPixel","top","getOverlayContainer","setPixels","createOrUpdateGeometry","pixels","getGeometry","$e05f414bc3918235$var$DragBoxEventType","BOXSTART","BOXDRAG","BOXEND","BOXCANCEL","$e05f414bc3918235$export$7053c33c051365ea","$e05f414bc3918235$export$2e2bcd8739ae039","box_","minArea_","minArea","onBoxEnd","boxEndCondition_","boxEndCondition","defaultBoxEndCondition","completeBox","$afc7f51010a5b660$export$2e2bcd8739ae039","out_","out","$368e06a3031941b5$export$2e2bcd8739ae039","UP","DOWN","$178bb1517d626802$export$2e2bcd8739ae039","defaultCondition_","pixelDelta_","pixelDelta","keyEvent","mapUnitsDelta","$2237fabfa170eefc$export$2e2bcd8739ae039","$9a54ea8d5f7a49ee$export$2e2bcd8739ae039","decay","minVelocity","delay","decay_","minVelocity_","delay_","points_","angle_","initialVelocity_","lastIndex","firstIndex","$aaa378764710d71e$export$2e2bcd8739ae039","totalDelta_","lastDelta_","timeout_","timeout","useAnchor_","useAnchor","constrainResolution_","lastAnchor_","startTime_","timeoutId_","mode_","trackpadEventGap_","trackpadTimeoutId_","deltaPerZoom_","endInteraction_","wheelEvent","deltaMode","WheelEvent","DOM_DELTA_PIXEL","DOM_DELTA_LINE","timeLeft","handleWheelZoom_","setMouseAnchor","$9727451f2459496c$export$2e2bcd8739ae039","pointerOptions","anchor_","rotating_","rotationDelta_","threshold_","threshold","rotationDelta","touch0","touch1","$79c946b60b88d4a6$export$2e2bcd8739ae039","lastDistance_","lastScaleDelta_","scaleDelta","$cc435a5409103773$export$622c471beb1693c7","$cc435a5409103773$export$a71a825ff42fb8e1","$41aa29ae0c4b607a$export$2e2bcd8739ae039","optionsInternal","$41aa29ae0c4b607a$var$createOptionsInternal","controls","interactions","overlays","keyboardEventTarget","layerGroup","renderComplete_","loaded_","boundHandleBrowserEvent_","handleBrowserEvent","maxTilesLoading_","maxTilesLoading","pixelRatio_","pixelRatio","postRenderTimeoutHandle_","animationDelayKey_","animationDelay_","coordinateToPixelTransform_","pixelToCoordinateTransform_","frameIndex_","frameState_","previousExtent_","viewPropertyListenerKey_","viewChangeListenerKey_","layerGroupPropertyListenerKeys_","viewport_","overflow","overlayContainer_","overlayContainerStopEvent_","mapBrowserEventHandler_","keyboardEventTarget_","targetChangeHandlerKeys_","targetElement_","resizeObserver_","ResizeObserver","updateSize","zoomControl","zoomOptions","rotateControl","rotateOptions","attributionControl","attribution","attributionOptions","altShiftDragRotate","doubleClickZoom","zoomDelta","zoomDuration","dragPan","pinchRotate","pinchZoom","keyboard","mouseWheelZoom","shiftDragZoom","overlays_","overlayIdIndex_","postRenderFunctions_","tileQueue_","getTilePriority","handleTileChange_","handleLayerGroupChanged_","handleViewChanged_","handleSizeChanged_","handleTargetChanged_","then","viewOptions","setView","addOverlayInternal_","getId","toString","control","interaction","addControl","getControls","addInteraction","getInteractions","addLayer","handleLayerAdd_","$41aa29ae0c4b607a$var$setLayerMapProperty","addOverlay","overlay","getOverlays","disconnect","forEachFeatureAtPixel","getFeaturesAtPixel","features","addLayersFrom","hasFeatureAtPixel","getEventCoordinate","getEventCoordinateInternal","viewport","viewportPosition","getBoundingClientRect","scaleX","scaleY","eventPosition","changedTouches","getTarget","getOverlayById","group","getLoadingOrNotReady","renderer","ready","loading","getPixelFromCoordinate","viewCoordinate","ownerDocument","tileSourceKey","tileCenter","tileResolution","wantedTiles","handleMapBrowserEvent","rootNode","documentElement","interactionsArray","cont","handlePostRender","tileQueue","viewHints","lowOnFrameBudget","time","unobserve","ShadowRoot","host","observe","handleViewPropertyChanged_","updateViewportSize_","handleLayerRemove_","isRendered","renderFrame_","renderSync","handleFontsChanged","removeControl","removeInteraction","removeLayer","$41aa29ae0c4b607a$var$removeLayerMapProperty","removeOverlay","previousFrameState","declutterTree","usedTiles","mapId","renderTargets","nextExtent","moveStart","idle","setLayerGroup","oldLayerGroup","computedStyle","offsetWidth","parseFloat","getClientRects","oldSize","$e4c61536de922b84$export$2e2bcd8739ae039","PRELOAD","USE_INTERIM_TILES_ON_ERROR","$93be2de6a052f587$export$2e2bcd8739ae039","preload","useInterimTilesOnError","setPreload","setUseInterimTilesOnError","getPreload","getUseInterimTilesOnError","$7eb75c96a6b6f2c6$export$2e2bcd8739ae039","$cb18cdefd702a327$export$2e2bcd8739ae039","boundHandleImageChange_","handleImageChange_","layer_","declutterExecutorGroup","loadedTileCallback","tiles","tileCoord","createLoadedTileFinder","tileRange","forEachLoadedTile","getLayer","image","renderIfReadyAndVisible","loadImage","imageState","$42152f52b26b6ca7$export$a166f0857c555517","$42152f52b26b6ca7$var$pixelContext","$42152f52b26b6ca7$export$2e2bcd8739ae039","renderedResolution","tempTransform","pixelTransform","containerReused","pixelContext_","getImageData","col","row","willReadFrequently","drawImage","err","useContainer","backgroundColor","layerClassName","firstElementChild","HTMLCanvasElement","transformOrigin","clipUnrotated","topLeft","topRight","bottomRight","bottomLeft","inverted","save","beginPath","moveTo","lineTo","clip","dispatchRenderEvent_","preRender","postRender","getRenderTransform","$0f235d2d04095c6e$export$2e2bcd8739ae039","interimTile","transition_","transition","transitionStarts_","interpolate","release","setState","getInterimTile","refreshInterimChain","getTileCoord","getAlpha","inTransition","endTransition","$cd3bc8d185522361$export$2e2bcd8739ae039","tileLoadFunction","crossOrigin_","src_","image_","unlisten_","tileLoadFunction_","getImage","setImage","unlistenImage_","handleImageError_","$cd3bc8d185522361$var$getBlankImage","ctx","fillStyle","fillRect","handleImageLoad_","naturalWidth","naturalHeight","loadHandler","errorHandler","listening","decoding","loaded","img","catch","$6be53f6edfbf1854$export$2e2bcd8739ae039","targetProj","targetExtent","maxSourceExtent","errorThreshold","destinationResolution","sourceProj_","targetProj_","transformInvCache","transformInv","transformInv_","maxSourceExtent_","errorThresholdSquared_","triangles_","wrapsXInSource_","canWrapXInSource_","sourceWorldWidth_","targetWorldWidth_","destinationTopLeft","destinationTopRight","destinationBottomRight","destinationBottomLeft","sourceTopLeft","sourceTopRight","sourceBottomRight","sourceBottomLeft","maxSubdivision","$6be53f6edfbf1854$var$MAX_SUBDIVISION","log2","addQuad_","leftBound","triangle","newTriangle","addTriangle_","aSrc","bSrc","cSrc","dSrc","sourceQuadExtent","sourceCoverageX","sourceWorldWidth","wrapsX","needsSubdivision","targetQuadExtent","targetCoverageX","isFinite","isNotFinite","centerSrc","centerSrcEstimX","centerSrcErrorSquared","bc","bcSrc","da","daSrc","ab","abSrc","cd","cdSrc","calculateSourceExtent","getTriangles","$2b0a118af78fb031$export$a166f0857c555517","$2b0a118af78fb031$var$drawTestTriangle","u1","v1","u2","v2","closePath","restore","$2b0a118af78fb031$var$verifyBrokenDiagonalRendering","$2b0a118af78fb031$export$5fbb958059b7e71f","targetMetersPerUnit","sourceMetersPerUnit","sourceExtent","compensationFactor","$398e350e33050c07$export$2e2bcd8739ae039","sourceTileGrid","targetTileGrid","wrappedTileCoord","gutter","getTileFunction","renderEdges","renderEdges_","gutter_","canvas_","sourceTileGrid_","targetTileGrid_","wrappedTileCoord_","sourceTiles_","sourcesListenerKeys_","sourceZ_","getTileCoordExtent","maxTargetExtent","limitedTargetExtent","sourceProjExtent","corner","errorThresholdInPixels","triangulation_","getZForResolution","sourceRange","getTileRangeForExtentAndZ","srcX","srcY","reproject_","sources","getTileSize","triangulation","imageSmoothingEnabled","pixelRound","globalCompositeOperation","sourceDataExtent","canvasWidthInUnits","canvasHeightInUnits","stitchContext","stitchScale","xPos","yPos","srcWidth","srcHeight","targetTopLeft","u0","v0","sourceNumericalShiftX","sourceNumericalShiftY","augmentedMatrix","affineCoefs","maxRow","maxEl","absValue","coef","l","$2b0a118af78fb031$var$isBrokenDiagonalRendering","ud","vd","step","steps","strokeStyle","lineWidth","stroke","leftToLoad","sourceListenKey","unlistenSources_","$550e524b0d1b61d4$var$TileRange","containsTileRange","getHeight","getWidth","$550e524b0d1b61d4$export$958e3e1a02eac4b6","$02fffef185f4339b$export$2e2bcd8739ae039","tileLayer","extentChanged","renderedExtent_","renderedPixelRatio","renderedProjection","renderedRevision","renderedTiles","newTiles_","tmpExtent","tmpTileRange_","isDrawableTile","tileState","getTile","tileSource","getTileGridForProjection","tilePixelRatio","getTilePixelRatio","getTileCoordForCoordAndZ","tileOrigin","getOrigin","tileSize","getGutterForProjection","clips","clipZs","currentClip","viewResolution","viewCenter","sourceRevision","zDirection","canvasExtent","tilesToDrawByZ","findLoadedTiles","tmpTileRange","tileCoordIntersectsViewport","uid","childTileRange","getTileCoordChildTileRange","covered","forEachTileCoordParentTileRange","canvasScale","canvasTransform","getInterpolate","zs","getOpaque","currentZ","currentTilePixelSize","getTilePixelSize","currentScale","originTileCoord","originTileExtent","origin","tileGutter","tilesToDraw","tileCoordKey","xIndex","nextX","yIndex","nextY","contextSaved","drawTileImage","unshift","updateUsedTiles","manageTilePyramid","scheduleExpireCache","getTileImage","alpha","alphaChanged","globalAlpha","postRenderFunction","expireCache","tileCallback","tileCount","getTileCoordCenter","useTile","updateCacheSize","$32e67a4d3559554a$export$2e2bcd8739ae039","$c80d3ed2a84f41ed$var$Property","ELEMENT","OFFSET","POSITION","POSITIONING","$c80d3ed2a84f41ed$export$2e2bcd8739ae039","insertFirst","autoPan","transform_","mapPostrenderListenerKey","handleElementChanged","handleMapChanged","handleOffsetChanged","handlePositionChanged","handlePositioningChanged","setElement","setOffset","setPositioning","positioning","setPosition","getElement","getOffset","getPosition","getPositioning","updatePixelPosition","performAutoPan","panIntoView","panIntoViewOptions","mapRect","getRect","overlayRect","marginLeft","marginRight","marginTop","marginBottom","myMargin","margin","offsetLeft","offsetRight","offsetTop","offsetBottom","centerPx","newCenterPx","panOptions","box","pageXOffset","pageYOffset","mapSize","updateRenderedPosition","posX","posY","getOptions","$859b1614288c6316$export$2e2bcd8739ae039","highWaterMark","count_","entries_","oldest_","newest_","keep","containsKey","entry","value_","key_","newer","older","getValues","peekLast","peekLastKey","peekFirstKey","peek","$bf2a04496fadabc6$export$958e3e1a02eac4b6","$bf2a04496fadabc6$export$92d0df0f1d25c63c","$bf2a04496fadabc6$export$a47fb462a08de82f","$a12e09565a34db59$export$2e2bcd8739ae039","pruneExceptNewestZ","$7e3d7a0f8b272861$export$2e2bcd8739ae039","TILELOADSTART","TILELOADEND","TILELOADERROR","$ed6dc99f268f3882$var$adaptAttributions","attributionLike","$ed6dc99f268f3882$export$2e2bcd8739ae039","attributions_","attributionsCollapsible_","attributionsCollapsible","wrapX_","wrapX","interpolate_","viewResolver","viewRejector","viewPromise_","reject","refresh","setAttributions","$bb602a307ef98bb5$var$tmpTileCoord","$bb602a307ef98bb5$export$2e2bcd8739ae039","strict","compare","every","currentVal","res","origins","origin_","origins_","tileSizes_","tileSizes","tileSize_","fullTileRanges_","tmpSize_","tmpExtent_","sizes","restrictedTileRange","calculateTileRanges_","forEachTileCoord","tempTileRange","tempExtent","tileCoordExtent","getTileRangeForTileCoordAndZ","tileCoordZ","tileCoordX","tileCoordY","getTileCoordForXYAndZ_","getTileCoordForCoordAndResolution","opt_tileCoord","getTileCoordForXYAndResolution_","reverseIntersectionPolicy","getTileCoordResolution","getFullTileRange","opt_direction","fullTileRanges","$5779655d81caea04$export$1f4812384df8a9c5","$5779655d81caea04$export$a251b12f5601c16f","$5779655d81caea04$export$7b5b6ef8fd55fac4","$5779655d81caea04$export$ce88871416242df8","$5779655d81caea04$var$resolutionsFromExtent","half","$988a11d09320f6a8$export$c571855c51e6c4b6","$988a11d09320f6a8$export$2e2bcd8739ae039","opaque_","opaque","tilePixelRatio_","tileCache","tmpSize","tileOptions","getTileCacheForProjection","setKey","getTileGrid","getTileCoordForTileUrlFunction","$91dd08a0f5859882$export$4229b1d9af69b3be","tileUrlFunctions","$91dd08a0f5859882$export$2a1fa079bfd73dde","url","urls","charCode","startCharCode","charCodeAt","stopCharCode","fromCharCode","stop","$e6408236331c2614$var$UrlTile","generateTileUrlFunction_","tileUrlFunction","setUrls","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","getPrototypeOf","getUrls","setTileLoadFunction","setTileUrlFunction","templates","$91dd08a0f5859882$export$f0ecb46e90798741","template","zRegEx","xRegEx","yRegEx","dashYRegEx","range","$e6408236331c2614$export$2e2bcd8739ae039","$51d055913ca55b5e$var$defaultTileLoadFunction","imageTile","$51d055913ca55b5e$export$2e2bcd8739ae039","tileClass","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","usedTileCache","getGutter","thisProj","projKey","createTile_","urlTileCoord","tileUrl","getTileInternal","newTile","setRenderReprojectionEdges","setTileGridForProjection","tilegrid","proj","$60db182c0252e220$export$c202e3cb8db99a95","uri","params","keyParams","encodeURIComponent","qs","$03da246cb7c9d812$export$2e2bcd8739ae039","requestEncoding","version_","version","format_","format","dimensions_","dimensions","matrixSet_","matrixSet","style_","requestEncoding_","getKeyForDimensions_","createFromWMTSTemplate","getDimensions","getFormat","getMatrixSet","getRequestEncoding","getStyle","getVersion","updateDimensions","p","localContext","getMatrixId","$176ca75ee9f69668$exports","_maxEntries","_minEntries","o","leaf","u","all","_all","search","toBBox","collides","insert","_build","_splitRoot","_insert","_condense","compareMinX","compareMinY","toJSON","fromJSON","_chooseSubtree","_split","_adjustParentBBoxes","_chooseSplitAxis","_chooseSplitIndex","v","M","_allDistMargin","$34c742891733e7a4$export$2e2bcd8739ae039","maxEntries","rbush_","items_","extents","items","bbox","getAll","getInExtent","forEach_","forEachInExtent","concat","rbush","$ccc4e6f11f11978f$export$2e2bcd8739ae039","ADDFEATURE","CHANGEFEATURE","CLEAR","REMOVEFEATURE","FEATURESLOADSTART","FEATURESLOADEND","FEATURESLOADERROR","$eb51d0a16123ee90$export$84bf76cd7afc7469","$588823c001569193$export$14cc81df70b6707e","success","failure","$588823c001569193$export$441d7b57adab24d0","xhr","XMLHttpRequest","open","responseType","withCredentials","onload","status","responseText","responseXML","DOMParser","parseFromString","response","readFeatures","featureProjection","readProjection","onerror","send","dataProjection","addFeatures","$84888e4daf3fdf44$export$d402fd02dc2b661c","$84888e4daf3fdf44$export$2e2bcd8739ae039","loader_","overlaps_","overlaps","url_","loader","strategy_","strategy","useSpatialIndex","featuresRtree_","loadedExtentsRtree_","loadingExtentsCount_","nullGeometryFeatures_","idIndex_","uidIndex_","featureChangeKeys_","featuresCollection_","addFeaturesInternal","bindFeaturesCollection_","addFeature","addFeatureInternal","featureKey","addToIndex_","setupChangeEvents_","handleFeatureChange_","valid","newFeatures","geometryFeatures","modifyingCollection","removeFeature","fast","featureId","removeFeatureInternal","clearEvent","forEachFeature","forEachFeatureAtCoordinateDirect","forEachFeatureInExtent","forEachFeatureIntersectingExtent","getFeaturesCollection","getFeaturesAtCoordinate","getFeaturesInExtent","anExtent","getClosestFeatureToCoordinate","closestFeature","previousMinSquaredDistance","minDistance","getFeatureById","getFeatureByUid","getOverlaps","getUrl","sid","removeFromIdIndex_","loadFeatures","loadedExtentsRtree","extentsToLoad","extentToLoad","alreadyLoaded","removeLoadedExtent","featureChangeKeys","removed","setLoader","$9fd014ab6df63665$var$Feature","geometryOrProperties","id_","geometryName_","styleFunction_","geometryChangeKey_","handleGeometryChanged_","setGeometry","setGeometryName","getGeometryName","setStyle","getStyleFunction","handleGeometryChange_","styles","setId","name","$0e4f3959219eede5$var$GeometryCollection","geometries","geometries_","changeEventsKeys_","listenGeometriesChange_","unlistenGeometriesChange_","geometryCollection","setGeometries","getGeometries","$0e4f3959219eede5$var$cloneGeometries","getGeometriesArray","getGeometriesArrayRecursive","geometriesArray","simplifiedGeometries","simplified","simplifiedGeometryCollection","setGeometriesArray","clonedGeometries","$ec084d0ff9c13a22$export$2e2bcd8739ae039","defaultFeatureProjection","supportedMediaTypes","getReadOptions","adaptOptions","readFeature","readGeometry","writeFeature","writeFeatures","writeGeometry","$ec084d0ff9c13a22$export$7beeea566b560d4","write","transformed","$2f9f6f6b6e1ba437$var$getObject","JSON","parse","$2f9f6f6b6e1ba437$export$2e2bcd8739ae039","readFeatureFromObject","readFeaturesFromObject","readGeometryFromObject","readProjectionFromObject","stringify","writeFeatureObject","writeFeaturesObject","writeGeometryObject","$43ed5485a1d0c509$export$687ff82efd78795b","cumulativeLengths","haystack","needle","comparator","mid","cmp","low","high","found","$43ed5485a1d0c509$export$8f44c3c220ef6f09","extrapolate","lo","hi","m0","m1","$bf04349d827c1d16$export$153f8c6b4d8caebc","$292e4002746c8223$var$LineString","flatMidpoint_","flatMidpointRevision_","appendCoordinate","lineString","forEachSegment","getCoordinateAtM","getCoordinateAt","getFlatMidpoint","$b4c0e2e13beea46e$var$MultiLineString","lineStrings","appendLineString","multiLineString","getLineString","getLineStrings","getFlatMidpoints","midpoints","midpoint","$e6080c63a9451eda$var$MultiPoint","appendPoint","multiPoint","getPoint","getPoints","points","$f73f35eb6af8b987$var$MultiPolygon","endss_","flatInteriorPointsRevision_","flatInteriorPoints_","thisLayout","polygons","thisEndss","appendPolygon","newEndss","multiPolygon","getEndss","getFlatInteriorPoints","interiorPoints","getInteriorPoints","simplifiedEndss","getPolygon","prevEnds","getPolygons","lastEnds","$f602cef51a2e6950$var$readGeometry","$f602cef51a2e6950$var$readGeometryCollectionGeometry","$f602cef51a2e6950$var$writeGeometry","geoJSON","rightHanded","$f602cef51a2e6950$var$writeGeometryCollectionGeometry","$f602cef51a2e6950$export$2e2bcd8739ae039","geometryName","extractGeometryName_","extractGeometryName","geoJSONFeature","geoJSONObject","geoJSONFeatures","geoJSONFeatureCollection","crs","objects","$e60011aea38e6239$var$ImageStyle","opacity_","rotateWithView_","rotateWithView","scale_","scaleArray_","displacement_","displacement","declutterMode_","declutterMode","getScale","getRotateWithView","getDisplacement","getDeclutterMode","getScaleArray","getAnchor","getHitDetectionImage","getPixelRatio","getImageState","getImageSize","setDisplacement","setRotateWithView","setScale","listenImageChange","unlistenImageChange","$e60011aea38e6239$export$2e2bcd8739ae039","$e0807f400ec9a0a9$export$dc5b1400ac3a10a8","$3e99c452138b2224$var$RegularShape","hitDetectionCanvas_","fill_","fill","radius_","radius1","radius2_","radius2","stroke_","size_","renderOptions_","getFill","getRadius","getRadius2","getStroke","setFill","createHitDetectionCanvas_","renderOptions","draw_","setStroke","calculateLineJoinSize_","lineJoin","strokeWidth","miterLimit","r1","r2","miterRatio","maxr","bevelAdd","aa","bb","dd","innerMiterRatio","ee","innerLength","createRenderOptions","lineCap","lineDash","lineDashOffset","getColor","getLineDash","getLineDashOffset","getLineJoin","getLineCap","getMiterLimit","maxRadius","createPath_","setLineDash","drawHitDetectionCanvas_","arc","startAngle","angle0","radiusC","$3e99c452138b2224$export$2e2bcd8739ae039","$06150d8570b7481b$var$CircleStyle","setRadius","$d61d1dcaf3c44610$var$Fill","color_","setColor","$f9d0329c5c745263$var$Stroke","lineCap_","lineDash_","lineDashOffset_","lineJoin_","miterLimit_","width_","setLineCap","setLineDashOffset","setLineJoin","setMiterLimit","setWidth","$8c7f6dda98e8cb9c$var$Style","geometryFunction_","$8c7f6dda98e8cb9c$var$defaultGeometryFunction","hitDetectionRenderer_","hitDetectionRenderer","text_","zIndex_","getText","setRenderer","setHitDetectionRenderer","getHitDetectionRenderer","getGeometryFunction","setText","$8c7f6dda98e8cb9c$var$defaultStyles","$8c7f6dda98e8cb9c$export$6865c5ac2f5ce8b6","$0e5ad1d3b638689e$var$taintedTestContext","$0e5ad1d3b638689e$var$IconImage","hitDetectionImage_","imageState_","tainted_","initializeImage_","isTainted_","dispatchChangeEvent_","replaceColor_","getSrc","HTMLImageElement","handleLoad","unlisten","handleError","$8463d325b53eeb0c$var$calculateScale","wantedWidth","wantedHeight","$8463d325b53eeb0c$var$Icon","cacheKey","normalizedAnchor_","anchorOrigin_","anchorOrigin","anchorXUnits_","anchorXUnits","anchorYUnits_","anchorYUnits","iconImage_","offset_","offsetOrigin_","offsetOrigin","initialOptions_","imageSize","setAnchor","iconImageSize","$944be50faeff5321$var$Text","font_","textAlign_","textAlign","justify_","justify","repeat_","repeat","textBaseline_","textBaseline","maxAngle_","maxAngle","placement_","placement","overflow_","offsetX_","offsetY_","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","getFont","getPlacement","getRepeat","getMaxAngle","getOverflow","getTextAlign","getJustify","getTextBaseline","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding","setOverflow","setFont","setMaxAngle","setOffsetX","setOffsetY","setPlacement","setRepeat","setTextAlign","setJustify","setTextBaseline","setBackgroundFill","setBackgroundStroke","setPadding","$778943ec39690f8e$var$numTypes","$778943ec39690f8e$export$240f7fffab1b25a0","$778943ec39690f8e$export$86a7aca748b1e260","$778943ec39690f8e$export$2b93044cbf134323","$778943ec39690f8e$export$2cd82751acc0e609","$778943ec39690f8e$export$d701d0e49f4bcb39","$778943ec39690f8e$export$ec4c9a150bae86cd","$778943ec39690f8e$var$typeNames","$778943ec39690f8e$var$namedTypes","$778943ec39690f8e$export$b2afc7c96b2b4a45","names","namedType","broad","$778943ec39690f8e$export$eb63e96e0913dda4","$778943ec39690f8e$export$6f3d80189eb72cd4","operator","$778943ec39690f8e$export$1c8b4c1584800354","variables","$778943ec39690f8e$export$98e6a39c04603d36","encoded","$778943ec39690f8e$var$parseCallExpression","parser","$778943ec39690f8e$var$parsers","$778943ec39690f8e$export$2655e45458bc48f3","Get","Var","Any","All","Not","Resolution","Equal","NotEqual","GreaterThan","GreaterThanOrEqualTo","LessThan","LessThanOrEqualTo","Multiply","Divide","Add","Subtract","Clamp","Mod","Pow","Abs","Floor","Ceil","Round","Sin","Cos","Atan","Sqrt","Match","$778943ec39690f8e$var$createParser","$778943ec39690f8e$var$withArgs","arg","operation","minArgs","maxArgs","argType","argCount","expression","oneType","gotType","expectedType","argValidator","returnType","$d597295b1f166e98$export$c18f39f0e136c26","$d597295b1f166e98$export$b5f535122a9211f0","expected","actual","$d597295b1f166e98$var$compileExpression","$d597295b1f166e98$var$compileAssertionExpression","$d597295b1f166e98$var$compileAccessorExpression","nameExpression","$d597295b1f166e98$var$compileLogicalExpression","op","$d597295b1f166e98$var$compileComparisonExpression","$d597295b1f166e98$var$compileNumericExpression","$d597295b1f166e98$var$compileMatchExpression","$6000539d86fde80c$var$always","$6000539d86fde80c$export$5a130bc4f0a0420b","flatStyles","parsingContext","evaluators","$6000539d86fde80c$export$a6e5f510497b7388","evaluationContext","flatStyle","evaluateFill","$6000539d86fde80c$var$buildFill","evaluateStroke","$6000539d86fde80c$var$buildStroke","evaluateText","$6000539d86fde80c$var$buildText","prefix","evaluateValue","$6000539d86fde80c$var$stringEvaluator","evaluateBackgroundFill","evaluateBackgroundStroke","evaluateFont","evaluateMaxAngle","$6000539d86fde80c$var$numberEvaluator","evaluateOffsetX","evaluateOffsetY","evaluateOverflow","$6000539d86fde80c$var$booleanEvaluator","evaluatePlacement","evaluateRepeat","evaluateScale","$6000539d86fde80c$var$sizeLikeEvaluator","evaluateRotateWithView","evaluateRotation","evaluateAlign","evaluateJustify","evaluateBaseline","evaluatePadding","$6000539d86fde80c$var$numberArrayEvaluator","evaluateImage","$6000539d86fde80c$var$buildIcon","srcName","$6000539d86fde80c$var$requireString","evaluateAnchor","$6000539d86fde80c$var$coordinateEvaluator","evaluateOpacity","evaluateDisplacement","$6000539d86fde80c$var$optionalIconOrigin","$6000539d86fde80c$var$optionalIconAnchorUnits","$6000539d86fde80c$var$optionalColorLike","$6000539d86fde80c$var$requireColorLike","$6000539d86fde80c$var$optionalString","$6000539d86fde80c$var$optionalNumberArray","$6000539d86fde80c$var$requireNumberArray","$6000539d86fde80c$var$optionalNumber","$6000539d86fde80c$var$optionalSize","$6000539d86fde80c$var$optionalDeclutterMode","icon","$6000539d86fde80c$var$buildShape","pointsName","$6000539d86fde80c$var$requireNumber","shape","$6000539d86fde80c$var$buildCircle","evaluateRadius","circle","evaluateZIndex","empty","evaluateColor","$6000539d86fde80c$var$colorLikeEvaluator","evaluateWidth","evaluateLineCap","evaluateLineJoin","evaluateLineDash","evaluateLineDashOffset","evaluateMiterLimit","evaluator","$6000539d86fde80c$var$requireSizeLike","$c8d6dc4c09ed9916$var$Property","RENDER_ORDER","$c8d6dc4c09ed9916$export$2e2bcd8739ae039","renderBuffer","updateWhileAnimating","updateWhileInteracting","declutter_","declutter","renderBuffer_","updateWhileAnimating_","updateWhileInteracting_","getDeclutter","getRenderBuffer","getRenderOrder","getUpdateWhileAnimating","getUpdateWhileInteracting","setRenderOrder","renderOrder","$c8d6dc4c09ed9916$var$toStyleLike","rules","$6000539d86fde80c$export$d6ae6a4799989976","compiledRules","rule","styleLength","someMatched","filterEvaluator","else","styleEvaluator","styleFunction","$cf547866e052f25b$var$Instruction","BEGIN_GEOMETRY","BEGIN_PATH","CIRCLE","CLOSE_PATH","CUSTOM","DRAW_CHARS","DRAW_IMAGE","END_GEOMETRY","FILL","MOVE_TO_LINE_TO","SET_FILL_STYLE","SET_STROKE_STYLE","STROKE","$cf547866e052f25b$export$f21891651e408226","$cf547866e052f25b$export$7a98aa5364d62ba8","$cf547866e052f25b$export$9f746cc58a899a00","$cf547866e052f25b$export$89b10f327e413e71","$eb0e5c3938110b4c$export$2e2bcd8739ae039","drawCustom","drawGeometry","drawCircle","circleGeometry","drawFeature","drawGeometryCollection","geometryCollectionGeometry","drawLineString","lineStringGeometry","drawMultiLineString","multiLineStringGeometry","drawMultiPoint","multiPointGeometry","drawMultiPolygon","multiPolygonGeometry","drawPoint","pointGeometry","drawPolygon","polygonGeometry","drawText","setFillStrokeStyle","setImageStyle","imageStyle","declutterImageWithText","setTextStyle","textStyle","$2bb20f8873deb436$export$2e2bcd8739ae039","maxLineWidth","beginGeometryInstruction1_","beginGeometryInstruction2_","bufferedMaxExtent_","instructions","tmpCoordinate_","hitDetectionInstructions","applyPixelRatio","dashArray","dash","appendFlatPointCoordinates","getBufferedMaxExtent","myEnd","appendFlatLineCoordinates","closed","skipFirst","lastRel","nextRel","lastXCoord","lastYCoord","nextCoord","skipped","drawCustomCoordinates_","builderEnds","builderEnd","builderEndss","beginGeometry","builderBegin","myEnds","endGeometry","finish","reverseHitDetectionInstructions","instruction","fillStyleColor","strokeStyleColor","strokeStyleLineCap","strokeStyleLineDash","strokeStyleLineDashOffset","strokeStyleLineJoin","strokeStyleWidth","strokeStyleMiterLimit","createFill","fillInstruction","applyStroke","createStroke","updateFillStyle","currentFillStyle","updateStrokeStyle","currentStrokeStyle","currentLineCap","currentLineDash","currentLineDashOffset","currentLineJoin","currentLineWidth","currentMiterLimit","endGeometryInstruction","$b652f9dd73b29cfe$export$2e2bcd8739ae039","imagePixelRatio_","anchorX_","anchorY_","height_","originX_","originY_","declutterImageWithText_","myBegin","sharedData","$a207f23baa5aa2c5$export$2e2bcd8739ae039","drawFlatCoordinates_","moveToLineToInstruction","lastStroke","$7d2e8ba11a45ae8a$export$2e2bcd8739ae039","drawFlatCoordinatess_","numEnds","setFillStrokeStyles_","circleInstruction","$8243e906fae47bbe$export$91a016276e4aee96","$8243e906fae47bbe$export$2e2bcd8739ae039","labels_","textOffsetX_","textOffsetY_","textRotateWithView_","textRotation_","textFillState_","fillStates","textStrokeState_","strokeStates","textState_","textStates","textKey_","fillKey_","strokeKey_","fillState","strokeState","textState","geometryType","flatOffset","oo","chunks","chunkLength","cursor","chunkM","currentChunk","missing","cc","chunk","chunkBegin","chunkEnd","m12","m23","x12","y12","x23","y23","chunkStart","acos","drawChars_","geometryWidths","beg","saveTextStates_","p0","p1","p2","p3","strokeKey","textKey","fillKey","baseline","textFillStyle","textStrokeStyle","textScale","textOffsetX","textOffsetY","textRotateWithView","textRotation","$e22658f4b743550b$var$BATCH_CONSTRUCTORS","$e22658f4b743550b$export$2e2bcd8739ae039","tolerance_","maxExtent_","resolution_","buildersByZIndex_","builderInstructions","zKey","builders","builderKey","builderInstruction","getBuilder","builderType","zIndexKey","replays","replay","Constructor","$6526fa4ee42dc39d$var$tmpExtent","$6526fa4ee42dc39d$var$p1","$6526fa4ee42dc39d$var$p2","$6526fa4ee42dc39d$var$p3","$6526fa4ee42dc39d$var$p4","$6526fa4ee42dc39d$var$getDeclutterBox","replayImageOrLabelArgs","declutterBox","$6526fa4ee42dc39d$var$rtlRegEx","$6526fa4ee42dc39d$var$horizontalTextAlign","align","$6526fa4ee42dc39d$var$createTextChunks","acc","line","$6526fa4ee42dc39d$export$2e2bcd8739ae039","alignFill_","coordinateCache_","renderedTransform_","pixelCoordinates_","viewRotation_","widths_","createLabel","previousFont","textIsArray","widths","heights","lineWidths","baseStyle","currentWidth","currentHeight","renderWidth","contextInstructions","leftRight","strokeInstructions","fillInstructions","lineOffset","widthHeightIndex","lineWidthIndex","fillStrokeArgs","replayTextBackground_","p4","strokeInstruction","setStrokeStyle_","calculateImageOrLabelDimensions_","sheetWidth","sheetHeight","originX","originY","snapToPixel","fillStroke","boxW","boxH","boxX","boxY","drawImageX","drawImageY","drawImageW","drawImageH","replayImageOrLabel_","contextScale","imageOrLabel","strokePadding","labelOrImage","$d4aabc5c971073f1$var$executeLabelInstructions","repeatSize","drawLabelWithPointPlacement_","execute_","featureCallback","hitExtent","pixelCoordinates","prevX","prevY","roundX","roundY","currentGeometry","transform1","transform2","pendingFill","pendingStroke","lastFillInstruction","lastStrokeInstruction","coordinateCache","viewRotation","viewRotationFromTransform","batchSize","labelWithAnchor","widthIndex","imageArgs","imageDeclutterBox","cachedWidths","measurePixelRatio","pixelRatioScale","pathLength","textLength","startM","parts","measureAndCacheTextWidth","previousAngle","segmentM","advance","beginX","beginY","startOffset","startLength","endM","flat","singleSegment","iStart","charLength","chars","substring","drawChars","part","execute","executeHitDetection","$a34a824d875e4ea1$var$ORDER","$a34a824d875e4ea1$var$circlePixelIndexArrayCache","$a34a824d875e4ea1$export$2e2bcd8739ae039","allInstructions","executorsByZIndex_","hitDetectionContext_","hitDetectionTransform_","createExecutors_","flatClipCoords","getClipCoords","executors","instructionByZindex","hasExecutors","candidates","declutteredFeatures","executor","contextSize","newContext","indexes","$a34a824d875e4ea1$export$96fc84ea21b8269f","maxDistanceSq","distances","pixelIndex","imageData","idx","builderTypes","$7b0c2128a27f5020$export$2e2bcd8739ae039","userTransform","context_","transformRotation_","squaredTolerance_","userTransform_","contextFillState_","contextStrokeState_","contextTextState_","fillState_","strokeState_","imageAnchorX_","imageAnchorY_","imageHeight_","imageOpacity_","imageOriginX_","imageOriginY_","imageRotateWithView_","imageRotation_","imageScale_","imageWidth_","textScale_","tmpLocalTransform_","drawImages_","localTransform","drawText_","setContextFillState_","setContextStrokeState_","setContextTextState_","strokeText","fillText","moveToLineTo_","close","drawRings_","simpleGeometry","setTransform","flatMidpoint","geometryExtent","flatMidpoints","flatInteriorPoint","flatInteriorPoints","contextFillState","contextStrokeState","contextTextState","imagePixelRatio","imageAnchor","imageOrigin","imageScale","textFillStyleColor","textStrokeStyleColor","textStrokeStyleLineCap","textStrokeStyleLineDash","textStrokeStyleLineDashOffset","textStrokeStyleLineJoin","textStrokeStyleWidth","textStrokeStyleMiterLimit","textFont","textText","textTextAlign","textTextBaseline","$4b9ac454600c05d2$var$GEOMETRY_RENDERERS","builderGroup","declutterBuilderGroup","imageBuilderGroup","imageReplay","textBuilderGroup","textReplay","lineStringReplay","polygonReplay","replayGroup","geometryRenderer","circleReplay","$4b9ac454600c05d2$export$531ddd8416d52dfc","feature1","feature2","$4b9ac454600c05d2$export$36f470a33a42f413","$4b9ac454600c05d2$var$renderFeatureInternal","$4b9ac454600c05d2$var$renderGeometry","$659e0e97392a5f5e$export$2e2bcd8739ae039","vectorLayer","boundHandleStyleImageChange_","handleStyleImageChange_","animatingOrInteracting_","hitDetectionImageData_","renderedFeatures_","renderedRevision_","renderedResolution_","wrappedRenderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedRenderOrder_","replayGroup_","replayGroupChanged","clipping","compositionContext_","renderWorlds","executorGroup","vectorSource","endWorld","world","setupCompositionContext_","compositionContext","releaseCompositionContext_","hasRenderListeners","clipped","transforms","featureCount","indexFactor","featuresByZIndex","featureStyleFunction","padStart","originalStyle","imgSize","imgContext","byGeometryType","zIndexKeys","geomAndStyle","kk","resultFeatures","lastIndexOf","executorGroups","animating","interacting","frameStateExtent","vectorLayerRevision","vectorLayerRenderBuffer","vectorLayerRenderOrder","renderedExtent","loadExtents","loadExtent","$4b9ac454600c05d2$var$SIMPLIFY_TOLERANCE","dirty","renderFeature","replayGroupInstructions","$82a68515bd6ef378$export$2e2bcd8739ae039","$d715ae420eabdf2c$exports","$f6675ff5b9f887ad$exports","$efd3ba4ec2608b1d$var$container","$efd3ba4ec2608b1d$var$content","$efd3ba4ec2608b1d$var$closer","$efd3ba4ec2608b1d$var$toPrint","$efd3ba4ec2608b1d$var$overlay","autoPanAnimation","onclick","blur","$efd3ba4ec2608b1d$var$resolutions","$efd3ba4ec2608b1d$var$matrixIds","$efd3ba4ec2608b1d$var$maxResolution","$efd3ba4ec2608b1d$var$proj3857","$efd3ba4ec2608b1d$var$i","$efd3ba4ec2608b1d$var$tileGrid","matrixIds_","matrixIds","getMatrixIds","$efd3ba4ec2608b1d$var$vectorSource","$efd3ba4ec2608b1d$var$wfs","$efd3ba4ec2608b1d$var$rasterSource1","$efd3ba4ec2608b1d$var$wmts1","$efd3ba4ec2608b1d$var$rasterSource2","$efd3ba4ec2608b1d$var$wmts2","$efd3ba4ec2608b1d$var$map","props","liste"],"version":3,"file":"index.2f54ac02.js.map"}